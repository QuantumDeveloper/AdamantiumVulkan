// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools.Interop;

namespace AdamantiumVulkan.SpirvTools;

public unsafe partial class Spv_optimizer_t
{
    public Spv_optimizer_t()
    {
    }

    public Spv_optimizer_t(AdamantiumVulkan.SpirvTools.Interop.spv_optimizer_t _internal)
    {
    }

    ///<summary>
    /// Destroys the given optimizer object.
    ///</summary>
    public void SpvOptimizerDestroy()
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerDestroy(arg0);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Registers passes that attempt to legalize the generated code.
    ///</summary>
    public void SpvOptimizerRegisterLegalizationPasses()
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRegisterLegalizationPasses(arg0);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Registers passes specified by length number of flags in an optimizer object.
    ///</summary>
    public bool SpvOptimizerRegisterPassesFromFlags(in string[] flags, ulong flag_count)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        var arg1 = (sbyte**)NativeUtils.StringArrayToPointer(flags, false);
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRegisterPassesFromFlags(arg0, arg1, flag_count);
        NativeUtils.Free(arg0);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Registers a pass specified by a flag in an optimizer object.
    ///</summary>
    public bool SpvOptimizerRegisterPassFromFlag(string flag)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        var arg1 = (sbyte*)NativeUtils.StringToPointer(flag, false);
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRegisterPassFromFlag(arg0, arg1);
        NativeUtils.Free(arg0);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Registers passes that attempt to improve performance of generated code.
    ///</summary>
    public void SpvOptimizerRegisterPerformancePasses()
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRegisterPerformancePasses(arg0);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Registers passes that attempt to improve the size of generated code.
    ///</summary>
    public void SpvOptimizerRegisterSizePasses()
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRegisterSizePasses(arg0);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Optimizes the SPIR-V code of size |word_count| pointed to by |binary| and returns an optimized spv_binary in |optimized_binary|.
    ///</summary>
    public spv_result_t SpvOptimizerRun(in uint binary, ulong word_count, out AdamantiumVulkan.SpirvTools.spv_binary optimized_binary, AdamantiumVulkan.SpirvTools.spv_optimizer_options options)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(binary);
        spv_binary_t arg3;
        var arg4 = ReferenceEquals(options, null) ? new spv_optimizer_options_t() : (spv_optimizer_options_t)options;
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerRun(arg0, arg1, word_count, out arg3, arg4);
        NativeUtils.Free(arg0);
        optimized_binary = new spv_binary(arg3);
        return result;
    }

    ///<summary>
    /// Sets an spv_message_consumer on an optimizer object.
    ///</summary>
    public void SpvOptimizerSetMessageConsumer(void* consumer)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerSetMessageConsumer(arg0, consumer);
        NativeUtils.Free(arg0);
    }


    public AdamantiumVulkan.SpirvTools.Interop.spv_optimizer_t ToNative()
    {
        var _internal = new AdamantiumVulkan.SpirvTools.Interop.spv_optimizer_t();
        return _internal;
    }

    public static implicit operator Spv_optimizer_t(AdamantiumVulkan.SpirvTools.Interop.spv_optimizer_t s)
    {
        return new Spv_optimizer_t(s);
    }

}



