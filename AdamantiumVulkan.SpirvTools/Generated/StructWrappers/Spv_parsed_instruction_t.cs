// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools.Interop;

namespace AdamantiumVulkan.SpirvTools;

public unsafe partial class Spv_parsed_instruction_t : QBDisposableObject
{
    private NativeStruct<uint> _words;

    private NativeStructArray<AdamantiumVulkan.SpirvTools.Interop.spv_parsed_operand_t> _operands;

    public Spv_parsed_instruction_t()
    {
    }

    public Spv_parsed_instruction_t(AdamantiumVulkan.SpirvTools.Interop.spv_parsed_instruction_t _internal)
    {
        if (_internal.words != null)
        {
            Words = *_internal.words;
            NativeUtils.Free(_internal.words);
        }
        Num_words = _internal.num_words;
        Opcode = _internal.opcode;
        Ext_inst_type = _internal.ext_inst_type;
        Type_id = _internal.type_id;
        Result_id = _internal.result_id;
        Num_operands = _internal.num_operands;
    }

    public uint? Words { get; set; }
    public ushort Num_words { get; set; }
    public ushort Opcode { get; set; }
    public spv_ext_inst_type_t Ext_inst_type { get; set; }
    public uint Type_id { get; set; }
    public uint Result_id { get; set; }
    public Spv_parsed_operand_t[] Operands { get; set; }
    public ushort Num_operands { get; set; }

    public AdamantiumVulkan.SpirvTools.Interop.spv_parsed_instruction_t ToNative()
    {
        var _internal = new AdamantiumVulkan.SpirvTools.Interop.spv_parsed_instruction_t();
        _words.Dispose();
        if (Words.HasValue)
        {
            _words = new NativeStruct<uint>(Words.Value);
            _internal.words = _words.Handle;
        }
        _internal.num_words = Num_words;
        _internal.opcode = Opcode;
        _internal.ext_inst_type = Ext_inst_type;
        _internal.type_id = Type_id;
        _internal.result_id = Result_id;
        _operands.Dispose();
        if (Operands != null)
        {
            var tmpArray0 = new AdamantiumVulkan.SpirvTools.Interop.spv_parsed_operand_t[Operands.Length];
            for (int i = 0; i < Operands.Length; ++i)
            {
                tmpArray0[i] = Operands[i].ToNative();
            }
            _operands = new NativeStructArray<AdamantiumVulkan.SpirvTools.Interop.spv_parsed_operand_t>(tmpArray0);
            _internal.operands = _operands.Handle;
        }
        _internal.num_operands = Num_operands;
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _words.Dispose();
        _operands.Dispose();
    }


    public static implicit operator Spv_parsed_instruction_t(AdamantiumVulkan.SpirvTools.Interop.spv_parsed_instruction_t s)
    {
        return new Spv_parsed_instruction_t(s);
    }

}



