// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Security;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools;

namespace AdamantiumVulkan.SpirvTools.Interop;

// File: C:\VulkanSDK\1.3.283.0\Include\spirv-tools\libspirv.h Line: 949 Column: 16
///<summary>
/// A pointer to a function that accepts a log message from an optimizer.
///</summary>
public unsafe struct spv_message_consumer
{
    public spv_message_consumer(void* ptr)
    {
        NativePointer = ptr;
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
            InvokeStdcall = (delegate* unmanaged[Stdcall]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void>)ptr;
            InvokeCdecl = default;
        }
        else
        {
            InvokeCdecl = (delegate* unmanaged[Cdecl]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void>)ptr;
            InvokeStdcall = default;
        }
    }

    private delegate* unmanaged[Stdcall]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void> InvokeStdcall;

    private delegate* unmanaged[Cdecl]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void> InvokeCdecl;

    public void* NativePointer { get; }

    public void Invoke(spv_message_level_t param0, sbyte* param1, AdamantiumVulkan.SpirvTools.Interop.spv_position_t* param2, sbyte* param3)
    {
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
             InvokeStdcall(param0, param1, param2, param3);
        }
        else
        {
             InvokeCdecl(param0, param1, param2, param3);
        }
    }

    public static void Invoke(void* ptr, spv_message_level_t param0, sbyte* param1, AdamantiumVulkan.SpirvTools.Interop.spv_position_t* param2, sbyte* param3)
    {
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
        {
             ((delegate* unmanaged[Stdcall]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void>)ptr)(param0, param1, param2, param3);
        }
        else
        {
             ((delegate* unmanaged[Cdecl]<spv_message_level_t, sbyte*, AdamantiumVulkan.SpirvTools.Interop.spv_position_t*, sbyte*, void>)ptr)(param0, param1, param2, param3);
        }
    }

    public static explicit operator spv_message_consumer(void* ptr) => new(ptr);
}


