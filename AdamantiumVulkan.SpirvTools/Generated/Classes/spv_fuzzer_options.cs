// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools.Interop;

namespace AdamantiumVulkan.SpirvTools;

// File: C:\VulkanSDK\1.3.283.0\Include\spirv-tools\libspirv.h Line: 502 Column: 31
public unsafe partial class spv_fuzzer_options
{
    internal spv_fuzzer_options_t __Instance;
    public spv_fuzzer_options()
    {
    }

    public spv_fuzzer_options(AdamantiumVulkan.SpirvTools.Interop.spv_fuzzer_options_t __Instance)
    {
        this.__Instance = __Instance;
    }

    ///<summary>
    /// Creates a fuzzer options object with default options. Returns a valid options object. The object remains valid until it is passed into |spvFuzzerOptionsDestroy|.
    ///</summary>
    public static spv_fuzzer_options SpvFuzzerOptionsCreate()
    {
        return AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsCreate();
    }

    ///<summary>
    /// Destroys the given fuzzer options object.
    ///</summary>
    public void SpvFuzzerOptionsDestroy()
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsDestroy(this);
    }

    ///<summary>
    /// Enables all fuzzer passes during a fuzzing run (instead of a random subset of passes).
    ///</summary>
    public void SpvFuzzerOptionsEnableAllPasses()
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsEnableAllPasses(this);
    }

    ///<summary>
    /// Enables running the validator after every pass is applied during a fuzzing run.
    ///</summary>
    public void SpvFuzzerOptionsEnableFuzzerPassValidation()
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsEnableFuzzerPassValidation(this);
    }

    ///<summary>
    /// Enables running the validator after every transformation is applied during a replay.
    ///</summary>
    public void SpvFuzzerOptionsEnableReplayValidation()
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsEnableReplayValidation(this);
    }

    ///<summary>
    /// Sets the seed with which the random number generator used by the fuzzer should be initialized.
    ///</summary>
    public void SpvFuzzerOptionsSetRandomSeed(uint seed)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsSetRandomSeed(this, seed);
    }

    ///<summary>
    /// Sets the range of transformations that should be applied during replay: 0 means all transformations, +N means the first N transformations, -N means all except the final N transformations.
    ///</summary>
    public void SpvFuzzerOptionsSetReplayRange(int replay_range)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsSetReplayRange(this, replay_range);
    }

    ///<summary>
    /// Sets the maximum number of steps that the shrinker should take before giving up.
    ///</summary>
    public void SpvFuzzerOptionsSetShrinkerStepLimit(uint shrinker_step_limit)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvFuzzerOptionsSetShrinkerStepLimit(this, shrinker_step_limit);
    }

    public ref readonly spv_fuzzer_options_t GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.SpirvTools.Interop.spv_fuzzer_options_t(spv_fuzzer_options s)
    {
        return s?.__Instance ?? new AdamantiumVulkan.SpirvTools.Interop.spv_fuzzer_options_t();
    }

    public static implicit operator spv_fuzzer_options(AdamantiumVulkan.SpirvTools.Interop.spv_fuzzer_options_t s)
    {
        return new spv_fuzzer_options(s);
    }

}



