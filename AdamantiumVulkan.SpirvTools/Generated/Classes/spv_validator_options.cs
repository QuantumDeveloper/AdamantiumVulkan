// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools.Interop;

namespace AdamantiumVulkan.SpirvTools;

// File: C:\VulkanSDK\1.4.304.0\Include\spirv-tools\libspirv.h Line: 510 Column: 34
public unsafe partial class spv_validator_options
{
    internal spv_validator_options_t __Instance;
    public spv_validator_options()
    {
    }

    public spv_validator_options(AdamantiumVulkan.SpirvTools.Interop.spv_validator_options_t __Instance)
    {
        this.__Instance = __Instance;
    }

    ///<summary>
    /// Creates a Validator options object with default options. Returns a valid options object. The object remains valid until it is passed into spvValidatorOptionsDestroy.
    ///</summary>
    public static spv_validator_options SpvValidatorOptionsCreate()
    {
        return AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsCreate();
    }

    ///<summary>
    /// Destroys the given Validator options object.
    ///</summary>
    public void SpvValidatorOptionsDestroy()
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsDestroy(this);
    }

    ///<summary>
    /// Records whether or not the validator should allow the LocalSizeId decoration where the environment otherwise would not allow it.
    ///</summary>
    public void SpvValidatorOptionsSetAllowLocalSizeId(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetAllowLocalSizeId(this, val);
    }

    ///<summary>
    /// Records whether or not the validator should relax the rules because it is expected that the optimizations will make the code legal.
    ///</summary>
    public void SpvValidatorOptionsSetBeforeHlslLegalization(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetBeforeHlslLegalization(this, val);
    }

    ///<summary>
    /// Whether friendly names should be used in validation error messages.
    ///</summary>
    public void SpvValidatorOptionsSetFriendlyNames(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetFriendlyNames(this, val);
    }

    ///<summary>
    /// Records whether the validator should use "relaxed" block layout rules. Relaxed layout rules are described by Vulkan extension VK_KHR_relaxed_block_layout, and they affect uniform blocks, storage blocks, and push constants.
    ///</summary>
    public void SpvValidatorOptionsSetRelaxBlockLayout(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetRelaxBlockLayout(this, val);
    }

    ///<summary>
    /// Records whether or not the validator should relax the rules on pointer usage in logical addressing mode.
    ///</summary>
    public void SpvValidatorOptionsSetRelaxLogicalPointer(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetRelaxLogicalPointer(this, val);
    }

    ///<summary>
    /// Record whether or not the validator should relax the rules on types for stores to structs. When relaxed, it will allow a type mismatch as long as the types are structs with the same layout. Two structs have the same layout if
    ///</summary>
    public void SpvValidatorOptionsSetRelaxStoreStruct(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetRelaxStoreStruct(this, val);
    }

    ///<summary>
    /// Records whether the validator should use "scalar" block layout rules. Scalar layout rules are more permissive than relaxed block layout.
    ///</summary>
    public void SpvValidatorOptionsSetScalarBlockLayout(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetScalarBlockLayout(this, val);
    }

    ///<summary>
    /// Records whether or not the validator should skip validating standard uniform/storage block layout.
    ///</summary>
    public void SpvValidatorOptionsSetSkipBlockLayout(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetSkipBlockLayout(this, val);
    }

    ///<summary>
    /// Records whether the validator should use standard block layout rules for uniform blocks.
    ///</summary>
    public void SpvValidatorOptionsSetUniformBufferStandardLayout(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetUniformBufferStandardLayout(this, val);
    }

    ///<summary>
    /// Records the maximum Universal Limit that is considered valid in the given Validator options object. <options> argument must be a valid options object.
    ///</summary>
    public void SpvValidatorOptionsSetUniversalLimit(spv_validator_limit limit_type, uint limit)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetUniversalLimit(this, limit_type, limit);
    }

    ///<summary>
    /// Records whether the validator should use "scalar" block layout rules (as defined above) for Workgroup blocks. See Vulkan extension VK_KHR_workgroup_memory_explicit_layout.
    ///</summary>
    public void SpvValidatorOptionsSetWorkgroupScalarBlockLayout(bool val)
    {
        AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvValidatorOptionsSetWorkgroupScalarBlockLayout(this, val);
    }

    public ref readonly spv_validator_options_t GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.SpirvTools.Interop.spv_validator_options_t(spv_validator_options s)
    {
        return s?.__Instance ?? new AdamantiumVulkan.SpirvTools.Interop.spv_validator_options_t();
    }

    public static implicit operator spv_validator_options(AdamantiumVulkan.SpirvTools.Interop.spv_validator_options_t s)
    {
        return new spv_validator_options(s);
    }

}



