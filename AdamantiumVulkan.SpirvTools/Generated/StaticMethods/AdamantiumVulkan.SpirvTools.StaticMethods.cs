// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.SpirvTools.Interop;

namespace AdamantiumVulkan.SpirvTools;

public unsafe static class SpirvToolsNative
{
    ///<summary>
    /// Returns true if the given type is concrete.
    ///</summary>
    public static bool SpvOperandIsConcrete(spv_operand_type_t type)
    {
        return AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOperandIsConcrete(type);
    }

    ///<summary>
    /// Returns true if the given type is concrete and also a mask.
    ///</summary>
    public static bool SpvOperandIsConcreteMask(spv_operand_type_t type)
    {
        return AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOperandIsConcreteMask(type);
    }

    ///<summary>
    /// Returns the SPIRV-Tools software version as a null-terminated string. The contents of the underlying storage is valid for the remainder of the process.
    ///</summary>
    public static string SpvSoftwareVersionString()
    {
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvSoftwareVersionString();
        return new string(result);
    }

    ///<summary>
    /// Returns a null-terminated string containing the name of the project, the software version string, and commit details. The contents of the underlying storage is valid for the remainder of the process.
    ///</summary>
    public static string SpvSoftwareVersionDetailsString()
    {
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvSoftwareVersionDetailsString();
        return new string(result);
    }

    ///<summary>
    /// Returns a string describing the given SPIR-V target environment.
    ///</summary>
    public static string SpvTargetEnvDescription(spv_target_env env)
    {
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvTargetEnvDescription(env);
        return new string(result);
    }

    ///<summary>
    /// Parses s into *env and returns true if successful. If unparsable, returns false and sets *env to SPV_ENV_UNIVERSAL_1_0.
    ///</summary>
    public static bool SpvParseTargetEnv(string s, ref spv_target_env env)
    {
        var arg0 = (sbyte*)NativeUtils.StringToPointer(s, false);
        var arg1 = NativeUtils.StructOrEnumToPointer(env);
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvParseTargetEnv(arg0, arg1);
        NativeUtils.Free(arg0);
        if (arg1 is not null)
        {
            env = *arg1;
        }
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Determines the target env value with the least features but which enables the given Vulkan and SPIR-V versions. If such a target is supported, returns true and writes the value to |env|, otherwise returns false.
    ///</summary>
    public static bool SpvParseVulkanEnv(uint vulkan_ver, uint spirv_ver, ref spv_target_env env)
    {
        var arg2 = NativeUtils.StructOrEnumToPointer(env);
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvParseVulkanEnv(vulkan_ver, spirv_ver, arg2);
        if (arg2 is not null)
        {
            env = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Creates a context object for most of the SPIRV-Tools API. Returns null if env is invalid.
    ///</summary>
    public static spv_context SpvContextCreate(spv_target_env env)
    {
        return AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvContextCreate(env);
    }

    ///<summary>
    /// Gets the name of an instruction, without the "Op" prefix.
    ///</summary>
    public static string SpvOpcodeString(uint opcode)
    {
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOpcodeString(opcode);
        return new string(result);
    }

    ///<summary>
    /// Creates and returns an optimizer object. This object must be passed to optimizer APIs below and is valid until passed to spvOptimizerDestroy.
    ///</summary>
    public static Spv_optimizer_t SpvOptimizerCreate(spv_target_env env)
    {
        var result = AdamantiumVulkan.SpirvTools.Interop.SpirvToolsInterop.spvOptimizerCreate(env);
        var wrappedResult = new Spv_optimizer_t(*result);
        NativeUtils.Free(result);
        return wrappedResult;
    }

}


