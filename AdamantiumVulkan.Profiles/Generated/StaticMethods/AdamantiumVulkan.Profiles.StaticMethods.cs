// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Profiles.Interop;
using AdamantiumVulkan.Core;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Profiles;

public unsafe static class VulkanNative
{
    ///<summary>
    /// Query the list of available profiles in the library
    ///</summary>
    public static Result VpGetProfiles(ref uint pPropertyCount, VpProfileProperties pProperties)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg1 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfiles(arg0, arg1);
        pPropertyCount = *arg0;
        NativeUtils.Free(arg0);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// List the recommended fallback profiles of a profile
    ///</summary>
    public static Result VpGetProfileFallbacks(in VpProfileProperties pProfile, ref uint pPropertyCount, VpProfileProperties pProperties)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFallbacks(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Check whether a profile is supported at the instance level
    ///</summary>
    public static Result VpGetInstanceProfileSupport(string pLayerName, in VpProfileProperties pProfile, ref VkBool32 pSupported)
    {
        var arg0 = (sbyte*)NativeUtils.StringToPointer(pLayerName, false);
        var arg1 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg2 = ReferenceEquals(pSupported, null) ? null : NativeUtils.StructOrEnumToPointer(pSupported);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetInstanceProfileSupport(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pSupported = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Create a VkInstance with the profile instance extensions enabled
    ///</summary>
    public static Result VpCreateInstance(in VpInstanceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Instance pInstance)
    {
        var arg0 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg1 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkInstance_T arg2;
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpCreateInstance(arg0, arg1, out arg2);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg0);
        pAllocator?.Dispose();
        NativeUtils.Free(arg1);
        pInstance = new Instance(arg2);
        return result;
    }

    ///<summary>
    /// Query the list of instance extensions of a profile
    ///</summary>
    public static Result VpGetProfileInstanceExtensionProperties(in VpProfileProperties pProfile, ref uint pPropertyCount, ExtensionProperties pProperties)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileInstanceExtensionProperties(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Query the list of device extensions of a profile
    ///</summary>
    public static Result VpGetProfileDeviceExtensionProperties(in VpProfileProperties pProfile, ref uint pPropertyCount, ExtensionProperties pProperties)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileDeviceExtensionProperties(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Fill the feature structures with the requirements of a profile
    ///</summary>
    public static void VpGetProfileFeatures(in VpProfileProperties pProfile, ref void* pNext)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFeatures(arg0, pNext);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Query the list of feature structure types specified by the profile
    ///</summary>
    public static Result VpGetProfileFeatureStructureTypes(in VpProfileProperties pProfile, ref uint pStructureTypeCount, ref StructureType pStructureTypes)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pStructureTypeCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pStructureTypes);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFeatureStructureTypes(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pStructureTypeCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pStructureTypes = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Fill the property structures with the requirements of a profile
    ///</summary>
    public static void VpGetProfileProperties(in VpProfileProperties pProfile, ref void* pNext)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileProperties(arg0, pNext);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Query the list of property structure types specified by the profile
    ///</summary>
    public static Result VpGetProfilePropertyStructureTypes(in VpProfileProperties pProfile, ref uint pStructureTypeCount, ref StructureType pStructureTypes)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pStructureTypeCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pStructureTypes);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfilePropertyStructureTypes(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pStructureTypeCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pStructureTypes = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Query the requirements of queue families by a profile
    ///</summary>
    public static Result VpGetProfileQueueFamilyProperties(in VpProfileProperties pProfile, ref uint pPropertyCount, QueueFamilyProperties2 pProperties)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileQueueFamilyProperties(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Query the list of query family structure types specified by the profile
    ///</summary>
    public static Result VpGetProfileQueueFamilyStructureTypes(in VpProfileProperties pProfile, ref uint pStructureTypeCount, ref StructureType pStructureTypes)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pStructureTypeCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pStructureTypes);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileQueueFamilyStructureTypes(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pStructureTypeCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pStructureTypes = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Query the list of formats with specified requirements by a profile
    ///</summary>
    public static Result VpGetProfileFormats(in VpProfileProperties pProfile, ref uint pFormatCount, ref Format pFormats)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pFormatCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pFormats);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFormats(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pFormatCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pFormats = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Query the requirements of a format for a profile
    ///</summary>
    public static void VpGetProfileFormatProperties(in VpProfileProperties pProfile, Format format, ref void* pNext)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFormatProperties(arg0, format, pNext);
        NativeUtils.Free(arg0);
    }

    ///<summary>
    /// Query the list of format structure types specified by the profile
    ///</summary>
    public static Result VpGetProfileFormatStructureTypes(in VpProfileProperties pProfile, ref uint pStructureTypeCount, ref StructureType pStructureTypes)
    {
        var arg0 = ReferenceEquals(pProfile, null) ? null : NativeUtils.StructOrEnumToPointer(pProfile.ToNative());
        var arg1 = NativeUtils.StructOrEnumToPointer(pStructureTypeCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pStructureTypes);
        var result = AdamantiumVulkan.Profiles.Interop.VulkanInterop.vpGetProfileFormatStructureTypes(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        pStructureTypeCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pStructureTypes = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

}


