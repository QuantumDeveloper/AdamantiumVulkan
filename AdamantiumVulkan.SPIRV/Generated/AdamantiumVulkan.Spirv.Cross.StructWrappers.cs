// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Spirv.Cross
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Common;
    using AdamantiumVulkan.Spirv.Cross;
    using AdamantiumVulkan.Spirv.Cross.Interop;
    using AdamantiumVulkan.Spirv;

    public partial class SpvcReflectedResource : QBDisposableObject
    {
        private StringReference refname;

        public SpvcReflectedResource()
        {
        }

        public SpvcReflectedResource(AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedResource _internal)
        {
            Id = _internal.id;
            Base_type_id = _internal.base_type_id;
            Type_id = _internal.type_id;
            Name = Marshal.PtrToStringAnsi(_internal.name);
        }

        public uint Id { get; set; }
        public uint Base_type_id { get; set; }
        public uint Type_id { get; set; }
        public string Name { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedResource ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedResource();
            _internal.id = Id;
            _internal.base_type_id = Base_type_id;
            _internal.type_id = Type_id;
            refname?.Dispose();
            if (Name != null)
            {
                refname = new StringReference(Name, false);
                _internal.name = refname.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refname?.Dispose();
        }


        public static implicit operator SpvcReflectedResource(AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedResource s)
        {
            return new SpvcReflectedResource(s);
        }

    }

    public partial class SpvcEntryPoint : QBDisposableObject
    {
        private StringReference refname;

        public SpvcEntryPoint()
        {
        }

        public SpvcEntryPoint(AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint _internal)
        {
            Execution_model = (SpvExecutionModel)_internal.execution_model;
            Name = Marshal.PtrToStringAnsi(_internal.name);
        }

        public SpvExecutionModel Execution_model { get; set; }
        public string Name { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint();
            _internal.execution_model = (uint)Execution_model;
            refname?.Dispose();
            if (Name != null)
            {
                refname = new StringReference(Name, false);
                _internal.name = refname.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refname?.Dispose();
        }


        public static implicit operator SpvcEntryPoint(AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint s)
        {
            return new SpvcEntryPoint(s);
        }

    }

    public partial class SpvcCombinedImageSampler
    {
        public SpvcCombinedImageSampler()
        {
        }

        public SpvcCombinedImageSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler _internal)
        {
            Combined_id = _internal.combined_id;
            Image_id = _internal.image_id;
            Sampler_id = _internal.sampler_id;
        }

        public uint Combined_id { get; set; }
        public uint Image_id { get; set; }
        public uint Sampler_id { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler();
            _internal.combined_id = Combined_id;
            _internal.image_id = Image_id;
            _internal.sampler_id = Sampler_id;
            return _internal;
        }

        public static implicit operator SpvcCombinedImageSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler s)
        {
            return new SpvcCombinedImageSampler(s);
        }

    }

    public partial class SpvcSpecializationConstant
    {
        public SpvcSpecializationConstant()
        {
        }

        public SpvcSpecializationConstant(AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant _internal)
        {
            Id = _internal.id;
            Constant_id = _internal.constant_id;
        }

        public uint Id { get; set; }
        public uint Constant_id { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant();
            _internal.id = Id;
            _internal.constant_id = Constant_id;
            return _internal;
        }

        public static implicit operator SpvcSpecializationConstant(AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant s)
        {
            return new SpvcSpecializationConstant(s);
        }

    }

    public partial class SpvcBufferRange
    {
        public SpvcBufferRange()
        {
        }

        public SpvcBufferRange(AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange _internal)
        {
            Index = _internal.index;
            Offset = _internal.offset;
            Range = _internal.range;
        }

        public uint Index { get; set; }
        public ulong Offset { get; set; }
        public ulong Range { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange();
            _internal.index = Index;
            _internal.offset = Offset;
            _internal.range = Range;
            return _internal;
        }

        public static implicit operator SpvcBufferRange(AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange s)
        {
            return new SpvcBufferRange(s);
        }

    }

    public partial class SpvcHlslRootConstants
    {
        public SpvcHlslRootConstants()
        {
        }

        public SpvcHlslRootConstants(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslRootConstants _internal)
        {
            Start = _internal.start;
            End = _internal.end;
            Binding = _internal.binding;
            Space = _internal.space;
        }

        public uint Start { get; set; }
        public uint End { get; set; }
        public uint Binding { get; set; }
        public uint Space { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslRootConstants ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslRootConstants();
            _internal.start = Start;
            _internal.end = End;
            _internal.binding = Binding;
            _internal.space = Space;
            return _internal;
        }

        public static implicit operator SpvcHlslRootConstants(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslRootConstants s)
        {
            return new SpvcHlslRootConstants(s);
        }

    }

    public partial class SpvcHlslVertexAttributeRemap : QBDisposableObject
    {
        private StringReference refsemantic;

        public SpvcHlslVertexAttributeRemap()
        {
        }

        public SpvcHlslVertexAttributeRemap(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslVertexAttributeRemap _internal)
        {
            Location = _internal.location;
            Semantic = Marshal.PtrToStringAnsi(_internal.semantic);
        }

        public uint Location { get; set; }
        public string Semantic { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslVertexAttributeRemap ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslVertexAttributeRemap();
            _internal.location = Location;
            refsemantic?.Dispose();
            if (Semantic != null)
            {
                refsemantic = new StringReference(Semantic, false);
                _internal.semantic = refsemantic.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refsemantic?.Dispose();
        }


        public static implicit operator SpvcHlslVertexAttributeRemap(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslVertexAttributeRemap s)
        {
            return new SpvcHlslVertexAttributeRemap(s);
        }

    }

    public partial class SpvcMslVertexAttribute
    {
        public SpvcMslVertexAttribute()
        {
        }

        public SpvcMslVertexAttribute(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute _internal)
        {
            Location = _internal.location;
            Msl_buffer = _internal.msl_buffer;
            Msl_offset = _internal.msl_offset;
            Msl_stride = _internal.msl_stride;
            Per_instance = _internal.per_instance;
            Format = (SpvcMslShaderInputFormat)_internal.format;
            Builtin = (SpvBuiltIn)_internal.builtin;
        }

        public uint Location { get; set; }
        public uint Msl_buffer { get; set; }
        public uint Msl_offset { get; set; }
        public uint Msl_stride { get; set; }
        public byte Per_instance { get; set; }
        public SpvcMslShaderInputFormat Format { get; set; }
        public SpvBuiltIn Builtin { get; set; }
        ///<summary>
        /// Initializes the vertex attribute struct.
        ///</summary>
        public void MslVertexAttributeInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_vertex_attribute_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute();
            _internal.location = Location;
            _internal.msl_buffer = Msl_buffer;
            _internal.msl_offset = Msl_offset;
            _internal.msl_stride = Msl_stride;
            _internal.per_instance = Per_instance;
            _internal.format = (uint)Format;
            _internal.builtin = (uint)Builtin;
            return _internal;
        }

        public static implicit operator SpvcMslVertexAttribute(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute s)
        {
            return new SpvcMslVertexAttribute(s);
        }

    }

    public partial class SpvcMslShaderInput
    {
        public SpvcMslShaderInput()
        {
        }

        public SpvcMslShaderInput(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInput _internal)
        {
            Location = _internal.location;
            Format = (SpvcMslShaderInputFormat)_internal.format;
            Builtin = (SpvBuiltIn)_internal.builtin;
            Vecsize = _internal.vecsize;
        }

        public uint Location { get; set; }
        public SpvcMslShaderInputFormat Format { get; set; }
        public SpvBuiltIn Builtin { get; set; }
        public uint Vecsize { get; set; }
        ///<summary>
        /// Initializes the shader input struct.
        ///</summary>
        public void MslShaderInputInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_shader_input_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInput ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInput();
            _internal.location = Location;
            _internal.format = (uint)Format;
            _internal.builtin = (uint)Builtin;
            _internal.vecsize = Vecsize;
            return _internal;
        }

        public static implicit operator SpvcMslShaderInput(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInput s)
        {
            return new SpvcMslShaderInput(s);
        }

    }

    public partial class SpvcMslResourceBinding
    {
        public SpvcMslResourceBinding()
        {
        }

        public SpvcMslResourceBinding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding _internal)
        {
            Stage = (SpvExecutionModel)_internal.stage;
            Desc_set = _internal.desc_set;
            Binding = _internal.binding;
            Msl_buffer = _internal.msl_buffer;
            Msl_texture = _internal.msl_texture;
            Msl_sampler = _internal.msl_sampler;
        }

        public SpvExecutionModel Stage { get; set; }
        public uint Desc_set { get; set; }
        public uint Binding { get; set; }
        public uint Msl_buffer { get; set; }
        public uint Msl_texture { get; set; }
        public uint Msl_sampler { get; set; }
        ///<summary>
        /// Initializes the resource binding struct. The defaults are non-zero.
        ///</summary>
        public void MslResourceBindingInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_resource_binding_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding();
            _internal.stage = (uint)Stage;
            _internal.desc_set = Desc_set;
            _internal.binding = Binding;
            _internal.msl_buffer = Msl_buffer;
            _internal.msl_texture = Msl_texture;
            _internal.msl_sampler = Msl_sampler;
            return _internal;
        }

        public static implicit operator SpvcMslResourceBinding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding s)
        {
            return new SpvcMslResourceBinding(s);
        }

    }

    public partial class SpvcMslConstexprSampler
    {
        public SpvcMslConstexprSampler()
        {
        }

        public SpvcMslConstexprSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler _internal)
        {
            Coord = (SpvcMslSamplerCoord)_internal.coord;
            Min_filter = (SpvcMslSamplerFilter)_internal.min_filter;
            Mag_filter = (SpvcMslSamplerFilter)_internal.mag_filter;
            Mip_filter = (SpvcMslSamplerMipFilter)_internal.mip_filter;
            S_address = (SpvcMslSamplerAddress)_internal.s_address;
            T_address = (SpvcMslSamplerAddress)_internal.t_address;
            R_address = (SpvcMslSamplerAddress)_internal.r_address;
            Compare_func = (SpvcMslSamplerCompareFunc)_internal.compare_func;
            Border_color = (SpvcMslSamplerBorderColor)_internal.border_color;
            Lod_clamp_min = _internal.lod_clamp_min;
            Lod_clamp_max = _internal.lod_clamp_max;
            Max_anisotropy = _internal.max_anisotropy;
            Compare_enable = _internal.compare_enable;
            Lod_clamp_enable = _internal.lod_clamp_enable;
            Anisotropy_enable = _internal.anisotropy_enable;
        }

        public SpvcMslSamplerCoord Coord { get; set; }
        public SpvcMslSamplerFilter Min_filter { get; set; }
        public SpvcMslSamplerFilter Mag_filter { get; set; }
        public SpvcMslSamplerMipFilter Mip_filter { get; set; }
        public SpvcMslSamplerAddress S_address { get; set; }
        public SpvcMslSamplerAddress T_address { get; set; }
        public SpvcMslSamplerAddress R_address { get; set; }
        public SpvcMslSamplerCompareFunc Compare_func { get; set; }
        public SpvcMslSamplerBorderColor Border_color { get; set; }
        public float Lod_clamp_min { get; set; }
        public float Lod_clamp_max { get; set; }
        public int Max_anisotropy { get; set; }
        public byte Compare_enable { get; set; }
        public byte Lod_clamp_enable { get; set; }
        public byte Anisotropy_enable { get; set; }
        ///<summary>
        /// Initializes the constexpr sampler struct. The defaults are non-zero.
        ///</summary>
        public void MslConstexprSamplerInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_constexpr_sampler_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler();
            _internal.coord = (uint)Coord;
            _internal.min_filter = (uint)Min_filter;
            _internal.mag_filter = (uint)Mag_filter;
            _internal.mip_filter = (uint)Mip_filter;
            _internal.s_address = (uint)S_address;
            _internal.t_address = (uint)T_address;
            _internal.r_address = (uint)R_address;
            _internal.compare_func = (uint)Compare_func;
            _internal.border_color = (uint)Border_color;
            _internal.lod_clamp_min = Lod_clamp_min;
            _internal.lod_clamp_max = Lod_clamp_max;
            _internal.max_anisotropy = Max_anisotropy;
            _internal.compare_enable = Compare_enable;
            _internal.lod_clamp_enable = Lod_clamp_enable;
            _internal.anisotropy_enable = Anisotropy_enable;
            return _internal;
        }

        public static implicit operator SpvcMslConstexprSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler s)
        {
            return new SpvcMslConstexprSampler(s);
        }

    }

    public partial class SpvcMslSamplerYcbcrConversion
    {
        public SpvcMslSamplerYcbcrConversion()
        {
        }

        public SpvcMslSamplerYcbcrConversion(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion _internal)
        {
            Planes = _internal.planes;
            Resolution = (SpvcMslFormatResolution)_internal.resolution;
            Chroma_filter = (SpvcMslSamplerFilter)_internal.chroma_filter;
            X_chroma_offset = (SpvcMslChromaLocation)_internal.x_chroma_offset;
            Y_chroma_offset = (SpvcMslChromaLocation)_internal.y_chroma_offset;
            Swizzle = new SpvcMslComponentSwizzle[4];
            for (int i = 0; i < 4; ++i)
            {
                Swizzle[i] = (SpvcMslComponentSwizzle)(_internal.swizzle[i]);
            }
            Ycbcr_model = (SpvcMslSamplerYcbcrModelConversion)_internal.ycbcr_model;
            Ycbcr_range = (SpvcMslSamplerYcbcrRange)_internal.ycbcr_range;
            Bpc = _internal.bpc;
        }

        public uint Planes { get; set; }
        public SpvcMslFormatResolution Resolution { get; set; }
        public SpvcMslSamplerFilter Chroma_filter { get; set; }
        public SpvcMslChromaLocation X_chroma_offset { get; set; }
        public SpvcMslChromaLocation Y_chroma_offset { get; set; }
        public SpvcMslComponentSwizzle[] Swizzle { get; set; }
        public SpvcMslSamplerYcbcrModelConversion Ycbcr_model { get; set; }
        public SpvcMslSamplerYcbcrRange Ycbcr_range { get; set; }
        public uint Bpc { get; set; }
        ///<summary>
        /// Initializes the constexpr sampler struct. The defaults are non-zero.
        ///</summary>
        public void MslSamplerYcbcrConversionInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_sampler_ycbcr_conversion_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion();
            _internal.planes = Planes;
            _internal.resolution = (uint)Resolution;
            _internal.chroma_filter = (uint)Chroma_filter;
            _internal.x_chroma_offset = (uint)X_chroma_offset;
            _internal.y_chroma_offset = (uint)Y_chroma_offset;
            if(Swizzle != null)
            {
                if (Swizzle.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Swizzle), "Array is out of bounds. Size should not be more than 4");

                _internal.swizzle = new uint[4];
                for (int i = 0; i < Swizzle.Length; ++i)
                {
                    _internal.swizzle[i] = (uint)Swizzle[i];
                }
            }
            _internal.ycbcr_model = (uint)Ycbcr_model;
            _internal.ycbcr_range = (uint)Ycbcr_range;
            _internal.bpc = Bpc;
            return _internal;
        }

        public static implicit operator SpvcMslSamplerYcbcrConversion(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion s)
        {
            return new SpvcMslSamplerYcbcrConversion(s);
        }

    }

    public partial class SpvcHlslResourceBindingMapping
    {
        public SpvcHlslResourceBindingMapping()
        {
        }

        public SpvcHlslResourceBindingMapping(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBindingMapping _internal)
        {
            Register_space = _internal.register_space;
            Register_binding = _internal.register_binding;
        }

        public uint Register_space { get; set; }
        public uint Register_binding { get; set; }

        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBindingMapping ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBindingMapping();
            _internal.register_space = Register_space;
            _internal.register_binding = Register_binding;
            return _internal;
        }

        public static implicit operator SpvcHlslResourceBindingMapping(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBindingMapping s)
        {
            return new SpvcHlslResourceBindingMapping(s);
        }

    }

    public partial class SpvcHlslResourceBinding
    {
        public SpvcHlslResourceBinding()
        {
        }

        public SpvcHlslResourceBinding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding _internal)
        {
            Stage = (SpvExecutionModel)_internal.stage;
            Desc_set = _internal.desc_set;
            Binding = _internal.binding;
            Cbv = new SpvcHlslResourceBindingMapping(_internal.cbv);
            Uav = new SpvcHlslResourceBindingMapping(_internal.uav);
            Srv = new SpvcHlslResourceBindingMapping(_internal.srv);
            Sampler = new SpvcHlslResourceBindingMapping(_internal.sampler);
        }

        public SpvExecutionModel Stage { get; set; }
        public uint Desc_set { get; set; }
        public uint Binding { get; set; }
        public SpvcHlslResourceBindingMapping Cbv { get; set; }
        public SpvcHlslResourceBindingMapping Uav { get; set; }
        public SpvcHlslResourceBindingMapping Srv { get; set; }
        public SpvcHlslResourceBindingMapping Sampler { get; set; }
        ///<summary>
        /// Initializes the resource binding struct. The defaults are non-zero.
        ///</summary>
        public void HlslResourceBindingInit()
        {
            var arg0 = MarshalUtils.MarshalStructToPtr(ToInternal());
            AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_hlsl_resource_binding_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }


        public AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding ToInternal()
        {
            var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding();
            _internal.stage = (uint)Stage;
            _internal.desc_set = Desc_set;
            _internal.binding = Binding;
            if (Cbv != null)
            {
                _internal.cbv = Cbv.ToInternal();
            }
            if (Uav != null)
            {
                _internal.uav = Uav.ToInternal();
            }
            if (Srv != null)
            {
                _internal.srv = Srv.ToInternal();
            }
            if (Sampler != null)
            {
                _internal.sampler = Sampler.ToInternal();
            }
            return _internal;
        }

        public static implicit operator SpvcHlslResourceBinding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding s)
        {
            return new SpvcHlslResourceBinding(s);
        }

    }


}
