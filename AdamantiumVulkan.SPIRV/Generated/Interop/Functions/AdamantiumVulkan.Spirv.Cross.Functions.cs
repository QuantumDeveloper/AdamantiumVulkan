// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Security;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Spirv.Cross;
using AdamantiumVulkan.Spirv;
using AdamantiumVulkan.Spirv.Interop;

namespace AdamantiumVulkan.Spirv.Cross.Interop;

public static unsafe partial class SpirvCrossInterop
{
    public const string LibraryPath = "spirv-cross-c-shared";

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_add_header_line", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_add_header_line(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* line);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_buffer_get_hlsl_counter_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_buffer_get_hlsl_counter_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, SpvcVariableId* counter_id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_buffer_is_hlsl_counter_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_buffer_is_hlsl_counter_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_build_combined_image_samplers", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_build_combined_image_samplers(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    ///<summary>
    /// Workaround helper functions. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_build_dummy_sampler_for_combined_images", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_build_dummy_sampler_for_combined_images(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId* id);

    ///<summary>
    /// Compile IR into a string. *source is owned by the context, and caller must not free it themselves.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_compile", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_compile(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte** source);

    ///<summary>
    /// Create compiler options, which will initialize defaults.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_create_compiler_options", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_create_compiler_options(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerOptionsS options);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_create_shader_resources", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_create_shader_resources(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcResourcesS resources);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_create_shader_resources_for_active_variables", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_create_shader_resources_for_active_variables(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcResourcesS resources, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSetS active);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_flatten_buffer_block", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_flatten_buffer_block(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    ///<summary>
    /// Buffer ranges Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_active_buffer_ranges", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_active_buffer_ranges(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange** ranges, ulong* num_ranges);

    ///<summary>
    /// Reflect resources. Maps almost 1:1 to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_active_interface_variables", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_active_interface_variables(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcSetS set);

    ///<summary>
    /// Misc reflection Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_binary_offset_for_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_get_binary_offset_for_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, SpvDecoration decoration, uint* word_offset);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_buffer_block_decorations", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_buffer_block_decorations(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, SpvDecoration** decorations, ulong* num_decorations);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_cleansed_entry_point_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_cleansed_entry_point_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* name, SpvExecutionModel model);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_combined_image_samplers", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_combined_image_samplers(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler** samplers, ulong* num_samplers);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_constant_handle", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcConstantS spvc_compiler_get_constant_handle(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcConstantId id);

    ///<summary>
    /// Maps directly to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_current_id_bound", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_get_current_id_bound(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_declared_capabilities", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_declared_capabilities(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, Apability** capabilities, ulong* num_capabilities);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_declared_extensions", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_declared_extensions(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte*** extensions, ulong* num_extensions);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_declared_struct_member_size", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_declared_struct_member_size(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint index, ulong* size);

    ///<summary>
    /// Buffer layout query. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_declared_struct_size", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_declared_struct_size(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS struct_type, ulong* size);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_declared_struct_size_runtime_array", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_declared_struct_size_runtime_array(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS struct_type, ulong array_size, ulong* size);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_get_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_decoration_string", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_decoration_string(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration);

    ///<summary>
    /// Entry points. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_entry_points", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_entry_points(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint** entry_points, ulong* num_entry_points);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_execution_mode_argument", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_get_execution_mode_argument(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode mode);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_execution_mode_argument_by_index", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_get_execution_mode_argument_by_index(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode mode, uint index);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_execution_model", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvExecutionModel spvc_compiler_get_execution_model(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_execution_modes", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_execution_modes(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode** modes, ulong* num_modes);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_member_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_get_member_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_member_decoration_string", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_member_decoration_string(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_member_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_member_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_remapped_declared_block_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_get_remapped_declared_block_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    ///<summary>
    /// Constants Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_specialization_constants", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_get_specialization_constants(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant** constants, ulong* num_constants);

    ///<summary>
    /// Type query interface. Maps to C++ API, except it's read-only.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_type_handle", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcTypeS spvc_compiler_get_type_handle(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_get_work_group_size_specialization_constants", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcConstantId spvc_compiler_get_work_group_size_specialization_constants(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant* x, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant* y, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant* z);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_has_active_builtin", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_has_active_builtin(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvBuiltIn builtin, SpvStorageClass storage);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_has_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_has_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_has_member_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_has_member_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_add_resource_binding", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_hlsl_add_resource_binding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding* binding);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_add_vertex_attribute_remap", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_hlsl_add_vertex_attribute_remap(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslVertexAttributeRemap* remap, ulong remaps);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_is_resource_used", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_hlsl_is_resource_used(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionModel model, uint set, uint binding);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_remap_num_workgroups_builtin", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcVariableId spvc_compiler_hlsl_remap_num_workgroups_builtin(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_set_resource_binding_flags", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_hlsl_set_resource_binding_flags(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcHlslBindingFlags flags);

    ///<summary>
    /// HLSL specifics. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_hlsl_set_root_constants_layout", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_hlsl_set_root_constants_layout(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslRootConstants* constant_info, ulong count);

    ///<summary>
    /// Set compiler options.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_install_compiler_options", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_install_compiler_options(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerOptionsS options);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_mask_stage_output_by_builtin", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_mask_stage_output_by_builtin(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvBuiltIn builtin);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_mask_stage_output_by_location", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_mask_stage_output_by_location(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint location, uint component);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_discrete_descriptor_set", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_discrete_descriptor_set(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_dynamic_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_dynamic_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set, uint binding, uint index);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_inline_uniform_block", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_inline_uniform_block(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set, uint binding);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_resource_binding", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_resource_binding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding* binding);

    ///<summary>
    /// Deprecated; use spvc_compiler_msl_add_shader_input_2().
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_shader_input", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_shader_input(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar* input);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_shader_input_2", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_shader_input_2(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar2* input);

    ///<summary>
    /// Deprecated; use spvc_compiler_msl_add_shader_output_2().
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_shader_output", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_shader_output(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar output);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_shader_output_2", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_shader_output_2(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar2 output);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_add_vertex_attribute", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_add_vertex_attribute(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute* attrs);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_get_automatic_resource_binding", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_msl_get_automatic_resource_binding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_get_automatic_resource_binding_secondary", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_compiler_msl_get_automatic_resource_binding_secondary(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_get_combined_sampler_suffix", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_compiler_msl_get_combined_sampler_suffix(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    ///<summary>
    /// MSL specifics. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_is_rasterization_disabled", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_is_rasterization_disabled(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_is_resource_used", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_is_resource_used(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionModel model, uint set, uint binding);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_is_shader_input_used", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_is_shader_input_used(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint location);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_is_shader_output_used", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_is_shader_output_used(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint location);

    ///<summary>
    /// Obsolete, use is_shader_input_used.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_is_vertex_attribute_used", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_is_vertex_attribute_used(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint location);

    ///<summary>
    /// Obsolete. Renamed to needs_swizzle_buffer.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_aux_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_aux_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_buffer_size_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_buffer_size_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_input_threadgroup_mem", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_input_threadgroup_mem(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_output_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_output_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_patch_output_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_patch_output_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_needs_swizzle_buffer", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_msl_needs_swizzle_buffer(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_remap_constexpr_sampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler* sampler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_by_binding", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_remap_constexpr_sampler_by_binding(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set, uint binding, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler* sampler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set, uint binding, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler* sampler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion* conv);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_remap_constexpr_sampler_ycbcr", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_remap_constexpr_sampler_ycbcr(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler* sampler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion* conv);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_set_argument_buffer_device_address_space", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_set_argument_buffer_device_address_space(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint desc_set, SpvcBool device_address);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_set_combined_sampler_suffix", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_set_combined_sampler_suffix(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* suffix);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_msl_set_fragment_output_components", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_msl_set_fragment_output_components(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, uint location, uint components);

    ///<summary>
    /// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_options_set_bool", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_options_set_bool(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerOptionsS options, CompilerOption option, SpvcBool value);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_options_set_uint", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_options_set_uint(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerOptionsS options, CompilerOption option, uint value);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_rename_entry_point", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_rename_entry_point(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* old_name, sbyte* new_name, SpvExecutionModel model);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_require_extension", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_require_extension(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* ext);

    ///<summary>
    /// Decorations. Maps to C++ API.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration, uint argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_decoration_string", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_decoration_string(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration, sbyte* argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_enabled_interface_variables", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_set_enabled_interface_variables(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcSetS set);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_entry_point", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_set_entry_point(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, sbyte* name, SpvExecutionModel model);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_execution_mode", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_execution_mode(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode mode);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_execution_mode_with_arguments", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_execution_mode_with_arguments(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode mode, uint arg0, uint arg1, uint arg2);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_member_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_member_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration, uint argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_member_decoration_string", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_member_decoration_string(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration, sbyte* argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_member_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_member_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, sbyte* argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_set_name", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_set_name(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, sbyte* argument);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_type_struct_member_array_stride", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_type_struct_member_array_stride(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint index, uint* stride);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_type_struct_member_matrix_stride", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_type_struct_member_matrix_stride(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint index, uint* stride);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_type_struct_member_offset", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_compiler_type_struct_member_offset(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint index, uint* offset);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_unset_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_unset_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvId id, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_unset_execution_mode", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_unset_execution_mode(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvExecutionMode mode);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_unset_member_decoration", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_unset_member_decoration(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcTypeId id, uint member_index, SpvDecoration decoration);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_update_active_builtins", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_compiler_update_active_builtins(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_compiler_variable_is_depth_or_compare", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_compiler_variable_is_depth_or_compare(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler, SpvcVariableId id);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_type", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcTypeId spvc_constant_get_constant_type(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant);

    ///<summary>
    /// No stdint.h until C99, sigh :( For smaller types, the result is sign or zero-extended as appropriate. Maps to C++ API. TODO: The SPIRConstant query interface and modification interface is not quite complete.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_fp16", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern float spvc_constant_get_scalar_fp16(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_fp32", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern float spvc_constant_get_scalar_fp32(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_fp64", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern double spvc_constant_get_scalar_fp64(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_i16", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern int spvc_constant_get_scalar_i16(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_i32", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern int spvc_constant_get_scalar_i32(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_i8", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern int spvc_constant_get_scalar_i8(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_u16", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_constant_get_scalar_u16(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_u32", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_constant_get_scalar_u32(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_scalar_u8", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_constant_get_scalar_u8(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, uint column, uint row);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_constant_get_subconstants", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_constant_get_subconstants(AdamantiumVulkan.Spirv.Cross.Interop.SpvcConstantS constant, SpvcConstantId** constituents, ulong* count);

    ///<summary>
    /// Context is the highest-level API construct. The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings. This means that the API user only has to care about one "destroy" call ever when using the C API. All pointers handed out by the APIs are only valid as long as the context is alive and spvc_context_release_allocations has not been called.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_create", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_context_create(out AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context);

    ///<summary>
    /// Create a compiler backend. Capture mode controls if we construct by copy or move semantics. It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_create_compiler", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_context_create_compiler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context, Backend backend, AdamantiumVulkan.Spirv.Cross.Interop.SpvcParsedIrS parsed_ir, CaptureMode mode, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS compiler);

    ///<summary>
    /// Frees all memory allocations and objects associated with the context and its child objects.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_destroy", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_context_destroy(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context);

    ///<summary>
    /// Get the string for the last error which was logged.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_get_last_error_string", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_context_get_last_error_string(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context);

    ///<summary>
    /// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_parse_spirv", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_context_parse_spirv(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context, byte* spirv, ulong word_count, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcParsedIrS parsed_ir);

    ///<summary>
    /// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_release_allocations", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_context_release_allocations(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_context_set_error_callback", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_context_set_error_callback(AdamantiumVulkan.Spirv.Cross.Interop.SpvcContextS context, void* cb, void* userdata);

    ///<summary>
    /// Gets a human readable version string to identify which commit a particular binary was created from.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_get_commit_revision_and_timestamp", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern sbyte* spvc_get_commit_revision_and_timestamp();

    ///<summary>
    /// Gets the SPVC_C_API_VERSION_* used to build this library. Can be used to check for ABI mismatch if so-versioning did not catch it.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_get_version", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_get_version(uint* major, uint* minor, uint* patch);

    ///<summary>
    /// Initializes the resource binding struct. The defaults are non-zero.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_hlsl_resource_binding_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_hlsl_resource_binding_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcHlslResourceBinding* binding);

    ///<summary>
    /// Initializes the constexpr sampler struct. The defaults are non-zero.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_constexpr_sampler_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_constexpr_sampler_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler* sampler);

    ///<summary>
    /// Runtime check for incompatibility. Obsolete.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_get_aux_buffer_struct_version", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_msl_get_aux_buffer_struct_version();

    ///<summary>
    /// Initializes the resource binding struct. The defaults are non-zero.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_resource_binding_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_resource_binding_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslResourceBinding* binding);

    ///<summary>
    /// Initializes the constexpr sampler struct. The defaults are non-zero.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_sampler_ycbcr_conversion_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_sampler_ycbcr_conversion_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslSamplerYcbcrConversion* conv);

    ///<summary>
    /// Deprecated. Use spvc_msl_shader_interface_var_init_2().
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_shader_input_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_shader_input_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar* input);

    ///<summary>
    /// Initializes the shader input struct. Deprecated. Use spvc_msl_shader_interface_var_init_2().
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_shader_interface_var_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_shader_interface_var_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar* var);

    ///<summary>
    /// Initializes the shader interface variable struct.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_shader_interface_var_init_2", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_shader_interface_var_init_2(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar2* var);

    ///<summary>
    /// Initializes the vertex attribute struct.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_msl_vertex_attribute_init", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern void spvc_msl_vertex_attribute_init(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslVertexAttribute* attr);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_resources_get_builtin_resource_list_for_type", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_resources_get_builtin_resource_list_for_type(AdamantiumVulkan.Spirv.Cross.Interop.SpvcResourcesS resources, BuiltinResourceType type, AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedBuiltinResource** resource_list, ulong* resource_size);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_resources_get_resource_list_for_type", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Result spvc_resources_get_resource_list_for_type(AdamantiumVulkan.Spirv.Cross.Interop.SpvcResourcesS resources, ResourceType type, out AdamantiumVulkan.Spirv.Cross.Interop.SpvcReflectedResource* resource_list, out ulong resource_size);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_array_dimension_is_literal", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_type_array_dimension_is_literal(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint dimension);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_array_dimension", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvId spvc_type_get_array_dimension(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint dimension);

    ///<summary>
    /// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers. This is necessary when reflecting decoration/name information on members of a struct, which are placed in the base type, not the qualified type. This is similar to spvc_reflected_resource::base_type_id.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_base_type_id", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcTypeId spvc_type_get_base_type_id(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_basetype", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern Basetype spvc_type_get_basetype(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_bit_width", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_type_get_bit_width(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_columns", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_type_get_columns(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_access_qualifier", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvAccessQualifier spvc_type_get_image_access_qualifier(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_arrayed", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_type_get_image_arrayed(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_dimension", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvDim spvc_type_get_image_dimension(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_is_depth", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_type_get_image_is_depth(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_is_storage", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_type_get_image_is_storage(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_multisampled", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcBool spvc_type_get_image_multisampled(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    ///<summary>
    /// Image type query.
    ///</summary>
    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_sampled_type", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcTypeId spvc_type_get_image_sampled_type(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_image_storage_format", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvImageFormat spvc_type_get_image_storage_format(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_member_type", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvcTypeId spvc_type_get_member_type(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type, uint index);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_num_array_dimensions", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_type_get_num_array_dimensions(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_num_member_types", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_type_get_num_member_types(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_storage_class", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern SpvStorageClass spvc_type_get_storage_class(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

    [SuppressUnmanagedCodeSecurity]
    [DllImport(LibraryPath, EntryPoint = "spvc_type_get_vector_size", ExactSpelling = true, CallingConvention = CallingConvention.Winapi)]
    internal static extern uint spvc_type_get_vector_size(AdamantiumVulkan.Spirv.Cross.Interop.SpvcTypeS type);

}



