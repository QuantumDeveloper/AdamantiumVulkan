// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Spirv.Cross.Interop;
using AdamantiumVulkan.Spirv;
using AdamantiumVulkan.Spirv.Interop;

namespace AdamantiumVulkan.Spirv.Cross;

// File: C:\VulkanSDK\1.3.283.0\Include\spirv_cross\spirv_cross_c.h Line: 74 Column: 33
public unsafe partial class SpirvCompiler
{
    internal SpvcCompilerS __Instance;
    public SpirvCompiler()
    {
    }

    public SpirvCompiler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS __Instance)
    {
        this.__Instance = __Instance;
    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public Result AddHeaderLine(string line)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(line, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_add_header_line(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    public SpvcBool BufferGetHlslCounterBuffer(SpvcVariableId id, ref SpvcVariableId counter_id)
    {
        var arg2 = ReferenceEquals(counter_id, null) ? null : NativeUtils.StructOrEnumToPointer(counter_id);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_get_hlsl_counter_buffer(this, id, arg2);
        if (arg2 is not null)
        {
            counter_id = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public SpvcBool BufferIsHlslCounterBuffer(SpvcVariableId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_is_hlsl_counter_buffer(this, id);
    }

    public Result BuildCombinedImageSamplers()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_combined_image_samplers(this);
    }

    ///<summary>
    /// Workaround helper functions. Maps to C++ API.
    ///</summary>
    public Result BuildDummySamplerForCombinedImages(ref SpvcVariableId id)
    {
        var arg1 = ReferenceEquals(id, null) ? null : NativeUtils.StructOrEnumToPointer(id);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_dummy_sampler_for_combined_images(this, arg1);
        if (arg1 is not null)
        {
            id = *arg1;
        }
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Compile IR into a string. *source is owned by the context, and caller must not free it themselves.
    ///</summary>
    public Result Compile(in string[] source)
    {
        var arg1 = (sbyte**)NativeUtils.StringArrayToPointer(source, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_compile(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Create compiler options, which will initialize defaults.
    ///</summary>
    public Result CreateCompilerOptions(out AdamantiumVulkan.Spirv.Cross.SpirvCompilerOptions options)
    {
        SpvcCompilerOptionsS arg1;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_compiler_options(this, out arg1);
        options = new SpirvCompilerOptions(arg1);
        return result;
    }

    public Result CreateShaderResources(out AdamantiumVulkan.Spirv.Cross.SpirvResources resources)
    {
        SpvcResourcesS arg1;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources(this, out arg1);
        resources = new SpirvResources(arg1);
        return result;
    }

    public Result CreateShaderResourcesForActiveVariables(out AdamantiumVulkan.Spirv.Cross.SpirvResources resources, AdamantiumVulkan.Spirv.Cross.SpirvSet active)
    {
        SpvcResourcesS arg1;
        var arg2 = ReferenceEquals(active, null) ? new SpvcSetS() : (SpvcSetS)active;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources_for_active_variables(this, out arg1, arg2);
        resources = new SpirvResources(arg1);
        return result;
    }

    public Result FlattenBufferBlock(SpvcVariableId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_flatten_buffer_block(this, id);
    }

    ///<summary>
    /// Buffer ranges Maps to C++ API.
    ///</summary>
    public Result GetActiveBufferRanges(SpvcVariableId id, in SpvcBufferRange ranges, ref ulong num_ranges)
    {
        var arg2 = ReferenceEquals(ranges, null) ? null : (AdamantiumVulkan.Spirv.Cross.Interop.SpvcBufferRange**)NativeUtils.StructOrEnumToPointer(ranges.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(num_ranges);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_buffer_ranges(this, id, arg2, arg3);
        ranges?.Dispose();
        NativeUtils.Free(arg2);
        num_ranges = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    ///<summary>
    /// Reflect resources. Maps almost 1:1 to C++ API.
    ///</summary>
    public Result GetActiveInterfaceVariables(out AdamantiumVulkan.Spirv.Cross.SpirvSet set)
    {
        SpvcSetS arg1;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_interface_variables(this, out arg1);
        set = new SpirvSet(arg1);
        return result;
    }

    ///<summary>
    /// Misc reflection Maps to C++ API.
    ///</summary>
    public SpvcBool GetBinaryOffsetForDecoration(SpvcVariableId id, SpvDecoration decoration, ref uint word_offset)
    {
        var arg3 = NativeUtils.StructOrEnumToPointer(word_offset);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_binary_offset_for_decoration(this, id, decoration, arg3);
        word_offset = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetBufferBlockDecorations(SpvcVariableId id, in SpvDecoration decorations, ref ulong num_decorations)
    {
        var arg2 = (SpvDecoration**)NativeUtils.StructOrEnumToPointer(decorations);
        var arg3 = NativeUtils.StructOrEnumToPointer(num_decorations);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_buffer_block_decorations(this, id, arg2, arg3);
        NativeUtils.Free(arg2);
        num_decorations = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public string GetCleansedEntryPointName(string name, SpvExecutionModel model)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(name, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_cleansed_entry_point_name(this, arg1, model);
        NativeUtils.Free(arg1);
        return new string(result);
    }

    public Result GetCombinedImageSamplers(in SpvcCombinedImageSampler samplers, ref ulong num_samplers)
    {
        var arg1 = ReferenceEquals(samplers, null) ? null : (AdamantiumVulkan.Spirv.Cross.Interop.SpvcCombinedImageSampler**)NativeUtils.StructOrEnumToPointer(samplers.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(num_samplers);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_combined_image_samplers(this, arg1, arg2);
        samplers?.Dispose();
        NativeUtils.Free(arg1);
        num_samplers = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public SpirvConstant GetConstantHandle(SpvcConstantId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_constant_handle(this, id);
    }

    ///<summary>
    /// Maps directly to C++ API.
    ///</summary>
    public uint GetCurrentIdBound()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_current_id_bound(this);
    }

    public Result GetDeclaredCapabilities(in Apability capabilities, ref ulong num_capabilities)
    {
        var arg1 = (Apability**)NativeUtils.StructOrEnumToPointer(capabilities);
        var arg2 = NativeUtils.StructOrEnumToPointer(num_capabilities);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_capabilities(this, arg1, arg2);
        NativeUtils.Free(arg1);
        num_capabilities = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetDeclaredExtensions(in string extensions, ref ulong num_extensions)
    {
        var arg1 = (sbyte***)NativeUtils.StringToPointer(extensions, false);
        var arg2 = NativeUtils.StructOrEnumToPointer(num_extensions);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_extensions(this, arg1, arg2);
        NativeUtils.Free(arg1);
        num_extensions = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetDeclaredStructMemberSize(AdamantiumVulkan.Spirv.Cross.SpirvType type, uint index, ref ulong size)
    {
        var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
        var arg3 = NativeUtils.StructOrEnumToPointer(size);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_member_size(this, arg1, index, arg3);
        size = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    ///<summary>
    /// Buffer layout query. Maps to C++ API.
    ///</summary>
    public Result GetDeclaredStructSize(AdamantiumVulkan.Spirv.Cross.SpirvType struct_type, ref ulong size)
    {
        var arg1 = ReferenceEquals(struct_type, null) ? new SpvcTypeS() : (SpvcTypeS)struct_type;
        var arg2 = NativeUtils.StructOrEnumToPointer(size);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size(this, arg1, arg2);
        size = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetDeclaredStructSizeRuntimeArray(AdamantiumVulkan.Spirv.Cross.SpirvType struct_type, ulong array_size, ref ulong size)
    {
        var arg1 = ReferenceEquals(struct_type, null) ? new SpvcTypeS() : (SpvcTypeS)struct_type;
        var arg3 = NativeUtils.StructOrEnumToPointer(size);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size_runtime_array(this, arg1, array_size, arg3);
        size = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public uint GetDecoration(SpvId id, SpvDecoration decoration)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration(this, id, decoration);
    }

    public string GetDecorationString(SpvId id, SpvDecoration decoration)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration_string(this, id, decoration);
        return new string(result);
    }

    ///<summary>
    /// Entry points. Maps to C++ API.
    ///</summary>
    public Result GetEntryPoints(in SpvcEntryPoint entry_points, ref ulong num_entry_points)
    {
        var arg1 = ReferenceEquals(entry_points, null) ? null : (AdamantiumVulkan.Spirv.Cross.Interop.SpvcEntryPoint**)NativeUtils.StructOrEnumToPointer(entry_points.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(num_entry_points);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_entry_points(this, arg1, arg2);
        entry_points?.Dispose();
        NativeUtils.Free(arg1);
        num_entry_points = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public uint GetExecutionModeArgument(SpvExecutionMode mode)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument(this, mode);
    }

    public uint GetExecutionModeArgumentByIndex(SpvExecutionMode mode, uint index)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument_by_index(this, mode, index);
    }

    public SpvExecutionModel GetExecutionModel()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_model(this);
    }

    public Result GetExecutionModes(in SpvExecutionMode modes, ref ulong num_modes)
    {
        var arg1 = (SpvExecutionMode**)NativeUtils.StructOrEnumToPointer(modes);
        var arg2 = NativeUtils.StructOrEnumToPointer(num_modes);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_modes(this, arg1, arg2);
        NativeUtils.Free(arg1);
        num_modes = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public uint GetMemberDecoration(SpvcTypeId id, uint member_index, SpvDecoration decoration)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration(this, id, member_index, decoration);
    }

    public string GetMemberDecorationString(SpvcTypeId id, uint member_index, SpvDecoration decoration)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration_string(this, id, member_index, decoration);
        return new string(result);
    }

    public string GetMemberName(SpvcTypeId id, uint member_index)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_name(this, id, member_index);
        return new string(result);
    }

    public string GetName(SpvId id)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_name(this, id);
        return new string(result);
    }

    public ulong GetNumRequiredExtensions()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_num_required_extensions(this);
    }

    public string GetRemappedDeclaredBlockName(SpvcVariableId id)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_remapped_declared_block_name(this, id);
        return new string(result);
    }

    public string GetRequiredExtension(ulong index)
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_required_extension(this, index);
        return new string(result);
    }

    ///<summary>
    /// Constants Maps to C++ API.
    ///</summary>
    public Result GetSpecializationConstants(in SpvcSpecializationConstant constants, ref ulong num_constants)
    {
        var arg1 = ReferenceEquals(constants, null) ? null : (AdamantiumVulkan.Spirv.Cross.Interop.SpvcSpecializationConstant**)NativeUtils.StructOrEnumToPointer(constants.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(num_constants);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_specialization_constants(this, arg1, arg2);
        constants?.Dispose();
        NativeUtils.Free(arg1);
        num_constants = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    ///<summary>
    /// Type query interface. Maps to C++ API, except it's read-only.
    ///</summary>
    public SpirvType GetTypeHandle(SpvcTypeId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_type_handle(this, id);
    }

    public SpvcConstantId GetWorkGroupSizeSpecializationConstants(SpvcSpecializationConstant x, SpvcSpecializationConstant y, SpvcSpecializationConstant z)
    {
        var arg1 = ReferenceEquals(x, null) ? null : NativeUtils.StructOrEnumToPointer(x.ToNative());
        var arg2 = ReferenceEquals(y, null) ? null : NativeUtils.StructOrEnumToPointer(y.ToNative());
        var arg3 = ReferenceEquals(z, null) ? null : NativeUtils.StructOrEnumToPointer(z.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_work_group_size_specialization_constants(this, arg1, arg2, arg3);
        x?.Dispose();
        NativeUtils.Free(arg1);
        y?.Dispose();
        NativeUtils.Free(arg2);
        z?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public SpvcBool HasActiveBuiltin(SpvBuiltIn builtin, SpvStorageClass storage)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_active_builtin(this, builtin, storage);
    }

    public SpvcBool HasDecoration(SpvId id, SpvDecoration decoration)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_decoration(this, id, decoration);
    }

    public SpvcBool HasMemberDecoration(SpvcTypeId id, uint member_index, SpvDecoration decoration)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_member_decoration(this, id, member_index, decoration);
    }

    public Result HlslAddResourceBinding(in SpvcHlslResourceBinding binding)
    {
        var arg1 = ReferenceEquals(binding, null) ? null : NativeUtils.StructOrEnumToPointer(binding.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_add_resource_binding(this, arg1);
        binding?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result HlslAddVertexAttributeRemap(in SpvcHlslVertexAttributeRemap remap, ulong remaps)
    {
        var arg1 = ReferenceEquals(remap, null) ? null : NativeUtils.StructOrEnumToPointer(remap.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_add_vertex_attribute_remap(this, arg1, remaps);
        remap?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public SpvcBool HlslIsResourceUsed(SpvExecutionModel model, uint set, uint binding)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_is_resource_used(this, model, set, binding);
    }

    public SpvcVariableId HlslRemapNumWorkgroupsBuiltin()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_remap_num_workgroups_builtin(this);
    }

    public Result HlslSetResourceBindingFlags(SpvcHlslBindingFlags flags)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_set_resource_binding_flags(this, flags);
    }

    ///<summary>
    /// HLSL specifics. Maps to C++ API.
    ///</summary>
    public Result HlslSetRootConstantsLayout(in SpvcHlslRootConstants constant_info, ulong count)
    {
        var arg1 = ReferenceEquals(constant_info, null) ? null : NativeUtils.StructOrEnumToPointer(constant_info.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_set_root_constants_layout(this, arg1, count);
        constant_info?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Set compiler options.
    ///</summary>
    public Result InstallCompilerOptions(AdamantiumVulkan.Spirv.Cross.SpirvCompilerOptions options)
    {
        var arg1 = ReferenceEquals(options, null) ? new SpvcCompilerOptionsS() : (SpvcCompilerOptionsS)options;
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_install_compiler_options(this, arg1);
    }

    public Result MaskStageOutputByBuiltin(SpvBuiltIn builtin)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_mask_stage_output_by_builtin(this, builtin);
    }

    public Result MaskStageOutputByLocation(uint location, uint component)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_mask_stage_output_by_location(this, location, component);
    }

    public Result MslAddDiscreteDescriptorSet(uint desc_set)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_discrete_descriptor_set(this, desc_set);
    }

    public Result MslAddDynamicBuffer(uint desc_set, uint binding, uint index)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_dynamic_buffer(this, desc_set, binding, index);
    }

    public Result MslAddInlineUniformBlock(uint desc_set, uint binding)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_inline_uniform_block(this, desc_set, binding);
    }

    public Result MslAddResourceBinding(in SpvcMslResourceBinding binding)
    {
        var arg1 = ReferenceEquals(binding, null) ? null : NativeUtils.StructOrEnumToPointer(binding.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_resource_binding(this, arg1);
        binding?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Deprecated; use spvc_compiler_msl_add_shader_input_2().
    ///</summary>
    public Result MslAddShaderInput(in SpvcMslShaderInterfaceVar input)
    {
        var arg1 = ReferenceEquals(input, null) ? null : NativeUtils.StructOrEnumToPointer(input.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_shader_input(this, arg1);
        input?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result MslAddShaderInput2(in SpvcMslShaderInterfaceVar2 input)
    {
        var arg1 = ReferenceEquals(input, null) ? null : NativeUtils.StructOrEnumToPointer(input.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_shader_input_2(this, arg1);
        input?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Deprecated; use spvc_compiler_msl_add_shader_output_2().
    ///</summary>
    public Result MslAddShaderOutput(out SpvcMslShaderInterfaceVar output)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar arg1;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_shader_output(this, out arg1);
        output = new SpvcMslShaderInterfaceVar(arg1);
        return result;
    }

    public Result MslAddShaderOutput2(out SpvcMslShaderInterfaceVar2 output)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslShaderInterfaceVar2 arg1;
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_shader_output_2(this, out arg1);
        output = new SpvcMslShaderInterfaceVar2(arg1);
        return result;
    }

    public Result MslAddVertexAttribute(in SpvcMslVertexAttribute attrs)
    {
        var arg1 = ReferenceEquals(attrs, null) ? null : NativeUtils.StructOrEnumToPointer(attrs.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_vertex_attribute(this, arg1);
        attrs?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public uint MslGetAutomaticResourceBinding(SpvcVariableId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding(this, id);
    }

    public uint MslGetAutomaticResourceBindingSecondary(SpvcVariableId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding_secondary(this, id);
    }

    public string MslGetCombinedSamplerSuffix()
    {
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_combined_sampler_suffix(this);
        return new string(result);
    }

    ///<summary>
    /// MSL specifics. Maps to C++ API.
    ///</summary>
    public SpvcBool MslIsRasterizationDisabled()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_rasterization_disabled(this);
    }

    public SpvcBool MslIsResourceUsed(SpvExecutionModel model, uint set, uint binding)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_resource_used(this, model, set, binding);
    }

    public SpvcBool MslIsShaderInputUsed(uint location)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_shader_input_used(this, location);
    }

    public SpvcBool MslIsShaderOutputUsed(uint location)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_shader_output_used(this, location);
    }

    ///<summary>
    /// Obsolete, use is_shader_input_used.
    ///</summary>
    public SpvcBool MslIsVertexAttributeUsed(uint location)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_vertex_attribute_used(this, location);
    }

    ///<summary>
    /// Obsolete. Renamed to needs_swizzle_buffer.
    ///</summary>
    public SpvcBool MslNeedsAuxBuffer()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_aux_buffer(this);
    }

    public SpvcBool MslNeedsBufferSizeBuffer()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_buffer_size_buffer(this);
    }

    public SpvcBool MslNeedsInputThreadgroupMem()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_input_threadgroup_mem(this);
    }

    public SpvcBool MslNeedsOutputBuffer()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_output_buffer(this);
    }

    public SpvcBool MslNeedsPatchOutputBuffer()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_patch_output_buffer(this);
    }

    public SpvcBool MslNeedsSwizzleBuffer()
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_swizzle_buffer(this);
    }

    public Result MslRemapConstexprSampler(SpvcVariableId id, in SpvcMslConstexprSampler sampler)
    {
        var arg2 = ReferenceEquals(sampler, null) ? null : NativeUtils.StructOrEnumToPointer(sampler.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler(this, id, arg2);
        sampler?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result MslRemapConstexprSamplerByBinding(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler)
    {
        var arg3 = ReferenceEquals(sampler, null) ? null : NativeUtils.StructOrEnumToPointer(sampler.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding(this, desc_set, binding, arg3);
        sampler?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result MslRemapConstexprSamplerByBindingYcbcr(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
    {
        var arg3 = ReferenceEquals(sampler, null) ? null : NativeUtils.StructOrEnumToPointer(sampler.ToNative());
        var arg4 = ReferenceEquals(conv, null) ? null : NativeUtils.StructOrEnumToPointer(conv.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(this, desc_set, binding, arg3, arg4);
        sampler?.Dispose();
        NativeUtils.Free(arg3);
        conv?.Dispose();
        NativeUtils.Free(arg4);
        return result;
    }

    public Result MslRemapConstexprSamplerYcbcr(SpvcVariableId id, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
    {
        var arg2 = ReferenceEquals(sampler, null) ? null : NativeUtils.StructOrEnumToPointer(sampler.ToNative());
        var arg3 = ReferenceEquals(conv, null) ? null : NativeUtils.StructOrEnumToPointer(conv.ToNative());
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_ycbcr(this, id, arg2, arg3);
        sampler?.Dispose();
        NativeUtils.Free(arg2);
        conv?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result MslSetArgumentBufferDeviceAddressSpace(uint desc_set, SpvcBool device_address)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_argument_buffer_device_address_space(this, desc_set, device_address);
    }

    public Result MslSetCombinedSamplerSuffix(string suffix)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(suffix, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_combined_sampler_suffix(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    public Result MslSetFragmentOutputComponents(uint location, uint components)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_fragment_output_components(this, location, components);
    }

    public Result RenameEntryPoint(string old_name, string new_name, SpvExecutionModel model)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(old_name, false);
        var arg2 = (sbyte*)NativeUtils.StringToPointer(new_name, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_rename_entry_point(this, arg1, arg2, model);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        return result;
    }

    public Result RequireExtension(string ext)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(ext, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_require_extension(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Decorations. Maps to C++ API.
    ///</summary>
    public void SetDecoration(SpvId id, SpvDecoration decoration, uint argument)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration(this, id, decoration, argument);
    }

    public void SetDecorationString(SpvId id, SpvDecoration decoration, string argument)
    {
        var arg3 = (sbyte*)NativeUtils.StringToPointer(argument, false);
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration_string(this, id, decoration, arg3);
        NativeUtils.Free(arg3);
    }

    public Result SetEnabledInterfaceVariables(AdamantiumVulkan.Spirv.Cross.SpirvSet set)
    {
        var arg1 = ReferenceEquals(set, null) ? new SpvcSetS() : (SpvcSetS)set;
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_enabled_interface_variables(this, arg1);
    }

    public Result SetEntryPoint(string name, SpvExecutionModel model)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(name, false);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_entry_point(this, arg1, model);
        NativeUtils.Free(arg1);
        return result;
    }

    public void SetExecutionMode(SpvExecutionMode mode)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode(this, mode);
    }

    public void SetExecutionModeWithArguments(SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode_with_arguments(this, mode, arg0, arg1, arg2);
    }

    public void SetMemberDecoration(SpvcTypeId id, uint member_index, SpvDecoration decoration, uint argument)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration(this, id, member_index, decoration, argument);
    }

    public void SetMemberDecorationString(SpvcTypeId id, uint member_index, SpvDecoration decoration, string argument)
    {
        var arg4 = (sbyte*)NativeUtils.StringToPointer(argument, false);
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration_string(this, id, member_index, decoration, arg4);
        NativeUtils.Free(arg4);
    }

    public void SetMemberName(SpvcTypeId id, uint member_index, string argument)
    {
        var arg3 = (sbyte*)NativeUtils.StringToPointer(argument, false);
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_name(this, id, member_index, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetName(SpvId id, string argument)
    {
        var arg2 = (sbyte*)NativeUtils.StringToPointer(argument, false);
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_name(this, id, arg2);
        NativeUtils.Free(arg2);
    }

    public Result TypeStructMemberArrayStride(AdamantiumVulkan.Spirv.Cross.SpirvType type, uint index, ref uint stride)
    {
        var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
        var arg3 = NativeUtils.StructOrEnumToPointer(stride);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_array_stride(this, arg1, index, arg3);
        stride = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result TypeStructMemberMatrixStride(AdamantiumVulkan.Spirv.Cross.SpirvType type, uint index, ref uint stride)
    {
        var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
        var arg3 = NativeUtils.StructOrEnumToPointer(stride);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_matrix_stride(this, arg1, index, arg3);
        stride = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result TypeStructMemberOffset(AdamantiumVulkan.Spirv.Cross.SpirvType type, uint index, ref uint offset)
    {
        var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
        var arg3 = NativeUtils.StructOrEnumToPointer(offset);
        var result = AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_offset(this, arg1, index, arg3);
        offset = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public void UnsetDecoration(SpvId id, SpvDecoration decoration)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_decoration(this, id, decoration);
    }

    public void UnsetExecutionMode(SpvExecutionMode mode)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_execution_mode(this, mode);
    }

    public void UnsetMemberDecoration(SpvcTypeId id, uint member_index, SpvDecoration decoration)
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_member_decoration(this, id, member_index, decoration);
    }

    public void UpdateActiveBuiltins()
    {
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_update_active_builtins(this);
    }

    public SpvcBool VariableIsDepthOrCompare(SpvcVariableId id)
    {
        return AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_compiler_variable_is_depth_or_compare(this, id);
    }

    public ref readonly SpvcCompilerS GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS(SpirvCompiler s)
    {
        return s?.__Instance ?? new AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS();
    }

    public static implicit operator SpirvCompiler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcCompilerS s)
    {
        return new SpirvCompiler(s);
    }

}



