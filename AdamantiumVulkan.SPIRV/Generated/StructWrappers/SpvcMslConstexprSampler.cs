// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Spirv.Cross.Interop;

namespace AdamantiumVulkan.Spirv.Cross;

public unsafe partial class SpvcMslConstexprSampler : QBDisposableObject
{
    public SpvcMslConstexprSampler()
    {
    }

    public SpvcMslConstexprSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler _internal)
    {
        Coord = _internal.coord;
        Min_filter = _internal.min_filter;
        Mag_filter = _internal.mag_filter;
        Mip_filter = _internal.mip_filter;
        S_address = _internal.s_address;
        T_address = _internal.t_address;
        R_address = _internal.r_address;
        Compare_func = _internal.compare_func;
        Border_color = _internal.border_color;
        Lod_clamp_min = _internal.lod_clamp_min;
        Lod_clamp_max = _internal.lod_clamp_max;
        Max_anisotropy = _internal.max_anisotropy;
        Compare_enable = _internal.compare_enable;
        Lod_clamp_enable = _internal.lod_clamp_enable;
        Anisotropy_enable = _internal.anisotropy_enable;
    }

    public MslSamplerCoord Coord { get; set; }
    public MslSamplerFilter Min_filter { get; set; }
    public MslSamplerFilter Mag_filter { get; set; }
    public MslSamplerMipFilter Mip_filter { get; set; }
    public MslSamplerAddress S_address { get; set; }
    public MslSamplerAddress T_address { get; set; }
    public MslSamplerAddress R_address { get; set; }
    public MslSamplerCompareFunc Compare_func { get; set; }
    public MslSamplerBorderColor Border_color { get; set; }
    public float Lod_clamp_min { get; set; }
    public float Lod_clamp_max { get; set; }
    public int Max_anisotropy { get; set; }
    public SpvcBool Compare_enable { get; set; }
    public SpvcBool Lod_clamp_enable { get; set; }
    public SpvcBool Anisotropy_enable { get; set; }
    ///<summary>
    /// Initializes the constexpr sampler struct. The defaults are non-zero.
    ///</summary>
    public void MslConstexprSamplerInit()
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(ToNative());
        AdamantiumVulkan.Spirv.Cross.Interop.SpirvCrossInterop.spvc_msl_constexpr_sampler_init(arg0);
        NativeUtils.Free(arg0);
    }


    public AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler ToNative()
    {
        var _internal = new AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler();
        if (Coord != default)
        {
            _internal.coord = Coord;
        }
        if (Min_filter != default)
        {
            _internal.min_filter = Min_filter;
        }
        if (Mag_filter != default)
        {
            _internal.mag_filter = Mag_filter;
        }
        if (Mip_filter != default)
        {
            _internal.mip_filter = Mip_filter;
        }
        if (S_address != default)
        {
            _internal.s_address = S_address;
        }
        if (T_address != default)
        {
            _internal.t_address = T_address;
        }
        if (R_address != default)
        {
            _internal.r_address = R_address;
        }
        if (Compare_func != default)
        {
            _internal.compare_func = Compare_func;
        }
        if (Border_color != default)
        {
            _internal.border_color = Border_color;
        }
        if (Lod_clamp_min != default)
        {
            _internal.lod_clamp_min = Lod_clamp_min;
        }
        if (Lod_clamp_max != default)
        {
            _internal.lod_clamp_max = Lod_clamp_max;
        }
        if (Max_anisotropy != default)
        {
            _internal.max_anisotropy = Max_anisotropy;
        }
        if (Compare_enable != (bool)default)
        {
            _internal.compare_enable = Compare_enable;
        }
        if (Lod_clamp_enable != (bool)default)
        {
            _internal.lod_clamp_enable = Lod_clamp_enable;
        }
        if (Anisotropy_enable != (bool)default)
        {
            _internal.anisotropy_enable = Anisotropy_enable;
        }
        return _internal;
    }

    public static implicit operator SpvcMslConstexprSampler(AdamantiumVulkan.Spirv.Cross.Interop.SpvcMslConstexprSampler s)
    {
        return new SpvcMslConstexprSampler(s);
    }

}



