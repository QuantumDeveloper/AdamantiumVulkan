// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Core
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Core.Interop;

    public partial class Instance
    {
        internal VkInstance_T __Instance;

        public Instance()
        {
        }

        public Instance(AdamantiumVulkan.Core.Interop.VkInstance_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public Result CreateDebugReportCallbackEXT(in DebugReportCallbackCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DebugReportCallbackEXT pCallback)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDebugReportCallbackEXT_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDebugReportCallbackEXT(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pCallback = new DebugReportCallbackEXT(arg3);
            return result;
        }

        public Result CreateDebugUtilsMessengerEXT(in DebugUtilsMessengerCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DebugUtilsMessengerEXT pMessenger)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDebugUtilsMessengerEXT_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDebugUtilsMessengerEXT(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pMessenger = new DebugUtilsMessengerEXT(arg3);
            return result;
        }

        public Result CreateDisplayPlaneSurfaceKHR(in DisplaySurfaceCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SurfaceKHR pSurface)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSurfaceKHR_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDisplayPlaneSurfaceKHR(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSurface = new SurfaceKHR(arg3);
            return result;
        }

        public Result CreateHeadlessSurfaceEXT(in HeadlessSurfaceCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SurfaceKHR pSurface)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSurfaceKHR_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateHeadlessSurfaceEXT(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSurface = new SurfaceKHR(arg3);
            return result;
        }

        public void DebugReportMessageEXT(uint flags, DebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, string pLayerPrefix, string pMessage)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugReportMessageEXT(this, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
        }

        public void DestroyDebugReportCallbackEXT(AdamantiumVulkan.Core.DebugReportCallbackEXT callback, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(callback, null) ? new VkDebugReportCallbackEXT_T() : (VkDebugReportCallbackEXT_T)callback;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDebugReportCallbackEXT(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDebugUtilsMessengerEXT(AdamantiumVulkan.Core.DebugUtilsMessengerEXT messenger, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(messenger, null) ? new VkDebugUtilsMessengerEXT_T() : (VkDebugUtilsMessengerEXT_T)messenger;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDebugUtilsMessengerEXT(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyInstance(in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyInstance(this, arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void DestroySurfaceKHR(AdamantiumVulkan.Core.SurfaceKHR surface, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySurfaceKHR(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result EnumeratePhysicalDeviceGroups(ref uint pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties)
        {
            var arg1 = ReferenceEquals(pPhysicalDeviceGroupProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pPhysicalDeviceGroupProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDeviceGroups(this, ref pPhysicalDeviceGroupCount, arg1);
            pPhysicalDeviceGroupProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result EnumeratePhysicalDeviceGroupsKHR(ref uint pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties)
        {
            var arg1 = ReferenceEquals(pPhysicalDeviceGroupProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pPhysicalDeviceGroupProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDeviceGroupsKHR(this, ref pPhysicalDeviceGroupCount, arg1);
            pPhysicalDeviceGroupProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result EnumeratePhysicalDevices(ref uint pPhysicalDeviceCount, AdamantiumVulkan.Core.PhysicalDevice[] pPhysicalDevices)
        {
            AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T[] arg1 = null;
            arg1 = ReferenceEquals(pPhysicalDevices, null) ? null : new AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T[pPhysicalDevices.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDevices(this, ref pPhysicalDeviceCount, arg1);
            if (!ReferenceEquals(pPhysicalDevices, null))
            {
                for (var i = 0U; i < pPhysicalDevices.Length; ++i)
                {
                    pPhysicalDevices[i] = new PhysicalDevice(arg1[i]);
                }
            }
            return result;
        }

        public Result EnumeratePhysicalDevices(ref uint pPhysicalDeviceCount, ref AdamantiumVulkan.Core.PhysicalDevice pPhysicalDevices)
        {
            var arg1 = ReferenceEquals(pPhysicalDevices, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkPhysicalDevice_T)pPhysicalDevices);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDevices(this, ref pPhysicalDeviceCount, ref arg1);
            var temparg1 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T>(arg1);
            pPhysicalDevices = temparg1;
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public System.IntPtr GetInstanceProcAddr(string pName)
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetInstanceProcAddr(this, pName);
        }

        public void SubmitDebugUtilsMessageEXT(DebugUtilsMessageSeverityFlagBitsEXT messageSeverity, uint messageTypes, in DebugUtilsMessengerCallbackDataEXT pCallbackData)
        {
            var arg2 = ReferenceEquals(pCallbackData, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCallbackData.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkSubmitDebugUtilsMessageEXT(this, messageSeverity, messageTypes, arg2);
            pCallbackData?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkInstance_T(Instance i)
        {
            return i?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkInstance_T();
        }

        public static implicit operator Instance(AdamantiumVulkan.Core.Interop.VkInstance_T i)
        {
            return new Instance(){__Instance = i};
        }

    }

    public partial class PhysicalDevice
    {
        internal VkPhysicalDevice_T __Instance;

        public PhysicalDevice()
        {
        }

        public PhysicalDevice(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public Result CreateDevice(in DeviceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Device pDevice)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDevice_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDevice(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pDevice = new Device(arg3);
            return result;
        }

        public Result CreateDisplayModeKHR(AdamantiumVulkan.Core.DisplayKHR display, in DisplayModeCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DisplayModeKHR pMode)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            var arg2 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg3 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDisplayModeKHR_T arg4;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDisplayModeKHR(this, arg1, arg2, arg3, out arg4);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg3);
            pMode = new DisplayModeKHR(arg4);
            return result;
        }

        public Result EnumerateDeviceExtensionProperties(string pLayerName, ref uint pPropertyCount, ExtensionProperties[] pProperties)
        {
            AdamantiumVulkan.Core.Interop.VkExtensionProperties[] arg1 = null;
            arg1 = ReferenceEquals(pProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkExtensionProperties[pPropertyCount];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceExtensionProperties(this, pLayerName, ref pPropertyCount, arg1);
            if (!ReferenceEquals(pProperties, null))
            {
                for (var i = 0U; i < pPropertyCount; ++i)
                {
                    pProperties[i] = new ExtensionProperties(arg1[i]);
                }
            }
            return result;
        }

        public Result EnumerateDeviceExtensionProperties(string pLayerName, ref uint pPropertyCount, ref ExtensionProperties pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceExtensionProperties(this, pLayerName, ref pPropertyCount, ref arg1);
            var temparg1 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkExtensionProperties>(arg1);
            pProperties = new AdamantiumVulkan.Core.ExtensionProperties(temparg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result EnumerateDeviceLayerProperties(ref uint pPropertyCount, LayerProperties[] pProperties)
        {
            AdamantiumVulkan.Core.Interop.VkLayerProperties[] arg1 = null;
            arg1 = ReferenceEquals(pProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkLayerProperties[pPropertyCount];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceLayerProperties(this, ref pPropertyCount, arg1);
            if (!ReferenceEquals(pProperties, null))
            {
                for (var i = 0U; i < pPropertyCount; ++i)
                {
                    pProperties[i] = new LayerProperties(arg1[i]);
                }
            }
            return result;
        }

        public Result EnumerateDeviceLayerProperties(ref uint pPropertyCount, ref LayerProperties pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceLayerProperties(this, ref pPropertyCount, ref arg1);
            var temparg1 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkLayerProperties>(arg1);
            pProperties = new AdamantiumVulkan.Core.LayerProperties(temparg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetDisplayModeProperties2KHR(AdamantiumVulkan.Core.DisplayKHR display, ref uint pPropertyCount, DisplayModeProperties2KHR pProperties)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayModeProperties2KHR(this, arg1, ref pPropertyCount, arg2);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetDisplayModePropertiesKHR(AdamantiumVulkan.Core.DisplayKHR display, ref uint pPropertyCount, DisplayModePropertiesKHR pProperties)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayModePropertiesKHR(this, arg1, ref pPropertyCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetDisplayPlaneCapabilities2KHR(in DisplayPlaneInfo2KHR pDisplayPlaneInfo, DisplayPlaneCapabilities2KHR pCapabilities)
        {
            var arg1 = ReferenceEquals(pDisplayPlaneInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDisplayPlaneInfo.ToInternal());
            var arg2 = ReferenceEquals(pCapabilities, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCapabilities.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneCapabilities2KHR(this, arg1, arg2);
            pDisplayPlaneInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pCapabilities?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetDisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.DisplayModeKHR mode, uint planeIndex, DisplayPlaneCapabilitiesKHR pCapabilities)
        {
            var arg1 = ReferenceEquals(mode, null) ? new VkDisplayModeKHR_T() : (VkDisplayModeKHR_T)mode;
            var arg2 = ReferenceEquals(pCapabilities, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCapabilities.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneCapabilitiesKHR(this, arg1, planeIndex, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetDisplayPlaneSupportedDisplaysKHR(uint planeIndex, ref uint pDisplayCount, out AdamantiumVulkan.Core.DisplayKHR[] pDisplays)
        {
            var arg1 = System.IntPtr.Zero;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneSupportedDisplaysKHR(this, planeIndex, ref pDisplayCount, ref arg1);
            var _pDisplays = new AdamantiumVulkan.Core.Interop.VkDisplayKHR_T[pDisplayCount];
            MarshalUtils.IntPtrToManagedArray2<AdamantiumVulkan.Core.Interop.VkDisplayKHR_T>(arg1, _pDisplays);
            pDisplays = new DisplayKHR[pDisplayCount];
            for (var i = 0U; i< pDisplayCount; ++i)
            {
                pDisplays[i] = new DisplayKHR(_pDisplays[i]);
            }
            return result;
        }

        public Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(ref uint pTimeDomainCount, ref TimeDomainEXT pTimeDomains)
        {
            var arg1 = (uint)pTimeDomains;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(this, ref pTimeDomainCount, ref arg1);
            pTimeDomains = (TimeDomainEXT)arg1;
            return result;
        }

        public Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(ref uint pPropertyCount, CooperativeMatrixPropertiesNV pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(this, ref pPropertyCount, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPhysicalDeviceDisplayPlaneProperties2KHR(ref uint pPropertyCount, DisplayPlaneProperties2KHR pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(this, ref pPropertyCount, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPhysicalDeviceDisplayPlanePropertiesKHR(ref uint pPropertyCount, out DisplayPlanePropertiesKHR[] pProperties)
        {
            var arg1 = System.IntPtr.Zero;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(this, ref pPropertyCount, ref arg1);
            var _pProperties = new AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR[pPropertyCount];
            MarshalUtils.IntPtrToManagedArray<AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR>(arg1, _pProperties);
            pProperties = new DisplayPlanePropertiesKHR[pPropertyCount];
            for (var i = 0U; i< pPropertyCount; ++i)
            {
                pProperties[i] = new DisplayPlanePropertiesKHR(_pProperties[i]);
            }
            return result;
        }

        public Result GetPhysicalDeviceDisplayProperties2KHR(ref uint pPropertyCount, DisplayProperties2KHR pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayProperties2KHR(this, ref pPropertyCount, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPhysicalDeviceDisplayPropertiesKHR(ref uint pPropertyCount, DisplayPropertiesKHR pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPropertiesKHR(this, ref pPropertyCount, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void GetPhysicalDeviceExternalBufferProperties(in PhysicalDeviceExternalBufferInfo pExternalBufferInfo, ExternalBufferProperties pExternalBufferProperties)
        {
            var arg1 = ReferenceEquals(pExternalBufferInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalBufferInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalBufferProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalBufferProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalBufferProperties(this, arg1, arg2);
            pExternalBufferInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalBufferProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceExternalBufferPropertiesKHR(in PhysicalDeviceExternalBufferInfo pExternalBufferInfo, ExternalBufferProperties pExternalBufferProperties)
        {
            var arg1 = ReferenceEquals(pExternalBufferInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalBufferInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalBufferProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalBufferProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalBufferPropertiesKHR(this, arg1, arg2);
            pExternalBufferInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalBufferProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceExternalFenceProperties(in PhysicalDeviceExternalFenceInfo pExternalFenceInfo, ExternalFenceProperties pExternalFenceProperties)
        {
            var arg1 = ReferenceEquals(pExternalFenceInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalFenceInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalFenceProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalFenceProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalFenceProperties(this, arg1, arg2);
            pExternalFenceInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalFenceProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceExternalFencePropertiesKHR(in PhysicalDeviceExternalFenceInfo pExternalFenceInfo, ExternalFenceProperties pExternalFenceProperties)
        {
            var arg1 = ReferenceEquals(pExternalFenceInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalFenceInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalFenceProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalFenceProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalFencePropertiesKHR(this, arg1, arg2);
            pExternalFenceInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalFenceProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetPhysicalDeviceExternalImageFormatPropertiesNV(Format format, ImageType type, ImageTiling tiling, uint usage, uint flags, uint externalHandleType, ExternalImageFormatPropertiesNV pExternalImageFormatProperties)
        {
            var arg4 = ReferenceEquals(pExternalImageFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalImageFormatProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(this, format, type, tiling, usage, flags, externalHandleType, arg4);
            Marshal.FreeHGlobal(arg4);
            return result;
        }

        public void GetPhysicalDeviceExternalSemaphoreProperties(in PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ExternalSemaphoreProperties pExternalSemaphoreProperties)
        {
            var arg1 = ReferenceEquals(pExternalSemaphoreInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalSemaphoreInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalSemaphoreProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalSemaphoreProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalSemaphoreProperties(this, arg1, arg2);
            pExternalSemaphoreInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalSemaphoreProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(in PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ExternalSemaphoreProperties pExternalSemaphoreProperties)
        {
            var arg1 = ReferenceEquals(pExternalSemaphoreInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalSemaphoreInfo.ToInternal());
            var arg2 = ReferenceEquals(pExternalSemaphoreProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExternalSemaphoreProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(this, arg1, arg2);
            pExternalSemaphoreInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pExternalSemaphoreProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceFeatures(out PhysicalDeviceFeatures pFeatures)
        {
            VkPhysicalDeviceFeatures arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures(this, out arg1);
            pFeatures = new PhysicalDeviceFeatures(arg1);
        }

        public void GetPhysicalDeviceFeatures2(PhysicalDeviceFeatures2 pFeatures)
        {
            var arg1 = ReferenceEquals(pFeatures, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFeatures.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures2(this, arg1);
            pFeatures?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceFeatures2KHR(PhysicalDeviceFeatures2 pFeatures)
        {
            var arg1 = ReferenceEquals(pFeatures, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFeatures.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures2KHR(this, arg1);
            pFeatures?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceFormatProperties(Format format, FormatProperties pFormatProperties)
        {
            var arg1 = ReferenceEquals(pFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFormatProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties(this, format, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceFormatProperties2(Format format, FormatProperties2 pFormatProperties)
        {
            var arg1 = ReferenceEquals(pFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFormatProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties2(this, format, arg1);
            pFormatProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceFormatProperties2KHR(Format format, FormatProperties2 pFormatProperties)
        {
            var arg1 = ReferenceEquals(pFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFormatProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties2KHR(this, format, arg1);
            pFormatProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceGeneratedCommandsPropertiesNVX(DeviceGeneratedCommandsFeaturesNVX pFeatures, DeviceGeneratedCommandsLimitsNVX pLimits)
        {
            var arg1 = ReferenceEquals(pFeatures, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFeatures.ToInternal());
            var arg2 = ReferenceEquals(pLimits, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLimits.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(this, arg1, arg2);
            pFeatures?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pLimits?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetPhysicalDeviceImageFormatProperties(Format format, ImageType type, ImageTiling tiling, uint usage, uint flags, ImageFormatProperties pImageFormatProperties)
        {
            var arg3 = ReferenceEquals(pImageFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageFormatProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties(this, format, type, tiling, usage, flags, arg3);
            Marshal.FreeHGlobal(arg3);
            return result;
        }

        public Result GetPhysicalDeviceImageFormatProperties2(in PhysicalDeviceImageFormatInfo2 pImageFormatInfo, ImageFormatProperties2 pImageFormatProperties)
        {
            var arg1 = ReferenceEquals(pImageFormatInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageFormatInfo.ToInternal());
            var arg2 = ReferenceEquals(pImageFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageFormatProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties2(this, arg1, arg2);
            pImageFormatInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pImageFormatProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPhysicalDeviceImageFormatProperties2KHR(in PhysicalDeviceImageFormatInfo2 pImageFormatInfo, ImageFormatProperties2 pImageFormatProperties)
        {
            var arg1 = ReferenceEquals(pImageFormatInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageFormatInfo.ToInternal());
            var arg2 = ReferenceEquals(pImageFormatProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageFormatProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties2KHR(this, arg1, arg2);
            pImageFormatInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pImageFormatProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public void GetPhysicalDeviceMemoryProperties(out PhysicalDeviceMemoryProperties pMemoryProperties)
        {
            VkPhysicalDeviceMemoryProperties arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties(this, out arg1);
            pMemoryProperties = new PhysicalDeviceMemoryProperties(arg1);
        }

        public void GetPhysicalDeviceMemoryProperties2(out PhysicalDeviceMemoryProperties2 pMemoryProperties)
        {
            VkPhysicalDeviceMemoryProperties2 arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties2(this, out arg1);
            pMemoryProperties = new PhysicalDeviceMemoryProperties2(arg1);
        }

        public void GetPhysicalDeviceMemoryProperties2KHR(out PhysicalDeviceMemoryProperties2 pMemoryProperties)
        {
            VkPhysicalDeviceMemoryProperties2 arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties2KHR(this, out arg1);
            pMemoryProperties = new PhysicalDeviceMemoryProperties2(arg1);
        }

        public void GetPhysicalDeviceMultisamplePropertiesEXT(SampleCountFlagBits samples, MultisamplePropertiesEXT pMultisampleProperties)
        {
            var arg1 = ReferenceEquals(pMultisampleProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMultisampleProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMultisamplePropertiesEXT(this, samples, arg1);
            pMultisampleProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public Result GetPhysicalDevicePresentRectanglesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pRectCount, Rect2D pRects)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = ReferenceEquals(pRects, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRects.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDevicePresentRectanglesKHR(this, arg1, ref pRectCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public void GetPhysicalDeviceProperties(out PhysicalDeviceProperties pProperties)
        {
            VkPhysicalDeviceProperties arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties(this, out arg1);
            pProperties = new PhysicalDeviceProperties(arg1);
        }

        public void GetPhysicalDeviceProperties2(PhysicalDeviceProperties2 pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties2(this, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceProperties2KHR(PhysicalDeviceProperties2 pProperties)
        {
            var arg1 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties2KHR(this, arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceQueueFamilyProperties(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties[] pQueueFamilyProperties)
        {
            AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties[] arg1 = null;
            arg1 = ReferenceEquals(pQueueFamilyProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties[pQueueFamilyProperties.Length];
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties(this, ref pQueueFamilyPropertyCount, arg1);
            if (!ReferenceEquals(pQueueFamilyProperties, null))
            {
                for (var i = 0U; i < pQueueFamilyProperties.Length; ++i)
                {
                    pQueueFamilyProperties[i] = new QueueFamilyProperties(arg1[i]);
                }
            }
        }

        public void GetPhysicalDeviceQueueFamilyProperties(ref uint pQueueFamilyPropertyCount, ref QueueFamilyProperties pQueueFamilyProperties)
        {
            var arg1 = ReferenceEquals(pQueueFamilyProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pQueueFamilyProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties(this, ref pQueueFamilyPropertyCount, ref arg1);
            var temparg1 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties>(arg1);
            pQueueFamilyProperties = new AdamantiumVulkan.Core.QueueFamilyProperties(temparg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceQueueFamilyProperties2(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties2[] pQueueFamilyProperties)
        {
            AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2[] arg1 = null;
            arg1 = ReferenceEquals(pQueueFamilyProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2[pQueueFamilyProperties.Length];
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2(this, ref pQueueFamilyPropertyCount, arg1);
            if (!ReferenceEquals(pQueueFamilyProperties, null))
            {
                for (var i = 0U; i < pQueueFamilyProperties.Length; ++i)
                {
                    pQueueFamilyProperties[i] = new QueueFamilyProperties2(arg1[i]);
                }
            }
        }

        public void GetPhysicalDeviceQueueFamilyProperties2(ref uint pQueueFamilyPropertyCount, ref QueueFamilyProperties2 pQueueFamilyProperties)
        {
            var arg1 = ReferenceEquals(pQueueFamilyProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pQueueFamilyProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2(this, ref pQueueFamilyPropertyCount, ref arg1);
            pQueueFamilyProperties?.Dispose();
            var temparg1 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2>(arg1);
            pQueueFamilyProperties = new AdamantiumVulkan.Core.QueueFamilyProperties2(temparg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceQueueFamilyProperties2KHR(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties2 pQueueFamilyProperties)
        {
            var arg1 = ReferenceEquals(pQueueFamilyProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pQueueFamilyProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2KHR(this, ref pQueueFamilyPropertyCount, arg1);
            pQueueFamilyProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void GetPhysicalDeviceSparseImageFormatProperties(Format format, ImageType type, SampleCountFlagBits samples, uint usage, ImageTiling tiling, ref uint pPropertyCount, SparseImageFormatProperties pProperties)
        {
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties(this, format, type, samples, usage, tiling, ref pPropertyCount, arg2);
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceSparseImageFormatProperties2(in PhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, SparseImageFormatProperties2 pProperties)
        {
            var arg1 = ReferenceEquals(pFormatInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFormatInfo.ToInternal());
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties2(this, arg1, ref pPropertyCount, arg2);
            pFormatInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetPhysicalDeviceSparseImageFormatProperties2KHR(in PhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, SparseImageFormatProperties2 pProperties)
        {
            var arg1 = ReferenceEquals(pFormatInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pFormatInfo.ToInternal());
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(this, arg1, ref pPropertyCount, arg2);
            pFormatInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(ref uint pCombinationCount, FramebufferMixedSamplesCombinationNV pCombinations)
        {
            var arg1 = ReferenceEquals(pCombinations, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCombinations.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(this, ref pCombinationCount, arg1);
            pCombinations?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPhysicalDeviceSurfaceCapabilities2EXT(AdamantiumVulkan.Core.SurfaceKHR surface, SurfaceCapabilities2EXT pSurfaceCapabilities)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = ReferenceEquals(pSurfaceCapabilities, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceCapabilities.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilities2EXT(this, arg1, arg2);
            pSurfaceCapabilities?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPhysicalDeviceSurfaceCapabilities2KHR(in PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, SurfaceCapabilities2KHR pSurfaceCapabilities)
        {
            var arg1 = ReferenceEquals(pSurfaceInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceInfo.ToInternal());
            var arg2 = ReferenceEquals(pSurfaceCapabilities, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceCapabilities.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilities2KHR(this, arg1, arg2);
            pSurfaceInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSurfaceCapabilities?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPhysicalDeviceSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, out SurfaceCapabilitiesKHR pSurfaceCapabilities)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            VkSurfaceCapabilitiesKHR arg2;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(this, arg1, out arg2);
            pSurfaceCapabilities = new SurfaceCapabilitiesKHR(arg2);
            return result;
        }

        public Result GetPhysicalDeviceSurfaceFormats2KHR(in PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref uint pSurfaceFormatCount, SurfaceFormat2KHR pSurfaceFormats)
        {
            var arg1 = ReferenceEquals(pSurfaceInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceInfo.ToInternal());
            var arg2 = ReferenceEquals(pSurfaceFormats, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceFormats.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceFormats2KHR(this, arg1, ref pSurfaceFormatCount, arg2);
            pSurfaceInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSurfaceFormats?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPhysicalDeviceSurfaceFormatsKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pSurfaceFormatCount, SurfaceFormatKHR[] pSurfaceFormats)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR[] arg2 = null;
            arg2 = ReferenceEquals(pSurfaceFormats, null) ? null : new AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR[pSurfaceFormats.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceFormatsKHR(this, arg1, ref pSurfaceFormatCount, arg2);
            if (!ReferenceEquals(pSurfaceFormats, null))
            {
                for (var i = 0U; i < pSurfaceFormats.Length; ++i)
                {
                    pSurfaceFormats[i] = new SurfaceFormatKHR(arg2[i]);
                }
            }
            return result;
        }

        public Result GetPhysicalDeviceSurfaceFormatsKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pSurfaceFormatCount, ref SurfaceFormatKHR pSurfaceFormats)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = ReferenceEquals(pSurfaceFormats, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSurfaceFormats.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceFormatsKHR(this, arg1, ref pSurfaceFormatCount, ref arg2);
            var temparg2 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR>(arg2);
            pSurfaceFormats = new AdamantiumVulkan.Core.SurfaceFormatKHR(temparg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPhysicalDeviceSurfacePresentModesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pPresentModeCount, PresentModeKHR[] pPresentModes)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = ReferenceEquals(pPresentModes, null) ? null : new uint[pPresentModes.Length];
            if (!ReferenceEquals(pPresentModes, null))
            {
                for (var i = 0; i < pPresentModes.Length; ++i)
                {
                    arg2[i] = (uint)pPresentModes[i];
                }
            }
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfacePresentModesKHR(this, arg1, ref pPresentModeCount, arg2);
        }

        public Result GetPhysicalDeviceSurfacePresentModesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pPresentModeCount, ref PresentModeKHR pPresentModes)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            var arg2 = (uint)pPresentModes;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfacePresentModesKHR(this, arg1, ref pPresentModeCount, ref arg2);
            pPresentModes = (PresentModeKHR)arg2;
            return result;
        }

        public Result GetPhysicalDeviceSurfaceSupportKHR(uint queueFamilyIndex, AdamantiumVulkan.Core.SurfaceKHR surface, ref bool pSupported)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceSupportKHR(this, queueFamilyIndex, arg1, ref pSupported);
        }

        public Result ReleaseDisplayEXT(AdamantiumVulkan.Core.DisplayKHR display)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleaseDisplayEXT(this, arg1);
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T(PhysicalDevice p)
        {
            return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T();
        }

        public static implicit operator PhysicalDevice(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T p)
        {
            return new PhysicalDevice(){__Instance = p};
        }

    }

    public partial class Device
    {
        internal VkDevice_T __Instance;

        public Device()
        {
        }

        public Device(AdamantiumVulkan.Core.Interop.VkDevice_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public Result AcquireNextImage2KHR(in AcquireNextImageInfoKHR pAcquireInfo, ref uint pImageIndex)
        {
            var arg1 = ReferenceEquals(pAcquireInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAcquireInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireNextImage2KHR(this, arg1, ref pImageIndex);
            pAcquireInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result AcquireNextImageKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ulong timeout, AdamantiumVulkan.Core.Semaphore semaphore, AdamantiumVulkan.Core.Fence fence, ref uint pImageIndex)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            var arg2 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
            var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireNextImageKHR(this, arg1, timeout, arg2, arg3, ref pImageIndex);
        }

        public Result AcquirePerformanceConfigurationINTEL(in PerformanceConfigurationAcquireInfoINTEL pAcquireInfo, out AdamantiumVulkan.Core.PerformanceConfigurationINTEL pConfiguration)
        {
            var arg1 = ReferenceEquals(pAcquireInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAcquireInfo.ToInternal());
            VkPerformanceConfigurationINTEL_T arg2;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquirePerformanceConfigurationINTEL(this, arg1, out arg2);
            pAcquireInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pConfiguration = new PerformanceConfigurationINTEL(arg2);
            return result;
        }

        public Result AllocateCommandBuffers(in CommandBufferAllocateInfo pAllocateInfo, AdamantiumVulkan.Core.CommandBuffer[] pCommandBuffers)
        {
            var arg1 = ReferenceEquals(pAllocateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocateInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VkCommandBuffer_T[] arg2 = null;
            arg2 = ReferenceEquals(pCommandBuffers, null) ? null : new AdamantiumVulkan.Core.Interop.VkCommandBuffer_T[pCommandBuffers.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateCommandBuffers(this, arg1, arg2);
            pAllocateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            if (!ReferenceEquals(pCommandBuffers, null))
            {
                for (var i = 0U; i < pCommandBuffers.Length; ++i)
                {
                    pCommandBuffers[i] = new CommandBuffer(arg2[i]);
                }
            }
            return result;
        }

        public Result AllocateCommandBuffers(in CommandBufferAllocateInfo pAllocateInfo, ref AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
        {
            var arg1 = ReferenceEquals(pAllocateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocateInfo.ToInternal());
            var arg2 = ReferenceEquals(pCommandBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkCommandBuffer_T)pCommandBuffers);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateCommandBuffers(this, arg1, ref arg2);
            pAllocateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            var temparg2 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkCommandBuffer_T>(arg2);
            pCommandBuffers = temparg2;
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result AllocateDescriptorSets(in DescriptorSetAllocateInfo pAllocateInfo, AdamantiumVulkan.Core.DescriptorSet[] pDescriptorSets)
        {
            var arg1 = ReferenceEquals(pAllocateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocateInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VkDescriptorSet_T[] arg2 = null;
            arg2 = ReferenceEquals(pDescriptorSets, null) ? null : new AdamantiumVulkan.Core.Interop.VkDescriptorSet_T[pDescriptorSets.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateDescriptorSets(this, arg1, arg2);
            pAllocateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            if (!ReferenceEquals(pDescriptorSets, null))
            {
                for (var i = 0U; i < pDescriptorSets.Length; ++i)
                {
                    pDescriptorSets[i] = new DescriptorSet(arg2[i]);
                }
            }
            return result;
        }

        public Result AllocateDescriptorSets(in DescriptorSetAllocateInfo pAllocateInfo, ref AdamantiumVulkan.Core.DescriptorSet pDescriptorSets)
        {
            var arg1 = ReferenceEquals(pAllocateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocateInfo.ToInternal());
            var arg2 = ReferenceEquals(pDescriptorSets, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkDescriptorSet_T)pDescriptorSets);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateDescriptorSets(this, arg1, ref arg2);
            pAllocateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            var temparg2 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkDescriptorSet_T>(arg2);
            pDescriptorSets = temparg2;
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result AllocateMemory(in MemoryAllocateInfo pAllocateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DeviceMemory pMemory)
        {
            var arg1 = ReferenceEquals(pAllocateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDeviceMemory_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateMemory(this, arg1, arg2, out arg3);
            pAllocateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pMemory = new DeviceMemory(arg3);
            return result;
        }

        public Result BindAccelerationStructureMemoryNV(uint bindInfoCount, in BindAccelerationStructureMemoryInfoNV pBindInfos)
        {
            var arg1 = ReferenceEquals(pBindInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindAccelerationStructureMemoryNV(this, bindInfoCount, arg1);
            pBindInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result BindBufferMemory(AdamantiumVulkan.Core.Buffer buffer, AdamantiumVulkan.Core.DeviceMemory memory, ulong memoryOffset)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg2 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory(this, arg1, arg2, memoryOffset);
        }

        public Result BindBufferMemory2(uint bindInfoCount, in BindBufferMemoryInfo pBindInfos)
        {
            var arg1 = ReferenceEquals(pBindInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory2(this, bindInfoCount, arg1);
            pBindInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result BindBufferMemory2KHR(uint bindInfoCount, in BindBufferMemoryInfo pBindInfos)
        {
            var arg1 = ReferenceEquals(pBindInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory2KHR(this, bindInfoCount, arg1);
            pBindInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result BindImageMemory(AdamantiumVulkan.Core.Image image, AdamantiumVulkan.Core.DeviceMemory memory, ulong memoryOffset)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory(this, arg1, arg2, memoryOffset);
        }

        public Result BindImageMemory2(uint bindInfoCount, in BindImageMemoryInfo pBindInfos)
        {
            var arg1 = ReferenceEquals(pBindInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory2(this, bindInfoCount, arg1);
            pBindInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result BindImageMemory2KHR(uint bindInfoCount, in BindImageMemoryInfo pBindInfos)
        {
            var arg1 = ReferenceEquals(pBindInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory2KHR(this, bindInfoCount, arg1);
            pBindInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result CompileDeferredNV(AdamantiumVulkan.Core.Pipeline pipeline, uint shader)
        {
            var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkCompileDeferredNV(this, arg1, shader);
        }

        public Result CreateAccelerationStructureNV(in AccelerationStructureCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.AccelerationStructureNV pAccelerationStructure)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkAccelerationStructureNV_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateAccelerationStructureNV(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAccelerationStructure = new AccelerationStructureNV(arg3);
            return result;
        }

        public Result CreateBuffer(in BufferCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Buffer pBuffer)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkBuffer_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateBuffer(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pBuffer = new Buffer(arg3);
            return result;
        }

        public Result CreateBufferView(in BufferViewCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.BufferView pView)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkBufferView_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateBufferView(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pView = new BufferView(arg3);
            return result;
        }

        public Result CreateCommandPool(in CommandPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CommandPool pCommandPool)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkCommandPool_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCommandPool(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pCommandPool = new CommandPool(arg3);
            return result;
        }

        public Result CreateComputePipelines(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in ComputePipelineCreateInfo pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline[] pPipelines)
        {
            var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
            var arg2 = ReferenceEquals(pCreateInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfos.ToInternal());
            var arg3 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            var arg4 = System.IntPtr.Zero;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateComputePipelines(this, arg1, createInfoCount, arg2, arg3, ref arg4);
            pCreateInfos?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg3);
            var _pPipelines = new AdamantiumVulkan.Core.Interop.VkPipeline_T[createInfoCount];
            MarshalUtils.IntPtrToManagedArray2<AdamantiumVulkan.Core.Interop.VkPipeline_T>(arg4, _pPipelines);
            pPipelines = new Pipeline[createInfoCount];
            for (var i = 0U; i< createInfoCount; ++i)
            {
                pPipelines[i] = new Pipeline(_pPipelines[i]);
            }
            return result;
        }

        public Result CreateDescriptorPool(in DescriptorPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorPool pDescriptorPool)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDescriptorPool_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorPool(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pDescriptorPool = new DescriptorPool(arg3);
            return result;
        }

        public Result CreateDescriptorSetLayout(in DescriptorSetLayoutCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorSetLayout pSetLayout)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDescriptorSetLayout_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorSetLayout(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSetLayout = new DescriptorSetLayout(arg3);
            return result;
        }

        public Result CreateDescriptorUpdateTemplate(in DescriptorUpdateTemplateCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDescriptorUpdateTemplate_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorUpdateTemplate(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pDescriptorUpdateTemplate = new DescriptorUpdateTemplate(arg3);
            return result;
        }

        public Result CreateDescriptorUpdateTemplateKHR(in DescriptorUpdateTemplateCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkDescriptorUpdateTemplate_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorUpdateTemplateKHR(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pDescriptorUpdateTemplate = new DescriptorUpdateTemplate(arg3);
            return result;
        }

        public Result CreateEvent(in EventCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Event pEvent)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkEvent_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateEvent(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pEvent = new Event(arg3);
            return result;
        }

        public Result CreateFence(in FenceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkFence_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateFence(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pFence = new Fence(arg3);
            return result;
        }

        public Result CreateFramebuffer(in FramebufferCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Framebuffer pFramebuffer)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkFramebuffer_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateFramebuffer(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pFramebuffer = new Framebuffer(arg3);
            return result;
        }

        public Result CreateGraphicsPipelines(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in GraphicsPipelineCreateInfo pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline[] pPipelines)
        {
            var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
            var arg2 = ReferenceEquals(pCreateInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfos.ToInternal());
            var arg3 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            var arg4 = System.IntPtr.Zero;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateGraphicsPipelines(this, arg1, createInfoCount, arg2, arg3, ref arg4);
            pCreateInfos?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg3);
            var _pPipelines = new AdamantiumVulkan.Core.Interop.VkPipeline_T[createInfoCount];
            MarshalUtils.IntPtrToManagedArray2<AdamantiumVulkan.Core.Interop.VkPipeline_T>(arg4, _pPipelines);
            pPipelines = new Pipeline[createInfoCount];
            for (var i = 0U; i< createInfoCount; ++i)
            {
                pPipelines[i] = new Pipeline(_pPipelines[i]);
            }
            return result;
        }

        public Result CreateImage(in ImageCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Image pImage)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkImage_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateImage(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pImage = new Image(arg3);
            return result;
        }

        public Result CreateImageView(in ImageViewCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ImageView pView)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkImageView_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateImageView(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pView = new ImageView(arg3);
            return result;
        }

        public Result CreateIndirectCommandsLayoutNVX(in IndirectCommandsLayoutCreateInfoNVX pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.IndirectCommandsLayoutNVX pIndirectCommandsLayout)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkIndirectCommandsLayoutNVX_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateIndirectCommandsLayoutNVX(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pIndirectCommandsLayout = new IndirectCommandsLayoutNVX(arg3);
            return result;
        }

        public Result CreateObjectTableNVX(in ObjectTableCreateInfoNVX pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ObjectTableNVX pObjectTable)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkObjectTableNVX_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateObjectTableNVX(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pObjectTable = new ObjectTableNVX(arg3);
            return result;
        }

        public Result CreatePipelineCache(in PipelineCacheCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PipelineCache pPipelineCache)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkPipelineCache_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePipelineCache(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pPipelineCache = new PipelineCache(arg3);
            return result;
        }

        public Result CreatePipelineLayout(in PipelineLayoutCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PipelineLayout pPipelineLayout)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkPipelineLayout_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePipelineLayout(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pPipelineLayout = new PipelineLayout(arg3);
            return result;
        }

        public Result CreateQueryPool(in QueryPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.QueryPool pQueryPool)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkQueryPool_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateQueryPool(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pQueryPool = new QueryPool(arg3);
            return result;
        }

        public Result CreateRayTracingPipelinesNV(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in RayTracingPipelineCreateInfoNV pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline pPipelines)
        {
            var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
            var arg2 = ReferenceEquals(pCreateInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfos.ToInternal());
            var arg3 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkPipeline_T arg4;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRayTracingPipelinesNV(this, arg1, createInfoCount, arg2, arg3, out arg4);
            pCreateInfos?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg3);
            pPipelines = new Pipeline(arg4);
            return result;
        }

        public Result CreateRenderPass(in RenderPassCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.RenderPass pRenderPass)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkRenderPass_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRenderPass(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pRenderPass = new RenderPass(arg3);
            return result;
        }

        public Result CreateRenderPass2KHR(in RenderPassCreateInfo2KHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.RenderPass pRenderPass)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkRenderPass_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRenderPass2KHR(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pRenderPass = new RenderPass(arg3);
            return result;
        }

        public Result CreateSampler(in SamplerCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Sampler pSampler)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSampler_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSampler(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSampler = new Sampler(arg3);
            return result;
        }

        public Result CreateSamplerYcbcrConversion(in SamplerYcbcrConversionCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SamplerYcbcrConversion pYcbcrConversion)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSamplerYcbcrConversion_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSamplerYcbcrConversion(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pYcbcrConversion = new SamplerYcbcrConversion(arg3);
            return result;
        }

        public Result CreateSamplerYcbcrConversionKHR(in SamplerYcbcrConversionCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SamplerYcbcrConversion pYcbcrConversion)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSamplerYcbcrConversion_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSamplerYcbcrConversionKHR(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pYcbcrConversion = new SamplerYcbcrConversion(arg3);
            return result;
        }

        public Result CreateSemaphore(in SemaphoreCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Semaphore pSemaphore)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSemaphore_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSemaphore(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSemaphore = new Semaphore(arg3);
            return result;
        }

        public Result CreateShaderModule(in ShaderModuleCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ShaderModule pShaderModule)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkShaderModule_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateShaderModule(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pShaderModule = new ShaderModule(arg3);
            return result;
        }

        public Result CreateSharedSwapchainsKHR(uint swapchainCount, in SwapchainCreateInfoKHR pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SwapchainKHR pSwapchains)
        {
            var arg1 = ReferenceEquals(pCreateInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfos.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSwapchainKHR_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSharedSwapchainsKHR(this, swapchainCount, arg1, arg2, out arg3);
            pCreateInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSwapchains = new SwapchainKHR(arg3);
            return result;
        }

        public Result CreateSwapchainKHR(in SwapchainCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SwapchainKHR pSwapchain)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSwapchainKHR_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSwapchainKHR(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSwapchain = new SwapchainKHR(arg3);
            return result;
        }

        public Result CreateValidationCacheEXT(in ValidationCacheCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ValidationCacheEXT pValidationCache)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkValidationCacheEXT_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateValidationCacheEXT(this, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pValidationCache = new ValidationCacheEXT(arg3);
            return result;
        }

        public Result DebugMarkerSetObjectNameEXT(in DebugMarkerObjectNameInfoEXT pNameInfo)
        {
            var arg1 = ReferenceEquals(pNameInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pNameInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugMarkerSetObjectNameEXT(this, arg1);
            pNameInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result DebugMarkerSetObjectTagEXT(in DebugMarkerObjectTagInfoEXT pTagInfo)
        {
            var arg1 = ReferenceEquals(pTagInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pTagInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugMarkerSetObjectTagEXT(this, arg1);
            pTagInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void DestroyAccelerationStructureNV(AdamantiumVulkan.Core.AccelerationStructureNV accelerationStructure, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(accelerationStructure, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)accelerationStructure;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyAccelerationStructureNV(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyBuffer(AdamantiumVulkan.Core.Buffer buffer, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyBuffer(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyBufferView(AdamantiumVulkan.Core.BufferView bufferView, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(bufferView, null) ? new VkBufferView_T() : (VkBufferView_T)bufferView;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyBufferView(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCommandPool(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDescriptorPool(AdamantiumVulkan.Core.DescriptorPool descriptorPool, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorPool(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDescriptorSetLayout(AdamantiumVulkan.Core.DescriptorSetLayout descriptorSetLayout, in AllocationCallbacks pAllocator)
        {
            var arg1 = ReferenceEquals(descriptorSetLayout, null) ? new VkDescriptorSetLayout_T() : (VkDescriptorSetLayout_T)descriptorSetLayout;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorSetLayout(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDescriptorUpdateTemplate(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorUpdateTemplate(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorUpdateTemplateKHR(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyDevice(in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDevice(this, arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void DestroyEvent(AdamantiumVulkan.Core.Event @event, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyEvent(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyFence(AdamantiumVulkan.Core.Fence fence, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyFence(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyFramebuffer(AdamantiumVulkan.Core.Framebuffer framebuffer, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(framebuffer, null) ? new VkFramebuffer_T() : (VkFramebuffer_T)framebuffer;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyFramebuffer(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyImage(AdamantiumVulkan.Core.Image image, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyImage(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyImageView(AdamantiumVulkan.Core.ImageView imageView, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyImageView(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyIndirectCommandsLayoutNVX(AdamantiumVulkan.Core.IndirectCommandsLayoutNVX indirectCommandsLayout, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(indirectCommandsLayout, null) ? new VkIndirectCommandsLayoutNVX_T() : (VkIndirectCommandsLayoutNVX_T)indirectCommandsLayout;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyIndirectCommandsLayoutNVX(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyObjectTableNVX(AdamantiumVulkan.Core.ObjectTableNVX objectTable, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(objectTable, null) ? new VkObjectTableNVX_T() : (VkObjectTableNVX_T)objectTable;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyObjectTableNVX(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyPipeline(AdamantiumVulkan.Core.Pipeline pipeline, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipeline(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyPipelineCache(AdamantiumVulkan.Core.PipelineCache pipelineCache, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipelineCache(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyPipelineLayout(AdamantiumVulkan.Core.PipelineLayout pipelineLayout, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(pipelineLayout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)pipelineLayout;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipelineLayout(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyQueryPool(AdamantiumVulkan.Core.QueryPool queryPool, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyQueryPool(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyRenderPass(AdamantiumVulkan.Core.RenderPass renderPass, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(renderPass, null) ? new VkRenderPass_T() : (VkRenderPass_T)renderPass;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyRenderPass(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroySampler(AdamantiumVulkan.Core.Sampler sampler, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(sampler, null) ? new VkSampler_T() : (VkSampler_T)sampler;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySampler(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroySamplerYcbcrConversion(AdamantiumVulkan.Core.SamplerYcbcrConversion ycbcrConversion, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(ycbcrConversion, null) ? new VkSamplerYcbcrConversion_T() : (VkSamplerYcbcrConversion_T)ycbcrConversion;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySamplerYcbcrConversion(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroySamplerYcbcrConversionKHR(AdamantiumVulkan.Core.SamplerYcbcrConversion ycbcrConversion, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(ycbcrConversion, null) ? new VkSamplerYcbcrConversion_T() : (VkSamplerYcbcrConversion_T)ycbcrConversion;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySamplerYcbcrConversionKHR(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroySemaphore(AdamantiumVulkan.Core.Semaphore semaphore, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySemaphore(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyShaderModule(AdamantiumVulkan.Core.ShaderModule shaderModule, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(shaderModule, null) ? new VkShaderModule_T() : (VkShaderModule_T)shaderModule;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyShaderModule(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroySwapchainKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySwapchainKHR(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void DestroyValidationCacheEXT(AdamantiumVulkan.Core.ValidationCacheEXT validationCache, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(validationCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)validationCache;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyValidationCacheEXT(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result DeviceWaitIdle()
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkDeviceWaitIdle(this);
        }

        public Result DisplayPowerControlEXT(AdamantiumVulkan.Core.DisplayKHR display, in DisplayPowerInfoEXT pDisplayPowerInfo)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            var arg2 = ReferenceEquals(pDisplayPowerInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDisplayPowerInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDisplayPowerControlEXT(this, arg1, arg2);
            pDisplayPowerInfo?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result FlushMappedMemoryRanges(uint memoryRangeCount, in MappedMemoryRange pMemoryRanges)
        {
            var arg1 = ReferenceEquals(pMemoryRanges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRanges.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkFlushMappedMemoryRanges(this, memoryRangeCount, arg1);
            pMemoryRanges?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void FreeCommandBuffers(AdamantiumVulkan.Core.CommandPool commandPool, uint commandBufferCount, AdamantiumVulkan.Core.CommandBuffer[] pCommandBuffers)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            AdamantiumVulkan.Core.Interop.VkCommandBuffer_T[] arg2 = null;
            arg2 = ReferenceEquals(pCommandBuffers, null) ? null : new AdamantiumVulkan.Core.Interop.VkCommandBuffer_T[pCommandBuffers.Length];
            if (!ReferenceEquals(pCommandBuffers, null))
            {
                for (var i = 0U; i < pCommandBuffers.Length; ++i)
                {
                    arg2[i] = pCommandBuffers[i];
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeCommandBuffers(this, arg1, commandBufferCount, arg2);
        }

        public void FreeCommandBuffers(AdamantiumVulkan.Core.CommandPool commandPool, uint commandBufferCount, AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            var arg2 = ReferenceEquals(pCommandBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkCommandBuffer_T)pCommandBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeCommandBuffers(this, arg1, commandBufferCount, arg2);
            Marshal.FreeHGlobal(arg2);
        }

        public Result FreeDescriptorSets(AdamantiumVulkan.Core.DescriptorPool descriptorPool, uint descriptorSetCount, in AdamantiumVulkan.Core.DescriptorSet pDescriptorSets)
        {
            var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
            var arg2 = ReferenceEquals(pDescriptorSets, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkDescriptorSet_T)pDescriptorSets);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeDescriptorSets(this, arg1, descriptorSetCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public void FreeMemory(AdamantiumVulkan.Core.DeviceMemory memory, in AllocationCallbacks pAllocator = null)
        {
            var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeMemory(this, arg1, arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetAccelerationStructureHandleNV(AdamantiumVulkan.Core.AccelerationStructureNV accelerationStructure, ulong dataSize, ref System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(accelerationStructure, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)accelerationStructure;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureHandleNV(this, arg1, dataSize, pData);
        }

        public void GetAccelerationStructureMemoryRequirementsNV(in AccelerationStructureMemoryRequirementsInfoNV pInfo, MemoryRequirements2 pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureMemoryRequirementsNV(this, arg1, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public ulong GetBufferDeviceAddressEXT(in BufferDeviceAddressInfoEXT pInfo)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferDeviceAddressEXT(this, arg1);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void GetBufferMemoryRequirements(AdamantiumVulkan.Core.Buffer buffer, out MemoryRequirements pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            VkMemoryRequirements arg2;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements(this, arg1, out arg2);
            pMemoryRequirements = new MemoryRequirements(arg2);
        }

        public void GetBufferMemoryRequirements2(in BufferMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements2(this, arg1, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetBufferMemoryRequirements2KHR(in BufferMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements2KHR(this, arg1, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetCalibratedTimestampsEXT(uint timestampCount, in CalibratedTimestampInfoEXT pTimestampInfos, ref ulong pTimestamps, ref ulong pMaxDeviation)
        {
            var arg1 = ReferenceEquals(pTimestampInfos, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pTimestampInfos.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetCalibratedTimestampsEXT(this, timestampCount, arg1, ref pTimestamps, ref pMaxDeviation);
            pTimestampInfos?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void GetDescriptorSetLayoutSupport(in DescriptorSetLayoutCreateInfo pCreateInfo, DescriptorSetLayoutSupport pSupport)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pSupport, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSupport.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutSupport(this, arg1, arg2);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSupport?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetDescriptorSetLayoutSupportKHR(in DescriptorSetLayoutCreateInfo pCreateInfo, DescriptorSetLayoutSupport pSupport)
        {
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pSupport, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSupport.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutSupportKHR(this, arg1, arg2);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSupport?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref uint pPeerMemoryFeatures)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPeerMemoryFeatures(this, heapIndex, localDeviceIndex, remoteDeviceIndex, ref pPeerMemoryFeatures);
        }

        public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref uint pPeerMemoryFeatures)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPeerMemoryFeaturesKHR(this, heapIndex, localDeviceIndex, remoteDeviceIndex, ref pPeerMemoryFeatures);
        }

        public Result GetDeviceGroupPresentCapabilitiesKHR(DeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities)
        {
            var arg1 = ReferenceEquals(pDeviceGroupPresentCapabilities, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDeviceGroupPresentCapabilities.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPresentCapabilitiesKHR(this, arg1);
            pDeviceGroupPresentCapabilities?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetDeviceGroupSurfacePresentModesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pModes)
        {
            var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupSurfacePresentModesKHR(this, arg1, ref pModes);
        }

        public void GetDeviceMemoryCommitment(AdamantiumVulkan.Core.DeviceMemory memory, ref ulong pCommittedMemoryInBytes)
        {
            var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceMemoryCommitment(this, arg1, ref pCommittedMemoryInBytes);
        }

        public System.IntPtr GetDeviceProcAddr(string pName)
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceProcAddr(this, pName);
        }

        public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, out AdamantiumVulkan.Core.Queue pQueue)
        {
            VkQueue_T arg1;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceQueue(this, queueFamilyIndex, queueIndex, out arg1);
            pQueue = new Queue(arg1);
        }

        public void GetDeviceQueue2(in DeviceQueueInfo2 pQueueInfo, out AdamantiumVulkan.Core.Queue pQueue)
        {
            var arg1 = ReferenceEquals(pQueueInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pQueueInfo.ToInternal());
            VkQueue_T arg2;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceQueue2(this, arg1, out arg2);
            pQueueInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pQueue = new Queue(arg2);
        }

        public Result GetEventStatus(AdamantiumVulkan.Core.Event @event)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetEventStatus(this, arg1);
        }

        public Result GetFenceFdKHR(in FenceGetFdInfoKHR pGetFdInfo, ref int pFd)
        {
            var arg1 = ReferenceEquals(pGetFdInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetFdInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetFenceFdKHR(this, arg1, ref pFd);
            pGetFdInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetFenceStatus(AdamantiumVulkan.Core.Fence fence)
        {
            var arg1 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetFenceStatus(this, arg1);
        }

        public Result GetImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Image image, ImageDrmFormatModifierPropertiesEXT pProperties)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageDrmFormatModifierPropertiesEXT(this, arg1, arg2);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public void GetImageMemoryRequirements(AdamantiumVulkan.Core.Image image, out MemoryRequirements pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            VkMemoryRequirements arg2;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements(this, arg1, out arg2);
            pMemoryRequirements = new MemoryRequirements(arg2);
        }

        public void GetImageMemoryRequirements2(in ImageMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements2(this, arg1, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetImageMemoryRequirements2KHR(in ImageMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements2KHR(this, arg1, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetImageSparseMemoryRequirements(AdamantiumVulkan.Core.Image image, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements pSparseMemoryRequirements)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pSparseMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSparseMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements(this, arg1, ref pSparseMemoryRequirementCount, arg2);
            Marshal.FreeHGlobal(arg2);
        }

        public void GetImageSparseMemoryRequirements2(in ImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pSparseMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSparseMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements2(this, arg1, ref pSparseMemoryRequirementCount, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSparseMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetImageSparseMemoryRequirements2KHR(in ImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(pSparseMemoryRequirements, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSparseMemoryRequirements.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements2KHR(this, arg1, ref pSparseMemoryRequirementCount, arg2);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSparseMemoryRequirements?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void GetImageSubresourceLayout(AdamantiumVulkan.Core.Image image, in ImageSubresource pSubresource, SubresourceLayout pLayout)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pSubresource, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubresource.ToInternal());
            var arg3 = ReferenceEquals(pLayout, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLayout.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSubresourceLayout(this, arg1, arg2, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public uint GetImageViewHandleNVX(in ImageViewHandleInfoNVX pInfo)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageViewHandleNVX(this, arg1);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetMemoryFdKHR(in MemoryGetFdInfoKHR pGetFdInfo, ref int pFd)
        {
            var arg1 = ReferenceEquals(pGetFdInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetFdInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryFdKHR(this, arg1, ref pFd);
            pGetFdInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetMemoryFdPropertiesKHR(ExternalMemoryHandleTypeFlagBits handleType, int fd, MemoryFdPropertiesKHR pMemoryFdProperties)
        {
            var arg1 = ReferenceEquals(pMemoryFdProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryFdProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryFdPropertiesKHR(this, handleType, fd, arg1);
            pMemoryFdProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetMemoryHostPointerPropertiesEXT(ExternalMemoryHandleTypeFlagBits handleType, in System.IntPtr pHostPointer, MemoryHostPointerPropertiesEXT pMemoryHostPointerProperties)
        {
            var arg1 = ReferenceEquals(pMemoryHostPointerProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryHostPointerProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryHostPointerPropertiesEXT(this, handleType, pHostPointer, arg1);
            pMemoryHostPointerProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPastPresentationTimingGOOGLE(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pPresentationTimingCount, PastPresentationTimingGOOGLE pPresentationTimings)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            var arg2 = ReferenceEquals(pPresentationTimings, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pPresentationTimings.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPastPresentationTimingGOOGLE(this, arg1, ref pPresentationTimingCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPerformanceParameterINTEL(PerformanceParameterTypeINTEL parameter, PerformanceValueINTEL pValue)
        {
            var arg1 = ReferenceEquals(pValue, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pValue.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPerformanceParameterINTEL(this, parameter, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetPipelineCacheData(AdamantiumVulkan.Core.PipelineCache pipelineCache, ref ulong pDataSize, ref System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineCacheData(this, arg1, ref pDataSize, pData);
        }

        public Result GetPipelineExecutableInternalRepresentationsKHR(in PipelineExecutableInfoKHR pExecutableInfo, ref uint pInternalRepresentationCount, PipelineExecutableInternalRepresentationKHR pInternalRepresentations)
        {
            var arg1 = ReferenceEquals(pExecutableInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExecutableInfo.ToInternal());
            var arg2 = ReferenceEquals(pInternalRepresentations, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInternalRepresentations.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutableInternalRepresentationsKHR(this, arg1, ref pInternalRepresentationCount, arg2);
            pExecutableInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pInternalRepresentations?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPipelineExecutablePropertiesKHR(in PipelineInfoKHR pPipelineInfo, ref uint pExecutableCount, PipelineExecutablePropertiesKHR pProperties)
        {
            var arg1 = ReferenceEquals(pPipelineInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pPipelineInfo.ToInternal());
            var arg2 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutablePropertiesKHR(this, arg1, ref pExecutableCount, arg2);
            pPipelineInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pProperties?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetPipelineExecutableStatisticsKHR(in PipelineExecutableInfoKHR pExecutableInfo, ref uint pStatisticCount, PipelineExecutableStatisticKHR pStatistics)
        {
            var arg1 = ReferenceEquals(pExecutableInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExecutableInfo.ToInternal());
            var arg2 = ReferenceEquals(pStatistics, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pStatistics.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutableStatisticsKHR(this, arg1, ref pStatisticCount, arg2);
            pExecutableInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pStatistics?.Dispose();
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetQueryPoolResults(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, ref System.IntPtr pData, ulong stride, uint flags)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetQueryPoolResults(this, arg1, firstQuery, queryCount, dataSize, pData, stride, flags);
        }

        public Result GetRayTracingShaderGroupHandlesNV(AdamantiumVulkan.Core.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, ref System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRayTracingShaderGroupHandlesNV(this, arg1, firstGroup, groupCount, dataSize, pData);
        }

        public Result GetRefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.SwapchainKHR swapchain, RefreshCycleDurationGOOGLE pDisplayTimingProperties)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            var arg2 = ReferenceEquals(pDisplayTimingProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDisplayTimingProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRefreshCycleDurationGOOGLE(this, arg1, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public void GetRenderAreaGranularity(AdamantiumVulkan.Core.RenderPass renderPass, Extent2D pGranularity)
        {
            var arg1 = ReferenceEquals(renderPass, null) ? new VkRenderPass_T() : (VkRenderPass_T)renderPass;
            var arg2 = ReferenceEquals(pGranularity, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGranularity.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRenderAreaGranularity(this, arg1, arg2);
            Marshal.FreeHGlobal(arg2);
        }

        public Result GetSemaphoreCounterValueKHR(AdamantiumVulkan.Core.Semaphore semaphore, ref ulong pValue)
        {
            var arg1 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSemaphoreCounterValueKHR(this, arg1, ref pValue);
        }

        public Result GetSemaphoreFdKHR(in SemaphoreGetFdInfoKHR pGetFdInfo, ref int pFd)
        {
            var arg1 = ReferenceEquals(pGetFdInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetFdInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSemaphoreFdKHR(this, arg1, ref pFd);
            pGetFdInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result GetShaderInfoAMD(AdamantiumVulkan.Core.Pipeline pipeline, ShaderStageFlagBits shaderStage, ShaderInfoTypeAMD infoType, ref ulong pInfoSize, ref System.IntPtr pInfo)
        {
            var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetShaderInfoAMD(this, arg1, shaderStage, infoType, ref pInfoSize, pInfo);
        }

        public Result GetSwapchainCounterEXT(AdamantiumVulkan.Core.SwapchainKHR swapchain, SurfaceCounterFlagBitsEXT counter, ref ulong pCounterValue)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainCounterEXT(this, arg1, counter, ref pCounterValue);
        }

        public Result GetSwapchainImagesKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pSwapchainImageCount, AdamantiumVulkan.Core.Image[] pSwapchainImages)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            AdamantiumVulkan.Core.Interop.VkImage_T[] arg2 = null;
            arg2 = ReferenceEquals(pSwapchainImages, null) ? null : new AdamantiumVulkan.Core.Interop.VkImage_T[pSwapchainImages.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainImagesKHR(this, arg1, ref pSwapchainImageCount, arg2);
            if (!ReferenceEquals(pSwapchainImages, null))
            {
                for (var i = 0U; i < pSwapchainImages.Length; ++i)
                {
                    pSwapchainImages[i] = new Image(arg2[i]);
                }
            }
            return result;
        }

        public Result GetSwapchainImagesKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pSwapchainImageCount, ref AdamantiumVulkan.Core.Image pSwapchainImages)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            var arg2 = ReferenceEquals(pSwapchainImages, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkImage_T)pSwapchainImages);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainImagesKHR(this, arg1, ref pSwapchainImageCount, ref arg2);
            var temparg2 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkImage_T>(arg2);
            pSwapchainImages = temparg2;
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result GetSwapchainStatusKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain)
        {
            var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainStatusKHR(this, arg1);
        }

        public Result GetValidationCacheDataEXT(AdamantiumVulkan.Core.ValidationCacheEXT validationCache, ref ulong pDataSize, ref System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(validationCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)validationCache;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetValidationCacheDataEXT(this, arg1, ref pDataSize, pData);
        }

        public Result ImportFenceFdKHR(in ImportFenceFdInfoKHR pImportFenceFdInfo)
        {
            var arg1 = ReferenceEquals(pImportFenceFdInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImportFenceFdInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkImportFenceFdKHR(this, arg1);
            pImportFenceFdInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result ImportSemaphoreFdKHR(in ImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo)
        {
            var arg1 = ReferenceEquals(pImportSemaphoreFdInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImportSemaphoreFdInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkImportSemaphoreFdKHR(this, arg1);
            pImportSemaphoreFdInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result InitializePerformanceApiINTEL(in InitializePerformanceApiInfoINTEL pInitializeInfo)
        {
            var arg1 = ReferenceEquals(pInitializeInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInitializeInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkInitializePerformanceApiINTEL(this, arg1);
            pInitializeInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result InvalidateMappedMemoryRanges(uint memoryRangeCount, in MappedMemoryRange pMemoryRanges)
        {
            var arg1 = ReferenceEquals(pMemoryRanges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryRanges.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkInvalidateMappedMemoryRanges(this, memoryRangeCount, arg1);
            pMemoryRanges?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result MapMemory(AdamantiumVulkan.Core.DeviceMemory memory, ulong offset, ulong size, uint flags, out System.IntPtr ppData)
        {
            var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkMapMemory(this, arg1, offset, size, flags, out ppData);
        }

        public Result MergePipelineCaches(AdamantiumVulkan.Core.PipelineCache dstCache, uint srcCacheCount, in AdamantiumVulkan.Core.PipelineCache pSrcCaches)
        {
            var arg1 = ReferenceEquals(dstCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)dstCache;
            var arg2 = ReferenceEquals(pSrcCaches, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkPipelineCache_T)pSrcCaches);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMergePipelineCaches(this, arg1, srcCacheCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result MergeValidationCachesEXT(AdamantiumVulkan.Core.ValidationCacheEXT dstCache, uint srcCacheCount, in AdamantiumVulkan.Core.ValidationCacheEXT pSrcCaches)
        {
            var arg1 = ReferenceEquals(dstCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)dstCache;
            var arg2 = ReferenceEquals(pSrcCaches, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkValidationCacheEXT_T)pSrcCaches);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMergeValidationCachesEXT(this, arg1, srcCacheCount, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result RegisterDeviceEventEXT(in DeviceEventInfoEXT pDeviceEventInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
        {
            var arg1 = ReferenceEquals(pDeviceEventInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDeviceEventInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkFence_T arg3;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkRegisterDeviceEventEXT(this, arg1, arg2, out arg3);
            pDeviceEventInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pFence = new Fence(arg3);
            return result;
        }

        public Result RegisterDisplayEventEXT(AdamantiumVulkan.Core.DisplayKHR display, in DisplayEventInfoEXT pDisplayEventInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
        {
            var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
            var arg2 = ReferenceEquals(pDisplayEventInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDisplayEventInfo.ToInternal());
            var arg3 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkFence_T arg4;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkRegisterDisplayEventEXT(this, arg1, arg2, arg3, out arg4);
            pDisplayEventInfo?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg3);
            pFence = new Fence(arg4);
            return result;
        }

        public Result RegisterObjectsNVX(AdamantiumVulkan.Core.ObjectTableNVX objectTable, uint objectCount, in ObjectTableEntryNVX ppObjectTableEntries, in uint pObjectIndices)
        {
            var arg1 = ReferenceEquals(objectTable, null) ? new VkObjectTableNVX_T() : (VkObjectTableNVX_T)objectTable;
            var arg2 = ReferenceEquals(ppObjectTableEntries, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(ppObjectTableEntries.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkRegisterObjectsNVX(this, arg1, objectCount, arg2, pObjectIndices);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public Result ReleasePerformanceConfigurationINTEL(AdamantiumVulkan.Core.PerformanceConfigurationINTEL configuration)
        {
            var arg1 = ReferenceEquals(configuration, null) ? new VkPerformanceConfigurationINTEL_T() : (VkPerformanceConfigurationINTEL_T)configuration;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleasePerformanceConfigurationINTEL(this, arg1);
        }

        public Result ResetCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, uint flags)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetCommandPool(this, arg1, flags);
        }

        public Result ResetDescriptorPool(AdamantiumVulkan.Core.DescriptorPool descriptorPool, uint flags)
        {
            var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetDescriptorPool(this, arg1, flags);
        }

        public Result ResetEvent(AdamantiumVulkan.Core.Event @event)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetEvent(this, arg1);
        }

        public Result ResetFences(uint fenceCount, AdamantiumVulkan.Core.Fence[] pFences)
        {
            AdamantiumVulkan.Core.Interop.VkFence_T[] arg1 = null;
            arg1 = ReferenceEquals(pFences, null) ? null : new AdamantiumVulkan.Core.Interop.VkFence_T[pFences.Length];
            if (!ReferenceEquals(pFences, null))
            {
                for (var i = 0U; i < pFences.Length; ++i)
                {
                    arg1[i] = pFences[i];
                }
            }
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetFences(this, fenceCount, arg1);
        }

        public Result ResetFences(uint fenceCount, AdamantiumVulkan.Core.Fence pFences)
        {
            var arg1 = ReferenceEquals(pFences, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkFence_T)pFences);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetFences(this, fenceCount, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void ResetQueryPoolEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetQueryPoolEXT(this, arg1, firstQuery, queryCount);
        }

        public Result SetDebugUtilsObjectNameEXT(in DebugUtilsObjectNameInfoEXT pNameInfo)
        {
            var arg1 = ReferenceEquals(pNameInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pNameInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetDebugUtilsObjectNameEXT(this, arg1);
            pNameInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result SetDebugUtilsObjectTagEXT(in DebugUtilsObjectTagInfoEXT pTagInfo)
        {
            var arg1 = ReferenceEquals(pTagInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pTagInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetDebugUtilsObjectTagEXT(this, arg1);
            pTagInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result SetEvent(AdamantiumVulkan.Core.Event @event)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetEvent(this, arg1);
        }

        public void SetHdrMetadataEXT(uint swapchainCount, in AdamantiumVulkan.Core.SwapchainKHR pSwapchains, in HdrMetadataEXT pMetadata)
        {
            var arg1 = ReferenceEquals(pSwapchains, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkSwapchainKHR_T)pSwapchains);
            var arg2 = ReferenceEquals(pMetadata, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMetadata.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetHdrMetadataEXT(this, swapchainCount, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            pMetadata?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void SetLocalDimmingAMD(AdamantiumVulkan.Core.SwapchainKHR swapChain, bool localDimmingEnable)
        {
            var arg1 = ReferenceEquals(swapChain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapChain;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetLocalDimmingAMD(this, arg1, localDimmingEnable);
        }

        public Result SignalSemaphoreKHR(in SemaphoreSignalInfoKHR pSignalInfo)
        {
            var arg1 = ReferenceEquals(pSignalInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSignalInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSignalSemaphoreKHR(this, arg1);
            pSignalInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void TrimCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, uint flags)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkTrimCommandPool(this, arg1, flags);
        }

        public void TrimCommandPoolKHR(AdamantiumVulkan.Core.CommandPool commandPool, uint flags)
        {
            var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkTrimCommandPoolKHR(this, arg1, flags);
        }

        public void UninitializePerformanceApiINTEL()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUninitializePerformanceApiINTEL(this);
        }

        public void UnmapMemory(AdamantiumVulkan.Core.DeviceMemory memory)
        {
            var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUnmapMemory(this, arg1);
        }

        public Result UnregisterObjectsNVX(AdamantiumVulkan.Core.ObjectTableNVX objectTable, uint objectCount, in ObjectEntryTypeNVX pObjectEntryTypes, in uint pObjectIndices)
        {
            var arg1 = ReferenceEquals(objectTable, null) ? new VkObjectTableNVX_T() : (VkObjectTableNVX_T)objectTable;
            var arg2 = new GCHandleReference((uint)pObjectEntryTypes);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkUnregisterObjectsNVX(this, arg1, objectCount, arg2.Handle, pObjectIndices);
            arg2?.Dispose();
            return result;
        }

        public void UpdateDescriptorSets(uint descriptorWriteCount, in WriteDescriptorSet[] pDescriptorWrites, uint descriptorCopyCount, out CopyDescriptorSet[] pDescriptorCopies)
        {
            AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet[] arg1 = null;
            arg1 = ReferenceEquals(pDescriptorWrites, null) ? null : new AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet[descriptorWriteCount];
            if (!ReferenceEquals(pDescriptorWrites, null))
            {
                for (var i = 0U; i < descriptorWriteCount; ++i)
                {
                    arg1[i] = pDescriptorWrites[i].ToInternal();
                }
            }
            var arg2 = System.IntPtr.Zero;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSets(this, descriptorWriteCount, arg1, descriptorCopyCount, ref arg2);
            if (!ReferenceEquals(pDescriptorWrites, null))
            {
                for (var i = 0U; i < descriptorWriteCount; ++i)
                {
                    pDescriptorWrites[i]?.Dispose();
                }
            }
            var _pDescriptorCopies = new AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet[descriptorCopyCount];
            MarshalUtils.IntPtrToManagedArray<AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet>(arg2, _pDescriptorCopies);
            pDescriptorCopies = new CopyDescriptorSet[descriptorCopyCount];
            for (var i = 0U; i< descriptorCopyCount; ++i)
            {
                pDescriptorCopies[i] = new CopyDescriptorSet(_pDescriptorCopies[i]);
            }
        }

        public void UpdateDescriptorSets(uint descriptorWriteCount, in WriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, out CopyDescriptorSet[] pDescriptorCopies)
        {
            var arg1 = ReferenceEquals(pDescriptorWrites, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDescriptorWrites.ToInternal());
            var arg2 = System.IntPtr.Zero;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSets(this, descriptorWriteCount, arg1, descriptorCopyCount, ref arg2);
            pDescriptorWrites?.Dispose();
            Marshal.FreeHGlobal(arg1);
            var _pDescriptorCopies = new AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet[descriptorCopyCount];
            MarshalUtils.IntPtrToManagedArray<AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet>(arg2, _pDescriptorCopies);
            pDescriptorCopies = new CopyDescriptorSet[descriptorCopyCount];
            for (var i = 0U; i< descriptorCopyCount; ++i)
            {
                pDescriptorCopies[i] = new CopyDescriptorSet(_pDescriptorCopies[i]);
            }
        }

        public void UpdateDescriptorSetWithTemplate(AdamantiumVulkan.Core.DescriptorSet descriptorSet, AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(descriptorSet, null) ? new VkDescriptorSet_T() : (VkDescriptorSet_T)descriptorSet;
            var arg2 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSetWithTemplate(this, arg1, arg2, pData);
        }

        public void UpdateDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.DescriptorSet descriptorSet, AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(descriptorSet, null) ? new VkDescriptorSet_T() : (VkDescriptorSet_T)descriptorSet;
            var arg2 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSetWithTemplateKHR(this, arg1, arg2, pData);
        }

        public Result WaitForFences(uint fenceCount, AdamantiumVulkan.Core.Fence[] pFences, bool waitAll, ulong timeout)
        {
            AdamantiumVulkan.Core.Interop.VkFence_T[] arg1 = null;
            arg1 = ReferenceEquals(pFences, null) ? null : new AdamantiumVulkan.Core.Interop.VkFence_T[pFences.Length];
            if (!ReferenceEquals(pFences, null))
            {
                for (var i = 0U; i < pFences.Length; ++i)
                {
                    arg1[i] = pFences[i];
                }
            }
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitForFences(this, fenceCount, arg1, waitAll, timeout);
        }

        public Result WaitForFences(uint fenceCount, AdamantiumVulkan.Core.Fence pFences, bool waitAll, ulong timeout)
        {
            var arg1 = ReferenceEquals(pFences, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkFence_T)pFences);
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitForFences(this, fenceCount, arg1, waitAll, timeout);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result WaitSemaphoresKHR(in SemaphoreWaitInfoKHR pWaitInfo, ulong timeout)
        {
            var arg1 = ReferenceEquals(pWaitInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pWaitInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitSemaphoresKHR(this, arg1, timeout);
            pWaitInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDevice_T(Device d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDevice_T();
        }

        public static implicit operator Device(AdamantiumVulkan.Core.Interop.VkDevice_T d)
        {
            return new Device(){__Instance = d};
        }

    }

    public partial class Queue
    {
        internal VkQueue_T __Instance;

        public Queue()
        {
        }

        public Queue(AdamantiumVulkan.Core.Interop.VkQueue_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public void GetQueueCheckpointDataNV(ref uint pCheckpointDataCount, CheckpointDataNV pCheckpointData)
        {
            var arg1 = ReferenceEquals(pCheckpointData, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCheckpointData.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetQueueCheckpointDataNV(this, ref pCheckpointDataCount, arg1);
            pCheckpointData?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void QueueBeginDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
        {
            var arg1 = ReferenceEquals(pLabelInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLabelInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueBeginDebugUtilsLabelEXT(this, arg1);
            pLabelInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public Result QueueBindSparse(uint bindInfoCount, in BindSparseInfo pBindInfo, AdamantiumVulkan.Core.Fence fence)
        {
            var arg1 = ReferenceEquals(pBindInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBindInfo.ToInternal());
            var arg2 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueBindSparse(this, bindInfoCount, arg1, arg2);
            pBindInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void QueueEndDebugUtilsLabelEXT()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueEndDebugUtilsLabelEXT(this);
        }

        public void QueueInsertDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
        {
            var arg1 = ReferenceEquals(pLabelInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLabelInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueInsertDebugUtilsLabelEXT(this, arg1);
            pLabelInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public Result QueuePresentKHR(in PresentInfoKHR pPresentInfo)
        {
            var arg1 = ReferenceEquals(pPresentInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pPresentInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueuePresentKHR(this, arg1);
            pPresentInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result QueueSetPerformanceConfigurationINTEL(AdamantiumVulkan.Core.PerformanceConfigurationINTEL configuration)
        {
            var arg1 = ReferenceEquals(configuration, null) ? new VkPerformanceConfigurationINTEL_T() : (VkPerformanceConfigurationINTEL_T)configuration;
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSetPerformanceConfigurationINTEL(this, arg1);
        }

        public Result QueueSubmit(uint submitCount, SubmitInfo[] pSubmits, AdamantiumVulkan.Core.Fence fence)
        {
            AdamantiumVulkan.Core.Interop.VkSubmitInfo[] arg1 = null;
            arg1 = ReferenceEquals(pSubmits, null) ? null : new AdamantiumVulkan.Core.Interop.VkSubmitInfo[pSubmits.Length];
            if (!ReferenceEquals(pSubmits, null))
            {
                for (var i = 0U; i < pSubmits.Length; ++i)
                {
                    arg1[i] = pSubmits[i].ToInternal();
                }
            }
            var arg2 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit(this, submitCount, arg1, arg2);
            if (!ReferenceEquals(pSubmits, null))
            {
                for (var i = 0U; i < pSubmits.Length; ++i)
                {
                    pSubmits[i]?.Dispose();
                }
            }
            return result;
        }

        public Result QueueSubmit(uint submitCount, SubmitInfo pSubmits, AdamantiumVulkan.Core.Fence fence)
        {
            var arg1 = ReferenceEquals(pSubmits, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubmits.ToInternal());
            var arg2 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit(this, submitCount, arg1, arg2);
            pSubmits?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result QueueWaitIdle()
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueWaitIdle(this);
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkQueue_T(Queue q)
        {
            return q?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkQueue_T();
        }

        public static implicit operator Queue(AdamantiumVulkan.Core.Interop.VkQueue_T q)
        {
            return new Queue(){__Instance = q};
        }

    }

    public partial class Semaphore
    {
        internal VkSemaphore_T __Instance;

        public Semaphore()
        {
        }

        public Semaphore(AdamantiumVulkan.Core.Interop.VkSemaphore_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSemaphore_T(Semaphore s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSemaphore_T();
        }

        public static implicit operator Semaphore(AdamantiumVulkan.Core.Interop.VkSemaphore_T s)
        {
            return new Semaphore(){__Instance = s};
        }

    }

    public partial class CommandBuffer
    {
        internal VkCommandBuffer_T __Instance;

        public CommandBuffer()
        {
        }

        public CommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public Result BeginCommandBuffer(in CommandBufferBeginInfo pBeginInfo)
        {
            var arg1 = ReferenceEquals(pBeginInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBeginInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBeginCommandBuffer(this, arg1);
            pBeginInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void BeginConditionalRenderingEXT(in ConditionalRenderingBeginInfoEXT pConditionalRenderingBegin)
        {
            var arg1 = ReferenceEquals(pConditionalRenderingBegin, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pConditionalRenderingBegin.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginConditionalRenderingEXT(this, arg1);
            pConditionalRenderingBegin?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void BeginDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
        {
            var arg1 = ReferenceEquals(pLabelInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLabelInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginDebugUtilsLabelEXT(this, arg1);
            pLabelInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void BeginQuery(AdamantiumVulkan.Core.QueryPool queryPool, uint query, uint flags)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginQuery(this, arg1, query, flags);
        }

        public void BeginQueryIndexedEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint query, uint flags, uint index)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginQueryIndexedEXT(this, arg1, query, flags, index);
        }

        public void BeginRenderPass(in RenderPassBeginInfo pRenderPassBegin, SubpassContents contents)
        {
            var arg1 = ReferenceEquals(pRenderPassBegin, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRenderPassBegin.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderPass(this, arg1, contents);
            pRenderPassBegin?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void BeginRenderPass2KHR(in RenderPassBeginInfo pRenderPassBegin, in SubpassBeginInfoKHR pSubpassBeginInfo)
        {
            var arg1 = ReferenceEquals(pRenderPassBegin, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRenderPassBegin.ToInternal());
            var arg2 = ReferenceEquals(pSubpassBeginInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubpassBeginInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderPass2KHR(this, arg1, arg2);
            pRenderPassBegin?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSubpassBeginInfo?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void BeginTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ulong[] pCounterBufferOffsets)
        {
            var arg1 = ReferenceEquals(pCounterBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pCounterBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg1, pCounterBufferOffsets);
            Marshal.FreeHGlobal(arg1);
        }

        public void BeginTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ref ulong pCounterBufferOffsets)
        {
            var arg1 = ReferenceEquals(pCounterBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pCounterBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg1, ref pCounterBufferOffsets);
            Marshal.FreeHGlobal(arg1);
        }

        public void BindDescriptorSets(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint firstSet, uint descriptorSetCount, in AdamantiumVulkan.Core.DescriptorSet pDescriptorSets, uint dynamicOffsetCount, in uint pDynamicOffsets)
        {
            var arg1 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
            var arg2 = ReferenceEquals(pDescriptorSets, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkDescriptorSet_T)pDescriptorSets);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindDescriptorSets(this, pipelineBindPoint, arg1, firstSet, descriptorSetCount, arg2, dynamicOffsetCount, pDynamicOffsets);
            Marshal.FreeHGlobal(arg2);
        }

        public void BindIndexBuffer(AdamantiumVulkan.Core.Buffer buffer, ulong offset, IndexType indexType)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindIndexBuffer(this, arg1, offset, indexType);
        }

        public void BindPipeline(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Pipeline pipeline)
        {
            var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindPipeline(this, pipelineBindPoint, arg1);
        }

        public void BindShadingRateImageNV(AdamantiumVulkan.Core.ImageView imageView, ImageLayout imageLayout)
        {
            var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindShadingRateImageNV(this, arg1, imageLayout);
        }

        public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ulong[] pOffsets, ulong[] pSizes)
        {
            var arg1 = ReferenceEquals(pBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg1, pOffsets, pSizes);
            Marshal.FreeHGlobal(arg1);
        }

        public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ref ulong pOffsets, ref ulong pSizes)
        {
            var arg1 = ReferenceEquals(pBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg1, ref pOffsets, ref pSizes);
            Marshal.FreeHGlobal(arg1);
        }

        public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer[] pBuffers, ulong[] pOffsets)
        {
            AdamantiumVulkan.Core.Interop.VkBuffer_T[] arg1 = null;
            arg1 = ReferenceEquals(pBuffers, null) ? null : new AdamantiumVulkan.Core.Interop.VkBuffer_T[pBuffers.Length];
            if (!ReferenceEquals(pBuffers, null))
            {
                for (var i = 0U; i < pBuffers.Length; ++i)
                {
                    arg1[i] = pBuffers[i];
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg1, pOffsets);
        }

        public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer pBuffers, ref ulong pOffsets)
        {
            var arg1 = ReferenceEquals(pBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg1, ref pOffsets);
            Marshal.FreeHGlobal(arg1);
        }

        public void BlitImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageBlit pRegions, Filter filter)
        {
            var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
            var arg2 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBlitImage(this, arg1, srcImageLayout, arg2, dstImageLayout, regionCount, arg3, filter);
            Marshal.FreeHGlobal(arg3);
        }

        public void BuildAccelerationStructureNV(in AccelerationStructureInfoNV pInfo, AdamantiumVulkan.Core.Buffer instanceData, ulong instanceOffset, bool update, AdamantiumVulkan.Core.AccelerationStructureNV dst, AdamantiumVulkan.Core.AccelerationStructureNV src, AdamantiumVulkan.Core.Buffer scratch, ulong scratchOffset)
        {
            var arg1 = ReferenceEquals(pInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pInfo.ToInternal());
            var arg2 = ReferenceEquals(instanceData, null) ? new VkBuffer_T() : (VkBuffer_T)instanceData;
            var arg5 = ReferenceEquals(dst, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)dst;
            var arg6 = ReferenceEquals(src, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)src;
            var arg7 = ReferenceEquals(scratch, null) ? new VkBuffer_T() : (VkBuffer_T)scratch;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBuildAccelerationStructureNV(this, arg1, arg2, instanceOffset, update, arg5, arg6, arg7, scratchOffset);
            pInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void ClearAttachments(uint attachmentCount, in ClearAttachment pAttachments, uint rectCount, in ClearRect pRects)
        {
            var arg1 = ReferenceEquals(pAttachments, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAttachments.ToInternal());
            var arg2 = ReferenceEquals(pRects, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRects.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearAttachments(this, attachmentCount, arg1, rectCount, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
        }

        public void ClearColorImage(AdamantiumVulkan.Core.Image image, ImageLayout imageLayout, in ClearColorValue pColor, uint rangeCount, in ImageSubresourceRange pRanges)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pColor, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pColor.ToInternal());
            var arg3 = ReferenceEquals(pRanges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRanges.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearColorImage(this, arg1, imageLayout, arg2, rangeCount, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public void ClearDepthStencilImage(AdamantiumVulkan.Core.Image image, ImageLayout imageLayout, in ClearDepthStencilValue pDepthStencil, uint rangeCount, in ImageSubresourceRange pRanges)
        {
            var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
            var arg2 = ReferenceEquals(pDepthStencil, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDepthStencil.ToInternal());
            var arg3 = ReferenceEquals(pRanges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRanges.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearDepthStencilImage(this, arg1, imageLayout, arg2, rangeCount, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public void CopyAccelerationStructureNV(AdamantiumVulkan.Core.AccelerationStructureNV dst, AdamantiumVulkan.Core.AccelerationStructureNV src, CopyAccelerationStructureModeNV mode)
        {
            var arg1 = ReferenceEquals(dst, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)dst;
            var arg2 = ReferenceEquals(src, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)src;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyAccelerationStructureNV(this, arg1, arg2, mode);
        }

        public void CopyBuffer(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, BufferCopy[] pRegions)
        {
            var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
            var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            AdamantiumVulkan.Core.Interop.VkBufferCopy[] arg3 = null;
            arg3 = ReferenceEquals(pRegions, null) ? null : new AdamantiumVulkan.Core.Interop.VkBufferCopy[pRegions.Length];
            if (!ReferenceEquals(pRegions, null))
            {
                for (var i = 0U; i < pRegions.Length; ++i)
                {
                    arg3[i] = pRegions[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer(this, arg1, arg2, regionCount, arg3);
        }

        public void CopyBuffer(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, BufferCopy pRegions)
        {
            var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
            var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer(this, arg1, arg2, regionCount, arg3);
            Marshal.FreeHGlobal(arg3);
        }

        public void CopyBufferToImage(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in BufferImageCopy pRegions)
        {
            var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
            var arg2 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBufferToImage(this, arg1, arg2, dstImageLayout, regionCount, arg3);
            Marshal.FreeHGlobal(arg3);
        }

        public void CopyImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageCopy pRegions)
        {
            var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
            var arg2 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImage(this, arg1, srcImageLayout, arg2, dstImageLayout, regionCount, arg3);
            Marshal.FreeHGlobal(arg3);
        }

        public void CopyImageToBuffer(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, in BufferImageCopy pRegions)
        {
            var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
            var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImageToBuffer(this, arg1, srcImageLayout, arg2, regionCount, arg3);
            Marshal.FreeHGlobal(arg3);
        }

        public void CopyQueryPoolResults(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount, AdamantiumVulkan.Core.Buffer dstBuffer, ulong dstOffset, ulong stride, uint flags)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyQueryPoolResults(this, arg1, firstQuery, queryCount, arg2, dstOffset, stride, flags);
        }

        public void DebugMarkerBeginEXT(in DebugMarkerMarkerInfoEXT pMarkerInfo)
        {
            var arg1 = ReferenceEquals(pMarkerInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMarkerInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerBeginEXT(this, arg1);
            pMarkerInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void DebugMarkerEndEXT()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerEndEXT(this);
        }

        public void DebugMarkerInsertEXT(in DebugMarkerMarkerInfoEXT pMarkerInfo)
        {
            var arg1 = ReferenceEquals(pMarkerInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMarkerInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerInsertEXT(this, arg1);
            pMarkerInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void Dispatch(uint groupCountX, uint groupCountY, uint groupCountZ)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatch(this, groupCountX, groupCountY, groupCountZ);
        }

        public void DispatchBase(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchBase(this, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        }

        public void DispatchBaseKHR(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchBaseKHR(this, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        }

        public void DispatchIndirect(AdamantiumVulkan.Core.Buffer buffer, ulong offset)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchIndirect(this, arg1, offset);
        }

        public void Draw(uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
        }

        public void DrawIndexed(uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexed(this, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        }

        public void DrawIndexedIndirect(AdamantiumVulkan.Core.Buffer buffer, ulong offset, uint drawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirect(this, arg1, offset, drawCount, stride);
        }

        public void DrawIndexedIndirectCountAMD(AdamantiumVulkan.Core.Buffer buffer, ulong offset, AdamantiumVulkan.Core.Buffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirectCountAMD(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
        }

        public void DrawIndexedIndirectCountKHR(AdamantiumVulkan.Core.Buffer buffer, ulong offset, AdamantiumVulkan.Core.Buffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirectCountKHR(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
        }

        public void DrawIndirect(AdamantiumVulkan.Core.Buffer buffer, ulong offset, uint drawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirect(this, arg1, offset, drawCount, stride);
        }

        public void DrawIndirectByteCountEXT(uint instanceCount, uint firstInstance, AdamantiumVulkan.Core.Buffer counterBuffer, ulong counterBufferOffset, uint counterOffset, uint vertexStride)
        {
            var arg1 = ReferenceEquals(counterBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)counterBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectByteCountEXT(this, instanceCount, firstInstance, arg1, counterBufferOffset, counterOffset, vertexStride);
        }

        public void DrawIndirectCountAMD(AdamantiumVulkan.Core.Buffer buffer, ulong offset, AdamantiumVulkan.Core.Buffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectCountAMD(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
        }

        public void DrawIndirectCountKHR(AdamantiumVulkan.Core.Buffer buffer, ulong offset, AdamantiumVulkan.Core.Buffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectCountKHR(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
        }

        public void DrawMeshTasksIndirectCountNV(AdamantiumVulkan.Core.Buffer buffer, ulong offset, AdamantiumVulkan.Core.Buffer countBuffer, ulong countBufferOffset, uint maxDrawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectCountNV(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
        }

        public void DrawMeshTasksIndirectNV(AdamantiumVulkan.Core.Buffer buffer, ulong offset, uint drawCount, uint stride)
        {
            var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectNV(this, arg1, offset, drawCount, stride);
        }

        public void DrawMeshTasksNV(uint taskCount, uint firstTask)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksNV(this, taskCount, firstTask);
        }

        public Result EndCommandBuffer()
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkEndCommandBuffer(this);
        }

        public void EndConditionalRenderingEXT()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndConditionalRenderingEXT(this);
        }

        public void EndDebugUtilsLabelEXT()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndDebugUtilsLabelEXT(this);
        }

        public void EndQuery(AdamantiumVulkan.Core.QueryPool queryPool, uint query)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndQuery(this, arg1, query);
        }

        public void EndQueryIndexedEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint query, uint index)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndQueryIndexedEXT(this, arg1, query, index);
        }

        public void EndRenderPass()
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderPass(this);
        }

        public void EndRenderPass2KHR(in SubpassEndInfoKHR pSubpassEndInfo)
        {
            var arg1 = ReferenceEquals(pSubpassEndInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubpassEndInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderPass2KHR(this, arg1);
            pSubpassEndInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void EndTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ulong[] pCounterBufferOffsets)
        {
            var arg1 = ReferenceEquals(pCounterBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pCounterBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg1, pCounterBufferOffsets);
            Marshal.FreeHGlobal(arg1);
        }

        public void EndTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ref ulong pCounterBufferOffsets)
        {
            var arg1 = ReferenceEquals(pCounterBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkBuffer_T)pCounterBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg1, ref pCounterBufferOffsets);
            Marshal.FreeHGlobal(arg1);
        }

        public void ExecuteCommands(uint commandBufferCount, in AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
        {
            var arg1 = ReferenceEquals(pCommandBuffers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkCommandBuffer_T)pCommandBuffers);
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdExecuteCommands(this, commandBufferCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void FillBuffer(AdamantiumVulkan.Core.Buffer dstBuffer, ulong dstOffset, ulong size, uint data)
        {
            var arg1 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdFillBuffer(this, arg1, dstOffset, size, data);
        }

        public void InsertDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
        {
            var arg1 = ReferenceEquals(pLabelInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pLabelInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdInsertDebugUtilsLabelEXT(this, arg1);
            pLabelInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void NextSubpass(SubpassContents contents)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdNextSubpass(this, contents);
        }

        public void NextSubpass2KHR(in SubpassBeginInfoKHR pSubpassBeginInfo, in SubpassEndInfoKHR pSubpassEndInfo)
        {
            var arg1 = ReferenceEquals(pSubpassBeginInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubpassBeginInfo.ToInternal());
            var arg2 = ReferenceEquals(pSubpassEndInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSubpassEndInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdNextSubpass2KHR(this, arg1, arg2);
            pSubpassBeginInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pSubpassEndInfo?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void PipelineBarrier(uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, MemoryBarrier[] pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier[] pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier[] pImageMemoryBarriers)
        {
            AdamantiumVulkan.Core.Interop.VkMemoryBarrier[] arg4 = null;
            arg4 = ReferenceEquals(pMemoryBarriers, null) ? null : new AdamantiumVulkan.Core.Interop.VkMemoryBarrier[pMemoryBarriers.Length];
            if (!ReferenceEquals(pMemoryBarriers, null))
            {
                for (var i = 0U; i < pMemoryBarriers.Length; ++i)
                {
                    arg4[i] = pMemoryBarriers[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier[] arg5 = null;
            arg5 = ReferenceEquals(pBufferMemoryBarriers, null) ? null : new AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier[pBufferMemoryBarriers.Length];
            if (!ReferenceEquals(pBufferMemoryBarriers, null))
            {
                for (var i = 0U; i < pBufferMemoryBarriers.Length; ++i)
                {
                    arg5[i] = pBufferMemoryBarriers[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier[] arg6 = null;
            arg6 = ReferenceEquals(pImageMemoryBarriers, null) ? null : new AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier[pImageMemoryBarriers.Length];
            if (!ReferenceEquals(pImageMemoryBarriers, null))
            {
                for (var i = 0U; i < pImageMemoryBarriers.Length; ++i)
                {
                    arg6[i] = pImageMemoryBarriers[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPipelineBarrier(this, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, arg4, bufferMemoryBarrierCount, arg5, imageMemoryBarrierCount, arg6);
            if (!ReferenceEquals(pMemoryBarriers, null))
            {
                for (var i = 0U; i < pMemoryBarriers.Length; ++i)
                {
                    pMemoryBarriers[i]?.Dispose();
                }
            }
            if (!ReferenceEquals(pBufferMemoryBarriers, null))
            {
                for (var i = 0U; i < pBufferMemoryBarriers.Length; ++i)
                {
                    pBufferMemoryBarriers[i]?.Dispose();
                }
            }
            if (!ReferenceEquals(pImageMemoryBarriers, null))
            {
                for (var i = 0U; i < pImageMemoryBarriers.Length; ++i)
                {
                    pImageMemoryBarriers[i]?.Dispose();
                }
            }
        }

        public void PipelineBarrier(uint srcStageMask, uint dstStageMask, uint dependencyFlags, uint memoryBarrierCount, MemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ImageMemoryBarrier pImageMemoryBarriers)
        {
            var arg4 = ReferenceEquals(pMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryBarriers.ToInternal());
            var arg5 = ReferenceEquals(pBufferMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBufferMemoryBarriers.ToInternal());
            var arg6 = ReferenceEquals(pImageMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageMemoryBarriers.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPipelineBarrier(this, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, arg4, bufferMemoryBarrierCount, arg5, imageMemoryBarrierCount, arg6);
            pMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg4);
            pBufferMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg5);
            pImageMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg6);
        }

        public void ProcessCommandsNVX(in ProcessCommandsInfoNVX pProcessCommandsInfo)
        {
            var arg1 = ReferenceEquals(pProcessCommandsInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProcessCommandsInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdProcessCommandsNVX(this, arg1);
            pProcessCommandsInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void PushConstants(AdamantiumVulkan.Core.PipelineLayout layout, uint stageFlags, uint offset, uint size, in System.IntPtr pValues)
        {
            var arg1 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushConstants(this, arg1, stageFlags, offset, size, pValues);
        }

        public void PushDescriptorSetKHR(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint set, uint descriptorWriteCount, in WriteDescriptorSet pDescriptorWrites)
        {
            var arg1 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
            var arg2 = ReferenceEquals(pDescriptorWrites, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDescriptorWrites.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushDescriptorSetKHR(this, pipelineBindPoint, arg1, set, descriptorWriteCount, arg2);
            pDescriptorWrites?.Dispose();
            Marshal.FreeHGlobal(arg2);
        }

        public void PushDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, AdamantiumVulkan.Core.PipelineLayout layout, uint set, in System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
            var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushDescriptorSetWithTemplateKHR(this, arg1, arg2, set, pData);
        }

        public void ReserveSpaceForCommandsNVX(in ReserveSpaceForCommandsInfoNVX pReserveSpaceInfo)
        {
            var arg1 = ReferenceEquals(pReserveSpaceInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pReserveSpaceInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdReserveSpaceForCommandsNVX(this, arg1);
            pReserveSpaceInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public Result ResetCommandBuffer(uint flags)
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetCommandBuffer(this, flags);
        }

        public void ResetEvent(AdamantiumVulkan.Core.Event @event, uint stageMask)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetEvent(this, arg1, stageMask);
        }

        public void ResetQueryPool(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetQueryPool(this, arg1, firstQuery, queryCount);
        }

        public void ResolveImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageResolve pRegions)
        {
            var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
            var arg2 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
            var arg3 = ReferenceEquals(pRegions, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pRegions.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResolveImage(this, arg1, srcImageLayout, arg2, dstImageLayout, regionCount, arg3);
            Marshal.FreeHGlobal(arg3);
        }

        public void SetBlendConstants(in float[] blendConstants)
        {
            if (blendConstants == null || blendConstants.Length != 4)
            {
                throw new ArgumentOutOfRangeException("blendConstants", "The dimensions of the provided array don't match the required size. Size should be = 4");
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetBlendConstants(this, blendConstants);
        }

        public void SetCheckpointNV(in System.IntPtr pCheckpointMarker)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCheckpointNV(this, pCheckpointMarker);
        }

        public void SetCoarseSampleOrderNV(CoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, in CoarseSampleOrderCustomNV pCustomSampleOrders)
        {
            var arg1 = ReferenceEquals(pCustomSampleOrders, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCustomSampleOrders.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoarseSampleOrderNV(this, sampleOrderType, customSampleOrderCount, arg1);
            pCustomSampleOrders?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void SetDepthBias(float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBias(this, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
        }

        public void SetDepthBounds(float minDepthBounds, float maxDepthBounds)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBounds(this, minDepthBounds, maxDepthBounds);
        }

        public void SetDeviceMask(uint deviceMask)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDeviceMask(this, deviceMask);
        }

        public void SetDeviceMaskKHR(uint deviceMask)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDeviceMaskKHR(this, deviceMask);
        }

        public void SetDiscardRectangleEXT(uint firstDiscardRectangle, uint discardRectangleCount, in Rect2D pDiscardRectangles)
        {
            var arg1 = ReferenceEquals(pDiscardRectangles, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pDiscardRectangles.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDiscardRectangleEXT(this, firstDiscardRectangle, discardRectangleCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void SetEvent(AdamantiumVulkan.Core.Event @event, uint stageMask)
        {
            var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetEvent(this, arg1, stageMask);
        }

        public void SetExclusiveScissorNV(uint firstExclusiveScissor, uint exclusiveScissorCount, in Rect2D pExclusiveScissors)
        {
            var arg1 = ReferenceEquals(pExclusiveScissors, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pExclusiveScissors.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetExclusiveScissorNV(this, firstExclusiveScissor, exclusiveScissorCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void SetLineStippleEXT(uint lineStippleFactor, ushort lineStipplePattern)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineStippleEXT(this, lineStippleFactor, lineStipplePattern);
        }

        public void SetLineWidth(float lineWidth)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineWidth(this, lineWidth);
        }

        public Result SetPerformanceMarkerINTEL(in PerformanceMarkerInfoINTEL pMarkerInfo)
        {
            var arg1 = ReferenceEquals(pMarkerInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMarkerInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceMarkerINTEL(this, arg1);
            pMarkerInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result SetPerformanceOverrideINTEL(in PerformanceOverrideInfoINTEL pOverrideInfo)
        {
            var arg1 = ReferenceEquals(pOverrideInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pOverrideInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceOverrideINTEL(this, arg1);
            pOverrideInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public Result SetPerformanceStreamMarkerINTEL(in PerformanceStreamMarkerInfoINTEL pMarkerInfo)
        {
            var arg1 = ReferenceEquals(pMarkerInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMarkerInfo.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceStreamMarkerINTEL(this, arg1);
            pMarkerInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public void SetSampleLocationsEXT(in SampleLocationsInfoEXT pSampleLocationsInfo)
        {
            var arg1 = ReferenceEquals(pSampleLocationsInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pSampleLocationsInfo.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetSampleLocationsEXT(this, arg1);
            pSampleLocationsInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void SetScissor(uint firstScissor, uint scissorCount, in Rect2D[] pScissors)
        {
            AdamantiumVulkan.Core.Interop.VkRect2D[] arg1 = null;
            arg1 = ReferenceEquals(pScissors, null) ? null : new AdamantiumVulkan.Core.Interop.VkRect2D[scissorCount];
            if (!ReferenceEquals(pScissors, null))
            {
                for (var i = 0U; i < scissorCount; ++i)
                {
                    arg1[i] = pScissors[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissor(this, firstScissor, scissorCount, arg1);
        }

        public void SetScissor(uint firstScissor, uint scissorCount, in Rect2D pScissors)
        {
            var arg1 = ReferenceEquals(pScissors, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pScissors.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissor(this, firstScissor, scissorCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void SetStencilCompareMask(uint faceMask, uint compareMask)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilCompareMask(this, faceMask, compareMask);
        }

        public void SetStencilReference(uint faceMask, uint reference)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilReference(this, faceMask, reference);
        }

        public void SetStencilWriteMask(uint faceMask, uint writeMask)
        {
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilWriteMask(this, faceMask, writeMask);
        }

        public void SetViewport(uint firstViewport, uint viewportCount, in Viewport[] pViewports)
        {
            AdamantiumVulkan.Core.Interop.VkViewport[] arg1 = null;
            arg1 = ReferenceEquals(pViewports, null) ? null : new AdamantiumVulkan.Core.Interop.VkViewport[viewportCount];
            if (!ReferenceEquals(pViewports, null))
            {
                for (var i = 0U; i < viewportCount; ++i)
                {
                    arg1[i] = pViewports[i].ToInternal();
                }
            }
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewport(this, firstViewport, viewportCount, arg1);
        }

        public void SetViewport(uint firstViewport, uint viewportCount, in Viewport pViewports)
        {
            var arg1 = ReferenceEquals(pViewports, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pViewports.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewport(this, firstViewport, viewportCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void SetViewportShadingRatePaletteNV(uint firstViewport, uint viewportCount, in ShadingRatePaletteNV pShadingRatePalettes)
        {
            var arg1 = ReferenceEquals(pShadingRatePalettes, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pShadingRatePalettes.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportShadingRatePaletteNV(this, firstViewport, viewportCount, arg1);
            pShadingRatePalettes?.Dispose();
            Marshal.FreeHGlobal(arg1);
        }

        public void SetViewportWScalingNV(uint firstViewport, uint viewportCount, in ViewportWScalingNV pViewportWScalings)
        {
            var arg1 = ReferenceEquals(pViewportWScalings, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pViewportWScalings.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportWScalingNV(this, firstViewport, viewportCount, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        public void TraceRaysNV(AdamantiumVulkan.Core.Buffer raygenShaderBindingTableBuffer, ulong raygenShaderBindingOffset, AdamantiumVulkan.Core.Buffer missShaderBindingTableBuffer, ulong missShaderBindingOffset, ulong missShaderBindingStride, AdamantiumVulkan.Core.Buffer hitShaderBindingTableBuffer, ulong hitShaderBindingOffset, ulong hitShaderBindingStride, AdamantiumVulkan.Core.Buffer callableShaderBindingTableBuffer, ulong callableShaderBindingOffset, ulong callableShaderBindingStride, uint width, uint height, uint depth)
        {
            var arg1 = ReferenceEquals(raygenShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)raygenShaderBindingTableBuffer;
            var arg3 = ReferenceEquals(missShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)missShaderBindingTableBuffer;
            var arg6 = ReferenceEquals(hitShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)hitShaderBindingTableBuffer;
            var arg9 = ReferenceEquals(callableShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)callableShaderBindingTableBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdTraceRaysNV(this, arg1, raygenShaderBindingOffset, arg3, missShaderBindingOffset, missShaderBindingStride, arg6, hitShaderBindingOffset, hitShaderBindingStride, arg9, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
        }

        public void UpdateBuffer(AdamantiumVulkan.Core.Buffer dstBuffer, ulong dstOffset, ulong dataSize, in System.IntPtr pData)
        {
            var arg1 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdUpdateBuffer(this, arg1, dstOffset, dataSize, pData);
        }

        public void WaitEvents(uint eventCount, in AdamantiumVulkan.Core.Event pEvents, uint srcStageMask, uint dstStageMask, uint memoryBarrierCount, in MemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, in BufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, in ImageMemoryBarrier pImageMemoryBarriers)
        {
            var arg1 = ReferenceEquals(pEvents, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkEvent_T)pEvents);
            var arg4 = ReferenceEquals(pMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryBarriers.ToInternal());
            var arg5 = ReferenceEquals(pBufferMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pBufferMemoryBarriers.ToInternal());
            var arg6 = ReferenceEquals(pImageMemoryBarriers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImageMemoryBarriers.ToInternal());
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWaitEvents(this, eventCount, arg1, srcStageMask, dstStageMask, memoryBarrierCount, arg4, bufferMemoryBarrierCount, arg5, imageMemoryBarrierCount, arg6);
            Marshal.FreeHGlobal(arg1);
            pMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg4);
            pBufferMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg5);
            pImageMemoryBarriers?.Dispose();
            Marshal.FreeHGlobal(arg6);
        }

        public void WriteAccelerationStructuresPropertiesNV(uint accelerationStructureCount, in AdamantiumVulkan.Core.AccelerationStructureNV pAccelerationStructures, QueryType queryType, AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery)
        {
            var arg1 = ReferenceEquals(pAccelerationStructures, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr((VkAccelerationStructureNV_T)pAccelerationStructures);
            var arg2 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteAccelerationStructuresPropertiesNV(this, accelerationStructureCount, arg1, queryType, arg2, firstQuery);
            Marshal.FreeHGlobal(arg1);
        }

        public void WriteBufferMarkerAMD(PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.Buffer dstBuffer, ulong dstOffset, uint marker)
        {
            var arg1 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteBufferMarkerAMD(this, pipelineStage, arg1, dstOffset, marker);
        }

        public void WriteTimestamp(PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.QueryPool queryPool, uint query)
        {
            var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
            AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteTimestamp(this, pipelineStage, arg1, query);
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkCommandBuffer_T(CommandBuffer c)
        {
            return c?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkCommandBuffer_T();
        }

        public static implicit operator CommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T c)
        {
            return new CommandBuffer(){__Instance = c};
        }

    }

    public partial class Fence
    {
        internal VkFence_T __Instance;

        public Fence()
        {
        }

        public Fence(AdamantiumVulkan.Core.Interop.VkFence_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkFence_T(Fence f)
        {
            return f?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkFence_T();
        }

        public static implicit operator Fence(AdamantiumVulkan.Core.Interop.VkFence_T f)
        {
            return new Fence(){__Instance = f};
        }

    }

    public partial class DeviceMemory
    {
        internal VkDeviceMemory_T __Instance;

        public DeviceMemory()
        {
        }

        public DeviceMemory(AdamantiumVulkan.Core.Interop.VkDeviceMemory_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDeviceMemory_T(DeviceMemory d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDeviceMemory_T();
        }

        public static implicit operator DeviceMemory(AdamantiumVulkan.Core.Interop.VkDeviceMemory_T d)
        {
            return new DeviceMemory(){__Instance = d};
        }

    }

    public partial class Buffer
    {
        internal VkBuffer_T __Instance;

        public Buffer()
        {
        }

        public Buffer(AdamantiumVulkan.Core.Interop.VkBuffer_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkBuffer_T(Buffer b)
        {
            return b?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkBuffer_T();
        }

        public static implicit operator Buffer(AdamantiumVulkan.Core.Interop.VkBuffer_T b)
        {
            return new Buffer(){__Instance = b};
        }

    }

    public partial class Image
    {
        internal VkImage_T __Instance;

        public Image()
        {
        }

        public Image(AdamantiumVulkan.Core.Interop.VkImage_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkImage_T(Image i)
        {
            return i?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkImage_T();
        }

        public static implicit operator Image(AdamantiumVulkan.Core.Interop.VkImage_T i)
        {
            return new Image(){__Instance = i};
        }

    }

    public partial class Event
    {
        internal VkEvent_T __Instance;

        public Event()
        {
        }

        public Event(AdamantiumVulkan.Core.Interop.VkEvent_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkEvent_T(Event e)
        {
            return e?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkEvent_T();
        }

        public static implicit operator Event(AdamantiumVulkan.Core.Interop.VkEvent_T e)
        {
            return new Event(){__Instance = e};
        }

    }

    public partial class QueryPool
    {
        internal VkQueryPool_T __Instance;

        public QueryPool()
        {
        }

        public QueryPool(AdamantiumVulkan.Core.Interop.VkQueryPool_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkQueryPool_T(QueryPool q)
        {
            return q?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkQueryPool_T();
        }

        public static implicit operator QueryPool(AdamantiumVulkan.Core.Interop.VkQueryPool_T q)
        {
            return new QueryPool(){__Instance = q};
        }

    }

    public partial class BufferView
    {
        internal VkBufferView_T __Instance;

        public BufferView()
        {
        }

        public BufferView(AdamantiumVulkan.Core.Interop.VkBufferView_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkBufferView_T(BufferView b)
        {
            return b?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkBufferView_T();
        }

        public static implicit operator BufferView(AdamantiumVulkan.Core.Interop.VkBufferView_T b)
        {
            return new BufferView(){__Instance = b};
        }

    }

    public partial class ImageView
    {
        internal VkImageView_T __Instance;

        public ImageView()
        {
        }

        public ImageView(AdamantiumVulkan.Core.Interop.VkImageView_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkImageView_T(ImageView i)
        {
            return i?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkImageView_T();
        }

        public static implicit operator ImageView(AdamantiumVulkan.Core.Interop.VkImageView_T i)
        {
            return new ImageView(){__Instance = i};
        }

    }

    public partial class ShaderModule
    {
        internal VkShaderModule_T __Instance;

        public ShaderModule()
        {
        }

        public ShaderModule(AdamantiumVulkan.Core.Interop.VkShaderModule_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkShaderModule_T(ShaderModule s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkShaderModule_T();
        }

        public static implicit operator ShaderModule(AdamantiumVulkan.Core.Interop.VkShaderModule_T s)
        {
            return new ShaderModule(){__Instance = s};
        }

    }

    public partial class PipelineCache
    {
        internal VkPipelineCache_T __Instance;

        public PipelineCache()
        {
        }

        public PipelineCache(AdamantiumVulkan.Core.Interop.VkPipelineCache_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkPipelineCache_T(PipelineCache p)
        {
            return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPipelineCache_T();
        }

        public static implicit operator PipelineCache(AdamantiumVulkan.Core.Interop.VkPipelineCache_T p)
        {
            return new PipelineCache(){__Instance = p};
        }

    }

    public partial class PipelineLayout
    {
        internal VkPipelineLayout_T __Instance;

        public PipelineLayout()
        {
        }

        public PipelineLayout(AdamantiumVulkan.Core.Interop.VkPipelineLayout_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkPipelineLayout_T(PipelineLayout p)
        {
            return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPipelineLayout_T();
        }

        public static implicit operator PipelineLayout(AdamantiumVulkan.Core.Interop.VkPipelineLayout_T p)
        {
            return new PipelineLayout(){__Instance = p};
        }

    }

    public partial class RenderPass
    {
        internal VkRenderPass_T __Instance;

        public RenderPass()
        {
        }

        public RenderPass(AdamantiumVulkan.Core.Interop.VkRenderPass_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkRenderPass_T(RenderPass r)
        {
            return r?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkRenderPass_T();
        }

        public static implicit operator RenderPass(AdamantiumVulkan.Core.Interop.VkRenderPass_T r)
        {
            return new RenderPass(){__Instance = r};
        }

    }

    public partial class Pipeline
    {
        internal VkPipeline_T __Instance;

        public Pipeline()
        {
        }

        public Pipeline(AdamantiumVulkan.Core.Interop.VkPipeline_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkPipeline_T(Pipeline p)
        {
            return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPipeline_T();
        }

        public static implicit operator Pipeline(AdamantiumVulkan.Core.Interop.VkPipeline_T p)
        {
            return new Pipeline(){__Instance = p};
        }

    }

    public partial class DescriptorSetLayout
    {
        internal VkDescriptorSetLayout_T __Instance;

        public DescriptorSetLayout()
        {
        }

        public DescriptorSetLayout(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T(DescriptorSetLayout d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T();
        }

        public static implicit operator DescriptorSetLayout(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T d)
        {
            return new DescriptorSetLayout(){__Instance = d};
        }

    }

    public partial class Sampler
    {
        internal VkSampler_T __Instance;

        public Sampler()
        {
        }

        public Sampler(AdamantiumVulkan.Core.Interop.VkSampler_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSampler_T(Sampler s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSampler_T();
        }

        public static implicit operator Sampler(AdamantiumVulkan.Core.Interop.VkSampler_T s)
        {
            return new Sampler(){__Instance = s};
        }

    }

    public partial class DescriptorPool
    {
        internal VkDescriptorPool_T __Instance;

        public DescriptorPool()
        {
        }

        public DescriptorPool(AdamantiumVulkan.Core.Interop.VkDescriptorPool_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDescriptorPool_T(DescriptorPool d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDescriptorPool_T();
        }

        public static implicit operator DescriptorPool(AdamantiumVulkan.Core.Interop.VkDescriptorPool_T d)
        {
            return new DescriptorPool(){__Instance = d};
        }

    }

    public partial class DescriptorSet
    {
        internal VkDescriptorSet_T __Instance;

        public DescriptorSet()
        {
        }

        public DescriptorSet(AdamantiumVulkan.Core.Interop.VkDescriptorSet_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDescriptorSet_T(DescriptorSet d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDescriptorSet_T();
        }

        public static implicit operator DescriptorSet(AdamantiumVulkan.Core.Interop.VkDescriptorSet_T d)
        {
            return new DescriptorSet(){__Instance = d};
        }

    }

    public partial class Framebuffer
    {
        internal VkFramebuffer_T __Instance;

        public Framebuffer()
        {
        }

        public Framebuffer(AdamantiumVulkan.Core.Interop.VkFramebuffer_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkFramebuffer_T(Framebuffer f)
        {
            return f?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkFramebuffer_T();
        }

        public static implicit operator Framebuffer(AdamantiumVulkan.Core.Interop.VkFramebuffer_T f)
        {
            return new Framebuffer(){__Instance = f};
        }

    }

    public partial class CommandPool
    {
        internal VkCommandPool_T __Instance;

        public CommandPool()
        {
        }

        public CommandPool(AdamantiumVulkan.Core.Interop.VkCommandPool_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkCommandPool_T(CommandPool c)
        {
            return c?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkCommandPool_T();
        }

        public static implicit operator CommandPool(AdamantiumVulkan.Core.Interop.VkCommandPool_T c)
        {
            return new CommandPool(){__Instance = c};
        }

    }

    public partial class SamplerYcbcrConversion
    {
        internal VkSamplerYcbcrConversion_T __Instance;

        public SamplerYcbcrConversion()
        {
        }

        public SamplerYcbcrConversion(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T(SamplerYcbcrConversion s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T();
        }

        public static implicit operator SamplerYcbcrConversion(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T s)
        {
            return new SamplerYcbcrConversion(){__Instance = s};
        }

    }

    public partial class DescriptorUpdateTemplate
    {
        internal VkDescriptorUpdateTemplate_T __Instance;

        public DescriptorUpdateTemplate()
        {
        }

        public DescriptorUpdateTemplate(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T(DescriptorUpdateTemplate d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T();
        }

        public static implicit operator DescriptorUpdateTemplate(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T d)
        {
            return new DescriptorUpdateTemplate(){__Instance = d};
        }

    }

    public partial class SurfaceKHR
    {
        internal VkSurfaceKHR_T __Instance;

        public SurfaceKHR()
        {
        }

        public SurfaceKHR(AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T(SurfaceKHR s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T();
        }

        public static implicit operator SurfaceKHR(AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T s)
        {
            return new SurfaceKHR(){__Instance = s};
        }

    }

    public partial class SwapchainKHR
    {
        internal VkSwapchainKHR_T __Instance;

        public SwapchainKHR()
        {
        }

        public SwapchainKHR(AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T(SwapchainKHR s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T();
        }

        public static implicit operator SwapchainKHR(AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T s)
        {
            return new SwapchainKHR(){__Instance = s};
        }

    }

    public partial class DisplayKHR
    {
        internal VkDisplayKHR_T __Instance;

        public DisplayKHR()
        {
        }

        public DisplayKHR(AdamantiumVulkan.Core.Interop.VkDisplayKHR_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDisplayKHR_T(DisplayKHR d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDisplayKHR_T();
        }

        public static implicit operator DisplayKHR(AdamantiumVulkan.Core.Interop.VkDisplayKHR_T d)
        {
            return new DisplayKHR(){__Instance = d};
        }

    }

    public partial class DisplayModeKHR
    {
        internal VkDisplayModeKHR_T __Instance;

        public DisplayModeKHR()
        {
        }

        public DisplayModeKHR(AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T(DisplayModeKHR d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T();
        }

        public static implicit operator DisplayModeKHR(AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T d)
        {
            return new DisplayModeKHR(){__Instance = d};
        }

    }

    public partial class DescriptorUpdateTemplateKHR
    {
        internal VkDescriptorUpdateTemplate_T __Instance;

        public DescriptorUpdateTemplateKHR()
        {
        }

        public DescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T(DescriptorUpdateTemplateKHR d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T();
        }

        public static implicit operator DescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T d)
        {
            return new DescriptorUpdateTemplateKHR(){__Instance = d};
        }

    }

    public partial class SamplerYcbcrConversionKHR
    {
        internal VkSamplerYcbcrConversion_T __Instance;

        public SamplerYcbcrConversionKHR()
        {
        }

        public SamplerYcbcrConversionKHR(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T(SamplerYcbcrConversionKHR s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T();
        }

        public static implicit operator SamplerYcbcrConversionKHR(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T s)
        {
            return new SamplerYcbcrConversionKHR(){__Instance = s};
        }

    }

    public partial class DebugReportCallbackEXT
    {
        internal VkDebugReportCallbackEXT_T __Instance;

        public DebugReportCallbackEXT()
        {
        }

        public DebugReportCallbackEXT(AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T(DebugReportCallbackEXT d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T();
        }

        public static implicit operator DebugReportCallbackEXT(AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T d)
        {
            return new DebugReportCallbackEXT(){__Instance = d};
        }

    }

    public partial class ObjectTableNVX
    {
        internal VkObjectTableNVX_T __Instance;

        public ObjectTableNVX()
        {
        }

        public ObjectTableNVX(AdamantiumVulkan.Core.Interop.VkObjectTableNVX_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkObjectTableNVX_T(ObjectTableNVX o)
        {
            return o?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkObjectTableNVX_T();
        }

        public static implicit operator ObjectTableNVX(AdamantiumVulkan.Core.Interop.VkObjectTableNVX_T o)
        {
            return new ObjectTableNVX(){__Instance = o};
        }

    }

    public partial class IndirectCommandsLayoutNVX
    {
        internal VkIndirectCommandsLayoutNVX_T __Instance;

        public IndirectCommandsLayoutNVX()
        {
        }

        public IndirectCommandsLayoutNVX(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNVX_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNVX_T(IndirectCommandsLayoutNVX i)
        {
            return i?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNVX_T();
        }

        public static implicit operator IndirectCommandsLayoutNVX(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNVX_T i)
        {
            return new IndirectCommandsLayoutNVX(){__Instance = i};
        }

    }

    public partial class DebugUtilsMessengerEXT
    {
        internal VkDebugUtilsMessengerEXT_T __Instance;

        public DebugUtilsMessengerEXT()
        {
        }

        public DebugUtilsMessengerEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T(DebugUtilsMessengerEXT d)
        {
            return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T();
        }

        public static implicit operator DebugUtilsMessengerEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T d)
        {
            return new DebugUtilsMessengerEXT(){__Instance = d};
        }

    }

    public partial class ValidationCacheEXT
    {
        internal VkValidationCacheEXT_T __Instance;

        public ValidationCacheEXT()
        {
        }

        public ValidationCacheEXT(AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T(ValidationCacheEXT v)
        {
            return v?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T();
        }

        public static implicit operator ValidationCacheEXT(AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T v)
        {
            return new ValidationCacheEXT(){__Instance = v};
        }

    }

    public partial class AccelerationStructureNV
    {
        internal VkAccelerationStructureNV_T __Instance;

        public AccelerationStructureNV()
        {
        }

        public AccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public System.IntPtr NativePointer
        {
            get => __Instance.pointer;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T(AccelerationStructureNV a)
        {
            return a?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T();
        }

        public static implicit operator AccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T a)
        {
            return new AccelerationStructureNV(){__Instance = a};
        }

    }

    public partial class PerformanceConfigurationINTEL
    {
        internal VkPerformanceConfigurationINTEL_T __Instance;

        public PerformanceConfigurationINTEL()
        {
        }

        public PerformanceConfigurationINTEL(AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T __Instance)
        {
            this.__Instance = __Instance;
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T(PerformanceConfigurationINTEL p)
        {
            return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T();
        }

        public static implicit operator PerformanceConfigurationINTEL(AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T p)
        {
            return new PerformanceConfigurationINTEL(){__Instance = p};
        }

    }

    public static class VulkanNative
    {
        public static Result CreateInstance(in InstanceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Instance pInstance)
        {
            var arg0 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg1 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkInstance_T arg2;
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateInstance(arg0, arg1, out arg2);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg0);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pInstance = new Instance(arg2);
            return result;
        }

        public static Result EnumerateInstanceExtensionProperties(string pLayerName, ref uint pPropertyCount, ExtensionProperties[] pProperties)
        {
            AdamantiumVulkan.Core.Interop.VkExtensionProperties[] arg0 = null;
            arg0 = ReferenceEquals(pProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkExtensionProperties[pProperties.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateInstanceExtensionProperties(pLayerName, ref pPropertyCount, arg0);
            if (!ReferenceEquals(pProperties, null))
            {
                for (var i = 0U; i < pProperties.Length; ++i)
                {
                    pProperties[i] = new ExtensionProperties(arg0[i]);
                }
            }
            return result;
        }

        public static Result EnumerateInstanceLayerProperties(ref uint pPropertyCount, LayerProperties[] pProperties)
        {
            AdamantiumVulkan.Core.Interop.VkLayerProperties[] arg0 = null;
            arg0 = ReferenceEquals(pProperties, null) ? null : new AdamantiumVulkan.Core.Interop.VkLayerProperties[pProperties.Length];
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateInstanceLayerProperties(ref pPropertyCount, arg0);
            if (!ReferenceEquals(pProperties, null))
            {
                for (var i = 0U; i < pProperties.Length; ++i)
                {
                    pProperties[i] = new LayerProperties(arg0[i]);
                }
            }
            return result;
        }

        public static Result EnumerateInstanceVersion(ref uint pApiVersion)
        {
            return AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateInstanceVersion(ref pApiVersion);
        }

        public static Result EnumerateInstanceExtensionProperties(string pLayerName, ref uint pPropertyCount, ref ExtensionProperties pProperties)
        {
            var arg0 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateInstanceExtensionProperties(pLayerName, ref pPropertyCount, ref arg0);
            var temparg0 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkExtensionProperties>(arg0);
            pProperties = new AdamantiumVulkan.Core.ExtensionProperties(temparg0);
            Marshal.FreeHGlobal(arg0);
            return result;
        }

        public static Result EnumerateInstanceLayerProperties(ref uint pPropertyCount, ref LayerProperties pProperties)
        {
            var arg0 = ReferenceEquals(pProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pProperties.ToInternal());
            var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateInstanceLayerProperties(ref pPropertyCount, ref arg0);
            var temparg0 =  Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VkLayerProperties>(arg0);
            pProperties = new AdamantiumVulkan.Core.LayerProperties(temparg0);
            Marshal.FreeHGlobal(arg0);
            return result;
        }

    }

}

