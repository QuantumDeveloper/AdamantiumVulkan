// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Core
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan;
    using AdamantiumVulkan.Core.Interop;

    public partial class ApplicationInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ApplicationInfo _internal;

        private GCHandleReference refpNext;

        private StringReference refpApplicationName;

        private StringReference refpEngineName;

        public ApplicationInfo()
        {
        }

        public ApplicationInfo(AdamantiumVulkan.Core.Interop.ApplicationInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private string pApplicationName;
        public string PApplicationName
        {
            get
            {
                if(pApplicationName != null)
                    return pApplicationName;

                pApplicationName = Marshal.PtrToStringAnsi(_internal.pApplicationName);
                return pApplicationName;
            }
            set
            {
                refpApplicationName?.Dispose();
                refpApplicationName = new StringReference(value, false);
                pApplicationName = value;
                _internal.pApplicationName = refpApplicationName.Handle;
            }
        }

        public uint ApplicationVersion
        {
            get => _internal.applicationVersion;
            set
            {
                _internal.applicationVersion = value;
            }
        }

        private string pEngineName;
        public string PEngineName
        {
            get
            {
                if(pEngineName != null)
                    return pEngineName;

                pEngineName = Marshal.PtrToStringAnsi(_internal.pEngineName);
                return pEngineName;
            }
            set
            {
                refpEngineName?.Dispose();
                refpEngineName = new StringReference(value, false);
                pEngineName = value;
                _internal.pEngineName = refpEngineName.Handle;
            }
        }

        public uint EngineVersion
        {
            get => _internal.engineVersion;
            set
            {
                _internal.engineVersion = value;
            }
        }

        public uint ApiVersion
        {
            get => _internal.apiVersion;
            set
            {
                _internal.apiVersion = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpApplicationName?.Dispose();
            refpEngineName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ApplicationInfo(ApplicationInfo a)
        {
            return a._internal;
        }

        public static implicit operator ApplicationInfo(AdamantiumVulkan.Core.Interop.ApplicationInfo a)
        {
            return new ApplicationInfo(a);
        }

    }

    public partial class InstanceCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.InstanceCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpApplicationInfo;

        private StringArrayReference refppEnabledLayerNames;

        private StringArrayReference refppEnabledExtensionNames;

        public InstanceCreateInfo()
        {
        }

        public InstanceCreateInfo(AdamantiumVulkan.Core.Interop.InstanceCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        private ApplicationInfo pApplicationInfo;
        public ApplicationInfo PApplicationInfo
        {
            get
            {
                if(pApplicationInfo != null)
                    return pApplicationInfo;

                pApplicationInfo = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.ApplicationInfo>(_internal.pApplicationInfo);
                return pApplicationInfo;
            }
            set
            {
                refpApplicationInfo?.Dispose();
                AdamantiumVulkan.Core.Interop.ApplicationInfo tmp = value;
                refpApplicationInfo = new StructReference(tmp);
                pApplicationInfo = value;
                _internal.pApplicationInfo = refpApplicationInfo.Handle;
            }
        }

        public uint EnabledLayerCount
        {
            get => _internal.enabledLayerCount;
            set
            {
                _internal.enabledLayerCount = value;
            }
        }

        private string[] ppEnabledLayerNames;
        public string[] PpEnabledLayerNames
        {
            get
            {
                if(ppEnabledLayerNames != null)
                    return ppEnabledLayerNames;

                return ppEnabledLayerNames;
            }
            set
            {
                refppEnabledLayerNames?.Dispose();
                refppEnabledLayerNames = new StringArrayReference(value, false);
                ppEnabledLayerNames = value;
                _internal.ppEnabledLayerNames = refppEnabledLayerNames.Handle;
            }
        }

        public uint EnabledExtensionCount
        {
            get => _internal.enabledExtensionCount;
            set
            {
                _internal.enabledExtensionCount = value;
            }
        }

        private string[] ppEnabledExtensionNames;
        public string[] PpEnabledExtensionNames
        {
            get
            {
                if(ppEnabledExtensionNames != null)
                    return ppEnabledExtensionNames;

                return ppEnabledExtensionNames;
            }
            set
            {
                refppEnabledExtensionNames?.Dispose();
                refppEnabledExtensionNames = new StringArrayReference(value, false);
                ppEnabledExtensionNames = value;
                _internal.ppEnabledExtensionNames = refppEnabledExtensionNames.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpApplicationInfo?.Dispose();
            refppEnabledLayerNames?.Dispose();
            refppEnabledExtensionNames?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.InstanceCreateInfo(InstanceCreateInfo i)
        {
            return i._internal;
        }

        public static implicit operator InstanceCreateInfo(AdamantiumVulkan.Core.Interop.InstanceCreateInfo i)
        {
            return new InstanceCreateInfo(i);
        }

    }

    public partial class AllocationCallbacks : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AllocationCallbacks _internal;

        private GCHandleReference refpUserData;

        public AllocationCallbacks()
        {
        }

        public AllocationCallbacks(AdamantiumVulkan.Core.Interop.AllocationCallbacks _internal)
        {
            this._internal = _internal;
        }

        private System.IntPtr pUserData;
        public System.IntPtr PUserData
        {
            get
            {
                if(pUserData != null)
                    return pUserData;

                pUserData = _internal.pUserData;
                return pUserData;
            }
            set
            {
                refpUserData?.Dispose();
                refpUserData = new GCHandleReference(value);
                pUserData = value;
                _internal.pUserData = refpUserData.Handle;
            }
        }

        public PFN_vkAllocationFunction PfnAllocation
        {
            get => _internal.pfnAllocation;
            set
            {
                _internal.pfnAllocation = value;
            }
        }

        public PFN_vkReallocationFunction PfnReallocation
        {
            get => _internal.pfnReallocation;
            set
            {
                _internal.pfnReallocation = value;
            }
        }

        public PFN_vkFreeFunction PfnFree
        {
            get => _internal.pfnFree;
            set
            {
                _internal.pfnFree = value;
            }
        }

        public PFN_vkInternalAllocationNotification PfnInternalAllocation
        {
            get => _internal.pfnInternalAllocation;
            set
            {
                _internal.pfnInternalAllocation = value;
            }
        }

        public PFN_vkInternalFreeNotification PfnInternalFree
        {
            get => _internal.pfnInternalFree;
            set
            {
                _internal.pfnInternalFree = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpUserData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AllocationCallbacks(AllocationCallbacks a)
        {
            if (a.PfnAllocation != null)
            {
                a._internal.pfnAllocation = a.PfnAllocation;
            }
            if (a.PfnReallocation != null)
            {
                a._internal.pfnReallocation = a.PfnReallocation;
            }
            if (a.PfnFree != null)
            {
                a._internal.pfnFree = a.PfnFree;
            }
            if (a.PfnInternalAllocation != null)
            {
                a._internal.pfnInternalAllocation = a.PfnInternalAllocation;
            }
            if (a.PfnInternalFree != null)
            {
                a._internal.pfnInternalFree = a.PfnInternalFree;
            }
            return a._internal;
        }

        public static implicit operator AllocationCallbacks(AdamantiumVulkan.Core.Interop.AllocationCallbacks a)
        {
            return new AllocationCallbacks(a);
        }

    }

    public partial class PhysicalDeviceFeatures
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures _internal;

        public PhysicalDeviceFeatures()
        {
        }

        public PhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures _internal)
        {
            this._internal = _internal;
        }

        public bool RobustBufferAccess
        {
            get => _internal.robustBufferAccess;
            set
            {
                _internal.robustBufferAccess = value;
            }
        }

        public bool FullDrawIndexUint32
        {
            get => _internal.fullDrawIndexUint32;
            set
            {
                _internal.fullDrawIndexUint32 = value;
            }
        }

        public bool ImageCubeArray
        {
            get => _internal.imageCubeArray;
            set
            {
                _internal.imageCubeArray = value;
            }
        }

        public bool IndependentBlend
        {
            get => _internal.independentBlend;
            set
            {
                _internal.independentBlend = value;
            }
        }

        public bool GeometryShader
        {
            get => _internal.geometryShader;
            set
            {
                _internal.geometryShader = value;
            }
        }

        public bool TessellationShader
        {
            get => _internal.tessellationShader;
            set
            {
                _internal.tessellationShader = value;
            }
        }

        public bool SampleRateShading
        {
            get => _internal.sampleRateShading;
            set
            {
                _internal.sampleRateShading = value;
            }
        }

        public bool DualSrcBlend
        {
            get => _internal.dualSrcBlend;
            set
            {
                _internal.dualSrcBlend = value;
            }
        }

        public bool LogicOp
        {
            get => _internal.logicOp;
            set
            {
                _internal.logicOp = value;
            }
        }

        public bool MultiDrawIndirect
        {
            get => _internal.multiDrawIndirect;
            set
            {
                _internal.multiDrawIndirect = value;
            }
        }

        public bool DrawIndirectFirstInstance
        {
            get => _internal.drawIndirectFirstInstance;
            set
            {
                _internal.drawIndirectFirstInstance = value;
            }
        }

        public bool DepthClamp
        {
            get => _internal.depthClamp;
            set
            {
                _internal.depthClamp = value;
            }
        }

        public bool DepthBiasClamp
        {
            get => _internal.depthBiasClamp;
            set
            {
                _internal.depthBiasClamp = value;
            }
        }

        public bool FillModeNonSolid
        {
            get => _internal.fillModeNonSolid;
            set
            {
                _internal.fillModeNonSolid = value;
            }
        }

        public bool DepthBounds
        {
            get => _internal.depthBounds;
            set
            {
                _internal.depthBounds = value;
            }
        }

        public bool WideLines
        {
            get => _internal.wideLines;
            set
            {
                _internal.wideLines = value;
            }
        }

        public bool LargePoints
        {
            get => _internal.largePoints;
            set
            {
                _internal.largePoints = value;
            }
        }

        public bool AlphaToOne
        {
            get => _internal.alphaToOne;
            set
            {
                _internal.alphaToOne = value;
            }
        }

        public bool MultiViewport
        {
            get => _internal.multiViewport;
            set
            {
                _internal.multiViewport = value;
            }
        }

        public bool SamplerAnisotropy
        {
            get => _internal.samplerAnisotropy;
            set
            {
                _internal.samplerAnisotropy = value;
            }
        }

        public bool TextureCompressionETC2
        {
            get => _internal.textureCompressionETC2;
            set
            {
                _internal.textureCompressionETC2 = value;
            }
        }

        public bool TextureCompressionASTC_LDR
        {
            get => _internal.textureCompressionASTC_LDR;
            set
            {
                _internal.textureCompressionASTC_LDR = value;
            }
        }

        public bool TextureCompressionBC
        {
            get => _internal.textureCompressionBC;
            set
            {
                _internal.textureCompressionBC = value;
            }
        }

        public bool OcclusionQueryPrecise
        {
            get => _internal.occlusionQueryPrecise;
            set
            {
                _internal.occlusionQueryPrecise = value;
            }
        }

        public bool PipelineStatisticsQuery
        {
            get => _internal.pipelineStatisticsQuery;
            set
            {
                _internal.pipelineStatisticsQuery = value;
            }
        }

        public bool VertexPipelineStoresAndAtomics
        {
            get => _internal.vertexPipelineStoresAndAtomics;
            set
            {
                _internal.vertexPipelineStoresAndAtomics = value;
            }
        }

        public bool FragmentStoresAndAtomics
        {
            get => _internal.fragmentStoresAndAtomics;
            set
            {
                _internal.fragmentStoresAndAtomics = value;
            }
        }

        public bool ShaderTessellationAndGeometryPointSize
        {
            get => _internal.shaderTessellationAndGeometryPointSize;
            set
            {
                _internal.shaderTessellationAndGeometryPointSize = value;
            }
        }

        public bool ShaderImageGatherExtended
        {
            get => _internal.shaderImageGatherExtended;
            set
            {
                _internal.shaderImageGatherExtended = value;
            }
        }

        public bool ShaderStorageImageExtendedFormats
        {
            get => _internal.shaderStorageImageExtendedFormats;
            set
            {
                _internal.shaderStorageImageExtendedFormats = value;
            }
        }

        public bool ShaderStorageImageMultisample
        {
            get => _internal.shaderStorageImageMultisample;
            set
            {
                _internal.shaderStorageImageMultisample = value;
            }
        }

        public bool ShaderStorageImageReadWithoutFormat
        {
            get => _internal.shaderStorageImageReadWithoutFormat;
            set
            {
                _internal.shaderStorageImageReadWithoutFormat = value;
            }
        }

        public bool ShaderStorageImageWriteWithoutFormat
        {
            get => _internal.shaderStorageImageWriteWithoutFormat;
            set
            {
                _internal.shaderStorageImageWriteWithoutFormat = value;
            }
        }

        public bool ShaderUniformBufferArrayDynamicIndexing
        {
            get => _internal.shaderUniformBufferArrayDynamicIndexing;
            set
            {
                _internal.shaderUniformBufferArrayDynamicIndexing = value;
            }
        }

        public bool ShaderSampledImageArrayDynamicIndexing
        {
            get => _internal.shaderSampledImageArrayDynamicIndexing;
            set
            {
                _internal.shaderSampledImageArrayDynamicIndexing = value;
            }
        }

        public bool ShaderStorageBufferArrayDynamicIndexing
        {
            get => _internal.shaderStorageBufferArrayDynamicIndexing;
            set
            {
                _internal.shaderStorageBufferArrayDynamicIndexing = value;
            }
        }

        public bool ShaderStorageImageArrayDynamicIndexing
        {
            get => _internal.shaderStorageImageArrayDynamicIndexing;
            set
            {
                _internal.shaderStorageImageArrayDynamicIndexing = value;
            }
        }

        public bool ShaderClipDistance
        {
            get => _internal.shaderClipDistance;
            set
            {
                _internal.shaderClipDistance = value;
            }
        }

        public bool ShaderCullDistance
        {
            get => _internal.shaderCullDistance;
            set
            {
                _internal.shaderCullDistance = value;
            }
        }

        public bool ShaderFloat64
        {
            get => _internal.shaderFloat64;
            set
            {
                _internal.shaderFloat64 = value;
            }
        }

        public bool ShaderInt64
        {
            get => _internal.shaderInt64;
            set
            {
                _internal.shaderInt64 = value;
            }
        }

        public bool ShaderInt16
        {
            get => _internal.shaderInt16;
            set
            {
                _internal.shaderInt16 = value;
            }
        }

        public bool ShaderResourceResidency
        {
            get => _internal.shaderResourceResidency;
            set
            {
                _internal.shaderResourceResidency = value;
            }
        }

        public bool ShaderResourceMinLod
        {
            get => _internal.shaderResourceMinLod;
            set
            {
                _internal.shaderResourceMinLod = value;
            }
        }

        public bool SparseBinding
        {
            get => _internal.sparseBinding;
            set
            {
                _internal.sparseBinding = value;
            }
        }

        public bool SparseResidencyBuffer
        {
            get => _internal.sparseResidencyBuffer;
            set
            {
                _internal.sparseResidencyBuffer = value;
            }
        }

        public bool SparseResidencyImage2D
        {
            get => _internal.sparseResidencyImage2D;
            set
            {
                _internal.sparseResidencyImage2D = value;
            }
        }

        public bool SparseResidencyImage3D
        {
            get => _internal.sparseResidencyImage3D;
            set
            {
                _internal.sparseResidencyImage3D = value;
            }
        }

        public bool SparseResidency2Samples
        {
            get => _internal.sparseResidency2Samples;
            set
            {
                _internal.sparseResidency2Samples = value;
            }
        }

        public bool SparseResidency4Samples
        {
            get => _internal.sparseResidency4Samples;
            set
            {
                _internal.sparseResidency4Samples = value;
            }
        }

        public bool SparseResidency8Samples
        {
            get => _internal.sparseResidency8Samples;
            set
            {
                _internal.sparseResidency8Samples = value;
            }
        }

        public bool SparseResidency16Samples
        {
            get => _internal.sparseResidency16Samples;
            set
            {
                _internal.sparseResidency16Samples = value;
            }
        }

        public bool SparseResidencyAliased
        {
            get => _internal.sparseResidencyAliased;
            set
            {
                _internal.sparseResidencyAliased = value;
            }
        }

        public bool VariableMultisampleRate
        {
            get => _internal.variableMultisampleRate;
            set
            {
                _internal.variableMultisampleRate = value;
            }
        }

        public bool InheritedQueries
        {
            get => _internal.inheritedQueries;
            set
            {
                _internal.inheritedQueries = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures(PhysicalDeviceFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures p)
        {
            return new PhysicalDeviceFeatures(p);
        }

    }

    public partial class FormatProperties
    {
        private AdamantiumVulkan.Core.Interop.FormatProperties _internal;

        public FormatProperties()
        {
        }

        public FormatProperties(AdamantiumVulkan.Core.Interop.FormatProperties _internal)
        {
            this._internal = _internal;
        }

        public uint LinearTilingFeatures
        {
            get => _internal.linearTilingFeatures;
            set
            {
                _internal.linearTilingFeatures = value;
            }
        }

        public uint OptimalTilingFeatures
        {
            get => _internal.optimalTilingFeatures;
            set
            {
                _internal.optimalTilingFeatures = value;
            }
        }

        public uint BufferFeatures
        {
            get => _internal.bufferFeatures;
            set
            {
                _internal.bufferFeatures = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FormatProperties(FormatProperties f)
        {
            return f._internal;
        }

        public static implicit operator FormatProperties(AdamantiumVulkan.Core.Interop.FormatProperties f)
        {
            return new FormatProperties(f);
        }

    }

    public partial class Extent3D
    {
        private AdamantiumVulkan.Core.Interop.Extent3D _internal;

        public Extent3D()
        {
        }

        public Extent3D(AdamantiumVulkan.Core.Interop.Extent3D _internal)
        {
            this._internal = _internal;
        }

        public uint Width
        {
            get => _internal.width;
            set
            {
                _internal.width = value;
            }
        }

        public uint Height
        {
            get => _internal.height;
            set
            {
                _internal.height = value;
            }
        }

        public uint Depth
        {
            get => _internal.depth;
            set
            {
                _internal.depth = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Extent3D(Extent3D e)
        {
            return e._internal;
        }

        public static implicit operator Extent3D(AdamantiumVulkan.Core.Interop.Extent3D e)
        {
            return new Extent3D(e);
        }

    }

    public partial class ImageFormatProperties
    {
        private AdamantiumVulkan.Core.Interop.ImageFormatProperties _internal;

        private Extent3D maxExtent;

        public ImageFormatProperties()
        {
        }

        public ImageFormatProperties(AdamantiumVulkan.Core.Interop.ImageFormatProperties _internal)
        {
            this._internal = _internal;
        }

        public Extent3D MaxExtent
        {
            get
            {
                if (maxExtent != null)
                {
                    return maxExtent;
                }
                maxExtent = _internal.maxExtent;
                return maxExtent;
            }
            set
            {
                maxExtent = value;
                _internal.maxExtent = value;
            }
        }

        public uint MaxMipLevels
        {
            get => _internal.maxMipLevels;
            set
            {
                _internal.maxMipLevels = value;
            }
        }

        public uint MaxArrayLayers
        {
            get => _internal.maxArrayLayers;
            set
            {
                _internal.maxArrayLayers = value;
            }
        }

        public uint SampleCounts
        {
            get => _internal.sampleCounts;
            set
            {
                _internal.sampleCounts = value;
            }
        }

        public ulong MaxResourceSize
        {
            get => _internal.maxResourceSize;
            set
            {
                _internal.maxResourceSize = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageFormatProperties(ImageFormatProperties i)
        {
            if (i.MaxExtent != null)
            {
                i._internal.maxExtent = i.MaxExtent;
            }
            return i._internal;
        }

        public static implicit operator ImageFormatProperties(AdamantiumVulkan.Core.Interop.ImageFormatProperties i)
        {
            return new ImageFormatProperties(i);
        }

    }

    public partial class PhysicalDeviceLimits
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceLimits _internal;

        private uint[] maxComputeWorkGroupCount;

        private uint[] maxComputeWorkGroupSize;

        private uint[] maxViewportDimensions;

        private float[] viewportBoundsRange;

        private float[] pointSizeRange;

        private float[] lineWidthRange;

        public PhysicalDeviceLimits()
        {
        }

        public PhysicalDeviceLimits(AdamantiumVulkan.Core.Interop.PhysicalDeviceLimits _internal)
        {
            this._internal = _internal;
        }

        public uint MaxImageDimension1D
        {
            get => _internal.maxImageDimension1D;
            set
            {
                _internal.maxImageDimension1D = value;
            }
        }

        public uint MaxImageDimension2D
        {
            get => _internal.maxImageDimension2D;
            set
            {
                _internal.maxImageDimension2D = value;
            }
        }

        public uint MaxImageDimension3D
        {
            get => _internal.maxImageDimension3D;
            set
            {
                _internal.maxImageDimension3D = value;
            }
        }

        public uint MaxImageDimensionCube
        {
            get => _internal.maxImageDimensionCube;
            set
            {
                _internal.maxImageDimensionCube = value;
            }
        }

        public uint MaxImageArrayLayers
        {
            get => _internal.maxImageArrayLayers;
            set
            {
                _internal.maxImageArrayLayers = value;
            }
        }

        public uint MaxTexelBufferElements
        {
            get => _internal.maxTexelBufferElements;
            set
            {
                _internal.maxTexelBufferElements = value;
            }
        }

        public uint MaxUniformBufferRange
        {
            get => _internal.maxUniformBufferRange;
            set
            {
                _internal.maxUniformBufferRange = value;
            }
        }

        public uint MaxStorageBufferRange
        {
            get => _internal.maxStorageBufferRange;
            set
            {
                _internal.maxStorageBufferRange = value;
            }
        }

        public uint MaxPushConstantsSize
        {
            get => _internal.maxPushConstantsSize;
            set
            {
                _internal.maxPushConstantsSize = value;
            }
        }

        public uint MaxMemoryAllocationCount
        {
            get => _internal.maxMemoryAllocationCount;
            set
            {
                _internal.maxMemoryAllocationCount = value;
            }
        }

        public uint MaxSamplerAllocationCount
        {
            get => _internal.maxSamplerAllocationCount;
            set
            {
                _internal.maxSamplerAllocationCount = value;
            }
        }

        public ulong BufferImageGranularity
        {
            get => _internal.bufferImageGranularity;
            set
            {
                _internal.bufferImageGranularity = value;
            }
        }

        public ulong SparseAddressSpaceSize
        {
            get => _internal.sparseAddressSpaceSize;
            set
            {
                _internal.sparseAddressSpaceSize = value;
            }
        }

        public uint MaxBoundDescriptorSets
        {
            get => _internal.maxBoundDescriptorSets;
            set
            {
                _internal.maxBoundDescriptorSets = value;
            }
        }

        public uint MaxPerStageDescriptorSamplers
        {
            get => _internal.maxPerStageDescriptorSamplers;
            set
            {
                _internal.maxPerStageDescriptorSamplers = value;
            }
        }

        public uint MaxPerStageDescriptorUniformBuffers
        {
            get => _internal.maxPerStageDescriptorUniformBuffers;
            set
            {
                _internal.maxPerStageDescriptorUniformBuffers = value;
            }
        }

        public uint MaxPerStageDescriptorStorageBuffers
        {
            get => _internal.maxPerStageDescriptorStorageBuffers;
            set
            {
                _internal.maxPerStageDescriptorStorageBuffers = value;
            }
        }

        public uint MaxPerStageDescriptorSampledImages
        {
            get => _internal.maxPerStageDescriptorSampledImages;
            set
            {
                _internal.maxPerStageDescriptorSampledImages = value;
            }
        }

        public uint MaxPerStageDescriptorStorageImages
        {
            get => _internal.maxPerStageDescriptorStorageImages;
            set
            {
                _internal.maxPerStageDescriptorStorageImages = value;
            }
        }

        public uint MaxPerStageDescriptorInputAttachments
        {
            get => _internal.maxPerStageDescriptorInputAttachments;
            set
            {
                _internal.maxPerStageDescriptorInputAttachments = value;
            }
        }

        public uint MaxPerStageResources
        {
            get => _internal.maxPerStageResources;
            set
            {
                _internal.maxPerStageResources = value;
            }
        }

        public uint MaxDescriptorSetSamplers
        {
            get => _internal.maxDescriptorSetSamplers;
            set
            {
                _internal.maxDescriptorSetSamplers = value;
            }
        }

        public uint MaxDescriptorSetUniformBuffers
        {
            get => _internal.maxDescriptorSetUniformBuffers;
            set
            {
                _internal.maxDescriptorSetUniformBuffers = value;
            }
        }

        public uint MaxDescriptorSetUniformBuffersDynamic
        {
            get => _internal.maxDescriptorSetUniformBuffersDynamic;
            set
            {
                _internal.maxDescriptorSetUniformBuffersDynamic = value;
            }
        }

        public uint MaxDescriptorSetStorageBuffers
        {
            get => _internal.maxDescriptorSetStorageBuffers;
            set
            {
                _internal.maxDescriptorSetStorageBuffers = value;
            }
        }

        public uint MaxDescriptorSetStorageBuffersDynamic
        {
            get => _internal.maxDescriptorSetStorageBuffersDynamic;
            set
            {
                _internal.maxDescriptorSetStorageBuffersDynamic = value;
            }
        }

        public uint MaxDescriptorSetSampledImages
        {
            get => _internal.maxDescriptorSetSampledImages;
            set
            {
                _internal.maxDescriptorSetSampledImages = value;
            }
        }

        public uint MaxDescriptorSetStorageImages
        {
            get => _internal.maxDescriptorSetStorageImages;
            set
            {
                _internal.maxDescriptorSetStorageImages = value;
            }
        }

        public uint MaxDescriptorSetInputAttachments
        {
            get => _internal.maxDescriptorSetInputAttachments;
            set
            {
                _internal.maxDescriptorSetInputAttachments = value;
            }
        }

        public uint MaxVertexInputAttributes
        {
            get => _internal.maxVertexInputAttributes;
            set
            {
                _internal.maxVertexInputAttributes = value;
            }
        }

        public uint MaxVertexInputBindings
        {
            get => _internal.maxVertexInputBindings;
            set
            {
                _internal.maxVertexInputBindings = value;
            }
        }

        public uint MaxVertexInputAttributeOffset
        {
            get => _internal.maxVertexInputAttributeOffset;
            set
            {
                _internal.maxVertexInputAttributeOffset = value;
            }
        }

        public uint MaxVertexInputBindingStride
        {
            get => _internal.maxVertexInputBindingStride;
            set
            {
                _internal.maxVertexInputBindingStride = value;
            }
        }

        public uint MaxVertexOutputComponents
        {
            get => _internal.maxVertexOutputComponents;
            set
            {
                _internal.maxVertexOutputComponents = value;
            }
        }

        public uint MaxTessellationGenerationLevel
        {
            get => _internal.maxTessellationGenerationLevel;
            set
            {
                _internal.maxTessellationGenerationLevel = value;
            }
        }

        public uint MaxTessellationPatchSize
        {
            get => _internal.maxTessellationPatchSize;
            set
            {
                _internal.maxTessellationPatchSize = value;
            }
        }

        public uint MaxTessellationControlPerVertexInputComponents
        {
            get => _internal.maxTessellationControlPerVertexInputComponents;
            set
            {
                _internal.maxTessellationControlPerVertexInputComponents = value;
            }
        }

        public uint MaxTessellationControlPerVertexOutputComponents
        {
            get => _internal.maxTessellationControlPerVertexOutputComponents;
            set
            {
                _internal.maxTessellationControlPerVertexOutputComponents = value;
            }
        }

        public uint MaxTessellationControlPerPatchOutputComponents
        {
            get => _internal.maxTessellationControlPerPatchOutputComponents;
            set
            {
                _internal.maxTessellationControlPerPatchOutputComponents = value;
            }
        }

        public uint MaxTessellationControlTotalOutputComponents
        {
            get => _internal.maxTessellationControlTotalOutputComponents;
            set
            {
                _internal.maxTessellationControlTotalOutputComponents = value;
            }
        }

        public uint MaxTessellationEvaluationInputComponents
        {
            get => _internal.maxTessellationEvaluationInputComponents;
            set
            {
                _internal.maxTessellationEvaluationInputComponents = value;
            }
        }

        public uint MaxTessellationEvaluationOutputComponents
        {
            get => _internal.maxTessellationEvaluationOutputComponents;
            set
            {
                _internal.maxTessellationEvaluationOutputComponents = value;
            }
        }

        public uint MaxGeometryShaderInvocations
        {
            get => _internal.maxGeometryShaderInvocations;
            set
            {
                _internal.maxGeometryShaderInvocations = value;
            }
        }

        public uint MaxGeometryInputComponents
        {
            get => _internal.maxGeometryInputComponents;
            set
            {
                _internal.maxGeometryInputComponents = value;
            }
        }

        public uint MaxGeometryOutputComponents
        {
            get => _internal.maxGeometryOutputComponents;
            set
            {
                _internal.maxGeometryOutputComponents = value;
            }
        }

        public uint MaxGeometryOutputVertices
        {
            get => _internal.maxGeometryOutputVertices;
            set
            {
                _internal.maxGeometryOutputVertices = value;
            }
        }

        public uint MaxGeometryTotalOutputComponents
        {
            get => _internal.maxGeometryTotalOutputComponents;
            set
            {
                _internal.maxGeometryTotalOutputComponents = value;
            }
        }

        public uint MaxFragmentInputComponents
        {
            get => _internal.maxFragmentInputComponents;
            set
            {
                _internal.maxFragmentInputComponents = value;
            }
        }

        public uint MaxFragmentOutputAttachments
        {
            get => _internal.maxFragmentOutputAttachments;
            set
            {
                _internal.maxFragmentOutputAttachments = value;
            }
        }

        public uint MaxFragmentDualSrcAttachments
        {
            get => _internal.maxFragmentDualSrcAttachments;
            set
            {
                _internal.maxFragmentDualSrcAttachments = value;
            }
        }

        public uint MaxFragmentCombinedOutputResources
        {
            get => _internal.maxFragmentCombinedOutputResources;
            set
            {
                _internal.maxFragmentCombinedOutputResources = value;
            }
        }

        public uint MaxComputeSharedMemorySize
        {
            get => _internal.maxComputeSharedMemorySize;
            set
            {
                _internal.maxComputeSharedMemorySize = value;
            }
        }

        public uint[] MaxComputeWorkGroupCount
        {
            get
            {
                if(maxComputeWorkGroupCount != null)
                    return maxComputeWorkGroupCount;

                var tmpArr = new uint[3];
                unsafe
                {
                    for(int i = 0; i < 3; ++i)
                    {
                        tmpArr[i] = _internal.maxComputeWorkGroupCount[i];
                    }
                }
                maxComputeWorkGroupCount = tmpArr;
                return maxComputeWorkGroupCount;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxComputeWorkGroupCount), "Array is out of bounds. Size should not be more than 3");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.maxComputeWorkGroupCount[i] = value[i];
                    }
                }
                maxComputeWorkGroupCount = value;
            }
        }

        public uint MaxComputeWorkGroupInvocations
        {
            get => _internal.maxComputeWorkGroupInvocations;
            set
            {
                _internal.maxComputeWorkGroupInvocations = value;
            }
        }

        public uint[] MaxComputeWorkGroupSize
        {
            get
            {
                if(maxComputeWorkGroupSize != null)
                    return maxComputeWorkGroupSize;

                var tmpArr = new uint[3];
                unsafe
                {
                    for(int i = 0; i < 3; ++i)
                    {
                        tmpArr[i] = _internal.maxComputeWorkGroupSize[i];
                    }
                }
                maxComputeWorkGroupSize = tmpArr;
                return maxComputeWorkGroupSize;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxComputeWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.maxComputeWorkGroupSize[i] = value[i];
                    }
                }
                maxComputeWorkGroupSize = value;
            }
        }

        public uint SubPixelPrecisionBits
        {
            get => _internal.subPixelPrecisionBits;
            set
            {
                _internal.subPixelPrecisionBits = value;
            }
        }

        public uint SubTexelPrecisionBits
        {
            get => _internal.subTexelPrecisionBits;
            set
            {
                _internal.subTexelPrecisionBits = value;
            }
        }

        public uint MipmapPrecisionBits
        {
            get => _internal.mipmapPrecisionBits;
            set
            {
                _internal.mipmapPrecisionBits = value;
            }
        }

        public uint MaxDrawIndexedIndexValue
        {
            get => _internal.maxDrawIndexedIndexValue;
            set
            {
                _internal.maxDrawIndexedIndexValue = value;
            }
        }

        public uint MaxDrawIndirectCount
        {
            get => _internal.maxDrawIndirectCount;
            set
            {
                _internal.maxDrawIndirectCount = value;
            }
        }

        public float MaxSamplerLodBias
        {
            get => _internal.maxSamplerLodBias;
            set
            {
                _internal.maxSamplerLodBias = value;
            }
        }

        public float MaxSamplerAnisotropy
        {
            get => _internal.maxSamplerAnisotropy;
            set
            {
                _internal.maxSamplerAnisotropy = value;
            }
        }

        public uint MaxViewports
        {
            get => _internal.maxViewports;
            set
            {
                _internal.maxViewports = value;
            }
        }

        public uint[] MaxViewportDimensions
        {
            get
            {
                if(maxViewportDimensions != null)
                    return maxViewportDimensions;

                var tmpArr = new uint[2];
                unsafe
                {
                    for(int i = 0; i < 2; ++i)
                    {
                        tmpArr[i] = _internal.maxViewportDimensions[i];
                    }
                }
                maxViewportDimensions = tmpArr;
                return maxViewportDimensions;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxViewportDimensions), "Array is out of bounds. Size should not be more than 2");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.maxViewportDimensions[i] = value[i];
                    }
                }
                maxViewportDimensions = value;
            }
        }

        public float[] ViewportBoundsRange
        {
            get
            {
                if(viewportBoundsRange != null)
                    return viewportBoundsRange;

                var tmpArr = new float[2];
                unsafe
                {
                    for(int i = 0; i < 2; ++i)
                    {
                        tmpArr[i] = _internal.viewportBoundsRange[i];
                    }
                }
                viewportBoundsRange = tmpArr;
                return viewportBoundsRange;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(ViewportBoundsRange), "Array is out of bounds. Size should not be more than 2");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.viewportBoundsRange[i] = value[i];
                    }
                }
                viewportBoundsRange = value;
            }
        }

        public uint ViewportSubPixelBits
        {
            get => _internal.viewportSubPixelBits;
            set
            {
                _internal.viewportSubPixelBits = value;
            }
        }

        public ulong MinMemoryMapAlignment
        {
            get => _internal.minMemoryMapAlignment;
            set
            {
                _internal.minMemoryMapAlignment = value;
            }
        }

        public ulong MinTexelBufferOffsetAlignment
        {
            get => _internal.minTexelBufferOffsetAlignment;
            set
            {
                _internal.minTexelBufferOffsetAlignment = value;
            }
        }

        public ulong MinUniformBufferOffsetAlignment
        {
            get => _internal.minUniformBufferOffsetAlignment;
            set
            {
                _internal.minUniformBufferOffsetAlignment = value;
            }
        }

        public ulong MinStorageBufferOffsetAlignment
        {
            get => _internal.minStorageBufferOffsetAlignment;
            set
            {
                _internal.minStorageBufferOffsetAlignment = value;
            }
        }

        public int MinTexelOffset
        {
            get => _internal.minTexelOffset;
            set
            {
                _internal.minTexelOffset = value;
            }
        }

        public uint MaxTexelOffset
        {
            get => _internal.maxTexelOffset;
            set
            {
                _internal.maxTexelOffset = value;
            }
        }

        public int MinTexelGatherOffset
        {
            get => _internal.minTexelGatherOffset;
            set
            {
                _internal.minTexelGatherOffset = value;
            }
        }

        public uint MaxTexelGatherOffset
        {
            get => _internal.maxTexelGatherOffset;
            set
            {
                _internal.maxTexelGatherOffset = value;
            }
        }

        public float MinInterpolationOffset
        {
            get => _internal.minInterpolationOffset;
            set
            {
                _internal.minInterpolationOffset = value;
            }
        }

        public float MaxInterpolationOffset
        {
            get => _internal.maxInterpolationOffset;
            set
            {
                _internal.maxInterpolationOffset = value;
            }
        }

        public uint SubPixelInterpolationOffsetBits
        {
            get => _internal.subPixelInterpolationOffsetBits;
            set
            {
                _internal.subPixelInterpolationOffsetBits = value;
            }
        }

        public uint MaxFramebufferWidth
        {
            get => _internal.maxFramebufferWidth;
            set
            {
                _internal.maxFramebufferWidth = value;
            }
        }

        public uint MaxFramebufferHeight
        {
            get => _internal.maxFramebufferHeight;
            set
            {
                _internal.maxFramebufferHeight = value;
            }
        }

        public uint MaxFramebufferLayers
        {
            get => _internal.maxFramebufferLayers;
            set
            {
                _internal.maxFramebufferLayers = value;
            }
        }

        public uint FramebufferColorSampleCounts
        {
            get => _internal.framebufferColorSampleCounts;
            set
            {
                _internal.framebufferColorSampleCounts = value;
            }
        }

        public uint FramebufferDepthSampleCounts
        {
            get => _internal.framebufferDepthSampleCounts;
            set
            {
                _internal.framebufferDepthSampleCounts = value;
            }
        }

        public uint FramebufferStencilSampleCounts
        {
            get => _internal.framebufferStencilSampleCounts;
            set
            {
                _internal.framebufferStencilSampleCounts = value;
            }
        }

        public uint FramebufferNoAttachmentsSampleCounts
        {
            get => _internal.framebufferNoAttachmentsSampleCounts;
            set
            {
                _internal.framebufferNoAttachmentsSampleCounts = value;
            }
        }

        public uint MaxColorAttachments
        {
            get => _internal.maxColorAttachments;
            set
            {
                _internal.maxColorAttachments = value;
            }
        }

        public uint SampledImageColorSampleCounts
        {
            get => _internal.sampledImageColorSampleCounts;
            set
            {
                _internal.sampledImageColorSampleCounts = value;
            }
        }

        public uint SampledImageIntegerSampleCounts
        {
            get => _internal.sampledImageIntegerSampleCounts;
            set
            {
                _internal.sampledImageIntegerSampleCounts = value;
            }
        }

        public uint SampledImageDepthSampleCounts
        {
            get => _internal.sampledImageDepthSampleCounts;
            set
            {
                _internal.sampledImageDepthSampleCounts = value;
            }
        }

        public uint SampledImageStencilSampleCounts
        {
            get => _internal.sampledImageStencilSampleCounts;
            set
            {
                _internal.sampledImageStencilSampleCounts = value;
            }
        }

        public uint StorageImageSampleCounts
        {
            get => _internal.storageImageSampleCounts;
            set
            {
                _internal.storageImageSampleCounts = value;
            }
        }

        public uint MaxSampleMaskWords
        {
            get => _internal.maxSampleMaskWords;
            set
            {
                _internal.maxSampleMaskWords = value;
            }
        }

        public bool TimestampComputeAndGraphics
        {
            get => _internal.timestampComputeAndGraphics;
            set
            {
                _internal.timestampComputeAndGraphics = value;
            }
        }

        public float TimestampPeriod
        {
            get => _internal.timestampPeriod;
            set
            {
                _internal.timestampPeriod = value;
            }
        }

        public uint MaxClipDistances
        {
            get => _internal.maxClipDistances;
            set
            {
                _internal.maxClipDistances = value;
            }
        }

        public uint MaxCullDistances
        {
            get => _internal.maxCullDistances;
            set
            {
                _internal.maxCullDistances = value;
            }
        }

        public uint MaxCombinedClipAndCullDistances
        {
            get => _internal.maxCombinedClipAndCullDistances;
            set
            {
                _internal.maxCombinedClipAndCullDistances = value;
            }
        }

        public uint DiscreteQueuePriorities
        {
            get => _internal.discreteQueuePriorities;
            set
            {
                _internal.discreteQueuePriorities = value;
            }
        }

        public float[] PointSizeRange
        {
            get
            {
                if(pointSizeRange != null)
                    return pointSizeRange;

                var tmpArr = new float[2];
                unsafe
                {
                    for(int i = 0; i < 2; ++i)
                    {
                        tmpArr[i] = _internal.pointSizeRange[i];
                    }
                }
                pointSizeRange = tmpArr;
                return pointSizeRange;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(PointSizeRange), "Array is out of bounds. Size should not be more than 2");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.pointSizeRange[i] = value[i];
                    }
                }
                pointSizeRange = value;
            }
        }

        public float[] LineWidthRange
        {
            get
            {
                if(lineWidthRange != null)
                    return lineWidthRange;

                var tmpArr = new float[2];
                unsafe
                {
                    for(int i = 0; i < 2; ++i)
                    {
                        tmpArr[i] = _internal.lineWidthRange[i];
                    }
                }
                lineWidthRange = tmpArr;
                return lineWidthRange;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(LineWidthRange), "Array is out of bounds. Size should not be more than 2");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.lineWidthRange[i] = value[i];
                    }
                }
                lineWidthRange = value;
            }
        }

        public float PointSizeGranularity
        {
            get => _internal.pointSizeGranularity;
            set
            {
                _internal.pointSizeGranularity = value;
            }
        }

        public float LineWidthGranularity
        {
            get => _internal.lineWidthGranularity;
            set
            {
                _internal.lineWidthGranularity = value;
            }
        }

        public bool StrictLines
        {
            get => _internal.strictLines;
            set
            {
                _internal.strictLines = value;
            }
        }

        public bool StandardSampleLocations
        {
            get => _internal.standardSampleLocations;
            set
            {
                _internal.standardSampleLocations = value;
            }
        }

        public ulong OptimalBufferCopyOffsetAlignment
        {
            get => _internal.optimalBufferCopyOffsetAlignment;
            set
            {
                _internal.optimalBufferCopyOffsetAlignment = value;
            }
        }

        public ulong OptimalBufferCopyRowPitchAlignment
        {
            get => _internal.optimalBufferCopyRowPitchAlignment;
            set
            {
                _internal.optimalBufferCopyRowPitchAlignment = value;
            }
        }

        public ulong NonCoherentAtomSize
        {
            get => _internal.nonCoherentAtomSize;
            set
            {
                _internal.nonCoherentAtomSize = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceLimits(PhysicalDeviceLimits p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceLimits(AdamantiumVulkan.Core.Interop.PhysicalDeviceLimits p)
        {
            return new PhysicalDeviceLimits(p);
        }

    }

    public partial class PhysicalDeviceSparseProperties
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseProperties _internal;

        public PhysicalDeviceSparseProperties()
        {
        }

        public PhysicalDeviceSparseProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseProperties _internal)
        {
            this._internal = _internal;
        }

        public bool ResidencyStandard2DBlockShape
        {
            get => _internal.residencyStandard2DBlockShape;
            set
            {
                _internal.residencyStandard2DBlockShape = value;
            }
        }

        public bool ResidencyStandard2DMultisampleBlockShape
        {
            get => _internal.residencyStandard2DMultisampleBlockShape;
            set
            {
                _internal.residencyStandard2DMultisampleBlockShape = value;
            }
        }

        public bool ResidencyStandard3DBlockShape
        {
            get => _internal.residencyStandard3DBlockShape;
            set
            {
                _internal.residencyStandard3DBlockShape = value;
            }
        }

        public bool ResidencyAlignedMipSize
        {
            get => _internal.residencyAlignedMipSize;
            set
            {
                _internal.residencyAlignedMipSize = value;
            }
        }

        public bool ResidencyNonResidentStrict
        {
            get => _internal.residencyNonResidentStrict;
            set
            {
                _internal.residencyNonResidentStrict = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseProperties(PhysicalDeviceSparseProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSparseProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseProperties p)
        {
            return new PhysicalDeviceSparseProperties(p);
        }

    }

    public partial class PhysicalDeviceProperties
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties _internal;

        private string deviceName;

        private string pipelineCacheUUID;

        private PhysicalDeviceLimits limits;

        private PhysicalDeviceSparseProperties sparseProperties;

        public PhysicalDeviceProperties()
        {
        }

        public PhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties _internal)
        {
            this._internal = _internal;
        }

        public uint ApiVersion
        {
            get => _internal.apiVersion;
            set
            {
                _internal.apiVersion = value;
            }
        }

        public uint DriverVersion
        {
            get => _internal.driverVersion;
            set
            {
                _internal.driverVersion = value;
            }
        }

        public uint VendorID
        {
            get => _internal.vendorID;
            set
            {
                _internal.vendorID = value;
            }
        }

        public uint DeviceID
        {
            get => _internal.deviceID;
            set
            {
                _internal.deviceID = value;
            }
        }

        public PhysicalDeviceType DeviceType
        {
            get => _internal.deviceType;
            set
            {
                _internal.deviceType = value;
            }
        }

        public string DeviceName
        {
            get
            {
                if(deviceName != null)
                    return deviceName;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.deviceName[i];
                    }
                }
                deviceName = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return deviceName;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceName), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.deviceName[i] = (sbyte)inputArray[i];
                    }
                }
                deviceName = value;
            }
        }

        public string PipelineCacheUUID
        {
            get
            {
                if(pipelineCacheUUID != null)
                    return pipelineCacheUUID;

                var tmpArr = new byte[16];
                unsafe
                {
                    for(int i = 0; i < 16; ++i)
                    {
                        tmpArr[i] = _internal.pipelineCacheUUID[i];
                    }
                }
                pipelineCacheUUID = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return pipelineCacheUUID;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(PipelineCacheUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.pipelineCacheUUID[i] = inputArray[i];
                    }
                }
                pipelineCacheUUID = value;
            }
        }

        public PhysicalDeviceLimits Limits
        {
            get
            {
                if (limits != null)
                {
                    return limits;
                }
                limits = _internal.limits;
                return limits;
            }
            set
            {
                limits = value;
                _internal.limits = value;
            }
        }

        public PhysicalDeviceSparseProperties SparseProperties
        {
            get
            {
                if (sparseProperties != null)
                {
                    return sparseProperties;
                }
                sparseProperties = _internal.sparseProperties;
                return sparseProperties;
            }
            set
            {
                sparseProperties = value;
                _internal.sparseProperties = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties(PhysicalDeviceProperties p)
        {
            if (p.Limits != null)
            {
                p._internal.limits = p.Limits;
            }
            if (p.SparseProperties != null)
            {
                p._internal.sparseProperties = p.SparseProperties;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties p)
        {
            return new PhysicalDeviceProperties(p);
        }

    }

    public partial class QueueFamilyProperties
    {
        private AdamantiumVulkan.Core.Interop.QueueFamilyProperties _internal;

        private Extent3D minImageTransferGranularity;

        public QueueFamilyProperties()
        {
        }

        public QueueFamilyProperties(AdamantiumVulkan.Core.Interop.QueueFamilyProperties _internal)
        {
            this._internal = _internal;
        }

        public uint QueueFlags
        {
            get => _internal.queueFlags;
            set
            {
                _internal.queueFlags = value;
            }
        }

        public uint QueueCount
        {
            get => _internal.queueCount;
            set
            {
                _internal.queueCount = value;
            }
        }

        public uint TimestampValidBits
        {
            get => _internal.timestampValidBits;
            set
            {
                _internal.timestampValidBits = value;
            }
        }

        public Extent3D MinImageTransferGranularity
        {
            get
            {
                if (minImageTransferGranularity != null)
                {
                    return minImageTransferGranularity;
                }
                minImageTransferGranularity = _internal.minImageTransferGranularity;
                return minImageTransferGranularity;
            }
            set
            {
                minImageTransferGranularity = value;
                _internal.minImageTransferGranularity = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.QueueFamilyProperties(QueueFamilyProperties q)
        {
            if (q.MinImageTransferGranularity != null)
            {
                q._internal.minImageTransferGranularity = q.MinImageTransferGranularity;
            }
            return q._internal;
        }

        public static implicit operator QueueFamilyProperties(AdamantiumVulkan.Core.Interop.QueueFamilyProperties q)
        {
            return new QueueFamilyProperties(q);
        }

    }

    public partial class MemoryType
    {
        private AdamantiumVulkan.Core.Interop.MemoryType _internal;

        public MemoryType()
        {
        }

        public MemoryType(AdamantiumVulkan.Core.Interop.MemoryType _internal)
        {
            this._internal = _internal;
        }

        public uint PropertyFlags
        {
            get => _internal.propertyFlags;
            set
            {
                _internal.propertyFlags = value;
            }
        }

        public uint HeapIndex
        {
            get => _internal.heapIndex;
            set
            {
                _internal.heapIndex = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryType(MemoryType m)
        {
            return m._internal;
        }

        public static implicit operator MemoryType(AdamantiumVulkan.Core.Interop.MemoryType m)
        {
            return new MemoryType(m);
        }

    }

    public partial class MemoryHeap
    {
        private AdamantiumVulkan.Core.Interop.MemoryHeap _internal;

        public MemoryHeap()
        {
        }

        public MemoryHeap(AdamantiumVulkan.Core.Interop.MemoryHeap _internal)
        {
            this._internal = _internal;
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryHeap(MemoryHeap m)
        {
            return m._internal;
        }

        public static implicit operator MemoryHeap(AdamantiumVulkan.Core.Interop.MemoryHeap m)
        {
            return new MemoryHeap(m);
        }

    }

    public partial class PhysicalDeviceMemoryProperties
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties _internal;

        private MemoryType[] memoryTypes;

        private MemoryHeap[] memoryHeaps;

        public PhysicalDeviceMemoryProperties()
        {
        }

        public PhysicalDeviceMemoryProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties _internal)
        {
            this._internal = _internal;
        }

        public uint MemoryTypeCount
        {
            get => _internal.memoryTypeCount;
            set
            {
                _internal.memoryTypeCount = value;
            }
        }

        public MemoryType[] MemoryTypes
        {
            get
            {
                if(memoryTypes != null)
                    return memoryTypes;

                memoryTypes = new MemoryType[32];
                for(int i = 0; i < 32; ++i)
                {
                    memoryTypes[i] = _internal.memoryTypes[i];
                }
                return memoryTypes;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(MemoryTypes), "Array is out of bounds. Size should not be more than 32");

                _internal.memoryTypes = new AdamantiumVulkan.Core.Interop.MemoryType[32];
                for(int i = 0; i < value.Length; ++i)
                {
                    _internal.memoryTypes[i] = value[i];
                }
                memoryTypes = value;
            }
        }

        public uint MemoryHeapCount
        {
            get => _internal.memoryHeapCount;
            set
            {
                _internal.memoryHeapCount = value;
            }
        }

        public MemoryHeap[] MemoryHeaps
        {
            get
            {
                if(memoryHeaps != null)
                    return memoryHeaps;

                memoryHeaps = new MemoryHeap[16];
                for(int i = 0; i < 16; ++i)
                {
                    memoryHeaps[i] = _internal.memoryHeaps[i];
                }
                return memoryHeaps;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(MemoryHeaps), "Array is out of bounds. Size should not be more than 16");

                _internal.memoryHeaps = new AdamantiumVulkan.Core.Interop.MemoryHeap[16];
                for(int i = 0; i < value.Length; ++i)
                {
                    _internal.memoryHeaps[i] = value[i];
                }
                memoryHeaps = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties(PhysicalDeviceMemoryProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMemoryProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties p)
        {
            return new PhysicalDeviceMemoryProperties(p);
        }

    }

    public partial class DeviceQueueCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceQueueCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpQueuePriorities;

        public DeviceQueueCreateInfo()
        {
        }

        public DeviceQueueCreateInfo(AdamantiumVulkan.Core.Interop.DeviceQueueCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint QueueFamilyIndex
        {
            get => _internal.queueFamilyIndex;
            set
            {
                _internal.queueFamilyIndex = value;
            }
        }

        public uint QueueCount
        {
            get => _internal.queueCount;
            set
            {
                _internal.queueCount = value;
            }
        }

        public float PQueuePriorities
        {
            get
            {
                return Marshal.PtrToStructure<float>(_internal.pQueuePriorities);
            }
            set
            {
                refpQueuePriorities?.Dispose();
                refpQueuePriorities = new StructReference(value);
                _internal.pQueuePriorities = refpQueuePriorities.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueuePriorities?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceQueueCreateInfo(DeviceQueueCreateInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceQueueCreateInfo(AdamantiumVulkan.Core.Interop.DeviceQueueCreateInfo d)
        {
            return new DeviceQueueCreateInfo(d);
        }

    }

    public partial class DeviceCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceCreateInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpQueueCreateInfos;

        private StringArrayReference refppEnabledLayerNames;

        private StringArrayReference refppEnabledExtensionNames;

        private StructReference refpEnabledFeatures;

        public DeviceCreateInfo()
        {
        }

        public DeviceCreateInfo(AdamantiumVulkan.Core.Interop.DeviceCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint QueueCreateInfoCount
        {
            get => _internal.queueCreateInfoCount;
            set
            {
                _internal.queueCreateInfoCount = value;
            }
        }

        private DeviceQueueCreateInfo[] pQueueCreateInfos;
        public DeviceQueueCreateInfo[] PQueueCreateInfos
        {
            get
            {
                if(pQueueCreateInfos != null)
                    return pQueueCreateInfos;

                pQueueCreateInfos = new DeviceQueueCreateInfo[_internal.queueCreateInfoCount];
                MarshalUtils.IntPtrToManagedArray<DeviceQueueCreateInfo>(_internal.pQueueCreateInfos, pQueueCreateInfos);
                return pQueueCreateInfos;
            }
            set
            {
                refpQueueCreateInfos?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.DeviceQueueCreateInfo[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpQueueCreateInfos = new GCHandleReference(tmpArray);
                pQueueCreateInfos = value;
                _internal.pQueueCreateInfos = refpQueueCreateInfos.Handle;
            }
        }

        public uint EnabledLayerCount
        {
            get => _internal.enabledLayerCount;
            set
            {
                _internal.enabledLayerCount = value;
            }
        }

        private string[] ppEnabledLayerNames;
        public string[] PpEnabledLayerNames
        {
            get
            {
                if(ppEnabledLayerNames != null)
                    return ppEnabledLayerNames;

                return ppEnabledLayerNames;
            }
            set
            {
                refppEnabledLayerNames?.Dispose();
                refppEnabledLayerNames = new StringArrayReference(value, false);
                ppEnabledLayerNames = value;
                _internal.ppEnabledLayerNames = refppEnabledLayerNames.Handle;
            }
        }

        public uint EnabledExtensionCount
        {
            get => _internal.enabledExtensionCount;
            set
            {
                _internal.enabledExtensionCount = value;
            }
        }

        private string[] ppEnabledExtensionNames;
        public string[] PpEnabledExtensionNames
        {
            get
            {
                if(ppEnabledExtensionNames != null)
                    return ppEnabledExtensionNames;

                return ppEnabledExtensionNames;
            }
            set
            {
                refppEnabledExtensionNames?.Dispose();
                refppEnabledExtensionNames = new StringArrayReference(value, false);
                ppEnabledExtensionNames = value;
                _internal.ppEnabledExtensionNames = refppEnabledExtensionNames.Handle;
            }
        }

        private PhysicalDeviceFeatures pEnabledFeatures;
        public PhysicalDeviceFeatures PEnabledFeatures
        {
            get
            {
                if(pEnabledFeatures != null)
                    return pEnabledFeatures;

                pEnabledFeatures = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures>(_internal.pEnabledFeatures);
                return pEnabledFeatures;
            }
            set
            {
                refpEnabledFeatures?.Dispose();
                AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures tmp = value;
                refpEnabledFeatures = new StructReference(tmp);
                pEnabledFeatures = value;
                _internal.pEnabledFeatures = refpEnabledFeatures.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueueCreateInfos?.Dispose();
            refppEnabledLayerNames?.Dispose();
            refppEnabledExtensionNames?.Dispose();
            refpEnabledFeatures?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceCreateInfo(DeviceCreateInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceCreateInfo(AdamantiumVulkan.Core.Interop.DeviceCreateInfo d)
        {
            return new DeviceCreateInfo(d);
        }

    }

    public partial class ExtensionProperties
    {
        private AdamantiumVulkan.Core.Interop.ExtensionProperties _internal;

        private string extensionName;

        public ExtensionProperties()
        {
        }

        public ExtensionProperties(AdamantiumVulkan.Core.Interop.ExtensionProperties _internal)
        {
            this._internal = _internal;
        }

        public string ExtensionName
        {
            get
            {
                if(extensionName != null)
                    return extensionName;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.extensionName[i];
                    }
                }
                extensionName = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return extensionName;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(ExtensionName), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.extensionName[i] = (sbyte)inputArray[i];
                    }
                }
                extensionName = value;
            }
        }

        public uint SpecVersion
        {
            get => _internal.specVersion;
            set
            {
                _internal.specVersion = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExtensionProperties(ExtensionProperties e)
        {
            return e._internal;
        }

        public static implicit operator ExtensionProperties(AdamantiumVulkan.Core.Interop.ExtensionProperties e)
        {
            return new ExtensionProperties(e);
        }

    }

    public partial class LayerProperties
    {
        private AdamantiumVulkan.Core.Interop.LayerProperties _internal;

        private string layerName;

        private string description;

        public LayerProperties()
        {
        }

        public LayerProperties(AdamantiumVulkan.Core.Interop.LayerProperties _internal)
        {
            this._internal = _internal;
        }

        public string LayerName
        {
            get
            {
                if(layerName != null)
                    return layerName;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.layerName[i];
                    }
                }
                layerName = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return layerName;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(LayerName), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.layerName[i] = (sbyte)inputArray[i];
                    }
                }
                layerName = value;
            }
        }

        public uint SpecVersion
        {
            get => _internal.specVersion;
            set
            {
                _internal.specVersion = value;
            }
        }

        public uint ImplementationVersion
        {
            get => _internal.implementationVersion;
            set
            {
                _internal.implementationVersion = value;
            }
        }

        public string Description
        {
            get
            {
                if(description != null)
                    return description;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.description[i];
                    }
                }
                description = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return description;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(Description), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.description[i] = (sbyte)inputArray[i];
                    }
                }
                description = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.LayerProperties(LayerProperties l)
        {
            return l._internal;
        }

        public static implicit operator LayerProperties(AdamantiumVulkan.Core.Interop.LayerProperties l)
        {
            return new LayerProperties(l);
        }

    }

    public partial class SubmitInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubmitInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpWaitSemaphores;

        private GCHandleReference refpWaitDstStageMask;

        private GCHandleReference refpCommandBuffers;

        private GCHandleReference refpSignalSemaphores;

        public SubmitInfo()
        {
        }

        public SubmitInfo(AdamantiumVulkan.Core.Interop.SubmitInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint WaitSemaphoreCount
        {
            get => _internal.waitSemaphoreCount;
            set
            {
                _internal.waitSemaphoreCount = value;
            }
        }

        private Semaphore[] pWaitSemaphores;
        public Semaphore[] PWaitSemaphores
        {
            get
            {
                if(pWaitSemaphores != null)
                    return pWaitSemaphores;

                pWaitSemaphores = new Semaphore[_internal.waitSemaphoreCount];
                MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pWaitSemaphores, pWaitSemaphores);
                return pWaitSemaphores;
            }
            set
            {
                refpWaitSemaphores?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.Semaphore_T[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpWaitSemaphores = new GCHandleReference(tmpArray);
                pWaitSemaphores = value;
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
        }

        private uint[] pWaitDstStageMask;
        public uint[] PWaitDstStageMask
        {
            get
            {
                return pWaitDstStageMask;
            }
            set
            {
                refpWaitDstStageMask?.Dispose();
                var tmpArray = new uint[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpWaitDstStageMask = new GCHandleReference(tmpArray);
                pWaitDstStageMask = value;
                _internal.pWaitDstStageMask = refpWaitDstStageMask.Handle;
            }
        }

        public uint CommandBufferCount
        {
            get => _internal.commandBufferCount;
            set
            {
                _internal.commandBufferCount = value;
            }
        }

        private CommandBuffer[] pCommandBuffers;
        public CommandBuffer[] PCommandBuffers
        {
            get
            {
                if(pCommandBuffers != null)
                    return pCommandBuffers;

                pCommandBuffers = new CommandBuffer[_internal.commandBufferCount];
                MarshalUtils.IntPtrToManagedArray<CommandBuffer>(_internal.pCommandBuffers, pCommandBuffers);
                return pCommandBuffers;
            }
            set
            {
                refpCommandBuffers?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.CommandBuffer_T[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpCommandBuffers = new GCHandleReference(tmpArray);
                pCommandBuffers = value;
                _internal.pCommandBuffers = refpCommandBuffers.Handle;
            }
        }

        public uint SignalSemaphoreCount
        {
            get => _internal.signalSemaphoreCount;
            set
            {
                _internal.signalSemaphoreCount = value;
            }
        }

        private Semaphore[] pSignalSemaphores;
        public Semaphore[] PSignalSemaphores
        {
            get
            {
                if(pSignalSemaphores != null)
                    return pSignalSemaphores;

                pSignalSemaphores = new Semaphore[_internal.signalSemaphoreCount];
                MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pSignalSemaphores, pSignalSemaphores);
                return pSignalSemaphores;
            }
            set
            {
                refpSignalSemaphores?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.Semaphore_T[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpSignalSemaphores = new GCHandleReference(tmpArray);
                pSignalSemaphores = value;
                _internal.pSignalSemaphores = refpSignalSemaphores.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpWaitSemaphores?.Dispose();
            refpWaitDstStageMask?.Dispose();
            refpCommandBuffers?.Dispose();
            refpSignalSemaphores?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubmitInfo(SubmitInfo s)
        {
            return s._internal;
        }

        public static implicit operator SubmitInfo(AdamantiumVulkan.Core.Interop.SubmitInfo s)
        {
            return new SubmitInfo(s);
        }

    }

    public partial class MemoryAllocateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryAllocateInfo _internal;

        private GCHandleReference refpNext;

        public MemoryAllocateInfo()
        {
        }

        public MemoryAllocateInfo(AdamantiumVulkan.Core.Interop.MemoryAllocateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong AllocationSize
        {
            get => _internal.allocationSize;
            set
            {
                _internal.allocationSize = value;
            }
        }

        public uint MemoryTypeIndex
        {
            get => _internal.memoryTypeIndex;
            set
            {
                _internal.memoryTypeIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryAllocateInfo(MemoryAllocateInfo m)
        {
            return m._internal;
        }

        public static implicit operator MemoryAllocateInfo(AdamantiumVulkan.Core.Interop.MemoryAllocateInfo m)
        {
            return new MemoryAllocateInfo(m);
        }

    }

    public partial class MappedMemoryRange : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MappedMemoryRange _internal;

        private GCHandleReference refpNext;

        private DeviceMemory memory;

        public MappedMemoryRange()
        {
        }

        public MappedMemoryRange(AdamantiumVulkan.Core.Interop.MappedMemoryRange _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MappedMemoryRange(MappedMemoryRange m)
        {
            if (m.Memory != null)
            {
                m._internal.memory = m.Memory;
            }
            return m._internal;
        }

        public static implicit operator MappedMemoryRange(AdamantiumVulkan.Core.Interop.MappedMemoryRange m)
        {
            return new MappedMemoryRange(m);
        }

    }

    public partial class MemoryRequirements
    {
        private AdamantiumVulkan.Core.Interop.MemoryRequirements _internal;

        public MemoryRequirements()
        {
        }

        public MemoryRequirements(AdamantiumVulkan.Core.Interop.MemoryRequirements _internal)
        {
            this._internal = _internal;
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public ulong Alignment
        {
            get => _internal.alignment;
            set
            {
                _internal.alignment = value;
            }
        }

        public uint MemoryTypeBits
        {
            get => _internal.memoryTypeBits;
            set
            {
                _internal.memoryTypeBits = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryRequirements(MemoryRequirements m)
        {
            return m._internal;
        }

        public static implicit operator MemoryRequirements(AdamantiumVulkan.Core.Interop.MemoryRequirements m)
        {
            return new MemoryRequirements(m);
        }

    }

    public partial class SparseImageFormatProperties
    {
        private AdamantiumVulkan.Core.Interop.SparseImageFormatProperties _internal;

        private Extent3D imageGranularity;

        public SparseImageFormatProperties()
        {
        }

        public SparseImageFormatProperties(AdamantiumVulkan.Core.Interop.SparseImageFormatProperties _internal)
        {
            this._internal = _internal;
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public Extent3D ImageGranularity
        {
            get
            {
                if (imageGranularity != null)
                {
                    return imageGranularity;
                }
                imageGranularity = _internal.imageGranularity;
                return imageGranularity;
            }
            set
            {
                imageGranularity = value;
                _internal.imageGranularity = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageFormatProperties(SparseImageFormatProperties s)
        {
            if (s.ImageGranularity != null)
            {
                s._internal.imageGranularity = s.ImageGranularity;
            }
            return s._internal;
        }

        public static implicit operator SparseImageFormatProperties(AdamantiumVulkan.Core.Interop.SparseImageFormatProperties s)
        {
            return new SparseImageFormatProperties(s);
        }

    }

    public partial class SparseImageMemoryRequirements
    {
        private AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements _internal;

        private SparseImageFormatProperties formatProperties;

        public SparseImageMemoryRequirements()
        {
        }

        public SparseImageMemoryRequirements(AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements _internal)
        {
            this._internal = _internal;
        }

        public SparseImageFormatProperties FormatProperties
        {
            get
            {
                if (formatProperties != null)
                {
                    return formatProperties;
                }
                formatProperties = _internal.formatProperties;
                return formatProperties;
            }
            set
            {
                formatProperties = value;
                _internal.formatProperties = value;
            }
        }

        public uint ImageMipTailFirstLod
        {
            get => _internal.imageMipTailFirstLod;
            set
            {
                _internal.imageMipTailFirstLod = value;
            }
        }

        public ulong ImageMipTailSize
        {
            get => _internal.imageMipTailSize;
            set
            {
                _internal.imageMipTailSize = value;
            }
        }

        public ulong ImageMipTailOffset
        {
            get => _internal.imageMipTailOffset;
            set
            {
                _internal.imageMipTailOffset = value;
            }
        }

        public ulong ImageMipTailStride
        {
            get => _internal.imageMipTailStride;
            set
            {
                _internal.imageMipTailStride = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements(SparseImageMemoryRequirements s)
        {
            if (s.FormatProperties != null)
            {
                s._internal.formatProperties = s.FormatProperties;
            }
            return s._internal;
        }

        public static implicit operator SparseImageMemoryRequirements(AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements s)
        {
            return new SparseImageMemoryRequirements(s);
        }

    }

    public partial class SparseMemoryBind
    {
        private AdamantiumVulkan.Core.Interop.SparseMemoryBind _internal;

        private DeviceMemory memory;

        public SparseMemoryBind()
        {
        }

        public SparseMemoryBind(AdamantiumVulkan.Core.Interop.SparseMemoryBind _internal)
        {
            this._internal = _internal;
        }

        public ulong ResourceOffset
        {
            get => _internal.resourceOffset;
            set
            {
                _internal.resourceOffset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong MemoryOffset
        {
            get => _internal.memoryOffset;
            set
            {
                _internal.memoryOffset = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseMemoryBind(SparseMemoryBind s)
        {
            if (s.Memory != null)
            {
                s._internal.memory = s.Memory;
            }
            return s._internal;
        }

        public static implicit operator SparseMemoryBind(AdamantiumVulkan.Core.Interop.SparseMemoryBind s)
        {
            return new SparseMemoryBind(s);
        }

    }

    public partial class SparseBufferMemoryBindInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo _internal;

        private Buffer buffer;

        private StructReference refpBinds;

        public SparseBufferMemoryBindInfo()
        {
        }

        public SparseBufferMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo _internal)
        {
            this._internal = _internal;
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public uint BindCount
        {
            get => _internal.bindCount;
            set
            {
                _internal.bindCount = value;
            }
        }

        private SparseMemoryBind pBinds;
        public SparseMemoryBind PBinds
        {
            get
            {
                if(pBinds != null)
                    return pBinds;

                pBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseMemoryBind>(_internal.pBinds);
                return pBinds;
            }
            set
            {
                refpBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseMemoryBind tmp = value;
                refpBinds = new StructReference(tmp);
                pBinds = value;
                _internal.pBinds = refpBinds.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo(SparseBufferMemoryBindInfo s)
        {
            if (s.Buffer != null)
            {
                s._internal.buffer = s.Buffer;
            }
            return s._internal;
        }

        public static implicit operator SparseBufferMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo s)
        {
            return new SparseBufferMemoryBindInfo(s);
        }

    }

    public partial class SparseImageOpaqueMemoryBindInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo _internal;

        private Image image;

        private StructReference refpBinds;

        public SparseImageOpaqueMemoryBindInfo()
        {
        }

        public SparseImageOpaqueMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo _internal)
        {
            this._internal = _internal;
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public uint BindCount
        {
            get => _internal.bindCount;
            set
            {
                _internal.bindCount = value;
            }
        }

        private SparseMemoryBind pBinds;
        public SparseMemoryBind PBinds
        {
            get
            {
                if(pBinds != null)
                    return pBinds;

                pBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseMemoryBind>(_internal.pBinds);
                return pBinds;
            }
            set
            {
                refpBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseMemoryBind tmp = value;
                refpBinds = new StructReference(tmp);
                pBinds = value;
                _internal.pBinds = refpBinds.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo(SparseImageOpaqueMemoryBindInfo s)
        {
            if (s.Image != null)
            {
                s._internal.image = s.Image;
            }
            return s._internal;
        }

        public static implicit operator SparseImageOpaqueMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo s)
        {
            return new SparseImageOpaqueMemoryBindInfo(s);
        }

    }

    public partial class ImageSubresource
    {
        private AdamantiumVulkan.Core.Interop.ImageSubresource _internal;

        public ImageSubresource()
        {
        }

        public ImageSubresource(AdamantiumVulkan.Core.Interop.ImageSubresource _internal)
        {
            this._internal = _internal;
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public uint MipLevel
        {
            get => _internal.mipLevel;
            set
            {
                _internal.mipLevel = value;
            }
        }

        public uint ArrayLayer
        {
            get => _internal.arrayLayer;
            set
            {
                _internal.arrayLayer = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageSubresource(ImageSubresource i)
        {
            return i._internal;
        }

        public static implicit operator ImageSubresource(AdamantiumVulkan.Core.Interop.ImageSubresource i)
        {
            return new ImageSubresource(i);
        }

    }

    public partial class Offset3D
    {
        private AdamantiumVulkan.Core.Interop.Offset3D _internal;

        public Offset3D()
        {
        }

        public Offset3D(AdamantiumVulkan.Core.Interop.Offset3D _internal)
        {
            this._internal = _internal;
        }

        public int X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public int Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public int Z
        {
            get => _internal.z;
            set
            {
                _internal.z = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Offset3D(Offset3D o)
        {
            return o._internal;
        }

        public static implicit operator Offset3D(AdamantiumVulkan.Core.Interop.Offset3D o)
        {
            return new Offset3D(o);
        }

    }

    public partial class SparseImageMemoryBind
    {
        private AdamantiumVulkan.Core.Interop.SparseImageMemoryBind _internal;

        private ImageSubresource subresource;

        private Offset3D offset;

        private Extent3D extent;

        private DeviceMemory memory;

        public SparseImageMemoryBind()
        {
        }

        public SparseImageMemoryBind(AdamantiumVulkan.Core.Interop.SparseImageMemoryBind _internal)
        {
            this._internal = _internal;
        }

        public ImageSubresource Subresource
        {
            get
            {
                if (subresource != null)
                {
                    return subresource;
                }
                subresource = _internal.subresource;
                return subresource;
            }
            set
            {
                subresource = value;
                _internal.subresource = value;
            }
        }

        public Offset3D Offset
        {
            get
            {
                if (offset != null)
                {
                    return offset;
                }
                offset = _internal.offset;
                return offset;
            }
            set
            {
                offset = value;
                _internal.offset = value;
            }
        }

        public Extent3D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong MemoryOffset
        {
            get => _internal.memoryOffset;
            set
            {
                _internal.memoryOffset = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageMemoryBind(SparseImageMemoryBind s)
        {
            if (s.Subresource != null)
            {
                s._internal.subresource = s.Subresource;
            }
            if (s.Offset != null)
            {
                s._internal.offset = s.Offset;
            }
            if (s.Extent != null)
            {
                s._internal.extent = s.Extent;
            }
            if (s.Memory != null)
            {
                s._internal.memory = s.Memory;
            }
            return s._internal;
        }

        public static implicit operator SparseImageMemoryBind(AdamantiumVulkan.Core.Interop.SparseImageMemoryBind s)
        {
            return new SparseImageMemoryBind(s);
        }

    }

    public partial class SparseImageMemoryBindInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo _internal;

        private Image image;

        private StructReference refpBinds;

        public SparseImageMemoryBindInfo()
        {
        }

        public SparseImageMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo _internal)
        {
            this._internal = _internal;
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public uint BindCount
        {
            get => _internal.bindCount;
            set
            {
                _internal.bindCount = value;
            }
        }

        private SparseImageMemoryBind pBinds;
        public SparseImageMemoryBind PBinds
        {
            get
            {
                if(pBinds != null)
                    return pBinds;

                pBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseImageMemoryBind>(_internal.pBinds);
                return pBinds;
            }
            set
            {
                refpBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseImageMemoryBind tmp = value;
                refpBinds = new StructReference(tmp);
                pBinds = value;
                _internal.pBinds = refpBinds.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo(SparseImageMemoryBindInfo s)
        {
            if (s.Image != null)
            {
                s._internal.image = s.Image;
            }
            return s._internal;
        }

        public static implicit operator SparseImageMemoryBindInfo(AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo s)
        {
            return new SparseImageMemoryBindInfo(s);
        }

    }

    public partial class BindSparseInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindSparseInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpWaitSemaphores;

        private StructReference refpBufferBinds;

        private StructReference refpImageOpaqueBinds;

        private StructReference refpImageBinds;

        private StructReference refpSignalSemaphores;

        public BindSparseInfo()
        {
        }

        public BindSparseInfo(AdamantiumVulkan.Core.Interop.BindSparseInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint WaitSemaphoreCount
        {
            get => _internal.waitSemaphoreCount;
            set
            {
                _internal.waitSemaphoreCount = value;
            }
        }

        private Semaphore pWaitSemaphores;
        public Semaphore PWaitSemaphores
        {
            get
            {
                if(pWaitSemaphores != null)
                    return pWaitSemaphores;

                pWaitSemaphores = Marshal.PtrToStructure<Semaphore>(_internal.pWaitSemaphores);
                return pWaitSemaphores;
            }
            set
            {
                refpWaitSemaphores?.Dispose();
                AdamantiumVulkan.Core.Interop.Semaphore_T tmp = value;
                refpWaitSemaphores = new StructReference(tmp);
                pWaitSemaphores = value;
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
        }

        public uint BufferBindCount
        {
            get => _internal.bufferBindCount;
            set
            {
                _internal.bufferBindCount = value;
            }
        }

        private SparseBufferMemoryBindInfo pBufferBinds;
        public SparseBufferMemoryBindInfo PBufferBinds
        {
            get
            {
                if(pBufferBinds != null)
                    return pBufferBinds;

                pBufferBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo>(_internal.pBufferBinds);
                return pBufferBinds;
            }
            set
            {
                refpBufferBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseBufferMemoryBindInfo tmp = value;
                refpBufferBinds = new StructReference(tmp);
                pBufferBinds = value;
                _internal.pBufferBinds = refpBufferBinds.Handle;
            }
        }

        public uint ImageOpaqueBindCount
        {
            get => _internal.imageOpaqueBindCount;
            set
            {
                _internal.imageOpaqueBindCount = value;
            }
        }

        private SparseImageOpaqueMemoryBindInfo pImageOpaqueBinds;
        public SparseImageOpaqueMemoryBindInfo PImageOpaqueBinds
        {
            get
            {
                if(pImageOpaqueBinds != null)
                    return pImageOpaqueBinds;

                pImageOpaqueBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo>(_internal.pImageOpaqueBinds);
                return pImageOpaqueBinds;
            }
            set
            {
                refpImageOpaqueBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseImageOpaqueMemoryBindInfo tmp = value;
                refpImageOpaqueBinds = new StructReference(tmp);
                pImageOpaqueBinds = value;
                _internal.pImageOpaqueBinds = refpImageOpaqueBinds.Handle;
            }
        }

        public uint ImageBindCount
        {
            get => _internal.imageBindCount;
            set
            {
                _internal.imageBindCount = value;
            }
        }

        private SparseImageMemoryBindInfo pImageBinds;
        public SparseImageMemoryBindInfo PImageBinds
        {
            get
            {
                if(pImageBinds != null)
                    return pImageBinds;

                pImageBinds = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo>(_internal.pImageBinds);
                return pImageBinds;
            }
            set
            {
                refpImageBinds?.Dispose();
                AdamantiumVulkan.Core.Interop.SparseImageMemoryBindInfo tmp = value;
                refpImageBinds = new StructReference(tmp);
                pImageBinds = value;
                _internal.pImageBinds = refpImageBinds.Handle;
            }
        }

        public uint SignalSemaphoreCount
        {
            get => _internal.signalSemaphoreCount;
            set
            {
                _internal.signalSemaphoreCount = value;
            }
        }

        private Semaphore pSignalSemaphores;
        public Semaphore PSignalSemaphores
        {
            get
            {
                if(pSignalSemaphores != null)
                    return pSignalSemaphores;

                pSignalSemaphores = Marshal.PtrToStructure<Semaphore>(_internal.pSignalSemaphores);
                return pSignalSemaphores;
            }
            set
            {
                refpSignalSemaphores?.Dispose();
                AdamantiumVulkan.Core.Interop.Semaphore_T tmp = value;
                refpSignalSemaphores = new StructReference(tmp);
                pSignalSemaphores = value;
                _internal.pSignalSemaphores = refpSignalSemaphores.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpWaitSemaphores?.Dispose();
            refpBufferBinds?.Dispose();
            refpImageOpaqueBinds?.Dispose();
            refpImageBinds?.Dispose();
            refpSignalSemaphores?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindSparseInfo(BindSparseInfo b)
        {
            return b._internal;
        }

        public static implicit operator BindSparseInfo(AdamantiumVulkan.Core.Interop.BindSparseInfo b)
        {
            return new BindSparseInfo(b);
        }

    }

    public partial class FenceCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.FenceCreateInfo _internal;

        private GCHandleReference refpNext;

        public FenceCreateInfo()
        {
        }

        public FenceCreateInfo(AdamantiumVulkan.Core.Interop.FenceCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FenceCreateInfo(FenceCreateInfo f)
        {
            return f._internal;
        }

        public static implicit operator FenceCreateInfo(AdamantiumVulkan.Core.Interop.FenceCreateInfo f)
        {
            return new FenceCreateInfo(f);
        }

    }

    public partial class SemaphoreCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SemaphoreCreateInfo _internal;

        private GCHandleReference refpNext;

        public SemaphoreCreateInfo()
        {
        }

        public SemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.SemaphoreCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SemaphoreCreateInfo(SemaphoreCreateInfo s)
        {
            return s._internal;
        }

        public static implicit operator SemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.SemaphoreCreateInfo s)
        {
            return new SemaphoreCreateInfo(s);
        }

    }

    public partial class EventCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.EventCreateInfo _internal;

        private GCHandleReference refpNext;

        public EventCreateInfo()
        {
        }

        public EventCreateInfo(AdamantiumVulkan.Core.Interop.EventCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.EventCreateInfo(EventCreateInfo e)
        {
            return e._internal;
        }

        public static implicit operator EventCreateInfo(AdamantiumVulkan.Core.Interop.EventCreateInfo e)
        {
            return new EventCreateInfo(e);
        }

    }

    public partial class QueryPoolCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.QueryPoolCreateInfo _internal;

        private GCHandleReference refpNext;

        public QueryPoolCreateInfo()
        {
        }

        public QueryPoolCreateInfo(AdamantiumVulkan.Core.Interop.QueryPoolCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public QueryType QueryType
        {
            get => _internal.queryType;
            set
            {
                _internal.queryType = value;
            }
        }

        public uint QueryCount
        {
            get => _internal.queryCount;
            set
            {
                _internal.queryCount = value;
            }
        }

        public uint PipelineStatistics
        {
            get => _internal.pipelineStatistics;
            set
            {
                _internal.pipelineStatistics = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.QueryPoolCreateInfo(QueryPoolCreateInfo q)
        {
            return q._internal;
        }

        public static implicit operator QueryPoolCreateInfo(AdamantiumVulkan.Core.Interop.QueryPoolCreateInfo q)
        {
            return new QueryPoolCreateInfo(q);
        }

    }

    public partial class BufferCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpQueueFamilyIndices;

        public BufferCreateInfo()
        {
        }

        public BufferCreateInfo(AdamantiumVulkan.Core.Interop.BufferCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        public SharingMode SharingMode
        {
            get => _internal.sharingMode;
            set
            {
                _internal.sharingMode = value;
            }
        }

        public uint QueueFamilyIndexCount
        {
            get => _internal.queueFamilyIndexCount;
            set
            {
                _internal.queueFamilyIndexCount = value;
            }
        }

        public uint PQueueFamilyIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pQueueFamilyIndices);
            }
            set
            {
                refpQueueFamilyIndices?.Dispose();
                refpQueueFamilyIndices = new StructReference(value);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueueFamilyIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferCreateInfo(BufferCreateInfo b)
        {
            return b._internal;
        }

        public static implicit operator BufferCreateInfo(AdamantiumVulkan.Core.Interop.BufferCreateInfo b)
        {
            return new BufferCreateInfo(b);
        }

    }

    public partial class BufferViewCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferViewCreateInfo _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        public BufferViewCreateInfo()
        {
        }

        public BufferViewCreateInfo(AdamantiumVulkan.Core.Interop.BufferViewCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Range
        {
            get => _internal.range;
            set
            {
                _internal.range = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferViewCreateInfo(BufferViewCreateInfo b)
        {
            if (b.Buffer != null)
            {
                b._internal.buffer = b.Buffer;
            }
            return b._internal;
        }

        public static implicit operator BufferViewCreateInfo(AdamantiumVulkan.Core.Interop.BufferViewCreateInfo b)
        {
            return new BufferViewCreateInfo(b);
        }

    }

    public partial class ImageCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageCreateInfo _internal;

        private GCHandleReference refpNext;

        private Extent3D extent;

        private StructReference refpQueueFamilyIndices;

        public ImageCreateInfo()
        {
        }

        public ImageCreateInfo(AdamantiumVulkan.Core.Interop.ImageCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ImageType ImageType
        {
            get => _internal.imageType;
            set
            {
                _internal.imageType = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public Extent3D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public uint MipLevels
        {
            get => _internal.mipLevels;
            set
            {
                _internal.mipLevels = value;
            }
        }

        public uint ArrayLayers
        {
            get => _internal.arrayLayers;
            set
            {
                _internal.arrayLayers = value;
            }
        }

        public SampleCountFlagBits Samples
        {
            get => _internal.samples;
            set
            {
                _internal.samples = value;
            }
        }

        public ImageTiling Tiling
        {
            get => _internal.tiling;
            set
            {
                _internal.tiling = value;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        public SharingMode SharingMode
        {
            get => _internal.sharingMode;
            set
            {
                _internal.sharingMode = value;
            }
        }

        public uint QueueFamilyIndexCount
        {
            get => _internal.queueFamilyIndexCount;
            set
            {
                _internal.queueFamilyIndexCount = value;
            }
        }

        public uint PQueueFamilyIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pQueueFamilyIndices);
            }
            set
            {
                refpQueueFamilyIndices?.Dispose();
                refpQueueFamilyIndices = new StructReference(value);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
        }

        public ImageLayout InitialLayout
        {
            get => _internal.initialLayout;
            set
            {
                _internal.initialLayout = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueueFamilyIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageCreateInfo(ImageCreateInfo i)
        {
            if (i.Extent != null)
            {
                i._internal.extent = i.Extent;
            }
            return i._internal;
        }

        public static implicit operator ImageCreateInfo(AdamantiumVulkan.Core.Interop.ImageCreateInfo i)
        {
            return new ImageCreateInfo(i);
        }

    }

    public partial class SubresourceLayout
    {
        private AdamantiumVulkan.Core.Interop.SubresourceLayout _internal;

        public SubresourceLayout()
        {
        }

        public SubresourceLayout(AdamantiumVulkan.Core.Interop.SubresourceLayout _internal)
        {
            this._internal = _internal;
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public ulong RowPitch
        {
            get => _internal.rowPitch;
            set
            {
                _internal.rowPitch = value;
            }
        }

        public ulong ArrayPitch
        {
            get => _internal.arrayPitch;
            set
            {
                _internal.arrayPitch = value;
            }
        }

        public ulong DepthPitch
        {
            get => _internal.depthPitch;
            set
            {
                _internal.depthPitch = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubresourceLayout(SubresourceLayout s)
        {
            return s._internal;
        }

        public static implicit operator SubresourceLayout(AdamantiumVulkan.Core.Interop.SubresourceLayout s)
        {
            return new SubresourceLayout(s);
        }

    }

    public partial class ComponentMapping
    {
        private AdamantiumVulkan.Core.Interop.ComponentMapping _internal;

        public ComponentMapping()
        {
        }

        public ComponentMapping(AdamantiumVulkan.Core.Interop.ComponentMapping _internal)
        {
            this._internal = _internal;
        }

        public ComponentSwizzle R
        {
            get => _internal.r;
            set
            {
                _internal.r = value;
            }
        }

        public ComponentSwizzle G
        {
            get => _internal.g;
            set
            {
                _internal.g = value;
            }
        }

        public ComponentSwizzle B
        {
            get => _internal.b;
            set
            {
                _internal.b = value;
            }
        }

        public ComponentSwizzle A
        {
            get => _internal.a;
            set
            {
                _internal.a = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ComponentMapping(ComponentMapping c)
        {
            return c._internal;
        }

        public static implicit operator ComponentMapping(AdamantiumVulkan.Core.Interop.ComponentMapping c)
        {
            return new ComponentMapping(c);
        }

    }

    public partial class ImageSubresourceRange
    {
        private AdamantiumVulkan.Core.Interop.ImageSubresourceRange _internal;

        public ImageSubresourceRange()
        {
        }

        public ImageSubresourceRange(AdamantiumVulkan.Core.Interop.ImageSubresourceRange _internal)
        {
            this._internal = _internal;
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public uint BaseMipLevel
        {
            get => _internal.baseMipLevel;
            set
            {
                _internal.baseMipLevel = value;
            }
        }

        public uint LevelCount
        {
            get => _internal.levelCount;
            set
            {
                _internal.levelCount = value;
            }
        }

        public uint BaseArrayLayer
        {
            get => _internal.baseArrayLayer;
            set
            {
                _internal.baseArrayLayer = value;
            }
        }

        public uint LayerCount
        {
            get => _internal.layerCount;
            set
            {
                _internal.layerCount = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageSubresourceRange(ImageSubresourceRange i)
        {
            return i._internal;
        }

        public static implicit operator ImageSubresourceRange(AdamantiumVulkan.Core.Interop.ImageSubresourceRange i)
        {
            return new ImageSubresourceRange(i);
        }

    }

    public partial class ImageViewCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageViewCreateInfo _internal;

        private GCHandleReference refpNext;

        private Image image;

        private ComponentMapping components;

        private ImageSubresourceRange subresourceRange;

        public ImageViewCreateInfo()
        {
        }

        public ImageViewCreateInfo(AdamantiumVulkan.Core.Interop.ImageViewCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public ImageViewType ViewType
        {
            get => _internal.viewType;
            set
            {
                _internal.viewType = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public ComponentMapping Components
        {
            get
            {
                if (components != null)
                {
                    return components;
                }
                components = _internal.components;
                return components;
            }
            set
            {
                components = value;
                _internal.components = value;
            }
        }

        public ImageSubresourceRange SubresourceRange
        {
            get
            {
                if (subresourceRange != null)
                {
                    return subresourceRange;
                }
                subresourceRange = _internal.subresourceRange;
                return subresourceRange;
            }
            set
            {
                subresourceRange = value;
                _internal.subresourceRange = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageViewCreateInfo(ImageViewCreateInfo i)
        {
            if (i.Image != null)
            {
                i._internal.image = i.Image;
            }
            if (i.Components != null)
            {
                i._internal.components = i.Components;
            }
            if (i.SubresourceRange != null)
            {
                i._internal.subresourceRange = i.SubresourceRange;
            }
            return i._internal;
        }

        public static implicit operator ImageViewCreateInfo(AdamantiumVulkan.Core.Interop.ImageViewCreateInfo i)
        {
            return new ImageViewCreateInfo(i);
        }

    }

    public partial class ShaderModuleCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ShaderModuleCreateInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpCode;

        public ShaderModuleCreateInfo()
        {
        }

        public ShaderModuleCreateInfo(AdamantiumVulkan.Core.Interop.ShaderModuleCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ulong CodeSize
        {
            get => _internal.codeSize;
            set
            {
                _internal.codeSize = value;
            }
        }

        private byte[] pCode;
        public byte[] PCode
        {
            get
            {
                if(pCode != null)
                    return pCode;

                pCode = new byte[_internal.codeSize];
                MarshalUtils.IntPtrToManagedArray<byte>(_internal.pCode, pCode);
                return pCode;
            }
            set
            {
                refpCode?.Dispose();
                var tmpArray = new byte[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpCode = new GCHandleReference(tmpArray);
                pCode = value;
                _internal.pCode = refpCode.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpCode?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ShaderModuleCreateInfo(ShaderModuleCreateInfo s)
        {
            return s._internal;
        }

        public static implicit operator ShaderModuleCreateInfo(AdamantiumVulkan.Core.Interop.ShaderModuleCreateInfo s)
        {
            return new ShaderModuleCreateInfo(s);
        }

    }

    public partial class PipelineCacheCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineCacheCreateInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpInitialData;

        public PipelineCacheCreateInfo()
        {
        }

        public PipelineCacheCreateInfo(AdamantiumVulkan.Core.Interop.PipelineCacheCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ulong InitialDataSize
        {
            get => _internal.initialDataSize;
            set
            {
                _internal.initialDataSize = value;
            }
        }

        private System.IntPtr pInitialData;
        public System.IntPtr PInitialData
        {
            get
            {
                if(pInitialData != null)
                    return pInitialData;

                pInitialData = _internal.pInitialData;
                return pInitialData;
            }
            set
            {
                refpInitialData?.Dispose();
                refpInitialData = new GCHandleReference(value);
                pInitialData = value;
                _internal.pInitialData = refpInitialData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpInitialData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineCacheCreateInfo(PipelineCacheCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineCacheCreateInfo(AdamantiumVulkan.Core.Interop.PipelineCacheCreateInfo p)
        {
            return new PipelineCacheCreateInfo(p);
        }

    }

    public partial class SpecializationMapEntry
    {
        private AdamantiumVulkan.Core.Interop.SpecializationMapEntry _internal;

        public SpecializationMapEntry()
        {
        }

        public SpecializationMapEntry(AdamantiumVulkan.Core.Interop.SpecializationMapEntry _internal)
        {
            this._internal = _internal;
        }

        public uint ConstantID
        {
            get => _internal.constantID;
            set
            {
                _internal.constantID = value;
            }
        }

        public uint Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SpecializationMapEntry(SpecializationMapEntry s)
        {
            return s._internal;
        }

        public static implicit operator SpecializationMapEntry(AdamantiumVulkan.Core.Interop.SpecializationMapEntry s)
        {
            return new SpecializationMapEntry(s);
        }

    }

    public partial class SpecializationInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SpecializationInfo _internal;

        private StructReference refpMapEntries;

        private GCHandleReference refpData;

        public SpecializationInfo()
        {
        }

        public SpecializationInfo(AdamantiumVulkan.Core.Interop.SpecializationInfo _internal)
        {
            this._internal = _internal;
        }

        public uint MapEntryCount
        {
            get => _internal.mapEntryCount;
            set
            {
                _internal.mapEntryCount = value;
            }
        }

        private SpecializationMapEntry pMapEntries;
        public SpecializationMapEntry PMapEntries
        {
            get
            {
                if(pMapEntries != null)
                    return pMapEntries;

                pMapEntries = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SpecializationMapEntry>(_internal.pMapEntries);
                return pMapEntries;
            }
            set
            {
                refpMapEntries?.Dispose();
                AdamantiumVulkan.Core.Interop.SpecializationMapEntry tmp = value;
                refpMapEntries = new StructReference(tmp);
                pMapEntries = value;
                _internal.pMapEntries = refpMapEntries.Handle;
            }
        }

        public ulong DataSize
        {
            get => _internal.dataSize;
            set
            {
                _internal.dataSize = value;
            }
        }

        private System.IntPtr pData;
        public System.IntPtr PData
        {
            get
            {
                if(pData != null)
                    return pData;

                pData = _internal.pData;
                return pData;
            }
            set
            {
                refpData?.Dispose();
                refpData = new GCHandleReference(value);
                pData = value;
                _internal.pData = refpData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpMapEntries?.Dispose();
            refpData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SpecializationInfo(SpecializationInfo s)
        {
            return s._internal;
        }

        public static implicit operator SpecializationInfo(AdamantiumVulkan.Core.Interop.SpecializationInfo s)
        {
            return new SpecializationInfo(s);
        }

    }

    public partial class PipelineShaderStageCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo _internal;

        private GCHandleReference refpNext;

        private ShaderModule module;

        private StringReference refpName;

        private StructReference refpSpecializationInfo;

        public PipelineShaderStageCreateInfo()
        {
        }

        public PipelineShaderStageCreateInfo(AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ShaderStageFlagBits Stage
        {
            get => _internal.stage;
            set
            {
                _internal.stage = value;
            }
        }

        public ShaderModule Module
        {
            get
            {
                if (module != null)
                {
                    return module;
                }
                module = _internal.module;
                return module;
            }
            set
            {
                module = value;
                _internal.module = value;
            }
        }

        private string pName;
        public string PName
        {
            get
            {
                if(pName != null)
                    return pName;

                pName = Marshal.PtrToStringAnsi(_internal.pName);
                return pName;
            }
            set
            {
                refpName?.Dispose();
                refpName = new StringReference(value, false);
                pName = value;
                _internal.pName = refpName.Handle;
            }
        }

        private SpecializationInfo pSpecializationInfo;
        public SpecializationInfo PSpecializationInfo
        {
            get
            {
                if(pSpecializationInfo != null)
                    return pSpecializationInfo;

                pSpecializationInfo = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SpecializationInfo>(_internal.pSpecializationInfo);
                return pSpecializationInfo;
            }
            set
            {
                refpSpecializationInfo?.Dispose();
                AdamantiumVulkan.Core.Interop.SpecializationInfo tmp = value;
                refpSpecializationInfo = new StructReference(tmp);
                pSpecializationInfo = value;
                _internal.pSpecializationInfo = refpSpecializationInfo.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpName?.Dispose();
            refpSpecializationInfo?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo(PipelineShaderStageCreateInfo p)
        {
            if (p.Module != null)
            {
                p._internal.module = p.Module;
            }
            return p._internal;
        }

        public static implicit operator PipelineShaderStageCreateInfo(AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo p)
        {
            return new PipelineShaderStageCreateInfo(p);
        }

    }

    public partial class VertexInputBindingDescription
    {
        private AdamantiumVulkan.Core.Interop.VertexInputBindingDescription _internal;

        public VertexInputBindingDescription()
        {
        }

        public VertexInputBindingDescription(AdamantiumVulkan.Core.Interop.VertexInputBindingDescription _internal)
        {
            this._internal = _internal;
        }

        public uint Binding
        {
            get => _internal.binding;
            set
            {
                _internal.binding = value;
            }
        }

        public uint Stride
        {
            get => _internal.stride;
            set
            {
                _internal.stride = value;
            }
        }

        public VertexInputRate InputRate
        {
            get => _internal.inputRate;
            set
            {
                _internal.inputRate = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VertexInputBindingDescription(VertexInputBindingDescription v)
        {
            return v._internal;
        }

        public static implicit operator VertexInputBindingDescription(AdamantiumVulkan.Core.Interop.VertexInputBindingDescription v)
        {
            return new VertexInputBindingDescription(v);
        }

    }

    public partial class VertexInputAttributeDescription
    {
        private AdamantiumVulkan.Core.Interop.VertexInputAttributeDescription _internal;

        public VertexInputAttributeDescription()
        {
        }

        public VertexInputAttributeDescription(AdamantiumVulkan.Core.Interop.VertexInputAttributeDescription _internal)
        {
            this._internal = _internal;
        }

        public uint Location
        {
            get => _internal.location;
            set
            {
                _internal.location = value;
            }
        }

        public uint Binding
        {
            get => _internal.binding;
            set
            {
                _internal.binding = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public uint Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VertexInputAttributeDescription(VertexInputAttributeDescription v)
        {
            return v._internal;
        }

        public static implicit operator VertexInputAttributeDescription(AdamantiumVulkan.Core.Interop.VertexInputAttributeDescription v)
        {
            return new VertexInputAttributeDescription(v);
        }

    }

    public partial class PipelineVertexInputStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpVertexBindingDescriptions;

        private GCHandleReference refpVertexAttributeDescriptions;

        public PipelineVertexInputStateCreateInfo()
        {
        }

        public PipelineVertexInputStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint VertexBindingDescriptionCount
        {
            get => _internal.vertexBindingDescriptionCount;
            set
            {
                _internal.vertexBindingDescriptionCount = value;
            }
        }

        private VertexInputBindingDescription[] pVertexBindingDescriptions;
        public VertexInputBindingDescription[] PVertexBindingDescriptions
        {
            get
            {
                if(pVertexBindingDescriptions != null)
                    return pVertexBindingDescriptions;

                pVertexBindingDescriptions = new VertexInputBindingDescription[_internal.vertexBindingDescriptionCount];
                MarshalUtils.IntPtrToManagedArray<VertexInputBindingDescription>(_internal.pVertexBindingDescriptions, pVertexBindingDescriptions);
                return pVertexBindingDescriptions;
            }
            set
            {
                refpVertexBindingDescriptions?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.VertexInputBindingDescription[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpVertexBindingDescriptions = new GCHandleReference(tmpArray);
                pVertexBindingDescriptions = value;
                _internal.pVertexBindingDescriptions = refpVertexBindingDescriptions.Handle;
            }
        }

        public uint VertexAttributeDescriptionCount
        {
            get => _internal.vertexAttributeDescriptionCount;
            set
            {
                _internal.vertexAttributeDescriptionCount = value;
            }
        }

        private VertexInputAttributeDescription[] pVertexAttributeDescriptions;
        public VertexInputAttributeDescription[] PVertexAttributeDescriptions
        {
            get
            {
                if(pVertexAttributeDescriptions != null)
                    return pVertexAttributeDescriptions;

                pVertexAttributeDescriptions = new VertexInputAttributeDescription[_internal.vertexAttributeDescriptionCount];
                MarshalUtils.IntPtrToManagedArray<VertexInputAttributeDescription>(_internal.pVertexAttributeDescriptions, pVertexAttributeDescriptions);
                return pVertexAttributeDescriptions;
            }
            set
            {
                refpVertexAttributeDescriptions?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.VertexInputAttributeDescription[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpVertexAttributeDescriptions = new GCHandleReference(tmpArray);
                pVertexAttributeDescriptions = value;
                _internal.pVertexAttributeDescriptions = refpVertexAttributeDescriptions.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpVertexBindingDescriptions?.Dispose();
            refpVertexAttributeDescriptions?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo(PipelineVertexInputStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineVertexInputStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo p)
        {
            return new PipelineVertexInputStateCreateInfo(p);
        }

    }

    public partial class PipelineInputAssemblyStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo _internal;

        private GCHandleReference refpNext;

        public PipelineInputAssemblyStateCreateInfo()
        {
        }

        public PipelineInputAssemblyStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PrimitiveTopology Topology
        {
            get => _internal.topology;
            set
            {
                _internal.topology = value;
            }
        }

        public bool PrimitiveRestartEnable
        {
            get => _internal.primitiveRestartEnable;
            set
            {
                _internal.primitiveRestartEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo(PipelineInputAssemblyStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineInputAssemblyStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo p)
        {
            return new PipelineInputAssemblyStateCreateInfo(p);
        }

    }

    public partial class PipelineTessellationStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo _internal;

        private GCHandleReference refpNext;

        public PipelineTessellationStateCreateInfo()
        {
        }

        public PipelineTessellationStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint PatchControlPoints
        {
            get => _internal.patchControlPoints;
            set
            {
                _internal.patchControlPoints = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo(PipelineTessellationStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineTessellationStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo p)
        {
            return new PipelineTessellationStateCreateInfo(p);
        }

    }

    public partial class Viewport
    {
        private AdamantiumVulkan.Core.Interop.Viewport _internal;

        public Viewport()
        {
        }

        public Viewport(AdamantiumVulkan.Core.Interop.Viewport _internal)
        {
            this._internal = _internal;
        }

        public float X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public float Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public float Width
        {
            get => _internal.width;
            set
            {
                _internal.width = value;
            }
        }

        public float Height
        {
            get => _internal.height;
            set
            {
                _internal.height = value;
            }
        }

        public float MinDepth
        {
            get => _internal.minDepth;
            set
            {
                _internal.minDepth = value;
            }
        }

        public float MaxDepth
        {
            get => _internal.maxDepth;
            set
            {
                _internal.maxDepth = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Viewport(Viewport v)
        {
            return v._internal;
        }

        public static implicit operator Viewport(AdamantiumVulkan.Core.Interop.Viewport v)
        {
            return new Viewport(v);
        }

    }

    public partial class Offset2D
    {
        private AdamantiumVulkan.Core.Interop.Offset2D _internal;

        public Offset2D()
        {
        }

        public Offset2D(AdamantiumVulkan.Core.Interop.Offset2D _internal)
        {
            this._internal = _internal;
        }

        public int X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public int Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Offset2D(Offset2D o)
        {
            return o._internal;
        }

        public static implicit operator Offset2D(AdamantiumVulkan.Core.Interop.Offset2D o)
        {
            return new Offset2D(o);
        }

    }

    public partial class Extent2D
    {
        private AdamantiumVulkan.Core.Interop.Extent2D _internal;

        public Extent2D()
        {
        }

        public Extent2D(AdamantiumVulkan.Core.Interop.Extent2D _internal)
        {
            this._internal = _internal;
        }

        public uint Width
        {
            get => _internal.width;
            set
            {
                _internal.width = value;
            }
        }

        public uint Height
        {
            get => _internal.height;
            set
            {
                _internal.height = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Extent2D(Extent2D e)
        {
            return e._internal;
        }

        public static implicit operator Extent2D(AdamantiumVulkan.Core.Interop.Extent2D e)
        {
            return new Extent2D(e);
        }

    }

    public partial class Rect2D
    {
        private AdamantiumVulkan.Core.Interop.Rect2D _internal;

        private Offset2D offset;

        private Extent2D extent;

        public Rect2D()
        {
        }

        public Rect2D(AdamantiumVulkan.Core.Interop.Rect2D _internal)
        {
            this._internal = _internal;
        }

        public Offset2D Offset
        {
            get
            {
                if (offset != null)
                {
                    return offset;
                }
                offset = _internal.offset;
                return offset;
            }
            set
            {
                offset = value;
                _internal.offset = value;
            }
        }

        public Extent2D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.Rect2D(Rect2D r)
        {
            if (r.Offset != null)
            {
                r._internal.offset = r.Offset;
            }
            if (r.Extent != null)
            {
                r._internal.extent = r.Extent;
            }
            return r._internal;
        }

        public static implicit operator Rect2D(AdamantiumVulkan.Core.Interop.Rect2D r)
        {
            return new Rect2D(r);
        }

    }

    public partial class PipelineViewportStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpViewports;

        private StructReference refpScissors;

        public PipelineViewportStateCreateInfo()
        {
        }

        public PipelineViewportStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint ViewportCount
        {
            get => _internal.viewportCount;
            set
            {
                _internal.viewportCount = value;
            }
        }

        private Viewport pViewports;
        public Viewport PViewports
        {
            get
            {
                if(pViewports != null)
                    return pViewports;

                pViewports = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Viewport>(_internal.pViewports);
                return pViewports;
            }
            set
            {
                refpViewports?.Dispose();
                AdamantiumVulkan.Core.Interop.Viewport tmp = value;
                refpViewports = new StructReference(tmp);
                pViewports = value;
                _internal.pViewports = refpViewports.Handle;
            }
        }

        public uint ScissorCount
        {
            get => _internal.scissorCount;
            set
            {
                _internal.scissorCount = value;
            }
        }

        private Rect2D pScissors;
        public Rect2D PScissors
        {
            get
            {
                if(pScissors != null)
                    return pScissors;

                pScissors = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Rect2D>(_internal.pScissors);
                return pScissors;
            }
            set
            {
                refpScissors?.Dispose();
                AdamantiumVulkan.Core.Interop.Rect2D tmp = value;
                refpScissors = new StructReference(tmp);
                pScissors = value;
                _internal.pScissors = refpScissors.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpViewports?.Dispose();
            refpScissors?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo(PipelineViewportStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo p)
        {
            return new PipelineViewportStateCreateInfo(p);
        }

    }

    public partial class PipelineRasterizationStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo _internal;

        private GCHandleReference refpNext;

        public PipelineRasterizationStateCreateInfo()
        {
        }

        public PipelineRasterizationStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public bool DepthClampEnable
        {
            get => _internal.depthClampEnable;
            set
            {
                _internal.depthClampEnable = value;
            }
        }

        public bool RasterizerDiscardEnable
        {
            get => _internal.rasterizerDiscardEnable;
            set
            {
                _internal.rasterizerDiscardEnable = value;
            }
        }

        public PolygonMode PolygonMode
        {
            get => _internal.polygonMode;
            set
            {
                _internal.polygonMode = value;
            }
        }

        public uint CullMode
        {
            get => _internal.cullMode;
            set
            {
                _internal.cullMode = value;
            }
        }

        public FrontFace FrontFace
        {
            get => _internal.frontFace;
            set
            {
                _internal.frontFace = value;
            }
        }

        public bool DepthBiasEnable
        {
            get => _internal.depthBiasEnable;
            set
            {
                _internal.depthBiasEnable = value;
            }
        }

        public float DepthBiasConstantFactor
        {
            get => _internal.depthBiasConstantFactor;
            set
            {
                _internal.depthBiasConstantFactor = value;
            }
        }

        public float DepthBiasClamp
        {
            get => _internal.depthBiasClamp;
            set
            {
                _internal.depthBiasClamp = value;
            }
        }

        public float DepthBiasSlopeFactor
        {
            get => _internal.depthBiasSlopeFactor;
            set
            {
                _internal.depthBiasSlopeFactor = value;
            }
        }

        public float LineWidth
        {
            get => _internal.lineWidth;
            set
            {
                _internal.lineWidth = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo(PipelineRasterizationStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRasterizationStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo p)
        {
            return new PipelineRasterizationStateCreateInfo(p);
        }

    }

    public partial class PipelineMultisampleStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpSampleMask;

        public PipelineMultisampleStateCreateInfo()
        {
        }

        public PipelineMultisampleStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public SampleCountFlagBits RasterizationSamples
        {
            get => _internal.rasterizationSamples;
            set
            {
                _internal.rasterizationSamples = value;
            }
        }

        public bool SampleShadingEnable
        {
            get => _internal.sampleShadingEnable;
            set
            {
                _internal.sampleShadingEnable = value;
            }
        }

        public float MinSampleShading
        {
            get => _internal.minSampleShading;
            set
            {
                _internal.minSampleShading = value;
            }
        }

        private uint pSampleMask;
        public uint PSampleMask
        {
            get
            {
                pSampleMask = Marshal.PtrToStructure<uint>(_internal.pSampleMask);
                return pSampleMask;
            }
            set
            {
                refpSampleMask?.Dispose();
                refpSampleMask = new StructReference(value);
                pSampleMask = value;
                _internal.pSampleMask = refpSampleMask.Handle;
            }
        }

        public bool AlphaToCoverageEnable
        {
            get => _internal.alphaToCoverageEnable;
            set
            {
                _internal.alphaToCoverageEnable = value;
            }
        }

        public bool AlphaToOneEnable
        {
            get => _internal.alphaToOneEnable;
            set
            {
                _internal.alphaToOneEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpSampleMask?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo(PipelineMultisampleStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineMultisampleStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo p)
        {
            return new PipelineMultisampleStateCreateInfo(p);
        }

    }

    public partial class StencilOpState
    {
        private AdamantiumVulkan.Core.Interop.StencilOpState _internal;

        public StencilOpState()
        {
        }

        public StencilOpState(AdamantiumVulkan.Core.Interop.StencilOpState _internal)
        {
            this._internal = _internal;
        }

        public StencilOp FailOp
        {
            get => _internal.failOp;
            set
            {
                _internal.failOp = value;
            }
        }

        public StencilOp PassOp
        {
            get => _internal.passOp;
            set
            {
                _internal.passOp = value;
            }
        }

        public StencilOp DepthFailOp
        {
            get => _internal.depthFailOp;
            set
            {
                _internal.depthFailOp = value;
            }
        }

        public CompareOp CompareOp
        {
            get => _internal.compareOp;
            set
            {
                _internal.compareOp = value;
            }
        }

        public uint CompareMask
        {
            get => _internal.compareMask;
            set
            {
                _internal.compareMask = value;
            }
        }

        public uint WriteMask
        {
            get => _internal.writeMask;
            set
            {
                _internal.writeMask = value;
            }
        }

        public uint Reference
        {
            get => _internal.reference;
            set
            {
                _internal.reference = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.StencilOpState(StencilOpState s)
        {
            return s._internal;
        }

        public static implicit operator StencilOpState(AdamantiumVulkan.Core.Interop.StencilOpState s)
        {
            return new StencilOpState(s);
        }

    }

    public partial class PipelineDepthStencilStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StencilOpState front;

        private StencilOpState back;

        public PipelineDepthStencilStateCreateInfo()
        {
        }

        public PipelineDepthStencilStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public bool DepthTestEnable
        {
            get => _internal.depthTestEnable;
            set
            {
                _internal.depthTestEnable = value;
            }
        }

        public bool DepthWriteEnable
        {
            get => _internal.depthWriteEnable;
            set
            {
                _internal.depthWriteEnable = value;
            }
        }

        public CompareOp DepthCompareOp
        {
            get => _internal.depthCompareOp;
            set
            {
                _internal.depthCompareOp = value;
            }
        }

        public bool DepthBoundsTestEnable
        {
            get => _internal.depthBoundsTestEnable;
            set
            {
                _internal.depthBoundsTestEnable = value;
            }
        }

        public bool StencilTestEnable
        {
            get => _internal.stencilTestEnable;
            set
            {
                _internal.stencilTestEnable = value;
            }
        }

        public StencilOpState Front
        {
            get
            {
                if (front != null)
                {
                    return front;
                }
                front = _internal.front;
                return front;
            }
            set
            {
                front = value;
                _internal.front = value;
            }
        }

        public StencilOpState Back
        {
            get
            {
                if (back != null)
                {
                    return back;
                }
                back = _internal.back;
                return back;
            }
            set
            {
                back = value;
                _internal.back = value;
            }
        }

        public float MinDepthBounds
        {
            get => _internal.minDepthBounds;
            set
            {
                _internal.minDepthBounds = value;
            }
        }

        public float MaxDepthBounds
        {
            get => _internal.maxDepthBounds;
            set
            {
                _internal.maxDepthBounds = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo(PipelineDepthStencilStateCreateInfo p)
        {
            if (p.Front != null)
            {
                p._internal.front = p.Front;
            }
            if (p.Back != null)
            {
                p._internal.back = p.Back;
            }
            return p._internal;
        }

        public static implicit operator PipelineDepthStencilStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo p)
        {
            return new PipelineDepthStencilStateCreateInfo(p);
        }

    }

    public partial class PipelineColorBlendAttachmentState
    {
        private AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState _internal;

        public PipelineColorBlendAttachmentState()
        {
        }

        public PipelineColorBlendAttachmentState(AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState _internal)
        {
            this._internal = _internal;
        }

        public bool BlendEnable
        {
            get => _internal.blendEnable;
            set
            {
                _internal.blendEnable = value;
            }
        }

        public BlendFactor SrcColorBlendFactor
        {
            get => _internal.srcColorBlendFactor;
            set
            {
                _internal.srcColorBlendFactor = value;
            }
        }

        public BlendFactor DstColorBlendFactor
        {
            get => _internal.dstColorBlendFactor;
            set
            {
                _internal.dstColorBlendFactor = value;
            }
        }

        public BlendOp ColorBlendOp
        {
            get => _internal.colorBlendOp;
            set
            {
                _internal.colorBlendOp = value;
            }
        }

        public BlendFactor SrcAlphaBlendFactor
        {
            get => _internal.srcAlphaBlendFactor;
            set
            {
                _internal.srcAlphaBlendFactor = value;
            }
        }

        public BlendFactor DstAlphaBlendFactor
        {
            get => _internal.dstAlphaBlendFactor;
            set
            {
                _internal.dstAlphaBlendFactor = value;
            }
        }

        public BlendOp AlphaBlendOp
        {
            get => _internal.alphaBlendOp;
            set
            {
                _internal.alphaBlendOp = value;
            }
        }

        public uint ColorWriteMask
        {
            get => _internal.colorWriteMask;
            set
            {
                _internal.colorWriteMask = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState(PipelineColorBlendAttachmentState p)
        {
            return p._internal;
        }

        public static implicit operator PipelineColorBlendAttachmentState(AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState p)
        {
            return new PipelineColorBlendAttachmentState(p);
        }

    }

    public partial class PipelineColorBlendStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttachments;

        private float[] blendConstants;

        public PipelineColorBlendStateCreateInfo()
        {
        }

        public PipelineColorBlendStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public bool LogicOpEnable
        {
            get => _internal.logicOpEnable;
            set
            {
                _internal.logicOpEnable = value;
            }
        }

        public LogicOp LogicOp
        {
            get => _internal.logicOp;
            set
            {
                _internal.logicOp = value;
            }
        }

        public uint AttachmentCount
        {
            get => _internal.attachmentCount;
            set
            {
                _internal.attachmentCount = value;
            }
        }

        private PipelineColorBlendAttachmentState pAttachments;
        public PipelineColorBlendAttachmentState PAttachments
        {
            get
            {
                if(pAttachments != null)
                    return pAttachments;

                pAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState>(_internal.pAttachments);
                return pAttachments;
            }
            set
            {
                refpAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineColorBlendAttachmentState tmp = value;
                refpAttachments = new StructReference(tmp);
                pAttachments = value;
                _internal.pAttachments = refpAttachments.Handle;
            }
        }

        public float[] BlendConstants
        {
            get
            {
                if(blendConstants != null)
                    return blendConstants;

                var tmpArr = new float[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.blendConstants[i];
                    }
                }
                blendConstants = tmpArr;
                return blendConstants;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(BlendConstants), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.blendConstants[i] = value[i];
                    }
                }
                blendConstants = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttachments?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo(PipelineColorBlendStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineColorBlendStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo p)
        {
            return new PipelineColorBlendStateCreateInfo(p);
        }

    }

    public partial class PipelineDynamicStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpDynamicStates;

        public PipelineDynamicStateCreateInfo()
        {
        }

        public PipelineDynamicStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint DynamicStateCount
        {
            get => _internal.dynamicStateCount;
            set
            {
                _internal.dynamicStateCount = value;
            }
        }

        private DynamicState pDynamicStates;
        public DynamicState PDynamicStates
        {
            get
            {
                pDynamicStates = Marshal.PtrToStructure<DynamicState>(_internal.pDynamicStates);
                return pDynamicStates;
            }
            set
            {
                refpDynamicStates?.Dispose();
                refpDynamicStates = new StructReference(value);
                pDynamicStates = value;
                _internal.pDynamicStates = refpDynamicStates.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDynamicStates?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo(PipelineDynamicStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineDynamicStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo p)
        {
            return new PipelineDynamicStateCreateInfo(p);
        }

    }

    public partial class GraphicsPipelineCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.GraphicsPipelineCreateInfo _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpStages;

        private StructReference refpVertexInputState;

        private StructReference refpInputAssemblyState;

        private StructReference refpTessellationState;

        private StructReference refpViewportState;

        private StructReference refpRasterizationState;

        private StructReference refpMultisampleState;

        private StructReference refpDepthStencilState;

        private StructReference refpColorBlendState;

        private StructReference refpDynamicState;

        private PipelineLayout layout;

        private RenderPass renderPass;

        private Pipeline basePipelineHandle;

        public GraphicsPipelineCreateInfo()
        {
        }

        public GraphicsPipelineCreateInfo(AdamantiumVulkan.Core.Interop.GraphicsPipelineCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint StageCount
        {
            get => _internal.stageCount;
            set
            {
                _internal.stageCount = value;
            }
        }

        private PipelineShaderStageCreateInfo[] pStages;
        public PipelineShaderStageCreateInfo[] PStages
        {
            get
            {
                if(pStages != null)
                    return pStages;

                pStages = new PipelineShaderStageCreateInfo[_internal.stageCount];
                MarshalUtils.IntPtrToManagedArray<PipelineShaderStageCreateInfo>(_internal.pStages, pStages);
                return pStages;
            }
            set
            {
                refpStages?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpStages = new GCHandleReference(tmpArray);
                pStages = value;
                _internal.pStages = refpStages.Handle;
            }
        }

        private PipelineVertexInputStateCreateInfo pVertexInputState;
        public PipelineVertexInputStateCreateInfo PVertexInputState
        {
            get
            {
                if(pVertexInputState != null)
                    return pVertexInputState;

                pVertexInputState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo>(_internal.pVertexInputState);
                return pVertexInputState;
            }
            set
            {
                refpVertexInputState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineVertexInputStateCreateInfo tmp = value;
                refpVertexInputState = new StructReference(tmp);
                pVertexInputState = value;
                _internal.pVertexInputState = refpVertexInputState.Handle;
            }
        }

        private PipelineInputAssemblyStateCreateInfo pInputAssemblyState;
        public PipelineInputAssemblyStateCreateInfo PInputAssemblyState
        {
            get
            {
                if(pInputAssemblyState != null)
                    return pInputAssemblyState;

                pInputAssemblyState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo>(_internal.pInputAssemblyState);
                return pInputAssemblyState;
            }
            set
            {
                refpInputAssemblyState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineInputAssemblyStateCreateInfo tmp = value;
                refpInputAssemblyState = new StructReference(tmp);
                pInputAssemblyState = value;
                _internal.pInputAssemblyState = refpInputAssemblyState.Handle;
            }
        }

        private PipelineTessellationStateCreateInfo pTessellationState;
        public PipelineTessellationStateCreateInfo PTessellationState
        {
            get
            {
                if(pTessellationState != null)
                    return pTessellationState;

                pTessellationState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo>(_internal.pTessellationState);
                return pTessellationState;
            }
            set
            {
                refpTessellationState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineTessellationStateCreateInfo tmp = value;
                refpTessellationState = new StructReference(tmp);
                pTessellationState = value;
                _internal.pTessellationState = refpTessellationState.Handle;
            }
        }

        private PipelineViewportStateCreateInfo pViewportState;
        public PipelineViewportStateCreateInfo PViewportState
        {
            get
            {
                if(pViewportState != null)
                    return pViewportState;

                pViewportState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo>(_internal.pViewportState);
                return pViewportState;
            }
            set
            {
                refpViewportState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineViewportStateCreateInfo tmp = value;
                refpViewportState = new StructReference(tmp);
                pViewportState = value;
                _internal.pViewportState = refpViewportState.Handle;
            }
        }

        private PipelineRasterizationStateCreateInfo pRasterizationState;
        public PipelineRasterizationStateCreateInfo PRasterizationState
        {
            get
            {
                if(pRasterizationState != null)
                    return pRasterizationState;

                pRasterizationState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo>(_internal.pRasterizationState);
                return pRasterizationState;
            }
            set
            {
                refpRasterizationState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineRasterizationStateCreateInfo tmp = value;
                refpRasterizationState = new StructReference(tmp);
                pRasterizationState = value;
                _internal.pRasterizationState = refpRasterizationState.Handle;
            }
        }

        private PipelineMultisampleStateCreateInfo pMultisampleState;
        public PipelineMultisampleStateCreateInfo PMultisampleState
        {
            get
            {
                if(pMultisampleState != null)
                    return pMultisampleState;

                pMultisampleState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo>(_internal.pMultisampleState);
                return pMultisampleState;
            }
            set
            {
                refpMultisampleState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineMultisampleStateCreateInfo tmp = value;
                refpMultisampleState = new StructReference(tmp);
                pMultisampleState = value;
                _internal.pMultisampleState = refpMultisampleState.Handle;
            }
        }

        private PipelineDepthStencilStateCreateInfo pDepthStencilState;
        public PipelineDepthStencilStateCreateInfo PDepthStencilState
        {
            get
            {
                if(pDepthStencilState != null)
                    return pDepthStencilState;

                pDepthStencilState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo>(_internal.pDepthStencilState);
                return pDepthStencilState;
            }
            set
            {
                refpDepthStencilState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineDepthStencilStateCreateInfo tmp = value;
                refpDepthStencilState = new StructReference(tmp);
                pDepthStencilState = value;
                _internal.pDepthStencilState = refpDepthStencilState.Handle;
            }
        }

        private PipelineColorBlendStateCreateInfo pColorBlendState;
        public PipelineColorBlendStateCreateInfo PColorBlendState
        {
            get
            {
                if(pColorBlendState != null)
                    return pColorBlendState;

                pColorBlendState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo>(_internal.pColorBlendState);
                return pColorBlendState;
            }
            set
            {
                refpColorBlendState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineColorBlendStateCreateInfo tmp = value;
                refpColorBlendState = new StructReference(tmp);
                pColorBlendState = value;
                _internal.pColorBlendState = refpColorBlendState.Handle;
            }
        }

        private PipelineDynamicStateCreateInfo pDynamicState;
        public PipelineDynamicStateCreateInfo PDynamicState
        {
            get
            {
                if(pDynamicState != null)
                    return pDynamicState;

                pDynamicState = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo>(_internal.pDynamicState);
                return pDynamicState;
            }
            set
            {
                refpDynamicState?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineDynamicStateCreateInfo tmp = value;
                refpDynamicState = new StructReference(tmp);
                pDynamicState = value;
                _internal.pDynamicState = refpDynamicState.Handle;
            }
        }

        public PipelineLayout Layout
        {
            get
            {
                if (layout != null)
                {
                    return layout;
                }
                layout = _internal.layout;
                return layout;
            }
            set
            {
                layout = value;
                _internal.layout = value;
            }
        }

        public RenderPass RenderPass
        {
            get
            {
                if (renderPass != null)
                {
                    return renderPass;
                }
                renderPass = _internal.renderPass;
                return renderPass;
            }
            set
            {
                renderPass = value;
                _internal.renderPass = value;
            }
        }

        public uint Subpass
        {
            get => _internal.subpass;
            set
            {
                _internal.subpass = value;
            }
        }

        public Pipeline BasePipelineHandle
        {
            get
            {
                if (basePipelineHandle != null)
                {
                    return basePipelineHandle;
                }
                basePipelineHandle = _internal.basePipelineHandle;
                return basePipelineHandle;
            }
            set
            {
                basePipelineHandle = value;
                _internal.basePipelineHandle = value;
            }
        }

        public int BasePipelineIndex
        {
            get => _internal.basePipelineIndex;
            set
            {
                _internal.basePipelineIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpStages?.Dispose();
            refpVertexInputState?.Dispose();
            refpInputAssemblyState?.Dispose();
            refpTessellationState?.Dispose();
            refpViewportState?.Dispose();
            refpRasterizationState?.Dispose();
            refpMultisampleState?.Dispose();
            refpDepthStencilState?.Dispose();
            refpColorBlendState?.Dispose();
            refpDynamicState?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.GraphicsPipelineCreateInfo(GraphicsPipelineCreateInfo g)
        {
            if (g.Layout != null)
            {
                g._internal.layout = g.Layout;
            }
            if (g.RenderPass != null)
            {
                g._internal.renderPass = g.RenderPass;
            }
            if (g.BasePipelineHandle != null)
            {
                g._internal.basePipelineHandle = g.BasePipelineHandle;
            }
            return g._internal;
        }

        public static implicit operator GraphicsPipelineCreateInfo(AdamantiumVulkan.Core.Interop.GraphicsPipelineCreateInfo g)
        {
            return new GraphicsPipelineCreateInfo(g);
        }

    }

    public partial class ComputePipelineCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ComputePipelineCreateInfo _internal;

        private GCHandleReference refpNext;

        private PipelineShaderStageCreateInfo stage;

        private PipelineLayout layout;

        private Pipeline basePipelineHandle;

        public ComputePipelineCreateInfo()
        {
        }

        public ComputePipelineCreateInfo(AdamantiumVulkan.Core.Interop.ComputePipelineCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PipelineShaderStageCreateInfo Stage
        {
            get
            {
                if (stage != null)
                {
                    return stage;
                }
                stage = _internal.stage;
                return stage;
            }
            set
            {
                stage = value;
                _internal.stage = value;
            }
        }

        public PipelineLayout Layout
        {
            get
            {
                if (layout != null)
                {
                    return layout;
                }
                layout = _internal.layout;
                return layout;
            }
            set
            {
                layout = value;
                _internal.layout = value;
            }
        }

        public Pipeline BasePipelineHandle
        {
            get
            {
                if (basePipelineHandle != null)
                {
                    return basePipelineHandle;
                }
                basePipelineHandle = _internal.basePipelineHandle;
                return basePipelineHandle;
            }
            set
            {
                basePipelineHandle = value;
                _internal.basePipelineHandle = value;
            }
        }

        public int BasePipelineIndex
        {
            get => _internal.basePipelineIndex;
            set
            {
                _internal.basePipelineIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ComputePipelineCreateInfo(ComputePipelineCreateInfo c)
        {
            if (c.Stage != null)
            {
                c._internal.stage = c.Stage;
            }
            if (c.Layout != null)
            {
                c._internal.layout = c.Layout;
            }
            if (c.BasePipelineHandle != null)
            {
                c._internal.basePipelineHandle = c.BasePipelineHandle;
            }
            return c._internal;
        }

        public static implicit operator ComputePipelineCreateInfo(AdamantiumVulkan.Core.Interop.ComputePipelineCreateInfo c)
        {
            return new ComputePipelineCreateInfo(c);
        }

    }

    public partial class PushConstantRange
    {
        private AdamantiumVulkan.Core.Interop.PushConstantRange _internal;

        public PushConstantRange()
        {
        }

        public PushConstantRange(AdamantiumVulkan.Core.Interop.PushConstantRange _internal)
        {
            this._internal = _internal;
        }

        public uint StageFlags
        {
            get => _internal.stageFlags;
            set
            {
                _internal.stageFlags = value;
            }
        }

        public uint Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public uint Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PushConstantRange(PushConstantRange p)
        {
            return p._internal;
        }

        public static implicit operator PushConstantRange(AdamantiumVulkan.Core.Interop.PushConstantRange p)
        {
            return new PushConstantRange(p);
        }

    }

    public partial class PipelineLayoutCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineLayoutCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpSetLayouts;

        private StructReference refpPushConstantRanges;

        public PipelineLayoutCreateInfo()
        {
        }

        public PipelineLayoutCreateInfo(AdamantiumVulkan.Core.Interop.PipelineLayoutCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint SetLayoutCount
        {
            get => _internal.setLayoutCount;
            set
            {
                _internal.setLayoutCount = value;
            }
        }

        private DescriptorSetLayout pSetLayouts;
        public DescriptorSetLayout PSetLayouts
        {
            get
            {
                if(pSetLayouts != null)
                    return pSetLayouts;

                pSetLayouts = Marshal.PtrToStructure<DescriptorSetLayout>(_internal.pSetLayouts);
                return pSetLayouts;
            }
            set
            {
                refpSetLayouts?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorSetLayout_T tmp = value;
                refpSetLayouts = new StructReference(tmp);
                pSetLayouts = value;
                _internal.pSetLayouts = refpSetLayouts.Handle;
            }
        }

        public uint PushConstantRangeCount
        {
            get => _internal.pushConstantRangeCount;
            set
            {
                _internal.pushConstantRangeCount = value;
            }
        }

        private PushConstantRange pPushConstantRanges;
        public PushConstantRange PPushConstantRanges
        {
            get
            {
                if(pPushConstantRanges != null)
                    return pPushConstantRanges;

                pPushConstantRanges = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PushConstantRange>(_internal.pPushConstantRanges);
                return pPushConstantRanges;
            }
            set
            {
                refpPushConstantRanges?.Dispose();
                AdamantiumVulkan.Core.Interop.PushConstantRange tmp = value;
                refpPushConstantRanges = new StructReference(tmp);
                pPushConstantRanges = value;
                _internal.pPushConstantRanges = refpPushConstantRanges.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpSetLayouts?.Dispose();
            refpPushConstantRanges?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineLayoutCreateInfo(PipelineLayoutCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineLayoutCreateInfo(AdamantiumVulkan.Core.Interop.PipelineLayoutCreateInfo p)
        {
            return new PipelineLayoutCreateInfo(p);
        }

    }

    public partial class SamplerCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SamplerCreateInfo _internal;

        private GCHandleReference refpNext;

        public SamplerCreateInfo()
        {
        }

        public SamplerCreateInfo(AdamantiumVulkan.Core.Interop.SamplerCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Filter MagFilter
        {
            get => _internal.magFilter;
            set
            {
                _internal.magFilter = value;
            }
        }

        public Filter MinFilter
        {
            get => _internal.minFilter;
            set
            {
                _internal.minFilter = value;
            }
        }

        public SamplerMipmapMode MipmapMode
        {
            get => _internal.mipmapMode;
            set
            {
                _internal.mipmapMode = value;
            }
        }

        public SamplerAddressMode AddressModeU
        {
            get => _internal.addressModeU;
            set
            {
                _internal.addressModeU = value;
            }
        }

        public SamplerAddressMode AddressModeV
        {
            get => _internal.addressModeV;
            set
            {
                _internal.addressModeV = value;
            }
        }

        public SamplerAddressMode AddressModeW
        {
            get => _internal.addressModeW;
            set
            {
                _internal.addressModeW = value;
            }
        }

        public float MipLodBias
        {
            get => _internal.mipLodBias;
            set
            {
                _internal.mipLodBias = value;
            }
        }

        public bool AnisotropyEnable
        {
            get => _internal.anisotropyEnable;
            set
            {
                _internal.anisotropyEnable = value;
            }
        }

        public float MaxAnisotropy
        {
            get => _internal.maxAnisotropy;
            set
            {
                _internal.maxAnisotropy = value;
            }
        }

        public bool CompareEnable
        {
            get => _internal.compareEnable;
            set
            {
                _internal.compareEnable = value;
            }
        }

        public CompareOp CompareOp
        {
            get => _internal.compareOp;
            set
            {
                _internal.compareOp = value;
            }
        }

        public float MinLod
        {
            get => _internal.minLod;
            set
            {
                _internal.minLod = value;
            }
        }

        public float MaxLod
        {
            get => _internal.maxLod;
            set
            {
                _internal.maxLod = value;
            }
        }

        public BorderColor BorderColor
        {
            get => _internal.borderColor;
            set
            {
                _internal.borderColor = value;
            }
        }

        public bool UnnormalizedCoordinates
        {
            get => _internal.unnormalizedCoordinates;
            set
            {
                _internal.unnormalizedCoordinates = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SamplerCreateInfo(SamplerCreateInfo s)
        {
            return s._internal;
        }

        public static implicit operator SamplerCreateInfo(AdamantiumVulkan.Core.Interop.SamplerCreateInfo s)
        {
            return new SamplerCreateInfo(s);
        }

    }

    public partial class DescriptorSetLayoutBinding : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding _internal;

        private StructReference refpImmutableSamplers;

        public DescriptorSetLayoutBinding()
        {
        }

        public DescriptorSetLayoutBinding(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding _internal)
        {
            this._internal = _internal;
        }

        public uint Binding
        {
            get => _internal.binding;
            set
            {
                _internal.binding = value;
            }
        }

        public DescriptorType DescriptorType
        {
            get => _internal.descriptorType;
            set
            {
                _internal.descriptorType = value;
            }
        }

        public uint DescriptorCount
        {
            get => _internal.descriptorCount;
            set
            {
                _internal.descriptorCount = value;
            }
        }

        public uint StageFlags
        {
            get => _internal.stageFlags;
            set
            {
                _internal.stageFlags = value;
            }
        }

        private Sampler pImmutableSamplers;
        public Sampler PImmutableSamplers
        {
            get
            {
                if(pImmutableSamplers != null)
                    return pImmutableSamplers;

                pImmutableSamplers = Marshal.PtrToStructure<Sampler>(_internal.pImmutableSamplers);
                return pImmutableSamplers;
            }
            set
            {
                refpImmutableSamplers?.Dispose();
                AdamantiumVulkan.Core.Interop.Sampler_T tmp = value;
                refpImmutableSamplers = new StructReference(tmp);
                pImmutableSamplers = value;
                _internal.pImmutableSamplers = refpImmutableSamplers.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpImmutableSamplers?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding(DescriptorSetLayoutBinding d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetLayoutBinding(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding d)
        {
            return new DescriptorSetLayoutBinding(d);
        }

    }

    public partial class DescriptorSetLayoutCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetLayoutCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpBindings;

        public DescriptorSetLayoutCreateInfo()
        {
        }

        public DescriptorSetLayoutCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint BindingCount
        {
            get => _internal.bindingCount;
            set
            {
                _internal.bindingCount = value;
            }
        }

        private DescriptorSetLayoutBinding pBindings;
        public DescriptorSetLayoutBinding PBindings
        {
            get
            {
                if(pBindings != null)
                    return pBindings;

                pBindings = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding>(_internal.pBindings);
                return pBindings;
            }
            set
            {
                refpBindings?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBinding tmp = value;
                refpBindings = new StructReference(tmp);
                pBindings = value;
                _internal.pBindings = refpBindings.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpBindings?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetLayoutCreateInfo(DescriptorSetLayoutCreateInfo d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetLayoutCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutCreateInfo d)
        {
            return new DescriptorSetLayoutCreateInfo(d);
        }

    }

    public partial class DescriptorPoolSize
    {
        private AdamantiumVulkan.Core.Interop.DescriptorPoolSize _internal;

        public DescriptorPoolSize()
        {
        }

        public DescriptorPoolSize(AdamantiumVulkan.Core.Interop.DescriptorPoolSize _internal)
        {
            this._internal = _internal;
        }

        public DescriptorType Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint DescriptorCount
        {
            get => _internal.descriptorCount;
            set
            {
                _internal.descriptorCount = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorPoolSize(DescriptorPoolSize d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorPoolSize(AdamantiumVulkan.Core.Interop.DescriptorPoolSize d)
        {
            return new DescriptorPoolSize(d);
        }

    }

    public partial class DescriptorPoolCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorPoolCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpPoolSizes;

        public DescriptorPoolCreateInfo()
        {
        }

        public DescriptorPoolCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorPoolCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint MaxSets
        {
            get => _internal.maxSets;
            set
            {
                _internal.maxSets = value;
            }
        }

        public uint PoolSizeCount
        {
            get => _internal.poolSizeCount;
            set
            {
                _internal.poolSizeCount = value;
            }
        }

        private DescriptorPoolSize pPoolSizes;
        public DescriptorPoolSize PPoolSizes
        {
            get
            {
                if(pPoolSizes != null)
                    return pPoolSizes;

                pPoolSizes = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DescriptorPoolSize>(_internal.pPoolSizes);
                return pPoolSizes;
            }
            set
            {
                refpPoolSizes?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorPoolSize tmp = value;
                refpPoolSizes = new StructReference(tmp);
                pPoolSizes = value;
                _internal.pPoolSizes = refpPoolSizes.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpPoolSizes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorPoolCreateInfo(DescriptorPoolCreateInfo d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorPoolCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorPoolCreateInfo d)
        {
            return new DescriptorPoolCreateInfo(d);
        }

    }

    public partial class DescriptorSetAllocateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetAllocateInfo _internal;

        private GCHandleReference refpNext;

        private DescriptorPool descriptorPool;

        private StructReference refpSetLayouts;

        public DescriptorSetAllocateInfo()
        {
        }

        public DescriptorSetAllocateInfo(AdamantiumVulkan.Core.Interop.DescriptorSetAllocateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DescriptorPool DescriptorPool
        {
            get
            {
                if (descriptorPool != null)
                {
                    return descriptorPool;
                }
                descriptorPool = _internal.descriptorPool;
                return descriptorPool;
            }
            set
            {
                descriptorPool = value;
                _internal.descriptorPool = value;
            }
        }

        public uint DescriptorSetCount
        {
            get => _internal.descriptorSetCount;
            set
            {
                _internal.descriptorSetCount = value;
            }
        }

        private DescriptorSetLayout pSetLayouts;
        public DescriptorSetLayout PSetLayouts
        {
            get
            {
                if(pSetLayouts != null)
                    return pSetLayouts;

                pSetLayouts = Marshal.PtrToStructure<DescriptorSetLayout>(_internal.pSetLayouts);
                return pSetLayouts;
            }
            set
            {
                refpSetLayouts?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorSetLayout_T tmp = value;
                refpSetLayouts = new StructReference(tmp);
                pSetLayouts = value;
                _internal.pSetLayouts = refpSetLayouts.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpSetLayouts?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetAllocateInfo(DescriptorSetAllocateInfo d)
        {
            if (d.DescriptorPool != null)
            {
                d._internal.descriptorPool = d.DescriptorPool;
            }
            return d._internal;
        }

        public static implicit operator DescriptorSetAllocateInfo(AdamantiumVulkan.Core.Interop.DescriptorSetAllocateInfo d)
        {
            return new DescriptorSetAllocateInfo(d);
        }

    }

    public partial class DescriptorImageInfo
    {
        private AdamantiumVulkan.Core.Interop.DescriptorImageInfo _internal;

        private Sampler sampler;

        private ImageView imageView;

        public DescriptorImageInfo()
        {
        }

        public DescriptorImageInfo(AdamantiumVulkan.Core.Interop.DescriptorImageInfo _internal)
        {
            this._internal = _internal;
        }

        public Sampler Sampler
        {
            get
            {
                if (sampler != null)
                {
                    return sampler;
                }
                sampler = _internal.sampler;
                return sampler;
            }
            set
            {
                sampler = value;
                _internal.sampler = value;
            }
        }

        public ImageView ImageView
        {
            get
            {
                if (imageView != null)
                {
                    return imageView;
                }
                imageView = _internal.imageView;
                return imageView;
            }
            set
            {
                imageView = value;
                _internal.imageView = value;
            }
        }

        public ImageLayout ImageLayout
        {
            get => _internal.imageLayout;
            set
            {
                _internal.imageLayout = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorImageInfo(DescriptorImageInfo d)
        {
            if (d.Sampler != null)
            {
                d._internal.sampler = d.Sampler;
            }
            if (d.ImageView != null)
            {
                d._internal.imageView = d.ImageView;
            }
            return d._internal;
        }

        public static implicit operator DescriptorImageInfo(AdamantiumVulkan.Core.Interop.DescriptorImageInfo d)
        {
            return new DescriptorImageInfo(d);
        }

    }

    public partial class DescriptorBufferInfo
    {
        private AdamantiumVulkan.Core.Interop.DescriptorBufferInfo _internal;

        private Buffer buffer;

        public DescriptorBufferInfo()
        {
        }

        public DescriptorBufferInfo(AdamantiumVulkan.Core.Interop.DescriptorBufferInfo _internal)
        {
            this._internal = _internal;
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Range
        {
            get => _internal.range;
            set
            {
                _internal.range = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorBufferInfo(DescriptorBufferInfo d)
        {
            if (d.Buffer != null)
            {
                d._internal.buffer = d.Buffer;
            }
            return d._internal;
        }

        public static implicit operator DescriptorBufferInfo(AdamantiumVulkan.Core.Interop.DescriptorBufferInfo d)
        {
            return new DescriptorBufferInfo(d);
        }

    }

    public partial class WriteDescriptorSet : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.WriteDescriptorSet _internal;

        private GCHandleReference refpNext;

        private DescriptorSet dstSet;

        private StructReference refpImageInfo;

        private StructReference refpBufferInfo;

        private StructReference refpTexelBufferView;

        public WriteDescriptorSet()
        {
        }

        public WriteDescriptorSet(AdamantiumVulkan.Core.Interop.WriteDescriptorSet _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DescriptorSet DstSet
        {
            get
            {
                if (dstSet != null)
                {
                    return dstSet;
                }
                dstSet = _internal.dstSet;
                return dstSet;
            }
            set
            {
                dstSet = value;
                _internal.dstSet = value;
            }
        }

        public uint DstBinding
        {
            get => _internal.dstBinding;
            set
            {
                _internal.dstBinding = value;
            }
        }

        public uint DstArrayElement
        {
            get => _internal.dstArrayElement;
            set
            {
                _internal.dstArrayElement = value;
            }
        }

        public uint DescriptorCount
        {
            get => _internal.descriptorCount;
            set
            {
                _internal.descriptorCount = value;
            }
        }

        public DescriptorType DescriptorType
        {
            get => _internal.descriptorType;
            set
            {
                _internal.descriptorType = value;
            }
        }

        private DescriptorImageInfo pImageInfo;
        public DescriptorImageInfo PImageInfo
        {
            get
            {
                if(pImageInfo != null)
                    return pImageInfo;

                pImageInfo = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DescriptorImageInfo>(_internal.pImageInfo);
                return pImageInfo;
            }
            set
            {
                refpImageInfo?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorImageInfo tmp = value;
                refpImageInfo = new StructReference(tmp);
                pImageInfo = value;
                _internal.pImageInfo = refpImageInfo.Handle;
            }
        }

        private DescriptorBufferInfo pBufferInfo;
        public DescriptorBufferInfo PBufferInfo
        {
            get
            {
                if(pBufferInfo != null)
                    return pBufferInfo;

                pBufferInfo = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DescriptorBufferInfo>(_internal.pBufferInfo);
                return pBufferInfo;
            }
            set
            {
                refpBufferInfo?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorBufferInfo tmp = value;
                refpBufferInfo = new StructReference(tmp);
                pBufferInfo = value;
                _internal.pBufferInfo = refpBufferInfo.Handle;
            }
        }

        private BufferView pTexelBufferView;
        public BufferView PTexelBufferView
        {
            get
            {
                if(pTexelBufferView != null)
                    return pTexelBufferView;

                pTexelBufferView = Marshal.PtrToStructure<BufferView>(_internal.pTexelBufferView);
                return pTexelBufferView;
            }
            set
            {
                refpTexelBufferView?.Dispose();
                AdamantiumVulkan.Core.Interop.BufferView_T tmp = value;
                refpTexelBufferView = new StructReference(tmp);
                pTexelBufferView = value;
                _internal.pTexelBufferView = refpTexelBufferView.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpImageInfo?.Dispose();
            refpBufferInfo?.Dispose();
            refpTexelBufferView?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.WriteDescriptorSet(WriteDescriptorSet w)
        {
            if (w.DstSet != null)
            {
                w._internal.dstSet = w.DstSet;
            }
            return w._internal;
        }

        public static implicit operator WriteDescriptorSet(AdamantiumVulkan.Core.Interop.WriteDescriptorSet w)
        {
            return new WriteDescriptorSet(w);
        }

    }

    public partial class CopyDescriptorSet : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CopyDescriptorSet _internal;

        private GCHandleReference refpNext;

        private DescriptorSet srcSet;

        private DescriptorSet dstSet;

        public CopyDescriptorSet()
        {
        }

        public CopyDescriptorSet(AdamantiumVulkan.Core.Interop.CopyDescriptorSet _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DescriptorSet SrcSet
        {
            get
            {
                if (srcSet != null)
                {
                    return srcSet;
                }
                srcSet = _internal.srcSet;
                return srcSet;
            }
            set
            {
                srcSet = value;
                _internal.srcSet = value;
            }
        }

        public uint SrcBinding
        {
            get => _internal.srcBinding;
            set
            {
                _internal.srcBinding = value;
            }
        }

        public uint SrcArrayElement
        {
            get => _internal.srcArrayElement;
            set
            {
                _internal.srcArrayElement = value;
            }
        }

        public DescriptorSet DstSet
        {
            get
            {
                if (dstSet != null)
                {
                    return dstSet;
                }
                dstSet = _internal.dstSet;
                return dstSet;
            }
            set
            {
                dstSet = value;
                _internal.dstSet = value;
            }
        }

        public uint DstBinding
        {
            get => _internal.dstBinding;
            set
            {
                _internal.dstBinding = value;
            }
        }

        public uint DstArrayElement
        {
            get => _internal.dstArrayElement;
            set
            {
                _internal.dstArrayElement = value;
            }
        }

        public uint DescriptorCount
        {
            get => _internal.descriptorCount;
            set
            {
                _internal.descriptorCount = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CopyDescriptorSet(CopyDescriptorSet c)
        {
            if (c.SrcSet != null)
            {
                c._internal.srcSet = c.SrcSet;
            }
            if (c.DstSet != null)
            {
                c._internal.dstSet = c.DstSet;
            }
            return c._internal;
        }

        public static implicit operator CopyDescriptorSet(AdamantiumVulkan.Core.Interop.CopyDescriptorSet c)
        {
            return new CopyDescriptorSet(c);
        }

    }

    public partial class FramebufferCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.FramebufferCreateInfo _internal;

        private GCHandleReference refpNext;

        private RenderPass renderPass;

        private StructReference refpAttachments;

        public FramebufferCreateInfo()
        {
        }

        public FramebufferCreateInfo(AdamantiumVulkan.Core.Interop.FramebufferCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public RenderPass RenderPass
        {
            get
            {
                if (renderPass != null)
                {
                    return renderPass;
                }
                renderPass = _internal.renderPass;
                return renderPass;
            }
            set
            {
                renderPass = value;
                _internal.renderPass = value;
            }
        }

        public uint AttachmentCount
        {
            get => _internal.attachmentCount;
            set
            {
                _internal.attachmentCount = value;
            }
        }

        private ImageView pAttachments;
        public ImageView PAttachments
        {
            get
            {
                if(pAttachments != null)
                    return pAttachments;

                pAttachments = Marshal.PtrToStructure<ImageView>(_internal.pAttachments);
                return pAttachments;
            }
            set
            {
                refpAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.ImageView_T tmp = value;
                refpAttachments = new StructReference(tmp);
                pAttachments = value;
                _internal.pAttachments = refpAttachments.Handle;
            }
        }

        public uint Width
        {
            get => _internal.width;
            set
            {
                _internal.width = value;
            }
        }

        public uint Height
        {
            get => _internal.height;
            set
            {
                _internal.height = value;
            }
        }

        public uint Layers
        {
            get => _internal.layers;
            set
            {
                _internal.layers = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttachments?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FramebufferCreateInfo(FramebufferCreateInfo f)
        {
            if (f.RenderPass != null)
            {
                f._internal.renderPass = f.RenderPass;
            }
            return f._internal;
        }

        public static implicit operator FramebufferCreateInfo(AdamantiumVulkan.Core.Interop.FramebufferCreateInfo f)
        {
            return new FramebufferCreateInfo(f);
        }

    }

    public partial class AttachmentDescription
    {
        private AdamantiumVulkan.Core.Interop.AttachmentDescription _internal;

        public AttachmentDescription()
        {
        }

        public AttachmentDescription(AdamantiumVulkan.Core.Interop.AttachmentDescription _internal)
        {
            this._internal = _internal;
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public SampleCountFlagBits Samples
        {
            get => _internal.samples;
            set
            {
                _internal.samples = value;
            }
        }

        public AttachmentLoadOp LoadOp
        {
            get => _internal.loadOp;
            set
            {
                _internal.loadOp = value;
            }
        }

        public AttachmentStoreOp StoreOp
        {
            get => _internal.storeOp;
            set
            {
                _internal.storeOp = value;
            }
        }

        public AttachmentLoadOp StencilLoadOp
        {
            get => _internal.stencilLoadOp;
            set
            {
                _internal.stencilLoadOp = value;
            }
        }

        public AttachmentStoreOp StencilStoreOp
        {
            get => _internal.stencilStoreOp;
            set
            {
                _internal.stencilStoreOp = value;
            }
        }

        public ImageLayout InitialLayout
        {
            get => _internal.initialLayout;
            set
            {
                _internal.initialLayout = value;
            }
        }

        public ImageLayout FinalLayout
        {
            get => _internal.finalLayout;
            set
            {
                _internal.finalLayout = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AttachmentDescription(AttachmentDescription a)
        {
            return a._internal;
        }

        public static implicit operator AttachmentDescription(AdamantiumVulkan.Core.Interop.AttachmentDescription a)
        {
            return new AttachmentDescription(a);
        }

    }

    public partial class AttachmentReference
    {
        private AdamantiumVulkan.Core.Interop.AttachmentReference _internal;

        public AttachmentReference()
        {
        }

        public AttachmentReference(AdamantiumVulkan.Core.Interop.AttachmentReference _internal)
        {
            this._internal = _internal;
        }

        public uint Attachment
        {
            get => _internal.attachment;
            set
            {
                _internal.attachment = value;
            }
        }

        public ImageLayout Layout
        {
            get => _internal.layout;
            set
            {
                _internal.layout = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AttachmentReference(AttachmentReference a)
        {
            return a._internal;
        }

        public static implicit operator AttachmentReference(AdamantiumVulkan.Core.Interop.AttachmentReference a)
        {
            return new AttachmentReference(a);
        }

    }

    public partial class SubpassDescription : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassDescription _internal;

        private StructReference refpInputAttachments;

        private StructReference refpColorAttachments;

        private StructReference refpResolveAttachments;

        private StructReference refpDepthStencilAttachment;

        private StructReference refpPreserveAttachments;

        public SubpassDescription()
        {
        }

        public SubpassDescription(AdamantiumVulkan.Core.Interop.SubpassDescription _internal)
        {
            this._internal = _internal;
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PipelineBindPoint PipelineBindPoint
        {
            get => _internal.pipelineBindPoint;
            set
            {
                _internal.pipelineBindPoint = value;
            }
        }

        public uint InputAttachmentCount
        {
            get => _internal.inputAttachmentCount;
            set
            {
                _internal.inputAttachmentCount = value;
            }
        }

        private AttachmentReference pInputAttachments;
        public AttachmentReference PInputAttachments
        {
            get
            {
                if(pInputAttachments != null)
                    return pInputAttachments;

                pInputAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference>(_internal.pInputAttachments);
                return pInputAttachments;
            }
            set
            {
                refpInputAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference tmp = value;
                refpInputAttachments = new StructReference(tmp);
                pInputAttachments = value;
                _internal.pInputAttachments = refpInputAttachments.Handle;
            }
        }

        public uint ColorAttachmentCount
        {
            get => _internal.colorAttachmentCount;
            set
            {
                _internal.colorAttachmentCount = value;
            }
        }

        private AttachmentReference pColorAttachments;
        public AttachmentReference PColorAttachments
        {
            get
            {
                if(pColorAttachments != null)
                    return pColorAttachments;

                pColorAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference>(_internal.pColorAttachments);
                return pColorAttachments;
            }
            set
            {
                refpColorAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference tmp = value;
                refpColorAttachments = new StructReference(tmp);
                pColorAttachments = value;
                _internal.pColorAttachments = refpColorAttachments.Handle;
            }
        }

        private AttachmentReference pResolveAttachments;
        public AttachmentReference PResolveAttachments
        {
            get
            {
                if(pResolveAttachments != null)
                    return pResolveAttachments;

                pResolveAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference>(_internal.pResolveAttachments);
                return pResolveAttachments;
            }
            set
            {
                refpResolveAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference tmp = value;
                refpResolveAttachments = new StructReference(tmp);
                pResolveAttachments = value;
                _internal.pResolveAttachments = refpResolveAttachments.Handle;
            }
        }

        private AttachmentReference pDepthStencilAttachment;
        public AttachmentReference PDepthStencilAttachment
        {
            get
            {
                if(pDepthStencilAttachment != null)
                    return pDepthStencilAttachment;

                pDepthStencilAttachment = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference>(_internal.pDepthStencilAttachment);
                return pDepthStencilAttachment;
            }
            set
            {
                refpDepthStencilAttachment?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference tmp = value;
                refpDepthStencilAttachment = new StructReference(tmp);
                pDepthStencilAttachment = value;
                _internal.pDepthStencilAttachment = refpDepthStencilAttachment.Handle;
            }
        }

        public uint PreserveAttachmentCount
        {
            get => _internal.preserveAttachmentCount;
            set
            {
                _internal.preserveAttachmentCount = value;
            }
        }

        public uint PPreserveAttachments
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pPreserveAttachments);
            }
            set
            {
                refpPreserveAttachments?.Dispose();
                refpPreserveAttachments = new StructReference(value);
                _internal.pPreserveAttachments = refpPreserveAttachments.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpInputAttachments?.Dispose();
            refpColorAttachments?.Dispose();
            refpResolveAttachments?.Dispose();
            refpDepthStencilAttachment?.Dispose();
            refpPreserveAttachments?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassDescription(SubpassDescription s)
        {
            return s._internal;
        }

        public static implicit operator SubpassDescription(AdamantiumVulkan.Core.Interop.SubpassDescription s)
        {
            return new SubpassDescription(s);
        }

    }

    public partial class SubpassDependency
    {
        private AdamantiumVulkan.Core.Interop.SubpassDependency _internal;

        public SubpassDependency()
        {
        }

        public SubpassDependency(AdamantiumVulkan.Core.Interop.SubpassDependency _internal)
        {
            this._internal = _internal;
        }

        public uint SrcSubpass
        {
            get => _internal.srcSubpass;
            set
            {
                _internal.srcSubpass = value;
            }
        }

        public uint DstSubpass
        {
            get => _internal.dstSubpass;
            set
            {
                _internal.dstSubpass = value;
            }
        }

        public uint SrcStageMask
        {
            get => _internal.srcStageMask;
            set
            {
                _internal.srcStageMask = value;
            }
        }

        public uint DstStageMask
        {
            get => _internal.dstStageMask;
            set
            {
                _internal.dstStageMask = value;
            }
        }

        public uint SrcAccessMask
        {
            get => _internal.srcAccessMask;
            set
            {
                _internal.srcAccessMask = value;
            }
        }

        public uint DstAccessMask
        {
            get => _internal.dstAccessMask;
            set
            {
                _internal.dstAccessMask = value;
            }
        }

        public uint DependencyFlags
        {
            get => _internal.dependencyFlags;
            set
            {
                _internal.dependencyFlags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassDependency(SubpassDependency s)
        {
            return s._internal;
        }

        public static implicit operator SubpassDependency(AdamantiumVulkan.Core.Interop.SubpassDependency s)
        {
            return new SubpassDependency(s);
        }

    }

    public partial class RenderPassCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttachments;

        private StructReference refpSubpasses;

        private StructReference refpDependencies;

        public RenderPassCreateInfo()
        {
        }

        public RenderPassCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint AttachmentCount
        {
            get => _internal.attachmentCount;
            set
            {
                _internal.attachmentCount = value;
            }
        }

        private AttachmentDescription pAttachments;
        public AttachmentDescription PAttachments
        {
            get
            {
                if(pAttachments != null)
                    return pAttachments;

                pAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentDescription>(_internal.pAttachments);
                return pAttachments;
            }
            set
            {
                refpAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentDescription tmp = value;
                refpAttachments = new StructReference(tmp);
                pAttachments = value;
                _internal.pAttachments = refpAttachments.Handle;
            }
        }

        public uint SubpassCount
        {
            get => _internal.subpassCount;
            set
            {
                _internal.subpassCount = value;
            }
        }

        private SubpassDescription pSubpasses;
        public SubpassDescription PSubpasses
        {
            get
            {
                if(pSubpasses != null)
                    return pSubpasses;

                pSubpasses = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubpassDescription>(_internal.pSubpasses);
                return pSubpasses;
            }
            set
            {
                refpSubpasses?.Dispose();
                AdamantiumVulkan.Core.Interop.SubpassDescription tmp = value;
                refpSubpasses = new StructReference(tmp);
                pSubpasses = value;
                _internal.pSubpasses = refpSubpasses.Handle;
            }
        }

        public uint DependencyCount
        {
            get => _internal.dependencyCount;
            set
            {
                _internal.dependencyCount = value;
            }
        }

        private SubpassDependency pDependencies;
        public SubpassDependency PDependencies
        {
            get
            {
                if(pDependencies != null)
                    return pDependencies;

                pDependencies = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubpassDependency>(_internal.pDependencies);
                return pDependencies;
            }
            set
            {
                refpDependencies?.Dispose();
                AdamantiumVulkan.Core.Interop.SubpassDependency tmp = value;
                refpDependencies = new StructReference(tmp);
                pDependencies = value;
                _internal.pDependencies = refpDependencies.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttachments?.Dispose();
            refpSubpasses?.Dispose();
            refpDependencies?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassCreateInfo(RenderPassCreateInfo r)
        {
            return r._internal;
        }

        public static implicit operator RenderPassCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassCreateInfo r)
        {
            return new RenderPassCreateInfo(r);
        }

    }

    public partial class CommandPoolCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CommandPoolCreateInfo _internal;

        private GCHandleReference refpNext;

        public CommandPoolCreateInfo()
        {
        }

        public CommandPoolCreateInfo(AdamantiumVulkan.Core.Interop.CommandPoolCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint QueueFamilyIndex
        {
            get => _internal.queueFamilyIndex;
            set
            {
                _internal.queueFamilyIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CommandPoolCreateInfo(CommandPoolCreateInfo c)
        {
            return c._internal;
        }

        public static implicit operator CommandPoolCreateInfo(AdamantiumVulkan.Core.Interop.CommandPoolCreateInfo c)
        {
            return new CommandPoolCreateInfo(c);
        }

    }

    public partial class CommandBufferAllocateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CommandBufferAllocateInfo _internal;

        private GCHandleReference refpNext;

        private CommandPool commandPool;

        public CommandBufferAllocateInfo()
        {
        }

        public CommandBufferAllocateInfo(AdamantiumVulkan.Core.Interop.CommandBufferAllocateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public CommandPool CommandPool
        {
            get
            {
                if (commandPool != null)
                {
                    return commandPool;
                }
                commandPool = _internal.commandPool;
                return commandPool;
            }
            set
            {
                commandPool = value;
                _internal.commandPool = value;
            }
        }

        public CommandBufferLevel Level
        {
            get => _internal.level;
            set
            {
                _internal.level = value;
            }
        }

        public uint CommandBufferCount
        {
            get => _internal.commandBufferCount;
            set
            {
                _internal.commandBufferCount = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CommandBufferAllocateInfo(CommandBufferAllocateInfo c)
        {
            if (c.CommandPool != null)
            {
                c._internal.commandPool = c.CommandPool;
            }
            return c._internal;
        }

        public static implicit operator CommandBufferAllocateInfo(AdamantiumVulkan.Core.Interop.CommandBufferAllocateInfo c)
        {
            return new CommandBufferAllocateInfo(c);
        }

    }

    public partial class CommandBufferInheritanceInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo _internal;

        private GCHandleReference refpNext;

        private RenderPass renderPass;

        private Framebuffer framebuffer;

        public CommandBufferInheritanceInfo()
        {
        }

        public CommandBufferInheritanceInfo(AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public RenderPass RenderPass
        {
            get
            {
                if (renderPass != null)
                {
                    return renderPass;
                }
                renderPass = _internal.renderPass;
                return renderPass;
            }
            set
            {
                renderPass = value;
                _internal.renderPass = value;
            }
        }

        public uint Subpass
        {
            get => _internal.subpass;
            set
            {
                _internal.subpass = value;
            }
        }

        public Framebuffer Framebuffer
        {
            get
            {
                if (framebuffer != null)
                {
                    return framebuffer;
                }
                framebuffer = _internal.framebuffer;
                return framebuffer;
            }
            set
            {
                framebuffer = value;
                _internal.framebuffer = value;
            }
        }

        public bool OcclusionQueryEnable
        {
            get => _internal.occlusionQueryEnable;
            set
            {
                _internal.occlusionQueryEnable = value;
            }
        }

        public uint QueryFlags
        {
            get => _internal.queryFlags;
            set
            {
                _internal.queryFlags = value;
            }
        }

        public uint PipelineStatistics
        {
            get => _internal.pipelineStatistics;
            set
            {
                _internal.pipelineStatistics = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo(CommandBufferInheritanceInfo c)
        {
            if (c.RenderPass != null)
            {
                c._internal.renderPass = c.RenderPass;
            }
            if (c.Framebuffer != null)
            {
                c._internal.framebuffer = c.Framebuffer;
            }
            return c._internal;
        }

        public static implicit operator CommandBufferInheritanceInfo(AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo c)
        {
            return new CommandBufferInheritanceInfo(c);
        }

    }

    public partial class CommandBufferBeginInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CommandBufferBeginInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpInheritanceInfo;

        public CommandBufferBeginInfo()
        {
        }

        public CommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.CommandBufferBeginInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        private CommandBufferInheritanceInfo pInheritanceInfo;
        public CommandBufferInheritanceInfo PInheritanceInfo
        {
            get
            {
                if(pInheritanceInfo != null)
                    return pInheritanceInfo;

                pInheritanceInfo = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo>(_internal.pInheritanceInfo);
                return pInheritanceInfo;
            }
            set
            {
                refpInheritanceInfo?.Dispose();
                AdamantiumVulkan.Core.Interop.CommandBufferInheritanceInfo tmp = value;
                refpInheritanceInfo = new StructReference(tmp);
                pInheritanceInfo = value;
                _internal.pInheritanceInfo = refpInheritanceInfo.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpInheritanceInfo?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CommandBufferBeginInfo(CommandBufferBeginInfo c)
        {
            return c._internal;
        }

        public static implicit operator CommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.CommandBufferBeginInfo c)
        {
            return new CommandBufferBeginInfo(c);
        }

    }

    public partial class BufferCopy
    {
        private AdamantiumVulkan.Core.Interop.BufferCopy _internal;

        public BufferCopy()
        {
        }

        public BufferCopy(AdamantiumVulkan.Core.Interop.BufferCopy _internal)
        {
            this._internal = _internal;
        }

        public ulong SrcOffset
        {
            get => _internal.srcOffset;
            set
            {
                _internal.srcOffset = value;
            }
        }

        public ulong DstOffset
        {
            get => _internal.dstOffset;
            set
            {
                _internal.dstOffset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferCopy(BufferCopy b)
        {
            return b._internal;
        }

        public static implicit operator BufferCopy(AdamantiumVulkan.Core.Interop.BufferCopy b)
        {
            return new BufferCopy(b);
        }

    }

    public partial class ImageSubresourceLayers
    {
        private AdamantiumVulkan.Core.Interop.ImageSubresourceLayers _internal;

        public ImageSubresourceLayers()
        {
        }

        public ImageSubresourceLayers(AdamantiumVulkan.Core.Interop.ImageSubresourceLayers _internal)
        {
            this._internal = _internal;
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public uint MipLevel
        {
            get => _internal.mipLevel;
            set
            {
                _internal.mipLevel = value;
            }
        }

        public uint BaseArrayLayer
        {
            get => _internal.baseArrayLayer;
            set
            {
                _internal.baseArrayLayer = value;
            }
        }

        public uint LayerCount
        {
            get => _internal.layerCount;
            set
            {
                _internal.layerCount = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageSubresourceLayers(ImageSubresourceLayers i)
        {
            return i._internal;
        }

        public static implicit operator ImageSubresourceLayers(AdamantiumVulkan.Core.Interop.ImageSubresourceLayers i)
        {
            return new ImageSubresourceLayers(i);
        }

    }

    public partial class ImageCopy
    {
        private AdamantiumVulkan.Core.Interop.ImageCopy _internal;

        private ImageSubresourceLayers srcSubresource;

        private Offset3D srcOffset;

        private ImageSubresourceLayers dstSubresource;

        private Offset3D dstOffset;

        private Extent3D extent;

        public ImageCopy()
        {
        }

        public ImageCopy(AdamantiumVulkan.Core.Interop.ImageCopy _internal)
        {
            this._internal = _internal;
        }

        public ImageSubresourceLayers SrcSubresource
        {
            get
            {
                if (srcSubresource != null)
                {
                    return srcSubresource;
                }
                srcSubresource = _internal.srcSubresource;
                return srcSubresource;
            }
            set
            {
                srcSubresource = value;
                _internal.srcSubresource = value;
            }
        }

        public Offset3D SrcOffset
        {
            get
            {
                if (srcOffset != null)
                {
                    return srcOffset;
                }
                srcOffset = _internal.srcOffset;
                return srcOffset;
            }
            set
            {
                srcOffset = value;
                _internal.srcOffset = value;
            }
        }

        public ImageSubresourceLayers DstSubresource
        {
            get
            {
                if (dstSubresource != null)
                {
                    return dstSubresource;
                }
                dstSubresource = _internal.dstSubresource;
                return dstSubresource;
            }
            set
            {
                dstSubresource = value;
                _internal.dstSubresource = value;
            }
        }

        public Offset3D DstOffset
        {
            get
            {
                if (dstOffset != null)
                {
                    return dstOffset;
                }
                dstOffset = _internal.dstOffset;
                return dstOffset;
            }
            set
            {
                dstOffset = value;
                _internal.dstOffset = value;
            }
        }

        public Extent3D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageCopy(ImageCopy i)
        {
            if (i.SrcSubresource != null)
            {
                i._internal.srcSubresource = i.SrcSubresource;
            }
            if (i.SrcOffset != null)
            {
                i._internal.srcOffset = i.SrcOffset;
            }
            if (i.DstSubresource != null)
            {
                i._internal.dstSubresource = i.DstSubresource;
            }
            if (i.DstOffset != null)
            {
                i._internal.dstOffset = i.DstOffset;
            }
            if (i.Extent != null)
            {
                i._internal.extent = i.Extent;
            }
            return i._internal;
        }

        public static implicit operator ImageCopy(AdamantiumVulkan.Core.Interop.ImageCopy i)
        {
            return new ImageCopy(i);
        }

    }

    public partial class ImageBlit
    {
        private AdamantiumVulkan.Core.Interop.ImageBlit _internal;

        private ImageSubresourceLayers srcSubresource;

        private Offset3D[] srcOffsets;

        private ImageSubresourceLayers dstSubresource;

        private Offset3D[] dstOffsets;

        public ImageBlit()
        {
        }

        public ImageBlit(AdamantiumVulkan.Core.Interop.ImageBlit _internal)
        {
            this._internal = _internal;
        }

        public ImageSubresourceLayers SrcSubresource
        {
            get
            {
                if (srcSubresource != null)
                {
                    return srcSubresource;
                }
                srcSubresource = _internal.srcSubresource;
                return srcSubresource;
            }
            set
            {
                srcSubresource = value;
                _internal.srcSubresource = value;
            }
        }

        public Offset3D[] SrcOffsets
        {
            get
            {
                if(srcOffsets != null)
                    return srcOffsets;

                srcOffsets = new Offset3D[2];
                for(int i = 0; i < 2; ++i)
                {
                    srcOffsets[i] = _internal.srcOffsets[i];
                }
                return srcOffsets;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(SrcOffsets), "Array is out of bounds. Size should not be more than 2");

                _internal.srcOffsets = new AdamantiumVulkan.Core.Interop.Offset3D[2];
                for(int i = 0; i < value.Length; ++i)
                {
                    _internal.srcOffsets[i] = value[i];
                }
                srcOffsets = value;
            }
        }

        public ImageSubresourceLayers DstSubresource
        {
            get
            {
                if (dstSubresource != null)
                {
                    return dstSubresource;
                }
                dstSubresource = _internal.dstSubresource;
                return dstSubresource;
            }
            set
            {
                dstSubresource = value;
                _internal.dstSubresource = value;
            }
        }

        public Offset3D[] DstOffsets
        {
            get
            {
                if(dstOffsets != null)
                    return dstOffsets;

                dstOffsets = new Offset3D[2];
                for(int i = 0; i < 2; ++i)
                {
                    dstOffsets[i] = _internal.dstOffsets[i];
                }
                return dstOffsets;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(DstOffsets), "Array is out of bounds. Size should not be more than 2");

                _internal.dstOffsets = new AdamantiumVulkan.Core.Interop.Offset3D[2];
                for(int i = 0; i < value.Length; ++i)
                {
                    _internal.dstOffsets[i] = value[i];
                }
                dstOffsets = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageBlit(ImageBlit i)
        {
            if (i.SrcSubresource != null)
            {
                i._internal.srcSubresource = i.SrcSubresource;
            }
            if (i.DstSubresource != null)
            {
                i._internal.dstSubresource = i.DstSubresource;
            }
            return i._internal;
        }

        public static implicit operator ImageBlit(AdamantiumVulkan.Core.Interop.ImageBlit i)
        {
            return new ImageBlit(i);
        }

    }

    public partial class BufferImageCopy
    {
        private AdamantiumVulkan.Core.Interop.BufferImageCopy _internal;

        private ImageSubresourceLayers imageSubresource;

        private Offset3D imageOffset;

        private Extent3D imageExtent;

        public BufferImageCopy()
        {
        }

        public BufferImageCopy(AdamantiumVulkan.Core.Interop.BufferImageCopy _internal)
        {
            this._internal = _internal;
        }

        public ulong BufferOffset
        {
            get => _internal.bufferOffset;
            set
            {
                _internal.bufferOffset = value;
            }
        }

        public uint BufferRowLength
        {
            get => _internal.bufferRowLength;
            set
            {
                _internal.bufferRowLength = value;
            }
        }

        public uint BufferImageHeight
        {
            get => _internal.bufferImageHeight;
            set
            {
                _internal.bufferImageHeight = value;
            }
        }

        public ImageSubresourceLayers ImageSubresource
        {
            get
            {
                if (imageSubresource != null)
                {
                    return imageSubresource;
                }
                imageSubresource = _internal.imageSubresource;
                return imageSubresource;
            }
            set
            {
                imageSubresource = value;
                _internal.imageSubresource = value;
            }
        }

        public Offset3D ImageOffset
        {
            get
            {
                if (imageOffset != null)
                {
                    return imageOffset;
                }
                imageOffset = _internal.imageOffset;
                return imageOffset;
            }
            set
            {
                imageOffset = value;
                _internal.imageOffset = value;
            }
        }

        public Extent3D ImageExtent
        {
            get
            {
                if (imageExtent != null)
                {
                    return imageExtent;
                }
                imageExtent = _internal.imageExtent;
                return imageExtent;
            }
            set
            {
                imageExtent = value;
                _internal.imageExtent = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferImageCopy(BufferImageCopy b)
        {
            if (b.ImageSubresource != null)
            {
                b._internal.imageSubresource = b.ImageSubresource;
            }
            if (b.ImageOffset != null)
            {
                b._internal.imageOffset = b.ImageOffset;
            }
            if (b.ImageExtent != null)
            {
                b._internal.imageExtent = b.ImageExtent;
            }
            return b._internal;
        }

        public static implicit operator BufferImageCopy(AdamantiumVulkan.Core.Interop.BufferImageCopy b)
        {
            return new BufferImageCopy(b);
        }

    }

    public partial class ClearDepthStencilValue
    {
        private AdamantiumVulkan.Core.Interop.ClearDepthStencilValue _internal;

        public ClearDepthStencilValue()
        {
        }

        public ClearDepthStencilValue(AdamantiumVulkan.Core.Interop.ClearDepthStencilValue _internal)
        {
            this._internal = _internal;
        }

        public float Depth
        {
            get => _internal.depth;
            set
            {
                _internal.depth = value;
            }
        }

        public uint Stencil
        {
            get => _internal.stencil;
            set
            {
                _internal.stencil = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ClearDepthStencilValue(ClearDepthStencilValue c)
        {
            return c._internal;
        }

        public static implicit operator ClearDepthStencilValue(AdamantiumVulkan.Core.Interop.ClearDepthStencilValue c)
        {
            return new ClearDepthStencilValue(c);
        }

    }

    public partial class ClearAttachment
    {
        private AdamantiumVulkan.Core.Interop.ClearAttachment _internal;

        private ClearValue clearValue;

        public ClearAttachment()
        {
        }

        public ClearAttachment(AdamantiumVulkan.Core.Interop.ClearAttachment _internal)
        {
            this._internal = _internal;
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public uint ColorAttachment
        {
            get => _internal.colorAttachment;
            set
            {
                _internal.colorAttachment = value;
            }
        }

        public ClearValue ClearValue
        {
            get
            {
                if (clearValue != null)
                {
                    return clearValue;
                }
                clearValue = _internal.clearValue;
                return clearValue;
            }
            set
            {
                clearValue = value;
                _internal.clearValue = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ClearAttachment(ClearAttachment c)
        {
            if (c.ClearValue != null)
            {
                c._internal.clearValue = c.ClearValue;
            }
            return c._internal;
        }

        public static implicit operator ClearAttachment(AdamantiumVulkan.Core.Interop.ClearAttachment c)
        {
            return new ClearAttachment(c);
        }

    }

    public partial class ClearRect
    {
        private AdamantiumVulkan.Core.Interop.ClearRect _internal;

        private Rect2D rect;

        public ClearRect()
        {
        }

        public ClearRect(AdamantiumVulkan.Core.Interop.ClearRect _internal)
        {
            this._internal = _internal;
        }

        public Rect2D Rect
        {
            get
            {
                if (rect != null)
                {
                    return rect;
                }
                rect = _internal.rect;
                return rect;
            }
            set
            {
                rect = value;
                _internal.rect = value;
            }
        }

        public uint BaseArrayLayer
        {
            get => _internal.baseArrayLayer;
            set
            {
                _internal.baseArrayLayer = value;
            }
        }

        public uint LayerCount
        {
            get => _internal.layerCount;
            set
            {
                _internal.layerCount = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ClearRect(ClearRect c)
        {
            if (c.Rect != null)
            {
                c._internal.rect = c.Rect;
            }
            return c._internal;
        }

        public static implicit operator ClearRect(AdamantiumVulkan.Core.Interop.ClearRect c)
        {
            return new ClearRect(c);
        }

    }

    public partial class ImageResolve
    {
        private AdamantiumVulkan.Core.Interop.ImageResolve _internal;

        private ImageSubresourceLayers srcSubresource;

        private Offset3D srcOffset;

        private ImageSubresourceLayers dstSubresource;

        private Offset3D dstOffset;

        private Extent3D extent;

        public ImageResolve()
        {
        }

        public ImageResolve(AdamantiumVulkan.Core.Interop.ImageResolve _internal)
        {
            this._internal = _internal;
        }

        public ImageSubresourceLayers SrcSubresource
        {
            get
            {
                if (srcSubresource != null)
                {
                    return srcSubresource;
                }
                srcSubresource = _internal.srcSubresource;
                return srcSubresource;
            }
            set
            {
                srcSubresource = value;
                _internal.srcSubresource = value;
            }
        }

        public Offset3D SrcOffset
        {
            get
            {
                if (srcOffset != null)
                {
                    return srcOffset;
                }
                srcOffset = _internal.srcOffset;
                return srcOffset;
            }
            set
            {
                srcOffset = value;
                _internal.srcOffset = value;
            }
        }

        public ImageSubresourceLayers DstSubresource
        {
            get
            {
                if (dstSubresource != null)
                {
                    return dstSubresource;
                }
                dstSubresource = _internal.dstSubresource;
                return dstSubresource;
            }
            set
            {
                dstSubresource = value;
                _internal.dstSubresource = value;
            }
        }

        public Offset3D DstOffset
        {
            get
            {
                if (dstOffset != null)
                {
                    return dstOffset;
                }
                dstOffset = _internal.dstOffset;
                return dstOffset;
            }
            set
            {
                dstOffset = value;
                _internal.dstOffset = value;
            }
        }

        public Extent3D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageResolve(ImageResolve i)
        {
            if (i.SrcSubresource != null)
            {
                i._internal.srcSubresource = i.SrcSubresource;
            }
            if (i.SrcOffset != null)
            {
                i._internal.srcOffset = i.SrcOffset;
            }
            if (i.DstSubresource != null)
            {
                i._internal.dstSubresource = i.DstSubresource;
            }
            if (i.DstOffset != null)
            {
                i._internal.dstOffset = i.DstOffset;
            }
            if (i.Extent != null)
            {
                i._internal.extent = i.Extent;
            }
            return i._internal;
        }

        public static implicit operator ImageResolve(AdamantiumVulkan.Core.Interop.ImageResolve i)
        {
            return new ImageResolve(i);
        }

    }

    public partial class MemoryBarrier : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryBarrier _internal;

        private GCHandleReference refpNext;

        public MemoryBarrier()
        {
        }

        public MemoryBarrier(AdamantiumVulkan.Core.Interop.MemoryBarrier _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SrcAccessMask
        {
            get => _internal.srcAccessMask;
            set
            {
                _internal.srcAccessMask = value;
            }
        }

        public uint DstAccessMask
        {
            get => _internal.dstAccessMask;
            set
            {
                _internal.dstAccessMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryBarrier(MemoryBarrier m)
        {
            return m._internal;
        }

        public static implicit operator MemoryBarrier(AdamantiumVulkan.Core.Interop.MemoryBarrier m)
        {
            return new MemoryBarrier(m);
        }

    }

    public partial class BufferMemoryBarrier : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferMemoryBarrier _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        public BufferMemoryBarrier()
        {
        }

        public BufferMemoryBarrier(AdamantiumVulkan.Core.Interop.BufferMemoryBarrier _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SrcAccessMask
        {
            get => _internal.srcAccessMask;
            set
            {
                _internal.srcAccessMask = value;
            }
        }

        public uint DstAccessMask
        {
            get => _internal.dstAccessMask;
            set
            {
                _internal.dstAccessMask = value;
            }
        }

        public uint SrcQueueFamilyIndex
        {
            get => _internal.srcQueueFamilyIndex;
            set
            {
                _internal.srcQueueFamilyIndex = value;
            }
        }

        public uint DstQueueFamilyIndex
        {
            get => _internal.dstQueueFamilyIndex;
            set
            {
                _internal.dstQueueFamilyIndex = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Size
        {
            get => _internal.size;
            set
            {
                _internal.size = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferMemoryBarrier(BufferMemoryBarrier b)
        {
            if (b.Buffer != null)
            {
                b._internal.buffer = b.Buffer;
            }
            return b._internal;
        }

        public static implicit operator BufferMemoryBarrier(AdamantiumVulkan.Core.Interop.BufferMemoryBarrier b)
        {
            return new BufferMemoryBarrier(b);
        }

    }

    public partial class ImageMemoryBarrier : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageMemoryBarrier _internal;

        private GCHandleReference refpNext;

        private Image image;

        private ImageSubresourceRange subresourceRange;

        public ImageMemoryBarrier()
        {
        }

        public ImageMemoryBarrier(AdamantiumVulkan.Core.Interop.ImageMemoryBarrier _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SrcAccessMask
        {
            get => _internal.srcAccessMask;
            set
            {
                _internal.srcAccessMask = value;
            }
        }

        public uint DstAccessMask
        {
            get => _internal.dstAccessMask;
            set
            {
                _internal.dstAccessMask = value;
            }
        }

        public ImageLayout OldLayout
        {
            get => _internal.oldLayout;
            set
            {
                _internal.oldLayout = value;
            }
        }

        public ImageLayout NewLayout
        {
            get => _internal.newLayout;
            set
            {
                _internal.newLayout = value;
            }
        }

        public uint SrcQueueFamilyIndex
        {
            get => _internal.srcQueueFamilyIndex;
            set
            {
                _internal.srcQueueFamilyIndex = value;
            }
        }

        public uint DstQueueFamilyIndex
        {
            get => _internal.dstQueueFamilyIndex;
            set
            {
                _internal.dstQueueFamilyIndex = value;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public ImageSubresourceRange SubresourceRange
        {
            get
            {
                if (subresourceRange != null)
                {
                    return subresourceRange;
                }
                subresourceRange = _internal.subresourceRange;
                return subresourceRange;
            }
            set
            {
                subresourceRange = value;
                _internal.subresourceRange = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageMemoryBarrier(ImageMemoryBarrier i)
        {
            if (i.Image != null)
            {
                i._internal.image = i.Image;
            }
            if (i.SubresourceRange != null)
            {
                i._internal.subresourceRange = i.SubresourceRange;
            }
            return i._internal;
        }

        public static implicit operator ImageMemoryBarrier(AdamantiumVulkan.Core.Interop.ImageMemoryBarrier i)
        {
            return new ImageMemoryBarrier(i);
        }

    }

    public partial class RenderPassBeginInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassBeginInfo _internal;

        private GCHandleReference refpNext;

        private RenderPass renderPass;

        private Framebuffer framebuffer;

        private Rect2D renderArea;

        private GCHandleReference refpClearValues;

        public RenderPassBeginInfo()
        {
        }

        public RenderPassBeginInfo(AdamantiumVulkan.Core.Interop.RenderPassBeginInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public RenderPass RenderPass
        {
            get
            {
                if (renderPass != null)
                {
                    return renderPass;
                }
                renderPass = _internal.renderPass;
                return renderPass;
            }
            set
            {
                renderPass = value;
                _internal.renderPass = value;
            }
        }

        public Framebuffer Framebuffer
        {
            get
            {
                if (framebuffer != null)
                {
                    return framebuffer;
                }
                framebuffer = _internal.framebuffer;
                return framebuffer;
            }
            set
            {
                framebuffer = value;
                _internal.framebuffer = value;
            }
        }

        public Rect2D RenderArea
        {
            get
            {
                if (renderArea != null)
                {
                    return renderArea;
                }
                renderArea = _internal.renderArea;
                return renderArea;
            }
            set
            {
                renderArea = value;
                _internal.renderArea = value;
            }
        }

        public uint ClearValueCount
        {
            get => _internal.clearValueCount;
            set
            {
                _internal.clearValueCount = value;
            }
        }

        private ClearValue[] pClearValues;
        public ClearValue[] PClearValues
        {
            get
            {
                if(pClearValues != null)
                    return pClearValues;

                pClearValues = new ClearValue[_internal.clearValueCount];
                MarshalUtils.IntPtrToManagedArray<ClearValue>(_internal.pClearValues, pClearValues);
                return pClearValues;
            }
            set
            {
                refpClearValues?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.ClearValue[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpClearValues = new GCHandleReference(tmpArray);
                pClearValues = value;
                _internal.pClearValues = refpClearValues.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpClearValues?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassBeginInfo(RenderPassBeginInfo r)
        {
            if (r.RenderPass != null)
            {
                r._internal.renderPass = r.RenderPass;
            }
            if (r.Framebuffer != null)
            {
                r._internal.framebuffer = r.Framebuffer;
            }
            if (r.RenderArea != null)
            {
                r._internal.renderArea = r.RenderArea;
            }
            return r._internal;
        }

        public static implicit operator RenderPassBeginInfo(AdamantiumVulkan.Core.Interop.RenderPassBeginInfo r)
        {
            return new RenderPassBeginInfo(r);
        }

    }

    public partial class DispatchIndirectCommand
    {
        private AdamantiumVulkan.Core.Interop.DispatchIndirectCommand _internal;

        public DispatchIndirectCommand()
        {
        }

        public DispatchIndirectCommand(AdamantiumVulkan.Core.Interop.DispatchIndirectCommand _internal)
        {
            this._internal = _internal;
        }

        public uint X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public uint Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public uint Z
        {
            get => _internal.z;
            set
            {
                _internal.z = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DispatchIndirectCommand(DispatchIndirectCommand d)
        {
            return d._internal;
        }

        public static implicit operator DispatchIndirectCommand(AdamantiumVulkan.Core.Interop.DispatchIndirectCommand d)
        {
            return new DispatchIndirectCommand(d);
        }

    }

    public partial class DrawIndexedIndirectCommand
    {
        private AdamantiumVulkan.Core.Interop.DrawIndexedIndirectCommand _internal;

        public DrawIndexedIndirectCommand()
        {
        }

        public DrawIndexedIndirectCommand(AdamantiumVulkan.Core.Interop.DrawIndexedIndirectCommand _internal)
        {
            this._internal = _internal;
        }

        public uint IndexCount
        {
            get => _internal.indexCount;
            set
            {
                _internal.indexCount = value;
            }
        }

        public uint InstanceCount
        {
            get => _internal.instanceCount;
            set
            {
                _internal.instanceCount = value;
            }
        }

        public uint FirstIndex
        {
            get => _internal.firstIndex;
            set
            {
                _internal.firstIndex = value;
            }
        }

        public int VertexOffset
        {
            get => _internal.vertexOffset;
            set
            {
                _internal.vertexOffset = value;
            }
        }

        public uint FirstInstance
        {
            get => _internal.firstInstance;
            set
            {
                _internal.firstInstance = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DrawIndexedIndirectCommand(DrawIndexedIndirectCommand d)
        {
            return d._internal;
        }

        public static implicit operator DrawIndexedIndirectCommand(AdamantiumVulkan.Core.Interop.DrawIndexedIndirectCommand d)
        {
            return new DrawIndexedIndirectCommand(d);
        }

    }

    public partial class DrawIndirectCommand
    {
        private AdamantiumVulkan.Core.Interop.DrawIndirectCommand _internal;

        public DrawIndirectCommand()
        {
        }

        public DrawIndirectCommand(AdamantiumVulkan.Core.Interop.DrawIndirectCommand _internal)
        {
            this._internal = _internal;
        }

        public uint VertexCount
        {
            get => _internal.vertexCount;
            set
            {
                _internal.vertexCount = value;
            }
        }

        public uint InstanceCount
        {
            get => _internal.instanceCount;
            set
            {
                _internal.instanceCount = value;
            }
        }

        public uint FirstVertex
        {
            get => _internal.firstVertex;
            set
            {
                _internal.firstVertex = value;
            }
        }

        public uint FirstInstance
        {
            get => _internal.firstInstance;
            set
            {
                _internal.firstInstance = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DrawIndirectCommand(DrawIndirectCommand d)
        {
            return d._internal;
        }

        public static implicit operator DrawIndirectCommand(AdamantiumVulkan.Core.Interop.DrawIndirectCommand d)
        {
            return new DrawIndirectCommand(d);
        }

    }

    public partial class BaseOutStructure : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BaseOutStructure _internal;

        private StructReference refpNext;

        public BaseOutStructure()
        {
        }

        public BaseOutStructure(AdamantiumVulkan.Core.Interop.BaseOutStructure _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private BaseOutStructure pNext;
        public BaseOutStructure PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.BaseOutStructure>(_internal.pNext);
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                AdamantiumVulkan.Core.Interop.BaseOutStructure tmp = value;
                refpNext = new StructReference(tmp);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BaseOutStructure(BaseOutStructure b)
        {
            return b._internal;
        }

        public static implicit operator BaseOutStructure(AdamantiumVulkan.Core.Interop.BaseOutStructure b)
        {
            return new BaseOutStructure(b);
        }

    }

    public partial class BaseInStructure : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BaseInStructure _internal;

        private StructReference refpNext;

        public BaseInStructure()
        {
        }

        public BaseInStructure(AdamantiumVulkan.Core.Interop.BaseInStructure _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private BaseInStructure pNext;
        public BaseInStructure PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.BaseInStructure>(_internal.pNext);
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                AdamantiumVulkan.Core.Interop.BaseInStructure tmp = value;
                refpNext = new StructReference(tmp);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BaseInStructure(BaseInStructure b)
        {
            return b._internal;
        }

        public static implicit operator BaseInStructure(AdamantiumVulkan.Core.Interop.BaseInStructure b)
        {
            return new BaseInStructure(b);
        }

    }

    public partial class PhysicalDeviceSubgroupProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSubgroupProperties _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceSubgroupProperties()
        {
        }

        public PhysicalDeviceSubgroupProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceSubgroupProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SubgroupSize
        {
            get => _internal.subgroupSize;
            set
            {
                _internal.subgroupSize = value;
            }
        }

        public uint SupportedStages
        {
            get => _internal.supportedStages;
            set
            {
                _internal.supportedStages = value;
            }
        }

        public uint SupportedOperations
        {
            get => _internal.supportedOperations;
            set
            {
                _internal.supportedOperations = value;
            }
        }

        public bool QuadOperationsInAllStages
        {
            get => _internal.quadOperationsInAllStages;
            set
            {
                _internal.quadOperationsInAllStages = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSubgroupProperties(PhysicalDeviceSubgroupProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSubgroupProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceSubgroupProperties p)
        {
            return new PhysicalDeviceSubgroupProperties(p);
        }

    }

    public partial class BindBufferMemoryInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindBufferMemoryInfo _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        private DeviceMemory memory;

        public BindBufferMemoryInfo()
        {
        }

        public BindBufferMemoryInfo(AdamantiumVulkan.Core.Interop.BindBufferMemoryInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong MemoryOffset
        {
            get => _internal.memoryOffset;
            set
            {
                _internal.memoryOffset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindBufferMemoryInfo(BindBufferMemoryInfo b)
        {
            if (b.Buffer != null)
            {
                b._internal.buffer = b.Buffer;
            }
            if (b.Memory != null)
            {
                b._internal.memory = b.Memory;
            }
            return b._internal;
        }

        public static implicit operator BindBufferMemoryInfo(AdamantiumVulkan.Core.Interop.BindBufferMemoryInfo b)
        {
            return new BindBufferMemoryInfo(b);
        }

    }

    public partial class BindImageMemoryInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindImageMemoryInfo _internal;

        private GCHandleReference refpNext;

        private Image image;

        private DeviceMemory memory;

        public BindImageMemoryInfo()
        {
        }

        public BindImageMemoryInfo(AdamantiumVulkan.Core.Interop.BindImageMemoryInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong MemoryOffset
        {
            get => _internal.memoryOffset;
            set
            {
                _internal.memoryOffset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindImageMemoryInfo(BindImageMemoryInfo b)
        {
            if (b.Image != null)
            {
                b._internal.image = b.Image;
            }
            if (b.Memory != null)
            {
                b._internal.memory = b.Memory;
            }
            return b._internal;
        }

        public static implicit operator BindImageMemoryInfo(AdamantiumVulkan.Core.Interop.BindImageMemoryInfo b)
        {
            return new BindImageMemoryInfo(b);
        }

    }

    public partial class PhysicalDevice16BitStorageFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDevice16BitStorageFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDevice16BitStorageFeatures()
        {
        }

        public PhysicalDevice16BitStorageFeatures(AdamantiumVulkan.Core.Interop.PhysicalDevice16BitStorageFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool StorageBuffer16BitAccess
        {
            get => _internal.storageBuffer16BitAccess;
            set
            {
                _internal.storageBuffer16BitAccess = value;
            }
        }

        public bool UniformAndStorageBuffer16BitAccess
        {
            get => _internal.uniformAndStorageBuffer16BitAccess;
            set
            {
                _internal.uniformAndStorageBuffer16BitAccess = value;
            }
        }

        public bool StoragePushConstant16
        {
            get => _internal.storagePushConstant16;
            set
            {
                _internal.storagePushConstant16 = value;
            }
        }

        public bool StorageInputOutput16
        {
            get => _internal.storageInputOutput16;
            set
            {
                _internal.storageInputOutput16 = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDevice16BitStorageFeatures(PhysicalDevice16BitStorageFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDevice16BitStorageFeatures(AdamantiumVulkan.Core.Interop.PhysicalDevice16BitStorageFeatures p)
        {
            return new PhysicalDevice16BitStorageFeatures(p);
        }

    }

    public partial class MemoryDedicatedRequirements : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryDedicatedRequirements _internal;

        private GCHandleReference refpNext;

        public MemoryDedicatedRequirements()
        {
        }

        public MemoryDedicatedRequirements(AdamantiumVulkan.Core.Interop.MemoryDedicatedRequirements _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool PrefersDedicatedAllocation
        {
            get => _internal.prefersDedicatedAllocation;
            set
            {
                _internal.prefersDedicatedAllocation = value;
            }
        }

        public bool RequiresDedicatedAllocation
        {
            get => _internal.requiresDedicatedAllocation;
            set
            {
                _internal.requiresDedicatedAllocation = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryDedicatedRequirements(MemoryDedicatedRequirements m)
        {
            return m._internal;
        }

        public static implicit operator MemoryDedicatedRequirements(AdamantiumVulkan.Core.Interop.MemoryDedicatedRequirements m)
        {
            return new MemoryDedicatedRequirements(m);
        }

    }

    public partial class MemoryDedicatedAllocateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryDedicatedAllocateInfo _internal;

        private GCHandleReference refpNext;

        private Image image;

        private Buffer buffer;

        public MemoryDedicatedAllocateInfo()
        {
        }

        public MemoryDedicatedAllocateInfo(AdamantiumVulkan.Core.Interop.MemoryDedicatedAllocateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryDedicatedAllocateInfo(MemoryDedicatedAllocateInfo m)
        {
            if (m.Image != null)
            {
                m._internal.image = m.Image;
            }
            if (m.Buffer != null)
            {
                m._internal.buffer = m.Buffer;
            }
            return m._internal;
        }

        public static implicit operator MemoryDedicatedAllocateInfo(AdamantiumVulkan.Core.Interop.MemoryDedicatedAllocateInfo m)
        {
            return new MemoryDedicatedAllocateInfo(m);
        }

    }

    public partial class MemoryAllocateFlagsInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryAllocateFlagsInfo _internal;

        private GCHandleReference refpNext;

        public MemoryAllocateFlagsInfo()
        {
        }

        public MemoryAllocateFlagsInfo(AdamantiumVulkan.Core.Interop.MemoryAllocateFlagsInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint DeviceMask
        {
            get => _internal.deviceMask;
            set
            {
                _internal.deviceMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryAllocateFlagsInfo(MemoryAllocateFlagsInfo m)
        {
            return m._internal;
        }

        public static implicit operator MemoryAllocateFlagsInfo(AdamantiumVulkan.Core.Interop.MemoryAllocateFlagsInfo m)
        {
            return new MemoryAllocateFlagsInfo(m);
        }

    }

    public partial class DeviceGroupRenderPassBeginInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupRenderPassBeginInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpDeviceRenderAreas;

        public DeviceGroupRenderPassBeginInfo()
        {
        }

        public DeviceGroupRenderPassBeginInfo(AdamantiumVulkan.Core.Interop.DeviceGroupRenderPassBeginInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DeviceMask
        {
            get => _internal.deviceMask;
            set
            {
                _internal.deviceMask = value;
            }
        }

        public uint DeviceRenderAreaCount
        {
            get => _internal.deviceRenderAreaCount;
            set
            {
                _internal.deviceRenderAreaCount = value;
            }
        }

        private Rect2D pDeviceRenderAreas;
        public Rect2D PDeviceRenderAreas
        {
            get
            {
                if(pDeviceRenderAreas != null)
                    return pDeviceRenderAreas;

                pDeviceRenderAreas = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Rect2D>(_internal.pDeviceRenderAreas);
                return pDeviceRenderAreas;
            }
            set
            {
                refpDeviceRenderAreas?.Dispose();
                AdamantiumVulkan.Core.Interop.Rect2D tmp = value;
                refpDeviceRenderAreas = new StructReference(tmp);
                pDeviceRenderAreas = value;
                _internal.pDeviceRenderAreas = refpDeviceRenderAreas.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDeviceRenderAreas?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupRenderPassBeginInfo(DeviceGroupRenderPassBeginInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupRenderPassBeginInfo(AdamantiumVulkan.Core.Interop.DeviceGroupRenderPassBeginInfo d)
        {
            return new DeviceGroupRenderPassBeginInfo(d);
        }

    }

    public partial class DeviceGroupCommandBufferBeginInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupCommandBufferBeginInfo _internal;

        private GCHandleReference refpNext;

        public DeviceGroupCommandBufferBeginInfo()
        {
        }

        public DeviceGroupCommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.DeviceGroupCommandBufferBeginInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DeviceMask
        {
            get => _internal.deviceMask;
            set
            {
                _internal.deviceMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupCommandBufferBeginInfo(DeviceGroupCommandBufferBeginInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupCommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.DeviceGroupCommandBufferBeginInfo d)
        {
            return new DeviceGroupCommandBufferBeginInfo(d);
        }

    }

    public partial class DeviceGroupSubmitInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupSubmitInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpWaitSemaphoreDeviceIndices;

        private StructReference refpCommandBufferDeviceMasks;

        private StructReference refpSignalSemaphoreDeviceIndices;

        public DeviceGroupSubmitInfo()
        {
        }

        public DeviceGroupSubmitInfo(AdamantiumVulkan.Core.Interop.DeviceGroupSubmitInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint WaitSemaphoreCount
        {
            get => _internal.waitSemaphoreCount;
            set
            {
                _internal.waitSemaphoreCount = value;
            }
        }

        public uint PWaitSemaphoreDeviceIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pWaitSemaphoreDeviceIndices);
            }
            set
            {
                refpWaitSemaphoreDeviceIndices?.Dispose();
                refpWaitSemaphoreDeviceIndices = new StructReference(value);
                _internal.pWaitSemaphoreDeviceIndices = refpWaitSemaphoreDeviceIndices.Handle;
            }
        }

        public uint CommandBufferCount
        {
            get => _internal.commandBufferCount;
            set
            {
                _internal.commandBufferCount = value;
            }
        }

        public uint PCommandBufferDeviceMasks
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pCommandBufferDeviceMasks);
            }
            set
            {
                refpCommandBufferDeviceMasks?.Dispose();
                refpCommandBufferDeviceMasks = new StructReference(value);
                _internal.pCommandBufferDeviceMasks = refpCommandBufferDeviceMasks.Handle;
            }
        }

        public uint SignalSemaphoreCount
        {
            get => _internal.signalSemaphoreCount;
            set
            {
                _internal.signalSemaphoreCount = value;
            }
        }

        public uint PSignalSemaphoreDeviceIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pSignalSemaphoreDeviceIndices);
            }
            set
            {
                refpSignalSemaphoreDeviceIndices?.Dispose();
                refpSignalSemaphoreDeviceIndices = new StructReference(value);
                _internal.pSignalSemaphoreDeviceIndices = refpSignalSemaphoreDeviceIndices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpWaitSemaphoreDeviceIndices?.Dispose();
            refpCommandBufferDeviceMasks?.Dispose();
            refpSignalSemaphoreDeviceIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupSubmitInfo(DeviceGroupSubmitInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupSubmitInfo(AdamantiumVulkan.Core.Interop.DeviceGroupSubmitInfo d)
        {
            return new DeviceGroupSubmitInfo(d);
        }

    }

    public partial class DeviceGroupBindSparseInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupBindSparseInfo _internal;

        private GCHandleReference refpNext;

        public DeviceGroupBindSparseInfo()
        {
        }

        public DeviceGroupBindSparseInfo(AdamantiumVulkan.Core.Interop.DeviceGroupBindSparseInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ResourceDeviceIndex
        {
            get => _internal.resourceDeviceIndex;
            set
            {
                _internal.resourceDeviceIndex = value;
            }
        }

        public uint MemoryDeviceIndex
        {
            get => _internal.memoryDeviceIndex;
            set
            {
                _internal.memoryDeviceIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupBindSparseInfo(DeviceGroupBindSparseInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupBindSparseInfo(AdamantiumVulkan.Core.Interop.DeviceGroupBindSparseInfo d)
        {
            return new DeviceGroupBindSparseInfo(d);
        }

    }

    public partial class BindBufferMemoryDeviceGroupInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindBufferMemoryDeviceGroupInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpDeviceIndices;

        public BindBufferMemoryDeviceGroupInfo()
        {
        }

        public BindBufferMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.BindBufferMemoryDeviceGroupInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DeviceIndexCount
        {
            get => _internal.deviceIndexCount;
            set
            {
                _internal.deviceIndexCount = value;
            }
        }

        public uint PDeviceIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pDeviceIndices);
            }
            set
            {
                refpDeviceIndices?.Dispose();
                refpDeviceIndices = new StructReference(value);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDeviceIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindBufferMemoryDeviceGroupInfo(BindBufferMemoryDeviceGroupInfo b)
        {
            return b._internal;
        }

        public static implicit operator BindBufferMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.BindBufferMemoryDeviceGroupInfo b)
        {
            return new BindBufferMemoryDeviceGroupInfo(b);
        }

    }

    public partial class BindImageMemoryDeviceGroupInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindImageMemoryDeviceGroupInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpDeviceIndices;

        private StructReference refpSplitInstanceBindRegions;

        public BindImageMemoryDeviceGroupInfo()
        {
        }

        public BindImageMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.BindImageMemoryDeviceGroupInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DeviceIndexCount
        {
            get => _internal.deviceIndexCount;
            set
            {
                _internal.deviceIndexCount = value;
            }
        }

        public uint PDeviceIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pDeviceIndices);
            }
            set
            {
                refpDeviceIndices?.Dispose();
                refpDeviceIndices = new StructReference(value);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
        }

        public uint SplitInstanceBindRegionCount
        {
            get => _internal.splitInstanceBindRegionCount;
            set
            {
                _internal.splitInstanceBindRegionCount = value;
            }
        }

        private Rect2D pSplitInstanceBindRegions;
        public Rect2D PSplitInstanceBindRegions
        {
            get
            {
                if(pSplitInstanceBindRegions != null)
                    return pSplitInstanceBindRegions;

                pSplitInstanceBindRegions = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Rect2D>(_internal.pSplitInstanceBindRegions);
                return pSplitInstanceBindRegions;
            }
            set
            {
                refpSplitInstanceBindRegions?.Dispose();
                AdamantiumVulkan.Core.Interop.Rect2D tmp = value;
                refpSplitInstanceBindRegions = new StructReference(tmp);
                pSplitInstanceBindRegions = value;
                _internal.pSplitInstanceBindRegions = refpSplitInstanceBindRegions.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDeviceIndices?.Dispose();
            refpSplitInstanceBindRegions?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindImageMemoryDeviceGroupInfo(BindImageMemoryDeviceGroupInfo b)
        {
            return b._internal;
        }

        public static implicit operator BindImageMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.BindImageMemoryDeviceGroupInfo b)
        {
            return new BindImageMemoryDeviceGroupInfo(b);
        }

    }

    public partial class PhysicalDeviceGroupProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceGroupProperties _internal;

        private GCHandleReference refpNext;

        private PhysicalDevice[] physicalDevices;

        public PhysicalDeviceGroupProperties()
        {
        }

        public PhysicalDeviceGroupProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceGroupProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint PhysicalDeviceCount
        {
            get => _internal.physicalDeviceCount;
            set
            {
                _internal.physicalDeviceCount = value;
            }
        }

        public PhysicalDevice[] PhysicalDevices
        {
            get
            {
                if(physicalDevices != null)
                    return physicalDevices;

                physicalDevices = new PhysicalDevice[32];
                for(int i = 0; i < 32; ++i)
                {
                    physicalDevices[i] = _internal.physicalDevices[i];
                }
                return physicalDevices;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(PhysicalDevices), "Array is out of bounds. Size should not be more than 32");

                _internal.physicalDevices = new AdamantiumVulkan.Core.Interop.PhysicalDevice_T[32];
                for(int i = 0; i < value.Length; ++i)
                {
                    _internal.physicalDevices[i] = value[i];
                }
                physicalDevices = value;
            }
        }

        public bool SubsetAllocation
        {
            get => _internal.subsetAllocation;
            set
            {
                _internal.subsetAllocation = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceGroupProperties(PhysicalDeviceGroupProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceGroupProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceGroupProperties p)
        {
            return new PhysicalDeviceGroupProperties(p);
        }

    }

    public partial class DeviceGroupDeviceCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupDeviceCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpPhysicalDevices;

        public DeviceGroupDeviceCreateInfo()
        {
        }

        public DeviceGroupDeviceCreateInfo(AdamantiumVulkan.Core.Interop.DeviceGroupDeviceCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint PhysicalDeviceCount
        {
            get => _internal.physicalDeviceCount;
            set
            {
                _internal.physicalDeviceCount = value;
            }
        }

        private PhysicalDevice pPhysicalDevices;
        public PhysicalDevice PPhysicalDevices
        {
            get
            {
                if(pPhysicalDevices != null)
                    return pPhysicalDevices;

                pPhysicalDevices = Marshal.PtrToStructure<PhysicalDevice>(_internal.pPhysicalDevices);
                return pPhysicalDevices;
            }
            set
            {
                refpPhysicalDevices?.Dispose();
                AdamantiumVulkan.Core.Interop.PhysicalDevice_T tmp = value;
                refpPhysicalDevices = new StructReference(tmp);
                pPhysicalDevices = value;
                _internal.pPhysicalDevices = refpPhysicalDevices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpPhysicalDevices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupDeviceCreateInfo(DeviceGroupDeviceCreateInfo d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupDeviceCreateInfo(AdamantiumVulkan.Core.Interop.DeviceGroupDeviceCreateInfo d)
        {
            return new DeviceGroupDeviceCreateInfo(d);
        }

    }

    public partial class BufferMemoryRequirementsInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferMemoryRequirementsInfo2 _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        public BufferMemoryRequirementsInfo2()
        {
        }

        public BufferMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.BufferMemoryRequirementsInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferMemoryRequirementsInfo2(BufferMemoryRequirementsInfo2 b)
        {
            if (b.Buffer != null)
            {
                b._internal.buffer = b.Buffer;
            }
            return b._internal;
        }

        public static implicit operator BufferMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.BufferMemoryRequirementsInfo2 b)
        {
            return new BufferMemoryRequirementsInfo2(b);
        }

    }

    public partial class ImageMemoryRequirementsInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageMemoryRequirementsInfo2 _internal;

        private GCHandleReference refpNext;

        private Image image;

        public ImageMemoryRequirementsInfo2()
        {
        }

        public ImageMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.ImageMemoryRequirementsInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageMemoryRequirementsInfo2(ImageMemoryRequirementsInfo2 i)
        {
            if (i.Image != null)
            {
                i._internal.image = i.Image;
            }
            return i._internal;
        }

        public static implicit operator ImageMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.ImageMemoryRequirementsInfo2 i)
        {
            return new ImageMemoryRequirementsInfo2(i);
        }

    }

    public partial class ImageSparseMemoryRequirementsInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageSparseMemoryRequirementsInfo2 _internal;

        private GCHandleReference refpNext;

        private Image image;

        public ImageSparseMemoryRequirementsInfo2()
        {
        }

        public ImageSparseMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.ImageSparseMemoryRequirementsInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageSparseMemoryRequirementsInfo2(ImageSparseMemoryRequirementsInfo2 i)
        {
            if (i.Image != null)
            {
                i._internal.image = i.Image;
            }
            return i._internal;
        }

        public static implicit operator ImageSparseMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.ImageSparseMemoryRequirementsInfo2 i)
        {
            return new ImageSparseMemoryRequirementsInfo2(i);
        }

    }

    public partial class MemoryRequirements2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryRequirements2 _internal;

        private GCHandleReference refpNext;

        private MemoryRequirements memoryRequirements;

        public MemoryRequirements2()
        {
        }

        public MemoryRequirements2(AdamantiumVulkan.Core.Interop.MemoryRequirements2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public MemoryRequirements MemoryRequirements
        {
            get
            {
                if (memoryRequirements != null)
                {
                    return memoryRequirements;
                }
                memoryRequirements = _internal.memoryRequirements;
                return memoryRequirements;
            }
            set
            {
                memoryRequirements = value;
                _internal.memoryRequirements = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryRequirements2(MemoryRequirements2 m)
        {
            if (m.MemoryRequirements != null)
            {
                m._internal.memoryRequirements = m.MemoryRequirements;
            }
            return m._internal;
        }

        public static implicit operator MemoryRequirements2(AdamantiumVulkan.Core.Interop.MemoryRequirements2 m)
        {
            return new MemoryRequirements2(m);
        }

    }

    public partial class SparseImageMemoryRequirements2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements2 _internal;

        private GCHandleReference refpNext;

        private SparseImageMemoryRequirements memoryRequirements;

        public SparseImageMemoryRequirements2()
        {
        }

        public SparseImageMemoryRequirements2(AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SparseImageMemoryRequirements MemoryRequirements
        {
            get
            {
                if (memoryRequirements != null)
                {
                    return memoryRequirements;
                }
                memoryRequirements = _internal.memoryRequirements;
                return memoryRequirements;
            }
            set
            {
                memoryRequirements = value;
                _internal.memoryRequirements = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements2(SparseImageMemoryRequirements2 s)
        {
            if (s.MemoryRequirements != null)
            {
                s._internal.memoryRequirements = s.MemoryRequirements;
            }
            return s._internal;
        }

        public static implicit operator SparseImageMemoryRequirements2(AdamantiumVulkan.Core.Interop.SparseImageMemoryRequirements2 s)
        {
            return new SparseImageMemoryRequirements2(s);
        }

    }

    public partial class PhysicalDeviceFeatures2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures2 _internal;

        private GCHandleReference refpNext;

        private PhysicalDeviceFeatures features;

        public PhysicalDeviceFeatures2()
        {
        }

        public PhysicalDeviceFeatures2(AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PhysicalDeviceFeatures Features
        {
            get
            {
                if (features != null)
                {
                    return features;
                }
                features = _internal.features;
                return features;
            }
            set
            {
                features = value;
                _internal.features = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures2(PhysicalDeviceFeatures2 p)
        {
            if (p.Features != null)
            {
                p._internal.features = p.Features;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFeatures2(AdamantiumVulkan.Core.Interop.PhysicalDeviceFeatures2 p)
        {
            return new PhysicalDeviceFeatures2(p);
        }

    }

    public partial class PhysicalDeviceProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties2 _internal;

        private GCHandleReference refpNext;

        private PhysicalDeviceProperties properties;

        public PhysicalDeviceProperties2()
        {
        }

        public PhysicalDeviceProperties2(AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PhysicalDeviceProperties Properties
        {
            get
            {
                if (properties != null)
                {
                    return properties;
                }
                properties = _internal.properties;
                return properties;
            }
            set
            {
                properties = value;
                _internal.properties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties2(PhysicalDeviceProperties2 p)
        {
            if (p.Properties != null)
            {
                p._internal.properties = p.Properties;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceProperties2(AdamantiumVulkan.Core.Interop.PhysicalDeviceProperties2 p)
        {
            return new PhysicalDeviceProperties2(p);
        }

    }

    public partial class FormatProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.FormatProperties2 _internal;

        private GCHandleReference refpNext;

        private FormatProperties formatProperties;

        public FormatProperties2()
        {
        }

        public FormatProperties2(AdamantiumVulkan.Core.Interop.FormatProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public FormatProperties FormatProperties
        {
            get
            {
                if (formatProperties != null)
                {
                    return formatProperties;
                }
                formatProperties = _internal.formatProperties;
                return formatProperties;
            }
            set
            {
                formatProperties = value;
                _internal.formatProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FormatProperties2(FormatProperties2 f)
        {
            if (f.FormatProperties != null)
            {
                f._internal.formatProperties = f.FormatProperties;
            }
            return f._internal;
        }

        public static implicit operator FormatProperties2(AdamantiumVulkan.Core.Interop.FormatProperties2 f)
        {
            return new FormatProperties2(f);
        }

    }

    public partial class ImageFormatProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageFormatProperties2 _internal;

        private GCHandleReference refpNext;

        private ImageFormatProperties imageFormatProperties;

        public ImageFormatProperties2()
        {
        }

        public ImageFormatProperties2(AdamantiumVulkan.Core.Interop.ImageFormatProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ImageFormatProperties ImageFormatProperties
        {
            get
            {
                if (imageFormatProperties != null)
                {
                    return imageFormatProperties;
                }
                imageFormatProperties = _internal.imageFormatProperties;
                return imageFormatProperties;
            }
            set
            {
                imageFormatProperties = value;
                _internal.imageFormatProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageFormatProperties2(ImageFormatProperties2 i)
        {
            if (i.ImageFormatProperties != null)
            {
                i._internal.imageFormatProperties = i.ImageFormatProperties;
            }
            return i._internal;
        }

        public static implicit operator ImageFormatProperties2(AdamantiumVulkan.Core.Interop.ImageFormatProperties2 i)
        {
            return new ImageFormatProperties2(i);
        }

    }

    public partial class PhysicalDeviceImageFormatInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceImageFormatInfo2 _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceImageFormatInfo2()
        {
        }

        public PhysicalDeviceImageFormatInfo2(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageFormatInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public ImageType Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public ImageTiling Tiling
        {
            get => _internal.tiling;
            set
            {
                _internal.tiling = value;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceImageFormatInfo2(PhysicalDeviceImageFormatInfo2 p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceImageFormatInfo2(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageFormatInfo2 p)
        {
            return new PhysicalDeviceImageFormatInfo2(p);
        }

    }

    public partial class QueueFamilyProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.QueueFamilyProperties2 _internal;

        private GCHandleReference refpNext;

        private QueueFamilyProperties queueFamilyProperties;

        public QueueFamilyProperties2()
        {
        }

        public QueueFamilyProperties2(AdamantiumVulkan.Core.Interop.QueueFamilyProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public QueueFamilyProperties QueueFamilyProperties
        {
            get
            {
                if (queueFamilyProperties != null)
                {
                    return queueFamilyProperties;
                }
                queueFamilyProperties = _internal.queueFamilyProperties;
                return queueFamilyProperties;
            }
            set
            {
                queueFamilyProperties = value;
                _internal.queueFamilyProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.QueueFamilyProperties2(QueueFamilyProperties2 q)
        {
            if (q.QueueFamilyProperties != null)
            {
                q._internal.queueFamilyProperties = q.QueueFamilyProperties;
            }
            return q._internal;
        }

        public static implicit operator QueueFamilyProperties2(AdamantiumVulkan.Core.Interop.QueueFamilyProperties2 q)
        {
            return new QueueFamilyProperties2(q);
        }

    }

    public partial class PhysicalDeviceMemoryProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties2 _internal;

        private GCHandleReference refpNext;

        private PhysicalDeviceMemoryProperties memoryProperties;

        public PhysicalDeviceMemoryProperties2()
        {
        }

        public PhysicalDeviceMemoryProperties2(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PhysicalDeviceMemoryProperties MemoryProperties
        {
            get
            {
                if (memoryProperties != null)
                {
                    return memoryProperties;
                }
                memoryProperties = _internal.memoryProperties;
                return memoryProperties;
            }
            set
            {
                memoryProperties = value;
                _internal.memoryProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties2(PhysicalDeviceMemoryProperties2 p)
        {
            if (p.MemoryProperties != null)
            {
                p._internal.memoryProperties = p.MemoryProperties;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMemoryProperties2(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryProperties2 p)
        {
            return new PhysicalDeviceMemoryProperties2(p);
        }

    }

    public partial class SparseImageFormatProperties2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SparseImageFormatProperties2 _internal;

        private GCHandleReference refpNext;

        private SparseImageFormatProperties properties;

        public SparseImageFormatProperties2()
        {
        }

        public SparseImageFormatProperties2(AdamantiumVulkan.Core.Interop.SparseImageFormatProperties2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SparseImageFormatProperties Properties
        {
            get
            {
                if (properties != null)
                {
                    return properties;
                }
                properties = _internal.properties;
                return properties;
            }
            set
            {
                properties = value;
                _internal.properties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SparseImageFormatProperties2(SparseImageFormatProperties2 s)
        {
            if (s.Properties != null)
            {
                s._internal.properties = s.Properties;
            }
            return s._internal;
        }

        public static implicit operator SparseImageFormatProperties2(AdamantiumVulkan.Core.Interop.SparseImageFormatProperties2 s)
        {
            return new SparseImageFormatProperties2(s);
        }

    }

    public partial class PhysicalDeviceSparseImageFormatInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseImageFormatInfo2 _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceSparseImageFormatInfo2()
        {
        }

        public PhysicalDeviceSparseImageFormatInfo2(AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseImageFormatInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public ImageType Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public SampleCountFlagBits Samples
        {
            get => _internal.samples;
            set
            {
                _internal.samples = value;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        public ImageTiling Tiling
        {
            get => _internal.tiling;
            set
            {
                _internal.tiling = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseImageFormatInfo2(PhysicalDeviceSparseImageFormatInfo2 p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSparseImageFormatInfo2(AdamantiumVulkan.Core.Interop.PhysicalDeviceSparseImageFormatInfo2 p)
        {
            return new PhysicalDeviceSparseImageFormatInfo2(p);
        }

    }

    public partial class PhysicalDevicePointClippingProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDevicePointClippingProperties _internal;

        private GCHandleReference refpNext;

        public PhysicalDevicePointClippingProperties()
        {
        }

        public PhysicalDevicePointClippingProperties(AdamantiumVulkan.Core.Interop.PhysicalDevicePointClippingProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PointClippingBehavior PointClippingBehavior
        {
            get => _internal.pointClippingBehavior;
            set
            {
                _internal.pointClippingBehavior = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDevicePointClippingProperties(PhysicalDevicePointClippingProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDevicePointClippingProperties(AdamantiumVulkan.Core.Interop.PhysicalDevicePointClippingProperties p)
        {
            return new PhysicalDevicePointClippingProperties(p);
        }

    }

    public partial class InputAttachmentAspectReference
    {
        private AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference _internal;

        public InputAttachmentAspectReference()
        {
        }

        public InputAttachmentAspectReference(AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference _internal)
        {
            this._internal = _internal;
        }

        public uint Subpass
        {
            get => _internal.subpass;
            set
            {
                _internal.subpass = value;
            }
        }

        public uint InputAttachmentIndex
        {
            get => _internal.inputAttachmentIndex;
            set
            {
                _internal.inputAttachmentIndex = value;
            }
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference(InputAttachmentAspectReference i)
        {
            return i._internal;
        }

        public static implicit operator InputAttachmentAspectReference(AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference i)
        {
            return new InputAttachmentAspectReference(i);
        }

    }

    public partial class RenderPassInputAttachmentAspectCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassInputAttachmentAspectCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpAspectReferences;

        public RenderPassInputAttachmentAspectCreateInfo()
        {
        }

        public RenderPassInputAttachmentAspectCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassInputAttachmentAspectCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AspectReferenceCount
        {
            get => _internal.aspectReferenceCount;
            set
            {
                _internal.aspectReferenceCount = value;
            }
        }

        private InputAttachmentAspectReference pAspectReferences;
        public InputAttachmentAspectReference PAspectReferences
        {
            get
            {
                if(pAspectReferences != null)
                    return pAspectReferences;

                pAspectReferences = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference>(_internal.pAspectReferences);
                return pAspectReferences;
            }
            set
            {
                refpAspectReferences?.Dispose();
                AdamantiumVulkan.Core.Interop.InputAttachmentAspectReference tmp = value;
                refpAspectReferences = new StructReference(tmp);
                pAspectReferences = value;
                _internal.pAspectReferences = refpAspectReferences.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAspectReferences?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassInputAttachmentAspectCreateInfo(RenderPassInputAttachmentAspectCreateInfo r)
        {
            return r._internal;
        }

        public static implicit operator RenderPassInputAttachmentAspectCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassInputAttachmentAspectCreateInfo r)
        {
            return new RenderPassInputAttachmentAspectCreateInfo(r);
        }

    }

    public partial class ImageViewUsageCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageViewUsageCreateInfo _internal;

        private GCHandleReference refpNext;

        public ImageViewUsageCreateInfo()
        {
        }

        public ImageViewUsageCreateInfo(AdamantiumVulkan.Core.Interop.ImageViewUsageCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageViewUsageCreateInfo(ImageViewUsageCreateInfo i)
        {
            return i._internal;
        }

        public static implicit operator ImageViewUsageCreateInfo(AdamantiumVulkan.Core.Interop.ImageViewUsageCreateInfo i)
        {
            return new ImageViewUsageCreateInfo(i);
        }

    }

    public partial class PipelineTessellationDomainOriginStateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineTessellationDomainOriginStateCreateInfo _internal;

        private GCHandleReference refpNext;

        public PipelineTessellationDomainOriginStateCreateInfo()
        {
        }

        public PipelineTessellationDomainOriginStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineTessellationDomainOriginStateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public TessellationDomainOrigin DomainOrigin
        {
            get => _internal.domainOrigin;
            set
            {
                _internal.domainOrigin = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineTessellationDomainOriginStateCreateInfo(PipelineTessellationDomainOriginStateCreateInfo p)
        {
            return p._internal;
        }

        public static implicit operator PipelineTessellationDomainOriginStateCreateInfo(AdamantiumVulkan.Core.Interop.PipelineTessellationDomainOriginStateCreateInfo p)
        {
            return new PipelineTessellationDomainOriginStateCreateInfo(p);
        }

    }

    public partial class RenderPassMultiviewCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassMultiviewCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpViewMasks;

        private StructReference refpViewOffsets;

        private StructReference refpCorrelationMasks;

        public RenderPassMultiviewCreateInfo()
        {
        }

        public RenderPassMultiviewCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassMultiviewCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SubpassCount
        {
            get => _internal.subpassCount;
            set
            {
                _internal.subpassCount = value;
            }
        }

        public uint PViewMasks
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pViewMasks);
            }
            set
            {
                refpViewMasks?.Dispose();
                refpViewMasks = new StructReference(value);
                _internal.pViewMasks = refpViewMasks.Handle;
            }
        }

        public uint DependencyCount
        {
            get => _internal.dependencyCount;
            set
            {
                _internal.dependencyCount = value;
            }
        }

        public int PViewOffsets
        {
            get
            {
                return Marshal.PtrToStructure<int>(_internal.pViewOffsets);
            }
            set
            {
                refpViewOffsets?.Dispose();
                refpViewOffsets = new StructReference(value);
                _internal.pViewOffsets = refpViewOffsets.Handle;
            }
        }

        public uint CorrelationMaskCount
        {
            get => _internal.correlationMaskCount;
            set
            {
                _internal.correlationMaskCount = value;
            }
        }

        public uint PCorrelationMasks
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pCorrelationMasks);
            }
            set
            {
                refpCorrelationMasks?.Dispose();
                refpCorrelationMasks = new StructReference(value);
                _internal.pCorrelationMasks = refpCorrelationMasks.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpViewMasks?.Dispose();
            refpViewOffsets?.Dispose();
            refpCorrelationMasks?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassMultiviewCreateInfo(RenderPassMultiviewCreateInfo r)
        {
            return r._internal;
        }

        public static implicit operator RenderPassMultiviewCreateInfo(AdamantiumVulkan.Core.Interop.RenderPassMultiviewCreateInfo r)
        {
            return new RenderPassMultiviewCreateInfo(r);
        }

    }

    public partial class PhysicalDeviceMultiviewFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMultiviewFeatures()
        {
        }

        public PhysicalDeviceMultiviewFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool Multiview
        {
            get => _internal.multiview;
            set
            {
                _internal.multiview = value;
            }
        }

        public bool MultiviewGeometryShader
        {
            get => _internal.multiviewGeometryShader;
            set
            {
                _internal.multiviewGeometryShader = value;
            }
        }

        public bool MultiviewTessellationShader
        {
            get => _internal.multiviewTessellationShader;
            set
            {
                _internal.multiviewTessellationShader = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewFeatures(PhysicalDeviceMultiviewFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMultiviewFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewFeatures p)
        {
            return new PhysicalDeviceMultiviewFeatures(p);
        }

    }

    public partial class PhysicalDeviceMultiviewProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewProperties _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMultiviewProperties()
        {
        }

        public PhysicalDeviceMultiviewProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxMultiviewViewCount
        {
            get => _internal.maxMultiviewViewCount;
            set
            {
                _internal.maxMultiviewViewCount = value;
            }
        }

        public uint MaxMultiviewInstanceIndex
        {
            get => _internal.maxMultiviewInstanceIndex;
            set
            {
                _internal.maxMultiviewInstanceIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewProperties(PhysicalDeviceMultiviewProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMultiviewProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewProperties p)
        {
            return new PhysicalDeviceMultiviewProperties(p);
        }

    }

    public partial class PhysicalDeviceVariablePointerFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceVariablePointerFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceVariablePointerFeatures()
        {
        }

        public PhysicalDeviceVariablePointerFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceVariablePointerFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool VariablePointersStorageBuffer
        {
            get => _internal.variablePointersStorageBuffer;
            set
            {
                _internal.variablePointersStorageBuffer = value;
            }
        }

        public bool VariablePointers
        {
            get => _internal.variablePointers;
            set
            {
                _internal.variablePointers = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceVariablePointerFeatures(PhysicalDeviceVariablePointerFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceVariablePointerFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceVariablePointerFeatures p)
        {
            return new PhysicalDeviceVariablePointerFeatures(p);
        }

    }

    public partial class PhysicalDeviceProtectedMemoryFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceProtectedMemoryFeatures()
        {
        }

        public PhysicalDeviceProtectedMemoryFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ProtectedMemory
        {
            get => _internal.protectedMemory;
            set
            {
                _internal.protectedMemory = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryFeatures(PhysicalDeviceProtectedMemoryFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceProtectedMemoryFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryFeatures p)
        {
            return new PhysicalDeviceProtectedMemoryFeatures(p);
        }

    }

    public partial class PhysicalDeviceProtectedMemoryProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryProperties _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceProtectedMemoryProperties()
        {
        }

        public PhysicalDeviceProtectedMemoryProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ProtectedNoFault
        {
            get => _internal.protectedNoFault;
            set
            {
                _internal.protectedNoFault = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryProperties(PhysicalDeviceProtectedMemoryProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceProtectedMemoryProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceProtectedMemoryProperties p)
        {
            return new PhysicalDeviceProtectedMemoryProperties(p);
        }

    }

    public partial class DeviceQueueInfo2 : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceQueueInfo2 _internal;

        private GCHandleReference refpNext;

        public DeviceQueueInfo2()
        {
        }

        public DeviceQueueInfo2(AdamantiumVulkan.Core.Interop.DeviceQueueInfo2 _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint QueueFamilyIndex
        {
            get => _internal.queueFamilyIndex;
            set
            {
                _internal.queueFamilyIndex = value;
            }
        }

        public uint QueueIndex
        {
            get => _internal.queueIndex;
            set
            {
                _internal.queueIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceQueueInfo2(DeviceQueueInfo2 d)
        {
            return d._internal;
        }

        public static implicit operator DeviceQueueInfo2(AdamantiumVulkan.Core.Interop.DeviceQueueInfo2 d)
        {
            return new DeviceQueueInfo2(d);
        }

    }

    public partial class ProtectedSubmitInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ProtectedSubmitInfo _internal;

        private GCHandleReference refpNext;

        public ProtectedSubmitInfo()
        {
        }

        public ProtectedSubmitInfo(AdamantiumVulkan.Core.Interop.ProtectedSubmitInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ProtectedSubmit
        {
            get => _internal.protectedSubmit;
            set
            {
                _internal.protectedSubmit = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ProtectedSubmitInfo(ProtectedSubmitInfo p)
        {
            return p._internal;
        }

        public static implicit operator ProtectedSubmitInfo(AdamantiumVulkan.Core.Interop.ProtectedSubmitInfo p)
        {
            return new ProtectedSubmitInfo(p);
        }

    }

    public partial class SamplerYcbcrConversionCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionCreateInfo _internal;

        private GCHandleReference refpNext;

        private ComponentMapping components;

        public SamplerYcbcrConversionCreateInfo()
        {
        }

        public SamplerYcbcrConversionCreateInfo(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public SamplerYcbcrModelConversion YcbcrModel
        {
            get => _internal.ycbcrModel;
            set
            {
                _internal.ycbcrModel = value;
            }
        }

        public SamplerYcbcrRange YcbcrRange
        {
            get => _internal.ycbcrRange;
            set
            {
                _internal.ycbcrRange = value;
            }
        }

        public ComponentMapping Components
        {
            get
            {
                if (components != null)
                {
                    return components;
                }
                components = _internal.components;
                return components;
            }
            set
            {
                components = value;
                _internal.components = value;
            }
        }

        public ChromaLocation XChromaOffset
        {
            get => _internal.xChromaOffset;
            set
            {
                _internal.xChromaOffset = value;
            }
        }

        public ChromaLocation YChromaOffset
        {
            get => _internal.yChromaOffset;
            set
            {
                _internal.yChromaOffset = value;
            }
        }

        public Filter ChromaFilter
        {
            get => _internal.chromaFilter;
            set
            {
                _internal.chromaFilter = value;
            }
        }

        public bool ForceExplicitReconstruction
        {
            get => _internal.forceExplicitReconstruction;
            set
            {
                _internal.forceExplicitReconstruction = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionCreateInfo(SamplerYcbcrConversionCreateInfo s)
        {
            if (s.Components != null)
            {
                s._internal.components = s.Components;
            }
            return s._internal;
        }

        public static implicit operator SamplerYcbcrConversionCreateInfo(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionCreateInfo s)
        {
            return new SamplerYcbcrConversionCreateInfo(s);
        }

    }

    public partial class SamplerYcbcrConversionInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionInfo _internal;

        private GCHandleReference refpNext;

        private SamplerYcbcrConversion conversion;

        public SamplerYcbcrConversionInfo()
        {
        }

        public SamplerYcbcrConversionInfo(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SamplerYcbcrConversion Conversion
        {
            get
            {
                if (conversion != null)
                {
                    return conversion;
                }
                conversion = _internal.conversion;
                return conversion;
            }
            set
            {
                conversion = value;
                _internal.conversion = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionInfo(SamplerYcbcrConversionInfo s)
        {
            if (s.Conversion != null)
            {
                s._internal.conversion = s.Conversion;
            }
            return s._internal;
        }

        public static implicit operator SamplerYcbcrConversionInfo(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionInfo s)
        {
            return new SamplerYcbcrConversionInfo(s);
        }

    }

    public partial class BindImagePlaneMemoryInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindImagePlaneMemoryInfo _internal;

        private GCHandleReference refpNext;

        public BindImagePlaneMemoryInfo()
        {
        }

        public BindImagePlaneMemoryInfo(AdamantiumVulkan.Core.Interop.BindImagePlaneMemoryInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ImageAspectFlagBits PlaneAspect
        {
            get => _internal.planeAspect;
            set
            {
                _internal.planeAspect = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindImagePlaneMemoryInfo(BindImagePlaneMemoryInfo b)
        {
            return b._internal;
        }

        public static implicit operator BindImagePlaneMemoryInfo(AdamantiumVulkan.Core.Interop.BindImagePlaneMemoryInfo b)
        {
            return new BindImagePlaneMemoryInfo(b);
        }

    }

    public partial class ImagePlaneMemoryRequirementsInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImagePlaneMemoryRequirementsInfo _internal;

        private GCHandleReference refpNext;

        public ImagePlaneMemoryRequirementsInfo()
        {
        }

        public ImagePlaneMemoryRequirementsInfo(AdamantiumVulkan.Core.Interop.ImagePlaneMemoryRequirementsInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ImageAspectFlagBits PlaneAspect
        {
            get => _internal.planeAspect;
            set
            {
                _internal.planeAspect = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImagePlaneMemoryRequirementsInfo(ImagePlaneMemoryRequirementsInfo i)
        {
            return i._internal;
        }

        public static implicit operator ImagePlaneMemoryRequirementsInfo(AdamantiumVulkan.Core.Interop.ImagePlaneMemoryRequirementsInfo i)
        {
            return new ImagePlaneMemoryRequirementsInfo(i);
        }

    }

    public partial class PhysicalDeviceSamplerYcbcrConversionFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerYcbcrConversionFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceSamplerYcbcrConversionFeatures()
        {
        }

        public PhysicalDeviceSamplerYcbcrConversionFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerYcbcrConversionFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool SamplerYcbcrConversion
        {
            get => _internal.samplerYcbcrConversion;
            set
            {
                _internal.samplerYcbcrConversion = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerYcbcrConversionFeatures(PhysicalDeviceSamplerYcbcrConversionFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSamplerYcbcrConversionFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerYcbcrConversionFeatures p)
        {
            return new PhysicalDeviceSamplerYcbcrConversionFeatures(p);
        }

    }

    public partial class SamplerYcbcrConversionImageFormatProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionImageFormatProperties _internal;

        private GCHandleReference refpNext;

        public SamplerYcbcrConversionImageFormatProperties()
        {
        }

        public SamplerYcbcrConversionImageFormatProperties(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionImageFormatProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint CombinedImageSamplerDescriptorCount
        {
            get => _internal.combinedImageSamplerDescriptorCount;
            set
            {
                _internal.combinedImageSamplerDescriptorCount = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionImageFormatProperties(SamplerYcbcrConversionImageFormatProperties s)
        {
            return s._internal;
        }

        public static implicit operator SamplerYcbcrConversionImageFormatProperties(AdamantiumVulkan.Core.Interop.SamplerYcbcrConversionImageFormatProperties s)
        {
            return new SamplerYcbcrConversionImageFormatProperties(s);
        }

    }

    public partial class DescriptorUpdateTemplateEntry
    {
        private AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry _internal;

        public DescriptorUpdateTemplateEntry()
        {
        }

        public DescriptorUpdateTemplateEntry(AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry _internal)
        {
            this._internal = _internal;
        }

        public uint DstBinding
        {
            get => _internal.dstBinding;
            set
            {
                _internal.dstBinding = value;
            }
        }

        public uint DstArrayElement
        {
            get => _internal.dstArrayElement;
            set
            {
                _internal.dstArrayElement = value;
            }
        }

        public uint DescriptorCount
        {
            get => _internal.descriptorCount;
            set
            {
                _internal.descriptorCount = value;
            }
        }

        public DescriptorType DescriptorType
        {
            get => _internal.descriptorType;
            set
            {
                _internal.descriptorType = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public ulong Stride
        {
            get => _internal.stride;
            set
            {
                _internal.stride = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry(DescriptorUpdateTemplateEntry d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorUpdateTemplateEntry(AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry d)
        {
            return new DescriptorUpdateTemplateEntry(d);
        }

    }

    public partial class DescriptorUpdateTemplateCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateCreateInfo _internal;

        private GCHandleReference refpNext;

        private StructReference refpDescriptorUpdateEntries;

        private DescriptorSetLayout descriptorSetLayout;

        private PipelineLayout pipelineLayout;

        public DescriptorUpdateTemplateCreateInfo()
        {
        }

        public DescriptorUpdateTemplateCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint DescriptorUpdateEntryCount
        {
            get => _internal.descriptorUpdateEntryCount;
            set
            {
                _internal.descriptorUpdateEntryCount = value;
            }
        }

        private DescriptorUpdateTemplateEntry pDescriptorUpdateEntries;
        public DescriptorUpdateTemplateEntry PDescriptorUpdateEntries
        {
            get
            {
                if(pDescriptorUpdateEntries != null)
                    return pDescriptorUpdateEntries;

                pDescriptorUpdateEntries = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry>(_internal.pDescriptorUpdateEntries);
                return pDescriptorUpdateEntries;
            }
            set
            {
                refpDescriptorUpdateEntries?.Dispose();
                AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateEntry tmp = value;
                refpDescriptorUpdateEntries = new StructReference(tmp);
                pDescriptorUpdateEntries = value;
                _internal.pDescriptorUpdateEntries = refpDescriptorUpdateEntries.Handle;
            }
        }

        public DescriptorUpdateTemplateType TemplateType
        {
            get => _internal.templateType;
            set
            {
                _internal.templateType = value;
            }
        }

        public DescriptorSetLayout DescriptorSetLayout
        {
            get
            {
                if (descriptorSetLayout != null)
                {
                    return descriptorSetLayout;
                }
                descriptorSetLayout = _internal.descriptorSetLayout;
                return descriptorSetLayout;
            }
            set
            {
                descriptorSetLayout = value;
                _internal.descriptorSetLayout = value;
            }
        }

        public PipelineBindPoint PipelineBindPoint
        {
            get => _internal.pipelineBindPoint;
            set
            {
                _internal.pipelineBindPoint = value;
            }
        }

        public PipelineLayout PipelineLayout
        {
            get
            {
                if (pipelineLayout != null)
                {
                    return pipelineLayout;
                }
                pipelineLayout = _internal.pipelineLayout;
                return pipelineLayout;
            }
            set
            {
                pipelineLayout = value;
                _internal.pipelineLayout = value;
            }
        }

        public uint Set
        {
            get => _internal.set;
            set
            {
                _internal.set = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDescriptorUpdateEntries?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateCreateInfo(DescriptorUpdateTemplateCreateInfo d)
        {
            if (d.DescriptorSetLayout != null)
            {
                d._internal.descriptorSetLayout = d.DescriptorSetLayout;
            }
            if (d.PipelineLayout != null)
            {
                d._internal.pipelineLayout = d.PipelineLayout;
            }
            return d._internal;
        }

        public static implicit operator DescriptorUpdateTemplateCreateInfo(AdamantiumVulkan.Core.Interop.DescriptorUpdateTemplateCreateInfo d)
        {
            return new DescriptorUpdateTemplateCreateInfo(d);
        }

    }

    public partial class ExternalMemoryProperties
    {
        private AdamantiumVulkan.Core.Interop.ExternalMemoryProperties _internal;

        public ExternalMemoryProperties()
        {
        }

        public ExternalMemoryProperties(AdamantiumVulkan.Core.Interop.ExternalMemoryProperties _internal)
        {
            this._internal = _internal;
        }

        public uint ExternalMemoryFeatures
        {
            get => _internal.externalMemoryFeatures;
            set
            {
                _internal.externalMemoryFeatures = value;
            }
        }

        public uint ExportFromImportedHandleTypes
        {
            get => _internal.exportFromImportedHandleTypes;
            set
            {
                _internal.exportFromImportedHandleTypes = value;
            }
        }

        public uint CompatibleHandleTypes
        {
            get => _internal.compatibleHandleTypes;
            set
            {
                _internal.compatibleHandleTypes = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalMemoryProperties(ExternalMemoryProperties e)
        {
            return e._internal;
        }

        public static implicit operator ExternalMemoryProperties(AdamantiumVulkan.Core.Interop.ExternalMemoryProperties e)
        {
            return new ExternalMemoryProperties(e);
        }

    }

    public partial class PhysicalDeviceExternalImageFormatInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalImageFormatInfo _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExternalImageFormatInfo()
        {
        }

        public PhysicalDeviceExternalImageFormatInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalImageFormatInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalImageFormatInfo(PhysicalDeviceExternalImageFormatInfo p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExternalImageFormatInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalImageFormatInfo p)
        {
            return new PhysicalDeviceExternalImageFormatInfo(p);
        }

    }

    public partial class ExternalImageFormatProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalImageFormatProperties _internal;

        private GCHandleReference refpNext;

        private ExternalMemoryProperties externalMemoryProperties;

        public ExternalImageFormatProperties()
        {
        }

        public ExternalImageFormatProperties(AdamantiumVulkan.Core.Interop.ExternalImageFormatProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryProperties ExternalMemoryProperties
        {
            get
            {
                if (externalMemoryProperties != null)
                {
                    return externalMemoryProperties;
                }
                externalMemoryProperties = _internal.externalMemoryProperties;
                return externalMemoryProperties;
            }
            set
            {
                externalMemoryProperties = value;
                _internal.externalMemoryProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalImageFormatProperties(ExternalImageFormatProperties e)
        {
            if (e.ExternalMemoryProperties != null)
            {
                e._internal.externalMemoryProperties = e.ExternalMemoryProperties;
            }
            return e._internal;
        }

        public static implicit operator ExternalImageFormatProperties(AdamantiumVulkan.Core.Interop.ExternalImageFormatProperties e)
        {
            return new ExternalImageFormatProperties(e);
        }

    }

    public partial class PhysicalDeviceExternalBufferInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalBufferInfo _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExternalBufferInfo()
        {
        }

        public PhysicalDeviceExternalBufferInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalBufferInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint Usage
        {
            get => _internal.usage;
            set
            {
                _internal.usage = value;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalBufferInfo(PhysicalDeviceExternalBufferInfo p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExternalBufferInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalBufferInfo p)
        {
            return new PhysicalDeviceExternalBufferInfo(p);
        }

    }

    public partial class ExternalBufferProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalBufferProperties _internal;

        private GCHandleReference refpNext;

        private ExternalMemoryProperties externalMemoryProperties;

        public ExternalBufferProperties()
        {
        }

        public ExternalBufferProperties(AdamantiumVulkan.Core.Interop.ExternalBufferProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryProperties ExternalMemoryProperties
        {
            get
            {
                if (externalMemoryProperties != null)
                {
                    return externalMemoryProperties;
                }
                externalMemoryProperties = _internal.externalMemoryProperties;
                return externalMemoryProperties;
            }
            set
            {
                externalMemoryProperties = value;
                _internal.externalMemoryProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalBufferProperties(ExternalBufferProperties e)
        {
            if (e.ExternalMemoryProperties != null)
            {
                e._internal.externalMemoryProperties = e.ExternalMemoryProperties;
            }
            return e._internal;
        }

        public static implicit operator ExternalBufferProperties(AdamantiumVulkan.Core.Interop.ExternalBufferProperties e)
        {
            return new ExternalBufferProperties(e);
        }

    }

    public partial class PhysicalDeviceIDProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceIDProperties _internal;

        private GCHandleReference refpNext;

        private string deviceUUID;

        private string driverUUID;

        private string deviceLUID;

        public PhysicalDeviceIDProperties()
        {
        }

        public PhysicalDeviceIDProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceIDProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public string DeviceUUID
        {
            get
            {
                if(deviceUUID != null)
                    return deviceUUID;

                var tmpArr = new byte[16];
                unsafe
                {
                    for(int i = 0; i < 16; ++i)
                    {
                        tmpArr[i] = _internal.deviceUUID[i];
                    }
                }
                deviceUUID = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return deviceUUID;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.deviceUUID[i] = inputArray[i];
                    }
                }
                deviceUUID = value;
            }
        }

        public string DriverUUID
        {
            get
            {
                if(driverUUID != null)
                    return driverUUID;

                var tmpArr = new byte[16];
                unsafe
                {
                    for(int i = 0; i < 16; ++i)
                    {
                        tmpArr[i] = _internal.driverUUID[i];
                    }
                }
                driverUUID = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return driverUUID;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.driverUUID[i] = inputArray[i];
                    }
                }
                driverUUID = value;
            }
        }

        public string DeviceLUID
        {
            get
            {
                if(deviceLUID != null)
                    return deviceLUID;

                var tmpArr = new byte[8];
                unsafe
                {
                    for(int i = 0; i < 8; ++i)
                    {
                        tmpArr[i] = _internal.deviceLUID[i];
                    }
                }
                deviceLUID = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return deviceLUID;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 8)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceLUID), "Array is out of bounds. Size should not be more than 8");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.deviceLUID[i] = inputArray[i];
                    }
                }
                deviceLUID = value;
            }
        }

        public uint DeviceNodeMask
        {
            get => _internal.deviceNodeMask;
            set
            {
                _internal.deviceNodeMask = value;
            }
        }

        public bool DeviceLUIDValid
        {
            get => _internal.deviceLUIDValid;
            set
            {
                _internal.deviceLUIDValid = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceIDProperties(PhysicalDeviceIDProperties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceIDProperties(AdamantiumVulkan.Core.Interop.PhysicalDeviceIDProperties p)
        {
            return new PhysicalDeviceIDProperties(p);
        }

    }

    public partial class ExternalMemoryImageCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfo _internal;

        private GCHandleReference refpNext;

        public ExternalMemoryImageCreateInfo()
        {
        }

        public ExternalMemoryImageCreateInfo(AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfo(ExternalMemoryImageCreateInfo e)
        {
            return e._internal;
        }

        public static implicit operator ExternalMemoryImageCreateInfo(AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfo e)
        {
            return new ExternalMemoryImageCreateInfo(e);
        }

    }

    public partial class ExternalMemoryBufferCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalMemoryBufferCreateInfo _internal;

        private GCHandleReference refpNext;

        public ExternalMemoryBufferCreateInfo()
        {
        }

        public ExternalMemoryBufferCreateInfo(AdamantiumVulkan.Core.Interop.ExternalMemoryBufferCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalMemoryBufferCreateInfo(ExternalMemoryBufferCreateInfo e)
        {
            return e._internal;
        }

        public static implicit operator ExternalMemoryBufferCreateInfo(AdamantiumVulkan.Core.Interop.ExternalMemoryBufferCreateInfo e)
        {
            return new ExternalMemoryBufferCreateInfo(e);
        }

    }

    public partial class ExportMemoryAllocateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfo _internal;

        private GCHandleReference refpNext;

        public ExportMemoryAllocateInfo()
        {
        }

        public ExportMemoryAllocateInfo(AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfo(ExportMemoryAllocateInfo e)
        {
            return e._internal;
        }

        public static implicit operator ExportMemoryAllocateInfo(AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfo e)
        {
            return new ExportMemoryAllocateInfo(e);
        }

    }

    public partial class PhysicalDeviceExternalFenceInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalFenceInfo _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExternalFenceInfo()
        {
        }

        public PhysicalDeviceExternalFenceInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalFenceInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalFenceHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalFenceInfo(PhysicalDeviceExternalFenceInfo p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExternalFenceInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalFenceInfo p)
        {
            return new PhysicalDeviceExternalFenceInfo(p);
        }

    }

    public partial class ExternalFenceProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalFenceProperties _internal;

        private GCHandleReference refpNext;

        public ExternalFenceProperties()
        {
        }

        public ExternalFenceProperties(AdamantiumVulkan.Core.Interop.ExternalFenceProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ExportFromImportedHandleTypes
        {
            get => _internal.exportFromImportedHandleTypes;
            set
            {
                _internal.exportFromImportedHandleTypes = value;
            }
        }

        public uint CompatibleHandleTypes
        {
            get => _internal.compatibleHandleTypes;
            set
            {
                _internal.compatibleHandleTypes = value;
            }
        }

        public uint ExternalFenceFeatures
        {
            get => _internal.externalFenceFeatures;
            set
            {
                _internal.externalFenceFeatures = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalFenceProperties(ExternalFenceProperties e)
        {
            return e._internal;
        }

        public static implicit operator ExternalFenceProperties(AdamantiumVulkan.Core.Interop.ExternalFenceProperties e)
        {
            return new ExternalFenceProperties(e);
        }

    }

    public partial class ExportFenceCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExportFenceCreateInfo _internal;

        private GCHandleReference refpNext;

        public ExportFenceCreateInfo()
        {
        }

        public ExportFenceCreateInfo(AdamantiumVulkan.Core.Interop.ExportFenceCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExportFenceCreateInfo(ExportFenceCreateInfo e)
        {
            return e._internal;
        }

        public static implicit operator ExportFenceCreateInfo(AdamantiumVulkan.Core.Interop.ExportFenceCreateInfo e)
        {
            return new ExportFenceCreateInfo(e);
        }

    }

    public partial class ExportSemaphoreCreateInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExportSemaphoreCreateInfo _internal;

        private GCHandleReference refpNext;

        public ExportSemaphoreCreateInfo()
        {
        }

        public ExportSemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.ExportSemaphoreCreateInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExportSemaphoreCreateInfo(ExportSemaphoreCreateInfo e)
        {
            return e._internal;
        }

        public static implicit operator ExportSemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.ExportSemaphoreCreateInfo e)
        {
            return new ExportSemaphoreCreateInfo(e);
        }

    }

    public partial class PhysicalDeviceExternalSemaphoreInfo : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalSemaphoreInfo _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExternalSemaphoreInfo()
        {
        }

        public PhysicalDeviceExternalSemaphoreInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalSemaphoreInfo _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalSemaphoreHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalSemaphoreInfo(PhysicalDeviceExternalSemaphoreInfo p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExternalSemaphoreInfo(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalSemaphoreInfo p)
        {
            return new PhysicalDeviceExternalSemaphoreInfo(p);
        }

    }

    public partial class ExternalSemaphoreProperties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalSemaphoreProperties _internal;

        private GCHandleReference refpNext;

        public ExternalSemaphoreProperties()
        {
        }

        public ExternalSemaphoreProperties(AdamantiumVulkan.Core.Interop.ExternalSemaphoreProperties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ExportFromImportedHandleTypes
        {
            get => _internal.exportFromImportedHandleTypes;
            set
            {
                _internal.exportFromImportedHandleTypes = value;
            }
        }

        public uint CompatibleHandleTypes
        {
            get => _internal.compatibleHandleTypes;
            set
            {
                _internal.compatibleHandleTypes = value;
            }
        }

        public uint ExternalSemaphoreFeatures
        {
            get => _internal.externalSemaphoreFeatures;
            set
            {
                _internal.externalSemaphoreFeatures = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalSemaphoreProperties(ExternalSemaphoreProperties e)
        {
            return e._internal;
        }

        public static implicit operator ExternalSemaphoreProperties(AdamantiumVulkan.Core.Interop.ExternalSemaphoreProperties e)
        {
            return new ExternalSemaphoreProperties(e);
        }

    }

    public partial class PhysicalDeviceMaintenance3Properties : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMaintenance3Properties _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMaintenance3Properties()
        {
        }

        public PhysicalDeviceMaintenance3Properties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMaintenance3Properties _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxPerSetDescriptors
        {
            get => _internal.maxPerSetDescriptors;
            set
            {
                _internal.maxPerSetDescriptors = value;
            }
        }

        public ulong MaxMemoryAllocationSize
        {
            get => _internal.maxMemoryAllocationSize;
            set
            {
                _internal.maxMemoryAllocationSize = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMaintenance3Properties(PhysicalDeviceMaintenance3Properties p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMaintenance3Properties(AdamantiumVulkan.Core.Interop.PhysicalDeviceMaintenance3Properties p)
        {
            return new PhysicalDeviceMaintenance3Properties(p);
        }

    }

    public partial class DescriptorSetLayoutSupport : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetLayoutSupport _internal;

        private GCHandleReference refpNext;

        public DescriptorSetLayoutSupport()
        {
        }

        public DescriptorSetLayoutSupport(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutSupport _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool Supported
        {
            get => _internal.supported;
            set
            {
                _internal.supported = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetLayoutSupport(DescriptorSetLayoutSupport d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetLayoutSupport(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutSupport d)
        {
            return new DescriptorSetLayoutSupport(d);
        }

    }

    public partial class PhysicalDeviceShaderDrawParameterFeatures : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderDrawParameterFeatures _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceShaderDrawParameterFeatures()
        {
        }

        public PhysicalDeviceShaderDrawParameterFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderDrawParameterFeatures _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShaderDrawParameters
        {
            get => _internal.shaderDrawParameters;
            set
            {
                _internal.shaderDrawParameters = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderDrawParameterFeatures(PhysicalDeviceShaderDrawParameterFeatures p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShaderDrawParameterFeatures(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderDrawParameterFeatures p)
        {
            return new PhysicalDeviceShaderDrawParameterFeatures(p);
        }

    }

    public partial class SurfaceCapabilitiesKHR
    {
        private AdamantiumVulkan.Core.Interop.SurfaceCapabilitiesKHR _internal;

        private Extent2D currentExtent;

        private Extent2D minImageExtent;

        private Extent2D maxImageExtent;

        public SurfaceCapabilitiesKHR()
        {
        }

        public SurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.SurfaceCapabilitiesKHR _internal)
        {
            this._internal = _internal;
        }

        public uint MinImageCount
        {
            get => _internal.minImageCount;
            set
            {
                _internal.minImageCount = value;
            }
        }

        public uint MaxImageCount
        {
            get => _internal.maxImageCount;
            set
            {
                _internal.maxImageCount = value;
            }
        }

        public Extent2D CurrentExtent
        {
            get
            {
                if (currentExtent != null)
                {
                    return currentExtent;
                }
                currentExtent = _internal.currentExtent;
                return currentExtent;
            }
            set
            {
                currentExtent = value;
                _internal.currentExtent = value;
            }
        }

        public Extent2D MinImageExtent
        {
            get
            {
                if (minImageExtent != null)
                {
                    return minImageExtent;
                }
                minImageExtent = _internal.minImageExtent;
                return minImageExtent;
            }
            set
            {
                minImageExtent = value;
                _internal.minImageExtent = value;
            }
        }

        public Extent2D MaxImageExtent
        {
            get
            {
                if (maxImageExtent != null)
                {
                    return maxImageExtent;
                }
                maxImageExtent = _internal.maxImageExtent;
                return maxImageExtent;
            }
            set
            {
                maxImageExtent = value;
                _internal.maxImageExtent = value;
            }
        }

        public uint MaxImageArrayLayers
        {
            get => _internal.maxImageArrayLayers;
            set
            {
                _internal.maxImageArrayLayers = value;
            }
        }

        public uint SupportedTransforms
        {
            get => _internal.supportedTransforms;
            set
            {
                _internal.supportedTransforms = value;
            }
        }

        public SurfaceTransformFlagBitsKHR CurrentTransform
        {
            get => _internal.currentTransform;
            set
            {
                _internal.currentTransform = value;
            }
        }

        public uint SupportedCompositeAlpha
        {
            get => _internal.supportedCompositeAlpha;
            set
            {
                _internal.supportedCompositeAlpha = value;
            }
        }

        public uint SupportedUsageFlags
        {
            get => _internal.supportedUsageFlags;
            set
            {
                _internal.supportedUsageFlags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SurfaceCapabilitiesKHR(SurfaceCapabilitiesKHR s)
        {
            if (s.CurrentExtent != null)
            {
                s._internal.currentExtent = s.CurrentExtent;
            }
            if (s.MinImageExtent != null)
            {
                s._internal.minImageExtent = s.MinImageExtent;
            }
            if (s.MaxImageExtent != null)
            {
                s._internal.maxImageExtent = s.MaxImageExtent;
            }
            return s._internal;
        }

        public static implicit operator SurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.SurfaceCapabilitiesKHR s)
        {
            return new SurfaceCapabilitiesKHR(s);
        }

    }

    public partial class SurfaceFormatKHR
    {
        private AdamantiumVulkan.Core.Interop.SurfaceFormatKHR _internal;

        public SurfaceFormatKHR()
        {
        }

        public SurfaceFormatKHR(AdamantiumVulkan.Core.Interop.SurfaceFormatKHR _internal)
        {
            this._internal = _internal;
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public ColorSpaceKHR ColorSpace
        {
            get => _internal.colorSpace;
            set
            {
                _internal.colorSpace = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SurfaceFormatKHR(SurfaceFormatKHR s)
        {
            return s._internal;
        }

        public static implicit operator SurfaceFormatKHR(AdamantiumVulkan.Core.Interop.SurfaceFormatKHR s)
        {
            return new SurfaceFormatKHR(s);
        }

    }

    public partial class SwapchainCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SwapchainCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        private SurfaceKHR surface;

        private Extent2D imageExtent;

        private GCHandleReference refpQueueFamilyIndices;

        private SwapchainKHR oldSwapchain;

        public SwapchainCreateInfoKHR()
        {
        }

        public SwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.SwapchainCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public SurfaceKHR Surface
        {
            get
            {
                if (surface != null)
                {
                    return surface;
                }
                surface = _internal.surface;
                return surface;
            }
            set
            {
                surface = value;
                _internal.surface = value;
            }
        }

        public uint MinImageCount
        {
            get => _internal.minImageCount;
            set
            {
                _internal.minImageCount = value;
            }
        }

        public Format ImageFormat
        {
            get => _internal.imageFormat;
            set
            {
                _internal.imageFormat = value;
            }
        }

        public ColorSpaceKHR ImageColorSpace
        {
            get => _internal.imageColorSpace;
            set
            {
                _internal.imageColorSpace = value;
            }
        }

        public Extent2D ImageExtent
        {
            get
            {
                if (imageExtent != null)
                {
                    return imageExtent;
                }
                imageExtent = _internal.imageExtent;
                return imageExtent;
            }
            set
            {
                imageExtent = value;
                _internal.imageExtent = value;
            }
        }

        public uint ImageArrayLayers
        {
            get => _internal.imageArrayLayers;
            set
            {
                _internal.imageArrayLayers = value;
            }
        }

        public uint ImageUsage
        {
            get => _internal.imageUsage;
            set
            {
                _internal.imageUsage = value;
            }
        }

        public SharingMode ImageSharingMode
        {
            get => _internal.imageSharingMode;
            set
            {
                _internal.imageSharingMode = value;
            }
        }

        public uint QueueFamilyIndexCount
        {
            get => _internal.queueFamilyIndexCount;
            set
            {
                _internal.queueFamilyIndexCount = value;
            }
        }

        private uint[] pQueueFamilyIndices;
        public uint[] PQueueFamilyIndices
        {
            get
            {
                if(pQueueFamilyIndices != null)
                    return pQueueFamilyIndices;

                pQueueFamilyIndices = new uint[_internal.queueFamilyIndexCount];
                MarshalUtils.IntPtrToManagedArray<uint>(_internal.pQueueFamilyIndices, pQueueFamilyIndices);
                return pQueueFamilyIndices;
            }
            set
            {
                refpQueueFamilyIndices?.Dispose();
                var tmpArray = new uint[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpQueueFamilyIndices = new GCHandleReference(tmpArray);
                pQueueFamilyIndices = value;
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
        }

        public SurfaceTransformFlagBitsKHR PreTransform
        {
            get => _internal.preTransform;
            set
            {
                _internal.preTransform = value;
            }
        }

        public CompositeAlphaFlagBitsKHR CompositeAlpha
        {
            get => _internal.compositeAlpha;
            set
            {
                _internal.compositeAlpha = value;
            }
        }

        public PresentModeKHR PresentMode
        {
            get => _internal.presentMode;
            set
            {
                _internal.presentMode = value;
            }
        }

        public bool Clipped
        {
            get => _internal.clipped;
            set
            {
                _internal.clipped = value;
            }
        }

        public SwapchainKHR OldSwapchain
        {
            get
            {
                if (oldSwapchain != null)
                {
                    return oldSwapchain;
                }
                oldSwapchain = _internal.oldSwapchain;
                return oldSwapchain;
            }
            set
            {
                oldSwapchain = value;
                _internal.oldSwapchain = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueueFamilyIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SwapchainCreateInfoKHR(SwapchainCreateInfoKHR s)
        {
            if (s.Surface != null)
            {
                s._internal.surface = s.Surface;
            }
            if (s.ImageExtent != null)
            {
                s._internal.imageExtent = s.ImageExtent;
            }
            if (s.OldSwapchain != null)
            {
                s._internal.oldSwapchain = s.OldSwapchain;
            }
            return s._internal;
        }

        public static implicit operator SwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.SwapchainCreateInfoKHR s)
        {
            return new SwapchainCreateInfoKHR(s);
        }

    }

    public partial class PresentInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PresentInfoKHR _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpWaitSemaphores;

        private GCHandleReference refpSwapchains;

        private StructReference refpImageIndices;

        private StructReference refpResults;

        public PresentInfoKHR()
        {
        }

        public PresentInfoKHR(AdamantiumVulkan.Core.Interop.PresentInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint WaitSemaphoreCount
        {
            get => _internal.waitSemaphoreCount;
            set
            {
                _internal.waitSemaphoreCount = value;
            }
        }

        private Semaphore[] pWaitSemaphores;
        public Semaphore[] PWaitSemaphores
        {
            get
            {
                if(pWaitSemaphores != null)
                    return pWaitSemaphores;

                pWaitSemaphores = new Semaphore[_internal.waitSemaphoreCount];
                MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pWaitSemaphores, pWaitSemaphores);
                return pWaitSemaphores;
            }
            set
            {
                refpWaitSemaphores?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.Semaphore_T[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpWaitSemaphores = new GCHandleReference(tmpArray);
                pWaitSemaphores = value;
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
        }

        public uint SwapchainCount
        {
            get => _internal.swapchainCount;
            set
            {
                _internal.swapchainCount = value;
            }
        }

        private SwapchainKHR[] pSwapchains;
        public SwapchainKHR[] PSwapchains
        {
            get
            {
                if(pSwapchains != null)
                    return pSwapchains;

                pSwapchains = new SwapchainKHR[_internal.swapchainCount];
                MarshalUtils.IntPtrToManagedArray<SwapchainKHR>(_internal.pSwapchains, pSwapchains);
                return pSwapchains;
            }
            set
            {
                refpSwapchains?.Dispose();
                var tmpArray = new AdamantiumVulkan.Core.Interop.SwapchainKHR_T[value.Length];
                for (int i = 0; i < value.Length; ++i)
                {
                    tmpArray[i] = value[i];
                }
                refpSwapchains = new GCHandleReference(tmpArray);
                pSwapchains = value;
                _internal.pSwapchains = refpSwapchains.Handle;
            }
        }

        public uint PImageIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pImageIndices);
            }
            set
            {
                refpImageIndices?.Dispose();
                refpImageIndices = new StructReference(value);
                _internal.pImageIndices = refpImageIndices.Handle;
            }
        }

        private Result pResults;
        public Result PResults
        {
            get
            {
                pResults = Marshal.PtrToStructure<Result>(_internal.pResults);
                return pResults;
            }
            set
            {
                refpResults?.Dispose();
                refpResults = new StructReference(value);
                pResults = value;
                _internal.pResults = refpResults.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpWaitSemaphores?.Dispose();
            refpSwapchains?.Dispose();
            refpImageIndices?.Dispose();
            refpResults?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PresentInfoKHR(PresentInfoKHR p)
        {
            return p._internal;
        }

        public static implicit operator PresentInfoKHR(AdamantiumVulkan.Core.Interop.PresentInfoKHR p)
        {
            return new PresentInfoKHR(p);
        }

    }

    public partial class ImageSwapchainCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageSwapchainCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        private SwapchainKHR swapchain;

        public ImageSwapchainCreateInfoKHR()
        {
        }

        public ImageSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.ImageSwapchainCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SwapchainKHR Swapchain
        {
            get
            {
                if (swapchain != null)
                {
                    return swapchain;
                }
                swapchain = _internal.swapchain;
                return swapchain;
            }
            set
            {
                swapchain = value;
                _internal.swapchain = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageSwapchainCreateInfoKHR(ImageSwapchainCreateInfoKHR i)
        {
            if (i.Swapchain != null)
            {
                i._internal.swapchain = i.Swapchain;
            }
            return i._internal;
        }

        public static implicit operator ImageSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.ImageSwapchainCreateInfoKHR i)
        {
            return new ImageSwapchainCreateInfoKHR(i);
        }

    }

    public partial class BindImageMemorySwapchainInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindImageMemorySwapchainInfoKHR _internal;

        private GCHandleReference refpNext;

        private SwapchainKHR swapchain;

        public BindImageMemorySwapchainInfoKHR()
        {
        }

        public BindImageMemorySwapchainInfoKHR(AdamantiumVulkan.Core.Interop.BindImageMemorySwapchainInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SwapchainKHR Swapchain
        {
            get
            {
                if (swapchain != null)
                {
                    return swapchain;
                }
                swapchain = _internal.swapchain;
                return swapchain;
            }
            set
            {
                swapchain = value;
                _internal.swapchain = value;
            }
        }

        public uint ImageIndex
        {
            get => _internal.imageIndex;
            set
            {
                _internal.imageIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindImageMemorySwapchainInfoKHR(BindImageMemorySwapchainInfoKHR b)
        {
            if (b.Swapchain != null)
            {
                b._internal.swapchain = b.Swapchain;
            }
            return b._internal;
        }

        public static implicit operator BindImageMemorySwapchainInfoKHR(AdamantiumVulkan.Core.Interop.BindImageMemorySwapchainInfoKHR b)
        {
            return new BindImageMemorySwapchainInfoKHR(b);
        }

    }

    public partial class AcquireNextImageInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AcquireNextImageInfoKHR _internal;

        private GCHandleReference refpNext;

        private SwapchainKHR swapchain;

        private Semaphore semaphore;

        private Fence fence;

        public AcquireNextImageInfoKHR()
        {
        }

        public AcquireNextImageInfoKHR(AdamantiumVulkan.Core.Interop.AcquireNextImageInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SwapchainKHR Swapchain
        {
            get
            {
                if (swapchain != null)
                {
                    return swapchain;
                }
                swapchain = _internal.swapchain;
                return swapchain;
            }
            set
            {
                swapchain = value;
                _internal.swapchain = value;
            }
        }

        public ulong Timeout
        {
            get => _internal.timeout;
            set
            {
                _internal.timeout = value;
            }
        }

        public Semaphore Semaphore
        {
            get
            {
                if (semaphore != null)
                {
                    return semaphore;
                }
                semaphore = _internal.semaphore;
                return semaphore;
            }
            set
            {
                semaphore = value;
                _internal.semaphore = value;
            }
        }

        public Fence Fence
        {
            get
            {
                if (fence != null)
                {
                    return fence;
                }
                fence = _internal.fence;
                return fence;
            }
            set
            {
                fence = value;
                _internal.fence = value;
            }
        }

        public uint DeviceMask
        {
            get => _internal.deviceMask;
            set
            {
                _internal.deviceMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AcquireNextImageInfoKHR(AcquireNextImageInfoKHR a)
        {
            if (a.Swapchain != null)
            {
                a._internal.swapchain = a.Swapchain;
            }
            if (a.Semaphore != null)
            {
                a._internal.semaphore = a.Semaphore;
            }
            if (a.Fence != null)
            {
                a._internal.fence = a.Fence;
            }
            return a._internal;
        }

        public static implicit operator AcquireNextImageInfoKHR(AdamantiumVulkan.Core.Interop.AcquireNextImageInfoKHR a)
        {
            return new AcquireNextImageInfoKHR(a);
        }

    }

    public partial class DeviceGroupPresentCapabilitiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupPresentCapabilitiesKHR _internal;

        private GCHandleReference refpNext;

        private uint[] presentMask;

        public DeviceGroupPresentCapabilitiesKHR()
        {
        }

        public DeviceGroupPresentCapabilitiesKHR(AdamantiumVulkan.Core.Interop.DeviceGroupPresentCapabilitiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint[] PresentMask
        {
            get
            {
                if(presentMask != null)
                    return presentMask;

                var tmpArr = new uint[32];
                unsafe
                {
                    for(int i = 0; i < 32; ++i)
                    {
                        tmpArr[i] = _internal.presentMask[i];
                    }
                }
                presentMask = tmpArr;
                return presentMask;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(PresentMask), "Array is out of bounds. Size should not be more than 32");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.presentMask[i] = value[i];
                    }
                }
                presentMask = value;
            }
        }

        public uint Modes
        {
            get => _internal.modes;
            set
            {
                _internal.modes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupPresentCapabilitiesKHR(DeviceGroupPresentCapabilitiesKHR d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupPresentCapabilitiesKHR(AdamantiumVulkan.Core.Interop.DeviceGroupPresentCapabilitiesKHR d)
        {
            return new DeviceGroupPresentCapabilitiesKHR(d);
        }

    }

    public partial class DeviceGroupPresentInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupPresentInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpDeviceMasks;

        public DeviceGroupPresentInfoKHR()
        {
        }

        public DeviceGroupPresentInfoKHR(AdamantiumVulkan.Core.Interop.DeviceGroupPresentInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SwapchainCount
        {
            get => _internal.swapchainCount;
            set
            {
                _internal.swapchainCount = value;
            }
        }

        public uint PDeviceMasks
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pDeviceMasks);
            }
            set
            {
                refpDeviceMasks?.Dispose();
                refpDeviceMasks = new StructReference(value);
                _internal.pDeviceMasks = refpDeviceMasks.Handle;
            }
        }

        public DeviceGroupPresentModeFlagBitsKHR Mode
        {
            get => _internal.mode;
            set
            {
                _internal.mode = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDeviceMasks?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupPresentInfoKHR(DeviceGroupPresentInfoKHR d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupPresentInfoKHR(AdamantiumVulkan.Core.Interop.DeviceGroupPresentInfoKHR d)
        {
            return new DeviceGroupPresentInfoKHR(d);
        }

    }

    public partial class DeviceGroupSwapchainCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGroupSwapchainCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        public DeviceGroupSwapchainCreateInfoKHR()
        {
        }

        public DeviceGroupSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.DeviceGroupSwapchainCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Modes
        {
            get => _internal.modes;
            set
            {
                _internal.modes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGroupSwapchainCreateInfoKHR(DeviceGroupSwapchainCreateInfoKHR d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGroupSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.DeviceGroupSwapchainCreateInfoKHR d)
        {
            return new DeviceGroupSwapchainCreateInfoKHR(d);
        }

    }

    public partial class DisplayPropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPropertiesKHR _internal;

        private DisplayKHR display;

        private StringReference refdisplayName;

        private Extent2D physicalDimensions;

        private Extent2D physicalResolution;

        public DisplayPropertiesKHR()
        {
        }

        public DisplayPropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayPropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public DisplayKHR Display
        {
            get
            {
                if (display != null)
                {
                    return display;
                }
                display = _internal.display;
                return display;
            }
            set
            {
                display = value;
                _internal.display = value;
            }
        }

        private string displayName;
        public string DisplayName
        {
            get
            {
                if(displayName != null)
                    return displayName;

                displayName = Marshal.PtrToStringAnsi(_internal.displayName);
                return displayName;
            }
            set
            {
                refdisplayName?.Dispose();
                refdisplayName = new StringReference(value, false);
                displayName = value;
                _internal.displayName = refdisplayName.Handle;
            }
        }

        public Extent2D PhysicalDimensions
        {
            get
            {
                if (physicalDimensions != null)
                {
                    return physicalDimensions;
                }
                physicalDimensions = _internal.physicalDimensions;
                return physicalDimensions;
            }
            set
            {
                physicalDimensions = value;
                _internal.physicalDimensions = value;
            }
        }

        public Extent2D PhysicalResolution
        {
            get
            {
                if (physicalResolution != null)
                {
                    return physicalResolution;
                }
                physicalResolution = _internal.physicalResolution;
                return physicalResolution;
            }
            set
            {
                physicalResolution = value;
                _internal.physicalResolution = value;
            }
        }

        public uint SupportedTransforms
        {
            get => _internal.supportedTransforms;
            set
            {
                _internal.supportedTransforms = value;
            }
        }

        public bool PlaneReorderPossible
        {
            get => _internal.planeReorderPossible;
            set
            {
                _internal.planeReorderPossible = value;
            }
        }

        public bool PersistentContent
        {
            get => _internal.persistentContent;
            set
            {
                _internal.persistentContent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdisplayName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPropertiesKHR(DisplayPropertiesKHR d)
        {
            if (d.Display != null)
            {
                d._internal.display = d.Display;
            }
            if (d.PhysicalDimensions != null)
            {
                d._internal.physicalDimensions = d.PhysicalDimensions;
            }
            if (d.PhysicalResolution != null)
            {
                d._internal.physicalResolution = d.PhysicalResolution;
            }
            return d._internal;
        }

        public static implicit operator DisplayPropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayPropertiesKHR d)
        {
            return new DisplayPropertiesKHR(d);
        }

    }

    public partial class DisplayModeParametersKHR
    {
        private AdamantiumVulkan.Core.Interop.DisplayModeParametersKHR _internal;

        private Extent2D visibleRegion;

        public DisplayModeParametersKHR()
        {
        }

        public DisplayModeParametersKHR(AdamantiumVulkan.Core.Interop.DisplayModeParametersKHR _internal)
        {
            this._internal = _internal;
        }

        public Extent2D VisibleRegion
        {
            get
            {
                if (visibleRegion != null)
                {
                    return visibleRegion;
                }
                visibleRegion = _internal.visibleRegion;
                return visibleRegion;
            }
            set
            {
                visibleRegion = value;
                _internal.visibleRegion = value;
            }
        }

        public uint RefreshRate
        {
            get => _internal.refreshRate;
            set
            {
                _internal.refreshRate = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayModeParametersKHR(DisplayModeParametersKHR d)
        {
            if (d.VisibleRegion != null)
            {
                d._internal.visibleRegion = d.VisibleRegion;
            }
            return d._internal;
        }

        public static implicit operator DisplayModeParametersKHR(AdamantiumVulkan.Core.Interop.DisplayModeParametersKHR d)
        {
            return new DisplayModeParametersKHR(d);
        }

    }

    public partial class DisplayModePropertiesKHR
    {
        private AdamantiumVulkan.Core.Interop.DisplayModePropertiesKHR _internal;

        private DisplayModeKHR displayMode;

        private DisplayModeParametersKHR parameters;

        public DisplayModePropertiesKHR()
        {
        }

        public DisplayModePropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayModePropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public DisplayModeKHR DisplayMode
        {
            get
            {
                if (displayMode != null)
                {
                    return displayMode;
                }
                displayMode = _internal.displayMode;
                return displayMode;
            }
            set
            {
                displayMode = value;
                _internal.displayMode = value;
            }
        }

        public DisplayModeParametersKHR Parameters
        {
            get
            {
                if (parameters != null)
                {
                    return parameters;
                }
                parameters = _internal.parameters;
                return parameters;
            }
            set
            {
                parameters = value;
                _internal.parameters = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayModePropertiesKHR(DisplayModePropertiesKHR d)
        {
            if (d.DisplayMode != null)
            {
                d._internal.displayMode = d.DisplayMode;
            }
            if (d.Parameters != null)
            {
                d._internal.parameters = d.Parameters;
            }
            return d._internal;
        }

        public static implicit operator DisplayModePropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayModePropertiesKHR d)
        {
            return new DisplayModePropertiesKHR(d);
        }

    }

    public partial class DisplayModeCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayModeCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        private DisplayModeParametersKHR parameters;

        public DisplayModeCreateInfoKHR()
        {
        }

        public DisplayModeCreateInfoKHR(AdamantiumVulkan.Core.Interop.DisplayModeCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public DisplayModeParametersKHR Parameters
        {
            get
            {
                if (parameters != null)
                {
                    return parameters;
                }
                parameters = _internal.parameters;
                return parameters;
            }
            set
            {
                parameters = value;
                _internal.parameters = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayModeCreateInfoKHR(DisplayModeCreateInfoKHR d)
        {
            if (d.Parameters != null)
            {
                d._internal.parameters = d.Parameters;
            }
            return d._internal;
        }

        public static implicit operator DisplayModeCreateInfoKHR(AdamantiumVulkan.Core.Interop.DisplayModeCreateInfoKHR d)
        {
            return new DisplayModeCreateInfoKHR(d);
        }

    }

    public partial class DisplayPlaneCapabilitiesKHR
    {
        private AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilitiesKHR _internal;

        private Offset2D minSrcPosition;

        private Offset2D maxSrcPosition;

        private Extent2D minSrcExtent;

        private Extent2D maxSrcExtent;

        private Offset2D minDstPosition;

        private Offset2D maxDstPosition;

        private Extent2D minDstExtent;

        private Extent2D maxDstExtent;

        public DisplayPlaneCapabilitiesKHR()
        {
        }

        public DisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilitiesKHR _internal)
        {
            this._internal = _internal;
        }

        public uint SupportedAlpha
        {
            get => _internal.supportedAlpha;
            set
            {
                _internal.supportedAlpha = value;
            }
        }

        public Offset2D MinSrcPosition
        {
            get
            {
                if (minSrcPosition != null)
                {
                    return minSrcPosition;
                }
                minSrcPosition = _internal.minSrcPosition;
                return minSrcPosition;
            }
            set
            {
                minSrcPosition = value;
                _internal.minSrcPosition = value;
            }
        }

        public Offset2D MaxSrcPosition
        {
            get
            {
                if (maxSrcPosition != null)
                {
                    return maxSrcPosition;
                }
                maxSrcPosition = _internal.maxSrcPosition;
                return maxSrcPosition;
            }
            set
            {
                maxSrcPosition = value;
                _internal.maxSrcPosition = value;
            }
        }

        public Extent2D MinSrcExtent
        {
            get
            {
                if (minSrcExtent != null)
                {
                    return minSrcExtent;
                }
                minSrcExtent = _internal.minSrcExtent;
                return minSrcExtent;
            }
            set
            {
                minSrcExtent = value;
                _internal.minSrcExtent = value;
            }
        }

        public Extent2D MaxSrcExtent
        {
            get
            {
                if (maxSrcExtent != null)
                {
                    return maxSrcExtent;
                }
                maxSrcExtent = _internal.maxSrcExtent;
                return maxSrcExtent;
            }
            set
            {
                maxSrcExtent = value;
                _internal.maxSrcExtent = value;
            }
        }

        public Offset2D MinDstPosition
        {
            get
            {
                if (minDstPosition != null)
                {
                    return minDstPosition;
                }
                minDstPosition = _internal.minDstPosition;
                return minDstPosition;
            }
            set
            {
                minDstPosition = value;
                _internal.minDstPosition = value;
            }
        }

        public Offset2D MaxDstPosition
        {
            get
            {
                if (maxDstPosition != null)
                {
                    return maxDstPosition;
                }
                maxDstPosition = _internal.maxDstPosition;
                return maxDstPosition;
            }
            set
            {
                maxDstPosition = value;
                _internal.maxDstPosition = value;
            }
        }

        public Extent2D MinDstExtent
        {
            get
            {
                if (minDstExtent != null)
                {
                    return minDstExtent;
                }
                minDstExtent = _internal.minDstExtent;
                return minDstExtent;
            }
            set
            {
                minDstExtent = value;
                _internal.minDstExtent = value;
            }
        }

        public Extent2D MaxDstExtent
        {
            get
            {
                if (maxDstExtent != null)
                {
                    return maxDstExtent;
                }
                maxDstExtent = _internal.maxDstExtent;
                return maxDstExtent;
            }
            set
            {
                maxDstExtent = value;
                _internal.maxDstExtent = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilitiesKHR(DisplayPlaneCapabilitiesKHR d)
        {
            if (d.MinSrcPosition != null)
            {
                d._internal.minSrcPosition = d.MinSrcPosition;
            }
            if (d.MaxSrcPosition != null)
            {
                d._internal.maxSrcPosition = d.MaxSrcPosition;
            }
            if (d.MinSrcExtent != null)
            {
                d._internal.minSrcExtent = d.MinSrcExtent;
            }
            if (d.MaxSrcExtent != null)
            {
                d._internal.maxSrcExtent = d.MaxSrcExtent;
            }
            if (d.MinDstPosition != null)
            {
                d._internal.minDstPosition = d.MinDstPosition;
            }
            if (d.MaxDstPosition != null)
            {
                d._internal.maxDstPosition = d.MaxDstPosition;
            }
            if (d.MinDstExtent != null)
            {
                d._internal.minDstExtent = d.MinDstExtent;
            }
            if (d.MaxDstExtent != null)
            {
                d._internal.maxDstExtent = d.MaxDstExtent;
            }
            return d._internal;
        }

        public static implicit operator DisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilitiesKHR d)
        {
            return new DisplayPlaneCapabilitiesKHR(d);
        }

    }

    public partial class DisplayPlanePropertiesKHR
    {
        private AdamantiumVulkan.Core.Interop.DisplayPlanePropertiesKHR _internal;

        private DisplayKHR currentDisplay;

        public DisplayPlanePropertiesKHR()
        {
        }

        public DisplayPlanePropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayPlanePropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public DisplayKHR CurrentDisplay
        {
            get
            {
                if (currentDisplay != null)
                {
                    return currentDisplay;
                }
                currentDisplay = _internal.currentDisplay;
                return currentDisplay;
            }
            set
            {
                currentDisplay = value;
                _internal.currentDisplay = value;
            }
        }

        public uint CurrentStackIndex
        {
            get => _internal.currentStackIndex;
            set
            {
                _internal.currentStackIndex = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPlanePropertiesKHR(DisplayPlanePropertiesKHR d)
        {
            if (d.CurrentDisplay != null)
            {
                d._internal.currentDisplay = d.CurrentDisplay;
            }
            return d._internal;
        }

        public static implicit operator DisplayPlanePropertiesKHR(AdamantiumVulkan.Core.Interop.DisplayPlanePropertiesKHR d)
        {
            return new DisplayPlanePropertiesKHR(d);
        }

    }

    public partial class DisplaySurfaceCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplaySurfaceCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        private DisplayModeKHR displayMode;

        private Extent2D imageExtent;

        public DisplaySurfaceCreateInfoKHR()
        {
        }

        public DisplaySurfaceCreateInfoKHR(AdamantiumVulkan.Core.Interop.DisplaySurfaceCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public DisplayModeKHR DisplayMode
        {
            get
            {
                if (displayMode != null)
                {
                    return displayMode;
                }
                displayMode = _internal.displayMode;
                return displayMode;
            }
            set
            {
                displayMode = value;
                _internal.displayMode = value;
            }
        }

        public uint PlaneIndex
        {
            get => _internal.planeIndex;
            set
            {
                _internal.planeIndex = value;
            }
        }

        public uint PlaneStackIndex
        {
            get => _internal.planeStackIndex;
            set
            {
                _internal.planeStackIndex = value;
            }
        }

        public SurfaceTransformFlagBitsKHR Transform
        {
            get => _internal.transform;
            set
            {
                _internal.transform = value;
            }
        }

        public float GlobalAlpha
        {
            get => _internal.globalAlpha;
            set
            {
                _internal.globalAlpha = value;
            }
        }

        public DisplayPlaneAlphaFlagBitsKHR AlphaMode
        {
            get => _internal.alphaMode;
            set
            {
                _internal.alphaMode = value;
            }
        }

        public Extent2D ImageExtent
        {
            get
            {
                if (imageExtent != null)
                {
                    return imageExtent;
                }
                imageExtent = _internal.imageExtent;
                return imageExtent;
            }
            set
            {
                imageExtent = value;
                _internal.imageExtent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplaySurfaceCreateInfoKHR(DisplaySurfaceCreateInfoKHR d)
        {
            if (d.DisplayMode != null)
            {
                d._internal.displayMode = d.DisplayMode;
            }
            if (d.ImageExtent != null)
            {
                d._internal.imageExtent = d.ImageExtent;
            }
            return d._internal;
        }

        public static implicit operator DisplaySurfaceCreateInfoKHR(AdamantiumVulkan.Core.Interop.DisplaySurfaceCreateInfoKHR d)
        {
            return new DisplaySurfaceCreateInfoKHR(d);
        }

    }

    public partial class DisplayPresentInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPresentInfoKHR _internal;

        private GCHandleReference refpNext;

        private Rect2D srcRect;

        private Rect2D dstRect;

        public DisplayPresentInfoKHR()
        {
        }

        public DisplayPresentInfoKHR(AdamantiumVulkan.Core.Interop.DisplayPresentInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Rect2D SrcRect
        {
            get
            {
                if (srcRect != null)
                {
                    return srcRect;
                }
                srcRect = _internal.srcRect;
                return srcRect;
            }
            set
            {
                srcRect = value;
                _internal.srcRect = value;
            }
        }

        public Rect2D DstRect
        {
            get
            {
                if (dstRect != null)
                {
                    return dstRect;
                }
                dstRect = _internal.dstRect;
                return dstRect;
            }
            set
            {
                dstRect = value;
                _internal.dstRect = value;
            }
        }

        public bool Persistent
        {
            get => _internal.persistent;
            set
            {
                _internal.persistent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPresentInfoKHR(DisplayPresentInfoKHR d)
        {
            if (d.SrcRect != null)
            {
                d._internal.srcRect = d.SrcRect;
            }
            if (d.DstRect != null)
            {
                d._internal.dstRect = d.DstRect;
            }
            return d._internal;
        }

        public static implicit operator DisplayPresentInfoKHR(AdamantiumVulkan.Core.Interop.DisplayPresentInfoKHR d)
        {
            return new DisplayPresentInfoKHR(d);
        }

    }

    public partial class ImportMemoryFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImportMemoryFdInfoKHR _internal;

        private GCHandleReference refpNext;

        public ImportMemoryFdInfoKHR()
        {
        }

        public ImportMemoryFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportMemoryFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public int Fd
        {
            get => _internal.fd;
            set
            {
                _internal.fd = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImportMemoryFdInfoKHR(ImportMemoryFdInfoKHR i)
        {
            return i._internal;
        }

        public static implicit operator ImportMemoryFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportMemoryFdInfoKHR i)
        {
            return new ImportMemoryFdInfoKHR(i);
        }

    }

    public partial class MemoryFdPropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryFdPropertiesKHR _internal;

        private GCHandleReference refpNext;

        public MemoryFdPropertiesKHR()
        {
        }

        public MemoryFdPropertiesKHR(AdamantiumVulkan.Core.Interop.MemoryFdPropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MemoryTypeBits
        {
            get => _internal.memoryTypeBits;
            set
            {
                _internal.memoryTypeBits = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryFdPropertiesKHR(MemoryFdPropertiesKHR m)
        {
            return m._internal;
        }

        public static implicit operator MemoryFdPropertiesKHR(AdamantiumVulkan.Core.Interop.MemoryFdPropertiesKHR m)
        {
            return new MemoryFdPropertiesKHR(m);
        }

    }

    public partial class MemoryGetFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryGetFdInfoKHR _internal;

        private GCHandleReference refpNext;

        private DeviceMemory memory;

        public MemoryGetFdInfoKHR()
        {
        }

        public MemoryGetFdInfoKHR(AdamantiumVulkan.Core.Interop.MemoryGetFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryGetFdInfoKHR(MemoryGetFdInfoKHR m)
        {
            if (m.Memory != null)
            {
                m._internal.memory = m.Memory;
            }
            return m._internal;
        }

        public static implicit operator MemoryGetFdInfoKHR(AdamantiumVulkan.Core.Interop.MemoryGetFdInfoKHR m)
        {
            return new MemoryGetFdInfoKHR(m);
        }

    }

    public partial class ImportSemaphoreFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImportSemaphoreFdInfoKHR _internal;

        private GCHandleReference refpNext;

        private Semaphore semaphore;

        public ImportSemaphoreFdInfoKHR()
        {
        }

        public ImportSemaphoreFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportSemaphoreFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Semaphore Semaphore
        {
            get
            {
                if (semaphore != null)
                {
                    return semaphore;
                }
                semaphore = _internal.semaphore;
                return semaphore;
            }
            set
            {
                semaphore = value;
                _internal.semaphore = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ExternalSemaphoreHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public int Fd
        {
            get => _internal.fd;
            set
            {
                _internal.fd = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImportSemaphoreFdInfoKHR(ImportSemaphoreFdInfoKHR i)
        {
            if (i.Semaphore != null)
            {
                i._internal.semaphore = i.Semaphore;
            }
            return i._internal;
        }

        public static implicit operator ImportSemaphoreFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportSemaphoreFdInfoKHR i)
        {
            return new ImportSemaphoreFdInfoKHR(i);
        }

    }

    public partial class SemaphoreGetFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SemaphoreGetFdInfoKHR _internal;

        private GCHandleReference refpNext;

        private Semaphore semaphore;

        public SemaphoreGetFdInfoKHR()
        {
        }

        public SemaphoreGetFdInfoKHR(AdamantiumVulkan.Core.Interop.SemaphoreGetFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Semaphore Semaphore
        {
            get
            {
                if (semaphore != null)
                {
                    return semaphore;
                }
                semaphore = _internal.semaphore;
                return semaphore;
            }
            set
            {
                semaphore = value;
                _internal.semaphore = value;
            }
        }

        public ExternalSemaphoreHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SemaphoreGetFdInfoKHR(SemaphoreGetFdInfoKHR s)
        {
            if (s.Semaphore != null)
            {
                s._internal.semaphore = s.Semaphore;
            }
            return s._internal;
        }

        public static implicit operator SemaphoreGetFdInfoKHR(AdamantiumVulkan.Core.Interop.SemaphoreGetFdInfoKHR s)
        {
            return new SemaphoreGetFdInfoKHR(s);
        }

    }

    public partial class PhysicalDevicePushDescriptorPropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDevicePushDescriptorPropertiesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDevicePushDescriptorPropertiesKHR()
        {
        }

        public PhysicalDevicePushDescriptorPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDevicePushDescriptorPropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxPushDescriptors
        {
            get => _internal.maxPushDescriptors;
            set
            {
                _internal.maxPushDescriptors = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDevicePushDescriptorPropertiesKHR(PhysicalDevicePushDescriptorPropertiesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDevicePushDescriptorPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDevicePushDescriptorPropertiesKHR p)
        {
            return new PhysicalDevicePushDescriptorPropertiesKHR(p);
        }

    }

    public partial class PhysicalDeviceFloat16Int8FeaturesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFloat16Int8FeaturesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceFloat16Int8FeaturesKHR()
        {
        }

        public PhysicalDeviceFloat16Int8FeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceFloat16Int8FeaturesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShaderFloat16
        {
            get => _internal.shaderFloat16;
            set
            {
                _internal.shaderFloat16 = value;
            }
        }

        public bool ShaderInt8
        {
            get => _internal.shaderInt8;
            set
            {
                _internal.shaderInt8 = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFloat16Int8FeaturesKHR(PhysicalDeviceFloat16Int8FeaturesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFloat16Int8FeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceFloat16Int8FeaturesKHR p)
        {
            return new PhysicalDeviceFloat16Int8FeaturesKHR(p);
        }

    }

    public partial class RectLayerKHR
    {
        private AdamantiumVulkan.Core.Interop.RectLayerKHR _internal;

        private Offset2D offset;

        private Extent2D extent;

        public RectLayerKHR()
        {
        }

        public RectLayerKHR(AdamantiumVulkan.Core.Interop.RectLayerKHR _internal)
        {
            this._internal = _internal;
        }

        public Offset2D Offset
        {
            get
            {
                if (offset != null)
                {
                    return offset;
                }
                offset = _internal.offset;
                return offset;
            }
            set
            {
                offset = value;
                _internal.offset = value;
            }
        }

        public Extent2D Extent
        {
            get
            {
                if (extent != null)
                {
                    return extent;
                }
                extent = _internal.extent;
                return extent;
            }
            set
            {
                extent = value;
                _internal.extent = value;
            }
        }

        public uint Layer
        {
            get => _internal.layer;
            set
            {
                _internal.layer = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RectLayerKHR(RectLayerKHR r)
        {
            if (r.Offset != null)
            {
                r._internal.offset = r.Offset;
            }
            if (r.Extent != null)
            {
                r._internal.extent = r.Extent;
            }
            return r._internal;
        }

        public static implicit operator RectLayerKHR(AdamantiumVulkan.Core.Interop.RectLayerKHR r)
        {
            return new RectLayerKHR(r);
        }

    }

    public partial class PresentRegionKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PresentRegionKHR _internal;

        private StructReference refpRectangles;

        public PresentRegionKHR()
        {
        }

        public PresentRegionKHR(AdamantiumVulkan.Core.Interop.PresentRegionKHR _internal)
        {
            this._internal = _internal;
        }

        public uint RectangleCount
        {
            get => _internal.rectangleCount;
            set
            {
                _internal.rectangleCount = value;
            }
        }

        private RectLayerKHR pRectangles;
        public RectLayerKHR PRectangles
        {
            get
            {
                if(pRectangles != null)
                    return pRectangles;

                pRectangles = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.RectLayerKHR>(_internal.pRectangles);
                return pRectangles;
            }
            set
            {
                refpRectangles?.Dispose();
                AdamantiumVulkan.Core.Interop.RectLayerKHR tmp = value;
                refpRectangles = new StructReference(tmp);
                pRectangles = value;
                _internal.pRectangles = refpRectangles.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpRectangles?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PresentRegionKHR(PresentRegionKHR p)
        {
            return p._internal;
        }

        public static implicit operator PresentRegionKHR(AdamantiumVulkan.Core.Interop.PresentRegionKHR p)
        {
            return new PresentRegionKHR(p);
        }

    }

    public partial class PresentRegionsKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PresentRegionsKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpRegions;

        public PresentRegionsKHR()
        {
        }

        public PresentRegionsKHR(AdamantiumVulkan.Core.Interop.PresentRegionsKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SwapchainCount
        {
            get => _internal.swapchainCount;
            set
            {
                _internal.swapchainCount = value;
            }
        }

        private PresentRegionKHR pRegions;
        public PresentRegionKHR PRegions
        {
            get
            {
                if(pRegions != null)
                    return pRegions;

                pRegions = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PresentRegionKHR>(_internal.pRegions);
                return pRegions;
            }
            set
            {
                refpRegions?.Dispose();
                AdamantiumVulkan.Core.Interop.PresentRegionKHR tmp = value;
                refpRegions = new StructReference(tmp);
                pRegions = value;
                _internal.pRegions = refpRegions.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpRegions?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PresentRegionsKHR(PresentRegionsKHR p)
        {
            return p._internal;
        }

        public static implicit operator PresentRegionsKHR(AdamantiumVulkan.Core.Interop.PresentRegionsKHR p)
        {
            return new PresentRegionsKHR(p);
        }

    }

    public partial class AttachmentDescription2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR _internal;

        private GCHandleReference refpNext;

        public AttachmentDescription2KHR()
        {
        }

        public AttachmentDescription2KHR(AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Format Format
        {
            get => _internal.format;
            set
            {
                _internal.format = value;
            }
        }

        public SampleCountFlagBits Samples
        {
            get => _internal.samples;
            set
            {
                _internal.samples = value;
            }
        }

        public AttachmentLoadOp LoadOp
        {
            get => _internal.loadOp;
            set
            {
                _internal.loadOp = value;
            }
        }

        public AttachmentStoreOp StoreOp
        {
            get => _internal.storeOp;
            set
            {
                _internal.storeOp = value;
            }
        }

        public AttachmentLoadOp StencilLoadOp
        {
            get => _internal.stencilLoadOp;
            set
            {
                _internal.stencilLoadOp = value;
            }
        }

        public AttachmentStoreOp StencilStoreOp
        {
            get => _internal.stencilStoreOp;
            set
            {
                _internal.stencilStoreOp = value;
            }
        }

        public ImageLayout InitialLayout
        {
            get => _internal.initialLayout;
            set
            {
                _internal.initialLayout = value;
            }
        }

        public ImageLayout FinalLayout
        {
            get => _internal.finalLayout;
            set
            {
                _internal.finalLayout = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR(AttachmentDescription2KHR a)
        {
            return a._internal;
        }

        public static implicit operator AttachmentDescription2KHR(AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR a)
        {
            return new AttachmentDescription2KHR(a);
        }

    }

    public partial class AttachmentReference2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AttachmentReference2KHR _internal;

        private GCHandleReference refpNext;

        public AttachmentReference2KHR()
        {
        }

        public AttachmentReference2KHR(AdamantiumVulkan.Core.Interop.AttachmentReference2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Attachment
        {
            get => _internal.attachment;
            set
            {
                _internal.attachment = value;
            }
        }

        public ImageLayout Layout
        {
            get => _internal.layout;
            set
            {
                _internal.layout = value;
            }
        }

        public uint AspectMask
        {
            get => _internal.aspectMask;
            set
            {
                _internal.aspectMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AttachmentReference2KHR(AttachmentReference2KHR a)
        {
            return a._internal;
        }

        public static implicit operator AttachmentReference2KHR(AdamantiumVulkan.Core.Interop.AttachmentReference2KHR a)
        {
            return new AttachmentReference2KHR(a);
        }

    }

    public partial class SubpassDescription2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassDescription2KHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpInputAttachments;

        private StructReference refpColorAttachments;

        private StructReference refpResolveAttachments;

        private StructReference refpDepthStencilAttachment;

        private StructReference refpPreserveAttachments;

        public SubpassDescription2KHR()
        {
        }

        public SubpassDescription2KHR(AdamantiumVulkan.Core.Interop.SubpassDescription2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PipelineBindPoint PipelineBindPoint
        {
            get => _internal.pipelineBindPoint;
            set
            {
                _internal.pipelineBindPoint = value;
            }
        }

        public uint ViewMask
        {
            get => _internal.viewMask;
            set
            {
                _internal.viewMask = value;
            }
        }

        public uint InputAttachmentCount
        {
            get => _internal.inputAttachmentCount;
            set
            {
                _internal.inputAttachmentCount = value;
            }
        }

        private AttachmentReference2KHR pInputAttachments;
        public AttachmentReference2KHR PInputAttachments
        {
            get
            {
                if(pInputAttachments != null)
                    return pInputAttachments;

                pInputAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference2KHR>(_internal.pInputAttachments);
                return pInputAttachments;
            }
            set
            {
                refpInputAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference2KHR tmp = value;
                refpInputAttachments = new StructReference(tmp);
                pInputAttachments = value;
                _internal.pInputAttachments = refpInputAttachments.Handle;
            }
        }

        public uint ColorAttachmentCount
        {
            get => _internal.colorAttachmentCount;
            set
            {
                _internal.colorAttachmentCount = value;
            }
        }

        private AttachmentReference2KHR pColorAttachments;
        public AttachmentReference2KHR PColorAttachments
        {
            get
            {
                if(pColorAttachments != null)
                    return pColorAttachments;

                pColorAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference2KHR>(_internal.pColorAttachments);
                return pColorAttachments;
            }
            set
            {
                refpColorAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference2KHR tmp = value;
                refpColorAttachments = new StructReference(tmp);
                pColorAttachments = value;
                _internal.pColorAttachments = refpColorAttachments.Handle;
            }
        }

        private AttachmentReference2KHR pResolveAttachments;
        public AttachmentReference2KHR PResolveAttachments
        {
            get
            {
                if(pResolveAttachments != null)
                    return pResolveAttachments;

                pResolveAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference2KHR>(_internal.pResolveAttachments);
                return pResolveAttachments;
            }
            set
            {
                refpResolveAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference2KHR tmp = value;
                refpResolveAttachments = new StructReference(tmp);
                pResolveAttachments = value;
                _internal.pResolveAttachments = refpResolveAttachments.Handle;
            }
        }

        private AttachmentReference2KHR pDepthStencilAttachment;
        public AttachmentReference2KHR PDepthStencilAttachment
        {
            get
            {
                if(pDepthStencilAttachment != null)
                    return pDepthStencilAttachment;

                pDepthStencilAttachment = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference2KHR>(_internal.pDepthStencilAttachment);
                return pDepthStencilAttachment;
            }
            set
            {
                refpDepthStencilAttachment?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference2KHR tmp = value;
                refpDepthStencilAttachment = new StructReference(tmp);
                pDepthStencilAttachment = value;
                _internal.pDepthStencilAttachment = refpDepthStencilAttachment.Handle;
            }
        }

        public uint PreserveAttachmentCount
        {
            get => _internal.preserveAttachmentCount;
            set
            {
                _internal.preserveAttachmentCount = value;
            }
        }

        public uint PPreserveAttachments
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pPreserveAttachments);
            }
            set
            {
                refpPreserveAttachments?.Dispose();
                refpPreserveAttachments = new StructReference(value);
                _internal.pPreserveAttachments = refpPreserveAttachments.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpInputAttachments?.Dispose();
            refpColorAttachments?.Dispose();
            refpResolveAttachments?.Dispose();
            refpDepthStencilAttachment?.Dispose();
            refpPreserveAttachments?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassDescription2KHR(SubpassDescription2KHR s)
        {
            return s._internal;
        }

        public static implicit operator SubpassDescription2KHR(AdamantiumVulkan.Core.Interop.SubpassDescription2KHR s)
        {
            return new SubpassDescription2KHR(s);
        }

    }

    public partial class SubpassDependency2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassDependency2KHR _internal;

        private GCHandleReference refpNext;

        public SubpassDependency2KHR()
        {
        }

        public SubpassDependency2KHR(AdamantiumVulkan.Core.Interop.SubpassDependency2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SrcSubpass
        {
            get => _internal.srcSubpass;
            set
            {
                _internal.srcSubpass = value;
            }
        }

        public uint DstSubpass
        {
            get => _internal.dstSubpass;
            set
            {
                _internal.dstSubpass = value;
            }
        }

        public uint SrcStageMask
        {
            get => _internal.srcStageMask;
            set
            {
                _internal.srcStageMask = value;
            }
        }

        public uint DstStageMask
        {
            get => _internal.dstStageMask;
            set
            {
                _internal.dstStageMask = value;
            }
        }

        public uint SrcAccessMask
        {
            get => _internal.srcAccessMask;
            set
            {
                _internal.srcAccessMask = value;
            }
        }

        public uint DstAccessMask
        {
            get => _internal.dstAccessMask;
            set
            {
                _internal.dstAccessMask = value;
            }
        }

        public uint DependencyFlags
        {
            get => _internal.dependencyFlags;
            set
            {
                _internal.dependencyFlags = value;
            }
        }

        public int ViewOffset
        {
            get => _internal.viewOffset;
            set
            {
                _internal.viewOffset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassDependency2KHR(SubpassDependency2KHR s)
        {
            return s._internal;
        }

        public static implicit operator SubpassDependency2KHR(AdamantiumVulkan.Core.Interop.SubpassDependency2KHR s)
        {
            return new SubpassDependency2KHR(s);
        }

    }

    public partial class RenderPassCreateInfo2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassCreateInfo2KHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttachments;

        private StructReference refpSubpasses;

        private StructReference refpDependencies;

        private StructReference refpCorrelatedViewMasks;

        public RenderPassCreateInfo2KHR()
        {
        }

        public RenderPassCreateInfo2KHR(AdamantiumVulkan.Core.Interop.RenderPassCreateInfo2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint AttachmentCount
        {
            get => _internal.attachmentCount;
            set
            {
                _internal.attachmentCount = value;
            }
        }

        private AttachmentDescription2KHR pAttachments;
        public AttachmentDescription2KHR PAttachments
        {
            get
            {
                if(pAttachments != null)
                    return pAttachments;

                pAttachments = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR>(_internal.pAttachments);
                return pAttachments;
            }
            set
            {
                refpAttachments?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentDescription2KHR tmp = value;
                refpAttachments = new StructReference(tmp);
                pAttachments = value;
                _internal.pAttachments = refpAttachments.Handle;
            }
        }

        public uint SubpassCount
        {
            get => _internal.subpassCount;
            set
            {
                _internal.subpassCount = value;
            }
        }

        private SubpassDescription2KHR pSubpasses;
        public SubpassDescription2KHR PSubpasses
        {
            get
            {
                if(pSubpasses != null)
                    return pSubpasses;

                pSubpasses = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubpassDescription2KHR>(_internal.pSubpasses);
                return pSubpasses;
            }
            set
            {
                refpSubpasses?.Dispose();
                AdamantiumVulkan.Core.Interop.SubpassDescription2KHR tmp = value;
                refpSubpasses = new StructReference(tmp);
                pSubpasses = value;
                _internal.pSubpasses = refpSubpasses.Handle;
            }
        }

        public uint DependencyCount
        {
            get => _internal.dependencyCount;
            set
            {
                _internal.dependencyCount = value;
            }
        }

        private SubpassDependency2KHR pDependencies;
        public SubpassDependency2KHR PDependencies
        {
            get
            {
                if(pDependencies != null)
                    return pDependencies;

                pDependencies = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubpassDependency2KHR>(_internal.pDependencies);
                return pDependencies;
            }
            set
            {
                refpDependencies?.Dispose();
                AdamantiumVulkan.Core.Interop.SubpassDependency2KHR tmp = value;
                refpDependencies = new StructReference(tmp);
                pDependencies = value;
                _internal.pDependencies = refpDependencies.Handle;
            }
        }

        public uint CorrelatedViewMaskCount
        {
            get => _internal.correlatedViewMaskCount;
            set
            {
                _internal.correlatedViewMaskCount = value;
            }
        }

        public uint PCorrelatedViewMasks
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pCorrelatedViewMasks);
            }
            set
            {
                refpCorrelatedViewMasks?.Dispose();
                refpCorrelatedViewMasks = new StructReference(value);
                _internal.pCorrelatedViewMasks = refpCorrelatedViewMasks.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttachments?.Dispose();
            refpSubpasses?.Dispose();
            refpDependencies?.Dispose();
            refpCorrelatedViewMasks?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassCreateInfo2KHR(RenderPassCreateInfo2KHR r)
        {
            return r._internal;
        }

        public static implicit operator RenderPassCreateInfo2KHR(AdamantiumVulkan.Core.Interop.RenderPassCreateInfo2KHR r)
        {
            return new RenderPassCreateInfo2KHR(r);
        }

    }

    public partial class SubpassBeginInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassBeginInfoKHR _internal;

        private GCHandleReference refpNext;

        public SubpassBeginInfoKHR()
        {
        }

        public SubpassBeginInfoKHR(AdamantiumVulkan.Core.Interop.SubpassBeginInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SubpassContents Contents
        {
            get => _internal.contents;
            set
            {
                _internal.contents = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassBeginInfoKHR(SubpassBeginInfoKHR s)
        {
            return s._internal;
        }

        public static implicit operator SubpassBeginInfoKHR(AdamantiumVulkan.Core.Interop.SubpassBeginInfoKHR s)
        {
            return new SubpassBeginInfoKHR(s);
        }

    }

    public partial class SubpassEndInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassEndInfoKHR _internal;

        private GCHandleReference refpNext;

        public SubpassEndInfoKHR()
        {
        }

        public SubpassEndInfoKHR(AdamantiumVulkan.Core.Interop.SubpassEndInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassEndInfoKHR(SubpassEndInfoKHR s)
        {
            return s._internal;
        }

        public static implicit operator SubpassEndInfoKHR(AdamantiumVulkan.Core.Interop.SubpassEndInfoKHR s)
        {
            return new SubpassEndInfoKHR(s);
        }

    }

    public partial class SharedPresentSurfaceCapabilitiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SharedPresentSurfaceCapabilitiesKHR _internal;

        private GCHandleReference refpNext;

        public SharedPresentSurfaceCapabilitiesKHR()
        {
        }

        public SharedPresentSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.SharedPresentSurfaceCapabilitiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SharedPresentSupportedUsageFlags
        {
            get => _internal.sharedPresentSupportedUsageFlags;
            set
            {
                _internal.sharedPresentSupportedUsageFlags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SharedPresentSurfaceCapabilitiesKHR(SharedPresentSurfaceCapabilitiesKHR s)
        {
            return s._internal;
        }

        public static implicit operator SharedPresentSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.SharedPresentSurfaceCapabilitiesKHR s)
        {
            return new SharedPresentSurfaceCapabilitiesKHR(s);
        }

    }

    public partial class ImportFenceFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImportFenceFdInfoKHR _internal;

        private GCHandleReference refpNext;

        private Fence fence;

        public ImportFenceFdInfoKHR()
        {
        }

        public ImportFenceFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportFenceFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Fence Fence
        {
            get
            {
                if (fence != null)
                {
                    return fence;
                }
                fence = _internal.fence;
                return fence;
            }
            set
            {
                fence = value;
                _internal.fence = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ExternalFenceHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public int Fd
        {
            get => _internal.fd;
            set
            {
                _internal.fd = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImportFenceFdInfoKHR(ImportFenceFdInfoKHR i)
        {
            if (i.Fence != null)
            {
                i._internal.fence = i.Fence;
            }
            return i._internal;
        }

        public static implicit operator ImportFenceFdInfoKHR(AdamantiumVulkan.Core.Interop.ImportFenceFdInfoKHR i)
        {
            return new ImportFenceFdInfoKHR(i);
        }

    }

    public partial class FenceGetFdInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.FenceGetFdInfoKHR _internal;

        private GCHandleReference refpNext;

        private Fence fence;

        public FenceGetFdInfoKHR()
        {
        }

        public FenceGetFdInfoKHR(AdamantiumVulkan.Core.Interop.FenceGetFdInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Fence Fence
        {
            get
            {
                if (fence != null)
                {
                    return fence;
                }
                fence = _internal.fence;
                return fence;
            }
            set
            {
                fence = value;
                _internal.fence = value;
            }
        }

        public ExternalFenceHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FenceGetFdInfoKHR(FenceGetFdInfoKHR f)
        {
            if (f.Fence != null)
            {
                f._internal.fence = f.Fence;
            }
            return f._internal;
        }

        public static implicit operator FenceGetFdInfoKHR(AdamantiumVulkan.Core.Interop.FenceGetFdInfoKHR f)
        {
            return new FenceGetFdInfoKHR(f);
        }

    }

    public partial class PhysicalDeviceSurfaceInfo2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSurfaceInfo2KHR _internal;

        private GCHandleReference refpNext;

        private SurfaceKHR surface;

        public PhysicalDeviceSurfaceInfo2KHR()
        {
        }

        public PhysicalDeviceSurfaceInfo2KHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceSurfaceInfo2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SurfaceKHR Surface
        {
            get
            {
                if (surface != null)
                {
                    return surface;
                }
                surface = _internal.surface;
                return surface;
            }
            set
            {
                surface = value;
                _internal.surface = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSurfaceInfo2KHR(PhysicalDeviceSurfaceInfo2KHR p)
        {
            if (p.Surface != null)
            {
                p._internal.surface = p.Surface;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSurfaceInfo2KHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceSurfaceInfo2KHR p)
        {
            return new PhysicalDeviceSurfaceInfo2KHR(p);
        }

    }

    public partial class SurfaceCapabilities2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SurfaceCapabilities2KHR _internal;

        private GCHandleReference refpNext;

        private SurfaceCapabilitiesKHR surfaceCapabilities;

        public SurfaceCapabilities2KHR()
        {
        }

        public SurfaceCapabilities2KHR(AdamantiumVulkan.Core.Interop.SurfaceCapabilities2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SurfaceCapabilitiesKHR SurfaceCapabilities
        {
            get
            {
                if (surfaceCapabilities != null)
                {
                    return surfaceCapabilities;
                }
                surfaceCapabilities = _internal.surfaceCapabilities;
                return surfaceCapabilities;
            }
            set
            {
                surfaceCapabilities = value;
                _internal.surfaceCapabilities = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SurfaceCapabilities2KHR(SurfaceCapabilities2KHR s)
        {
            if (s.SurfaceCapabilities != null)
            {
                s._internal.surfaceCapabilities = s.SurfaceCapabilities;
            }
            return s._internal;
        }

        public static implicit operator SurfaceCapabilities2KHR(AdamantiumVulkan.Core.Interop.SurfaceCapabilities2KHR s)
        {
            return new SurfaceCapabilities2KHR(s);
        }

    }

    public partial class SurfaceFormat2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SurfaceFormat2KHR _internal;

        private GCHandleReference refpNext;

        private SurfaceFormatKHR surfaceFormat;

        public SurfaceFormat2KHR()
        {
        }

        public SurfaceFormat2KHR(AdamantiumVulkan.Core.Interop.SurfaceFormat2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SurfaceFormatKHR SurfaceFormat
        {
            get
            {
                if (surfaceFormat != null)
                {
                    return surfaceFormat;
                }
                surfaceFormat = _internal.surfaceFormat;
                return surfaceFormat;
            }
            set
            {
                surfaceFormat = value;
                _internal.surfaceFormat = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SurfaceFormat2KHR(SurfaceFormat2KHR s)
        {
            if (s.SurfaceFormat != null)
            {
                s._internal.surfaceFormat = s.SurfaceFormat;
            }
            return s._internal;
        }

        public static implicit operator SurfaceFormat2KHR(AdamantiumVulkan.Core.Interop.SurfaceFormat2KHR s)
        {
            return new SurfaceFormat2KHR(s);
        }

    }

    public partial class DisplayProperties2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayProperties2KHR _internal;

        private GCHandleReference refpNext;

        private DisplayPropertiesKHR displayProperties;

        public DisplayProperties2KHR()
        {
        }

        public DisplayProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayProperties2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayPropertiesKHR DisplayProperties
        {
            get
            {
                if (displayProperties != null)
                {
                    return displayProperties;
                }
                displayProperties = _internal.displayProperties;
                return displayProperties;
            }
            set
            {
                displayProperties = value;
                _internal.displayProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayProperties2KHR(DisplayProperties2KHR d)
        {
            if (d.DisplayProperties != null)
            {
                d._internal.displayProperties = d.DisplayProperties;
            }
            return d._internal;
        }

        public static implicit operator DisplayProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayProperties2KHR d)
        {
            return new DisplayProperties2KHR(d);
        }

    }

    public partial class DisplayPlaneProperties2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPlaneProperties2KHR _internal;

        private GCHandleReference refpNext;

        private DisplayPlanePropertiesKHR displayPlaneProperties;

        public DisplayPlaneProperties2KHR()
        {
        }

        public DisplayPlaneProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneProperties2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayPlanePropertiesKHR DisplayPlaneProperties
        {
            get
            {
                if (displayPlaneProperties != null)
                {
                    return displayPlaneProperties;
                }
                displayPlaneProperties = _internal.displayPlaneProperties;
                return displayPlaneProperties;
            }
            set
            {
                displayPlaneProperties = value;
                _internal.displayPlaneProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPlaneProperties2KHR(DisplayPlaneProperties2KHR d)
        {
            if (d.DisplayPlaneProperties != null)
            {
                d._internal.displayPlaneProperties = d.DisplayPlaneProperties;
            }
            return d._internal;
        }

        public static implicit operator DisplayPlaneProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneProperties2KHR d)
        {
            return new DisplayPlaneProperties2KHR(d);
        }

    }

    public partial class DisplayModeProperties2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayModeProperties2KHR _internal;

        private GCHandleReference refpNext;

        private DisplayModePropertiesKHR displayModeProperties;

        public DisplayModeProperties2KHR()
        {
        }

        public DisplayModeProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayModeProperties2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayModePropertiesKHR DisplayModeProperties
        {
            get
            {
                if (displayModeProperties != null)
                {
                    return displayModeProperties;
                }
                displayModeProperties = _internal.displayModeProperties;
                return displayModeProperties;
            }
            set
            {
                displayModeProperties = value;
                _internal.displayModeProperties = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayModeProperties2KHR(DisplayModeProperties2KHR d)
        {
            if (d.DisplayModeProperties != null)
            {
                d._internal.displayModeProperties = d.DisplayModeProperties;
            }
            return d._internal;
        }

        public static implicit operator DisplayModeProperties2KHR(AdamantiumVulkan.Core.Interop.DisplayModeProperties2KHR d)
        {
            return new DisplayModeProperties2KHR(d);
        }

    }

    public partial class DisplayPlaneInfo2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPlaneInfo2KHR _internal;

        private GCHandleReference refpNext;

        private DisplayModeKHR mode;

        public DisplayPlaneInfo2KHR()
        {
        }

        public DisplayPlaneInfo2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneInfo2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayModeKHR Mode
        {
            get
            {
                if (mode != null)
                {
                    return mode;
                }
                mode = _internal.mode;
                return mode;
            }
            set
            {
                mode = value;
                _internal.mode = value;
            }
        }

        public uint PlaneIndex
        {
            get => _internal.planeIndex;
            set
            {
                _internal.planeIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPlaneInfo2KHR(DisplayPlaneInfo2KHR d)
        {
            if (d.Mode != null)
            {
                d._internal.mode = d.Mode;
            }
            return d._internal;
        }

        public static implicit operator DisplayPlaneInfo2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneInfo2KHR d)
        {
            return new DisplayPlaneInfo2KHR(d);
        }

    }

    public partial class DisplayPlaneCapabilities2KHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilities2KHR _internal;

        private GCHandleReference refpNext;

        private DisplayPlaneCapabilitiesKHR capabilities;

        public DisplayPlaneCapabilities2KHR()
        {
        }

        public DisplayPlaneCapabilities2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilities2KHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayPlaneCapabilitiesKHR Capabilities
        {
            get
            {
                if (capabilities != null)
                {
                    return capabilities;
                }
                capabilities = _internal.capabilities;
                return capabilities;
            }
            set
            {
                capabilities = value;
                _internal.capabilities = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilities2KHR(DisplayPlaneCapabilities2KHR d)
        {
            if (d.Capabilities != null)
            {
                d._internal.capabilities = d.Capabilities;
            }
            return d._internal;
        }

        public static implicit operator DisplayPlaneCapabilities2KHR(AdamantiumVulkan.Core.Interop.DisplayPlaneCapabilities2KHR d)
        {
            return new DisplayPlaneCapabilities2KHR(d);
        }

    }

    public partial class ImageFormatListCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageFormatListCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpViewFormats;

        public ImageFormatListCreateInfoKHR()
        {
        }

        public ImageFormatListCreateInfoKHR(AdamantiumVulkan.Core.Interop.ImageFormatListCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ViewFormatCount
        {
            get => _internal.viewFormatCount;
            set
            {
                _internal.viewFormatCount = value;
            }
        }

        private Format pViewFormats;
        public Format PViewFormats
        {
            get
            {
                pViewFormats = Marshal.PtrToStructure<Format>(_internal.pViewFormats);
                return pViewFormats;
            }
            set
            {
                refpViewFormats?.Dispose();
                refpViewFormats = new StructReference(value);
                pViewFormats = value;
                _internal.pViewFormats = refpViewFormats.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpViewFormats?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageFormatListCreateInfoKHR(ImageFormatListCreateInfoKHR i)
        {
            return i._internal;
        }

        public static implicit operator ImageFormatListCreateInfoKHR(AdamantiumVulkan.Core.Interop.ImageFormatListCreateInfoKHR i)
        {
            return new ImageFormatListCreateInfoKHR(i);
        }

    }

    public partial class PhysicalDevice8BitStorageFeaturesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDevice8BitStorageFeaturesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDevice8BitStorageFeaturesKHR()
        {
        }

        public PhysicalDevice8BitStorageFeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDevice8BitStorageFeaturesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool StorageBuffer8BitAccess
        {
            get => _internal.storageBuffer8BitAccess;
            set
            {
                _internal.storageBuffer8BitAccess = value;
            }
        }

        public bool UniformAndStorageBuffer8BitAccess
        {
            get => _internal.uniformAndStorageBuffer8BitAccess;
            set
            {
                _internal.uniformAndStorageBuffer8BitAccess = value;
            }
        }

        public bool StoragePushConstant8
        {
            get => _internal.storagePushConstant8;
            set
            {
                _internal.storagePushConstant8 = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDevice8BitStorageFeaturesKHR(PhysicalDevice8BitStorageFeaturesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDevice8BitStorageFeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDevice8BitStorageFeaturesKHR p)
        {
            return new PhysicalDevice8BitStorageFeaturesKHR(p);
        }

    }

    public partial class PhysicalDeviceShaderAtomicInt64FeaturesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderAtomicInt64FeaturesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceShaderAtomicInt64FeaturesKHR()
        {
        }

        public PhysicalDeviceShaderAtomicInt64FeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderAtomicInt64FeaturesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShaderBufferInt64Atomics
        {
            get => _internal.shaderBufferInt64Atomics;
            set
            {
                _internal.shaderBufferInt64Atomics = value;
            }
        }

        public bool ShaderSharedInt64Atomics
        {
            get => _internal.shaderSharedInt64Atomics;
            set
            {
                _internal.shaderSharedInt64Atomics = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderAtomicInt64FeaturesKHR(PhysicalDeviceShaderAtomicInt64FeaturesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShaderAtomicInt64FeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderAtomicInt64FeaturesKHR p)
        {
            return new PhysicalDeviceShaderAtomicInt64FeaturesKHR(p);
        }

    }

    public partial class ConformanceVersionKHR
    {
        private AdamantiumVulkan.Core.Interop.ConformanceVersionKHR _internal;

        public ConformanceVersionKHR()
        {
        }

        public ConformanceVersionKHR(AdamantiumVulkan.Core.Interop.ConformanceVersionKHR _internal)
        {
            this._internal = _internal;
        }

        public byte Major
        {
            get => _internal.major;
            set
            {
                _internal.major = value;
            }
        }

        public byte Minor
        {
            get => _internal.minor;
            set
            {
                _internal.minor = value;
            }
        }

        public byte Subminor
        {
            get => _internal.subminor;
            set
            {
                _internal.subminor = value;
            }
        }

        public byte Patch
        {
            get => _internal.patch;
            set
            {
                _internal.patch = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ConformanceVersionKHR(ConformanceVersionKHR c)
        {
            return c._internal;
        }

        public static implicit operator ConformanceVersionKHR(AdamantiumVulkan.Core.Interop.ConformanceVersionKHR c)
        {
            return new ConformanceVersionKHR(c);
        }

    }

    public partial class PhysicalDeviceDriverPropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDriverPropertiesKHR _internal;

        private GCHandleReference refpNext;

        private string driverName;

        private string driverInfo;

        private ConformanceVersionKHR conformanceVersion;

        public PhysicalDeviceDriverPropertiesKHR()
        {
        }

        public PhysicalDeviceDriverPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceDriverPropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DriverIdKHR DriverID
        {
            get => _internal.driverID;
            set
            {
                _internal.driverID = value;
            }
        }

        public string DriverName
        {
            get
            {
                if(driverName != null)
                    return driverName;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.driverName[i];
                    }
                }
                driverName = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return driverName;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverName), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.driverName[i] = (sbyte)inputArray[i];
                    }
                }
                driverName = value;
            }
        }

        public string DriverInfo
        {
            get
            {
                if(driverInfo != null)
                    return driverInfo;

                var tmpArr = new byte[256];
                unsafe
                {
                    for(int i = 0; i < 256; ++i)
                    {
                        tmpArr[i] = (byte)_internal.driverInfo[i];
                    }
                }
                driverInfo = System.Text.Encoding.ASCII.GetString(tmpArr).Replace("\0", string.Empty);
                return driverInfo;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverInfo), "Array is out of bounds. Size should not be more than 256");

                var inputArray = System.Text.Encoding.ASCII.GetBytes(value);
                unsafe
                {
                    for(int i = 0; i < inputArray.Length; ++i)
                    {
                        _internal.driverInfo[i] = (sbyte)inputArray[i];
                    }
                }
                driverInfo = value;
            }
        }

        public ConformanceVersionKHR ConformanceVersion
        {
            get
            {
                if (conformanceVersion != null)
                {
                    return conformanceVersion;
                }
                conformanceVersion = _internal.conformanceVersion;
                return conformanceVersion;
            }
            set
            {
                conformanceVersion = value;
                _internal.conformanceVersion = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDriverPropertiesKHR(PhysicalDeviceDriverPropertiesKHR p)
        {
            if (p.ConformanceVersion != null)
            {
                p._internal.conformanceVersion = p.ConformanceVersion;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDriverPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceDriverPropertiesKHR p)
        {
            return new PhysicalDeviceDriverPropertiesKHR(p);
        }

    }

    public partial class PhysicalDeviceFloatControlsPropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFloatControlsPropertiesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceFloatControlsPropertiesKHR()
        {
        }

        public PhysicalDeviceFloatControlsPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceFloatControlsPropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool SeparateDenormSettings
        {
            get => _internal.separateDenormSettings;
            set
            {
                _internal.separateDenormSettings = value;
            }
        }

        public bool SeparateRoundingModeSettings
        {
            get => _internal.separateRoundingModeSettings;
            set
            {
                _internal.separateRoundingModeSettings = value;
            }
        }

        public bool ShaderSignedZeroInfNanPreserveFloat16
        {
            get => _internal.shaderSignedZeroInfNanPreserveFloat16;
            set
            {
                _internal.shaderSignedZeroInfNanPreserveFloat16 = value;
            }
        }

        public bool ShaderSignedZeroInfNanPreserveFloat32
        {
            get => _internal.shaderSignedZeroInfNanPreserveFloat32;
            set
            {
                _internal.shaderSignedZeroInfNanPreserveFloat32 = value;
            }
        }

        public bool ShaderSignedZeroInfNanPreserveFloat64
        {
            get => _internal.shaderSignedZeroInfNanPreserveFloat64;
            set
            {
                _internal.shaderSignedZeroInfNanPreserveFloat64 = value;
            }
        }

        public bool ShaderDenormPreserveFloat16
        {
            get => _internal.shaderDenormPreserveFloat16;
            set
            {
                _internal.shaderDenormPreserveFloat16 = value;
            }
        }

        public bool ShaderDenormPreserveFloat32
        {
            get => _internal.shaderDenormPreserveFloat32;
            set
            {
                _internal.shaderDenormPreserveFloat32 = value;
            }
        }

        public bool ShaderDenormPreserveFloat64
        {
            get => _internal.shaderDenormPreserveFloat64;
            set
            {
                _internal.shaderDenormPreserveFloat64 = value;
            }
        }

        public bool ShaderDenormFlushToZeroFloat16
        {
            get => _internal.shaderDenormFlushToZeroFloat16;
            set
            {
                _internal.shaderDenormFlushToZeroFloat16 = value;
            }
        }

        public bool ShaderDenormFlushToZeroFloat32
        {
            get => _internal.shaderDenormFlushToZeroFloat32;
            set
            {
                _internal.shaderDenormFlushToZeroFloat32 = value;
            }
        }

        public bool ShaderDenormFlushToZeroFloat64
        {
            get => _internal.shaderDenormFlushToZeroFloat64;
            set
            {
                _internal.shaderDenormFlushToZeroFloat64 = value;
            }
        }

        public bool ShaderRoundingModeRTEFloat16
        {
            get => _internal.shaderRoundingModeRTEFloat16;
            set
            {
                _internal.shaderRoundingModeRTEFloat16 = value;
            }
        }

        public bool ShaderRoundingModeRTEFloat32
        {
            get => _internal.shaderRoundingModeRTEFloat32;
            set
            {
                _internal.shaderRoundingModeRTEFloat32 = value;
            }
        }

        public bool ShaderRoundingModeRTEFloat64
        {
            get => _internal.shaderRoundingModeRTEFloat64;
            set
            {
                _internal.shaderRoundingModeRTEFloat64 = value;
            }
        }

        public bool ShaderRoundingModeRTZFloat16
        {
            get => _internal.shaderRoundingModeRTZFloat16;
            set
            {
                _internal.shaderRoundingModeRTZFloat16 = value;
            }
        }

        public bool ShaderRoundingModeRTZFloat32
        {
            get => _internal.shaderRoundingModeRTZFloat32;
            set
            {
                _internal.shaderRoundingModeRTZFloat32 = value;
            }
        }

        public bool ShaderRoundingModeRTZFloat64
        {
            get => _internal.shaderRoundingModeRTZFloat64;
            set
            {
                _internal.shaderRoundingModeRTZFloat64 = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFloatControlsPropertiesKHR(PhysicalDeviceFloatControlsPropertiesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFloatControlsPropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceFloatControlsPropertiesKHR p)
        {
            return new PhysicalDeviceFloatControlsPropertiesKHR(p);
        }

    }

    public partial class SubpassDescriptionDepthStencilResolveKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SubpassDescriptionDepthStencilResolveKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpDepthStencilResolveAttachment;

        public SubpassDescriptionDepthStencilResolveKHR()
        {
        }

        public SubpassDescriptionDepthStencilResolveKHR(AdamantiumVulkan.Core.Interop.SubpassDescriptionDepthStencilResolveKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ResolveModeFlagBitsKHR DepthResolveMode
        {
            get => _internal.depthResolveMode;
            set
            {
                _internal.depthResolveMode = value;
            }
        }

        public ResolveModeFlagBitsKHR StencilResolveMode
        {
            get => _internal.stencilResolveMode;
            set
            {
                _internal.stencilResolveMode = value;
            }
        }

        private AttachmentReference2KHR pDepthStencilResolveAttachment;
        public AttachmentReference2KHR PDepthStencilResolveAttachment
        {
            get
            {
                if(pDepthStencilResolveAttachment != null)
                    return pDepthStencilResolveAttachment;

                pDepthStencilResolveAttachment = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentReference2KHR>(_internal.pDepthStencilResolveAttachment);
                return pDepthStencilResolveAttachment;
            }
            set
            {
                refpDepthStencilResolveAttachment?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentReference2KHR tmp = value;
                refpDepthStencilResolveAttachment = new StructReference(tmp);
                pDepthStencilResolveAttachment = value;
                _internal.pDepthStencilResolveAttachment = refpDepthStencilResolveAttachment.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDepthStencilResolveAttachment?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassDescriptionDepthStencilResolveKHR(SubpassDescriptionDepthStencilResolveKHR s)
        {
            return s._internal;
        }

        public static implicit operator SubpassDescriptionDepthStencilResolveKHR(AdamantiumVulkan.Core.Interop.SubpassDescriptionDepthStencilResolveKHR s)
        {
            return new SubpassDescriptionDepthStencilResolveKHR(s);
        }

    }

    public partial class PhysicalDeviceDepthStencilResolvePropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthStencilResolvePropertiesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDepthStencilResolvePropertiesKHR()
        {
        }

        public PhysicalDeviceDepthStencilResolvePropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthStencilResolvePropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SupportedDepthResolveModes
        {
            get => _internal.supportedDepthResolveModes;
            set
            {
                _internal.supportedDepthResolveModes = value;
            }
        }

        public uint SupportedStencilResolveModes
        {
            get => _internal.supportedStencilResolveModes;
            set
            {
                _internal.supportedStencilResolveModes = value;
            }
        }

        public bool IndependentResolveNone
        {
            get => _internal.independentResolveNone;
            set
            {
                _internal.independentResolveNone = value;
            }
        }

        public bool IndependentResolve
        {
            get => _internal.independentResolve;
            set
            {
                _internal.independentResolve = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthStencilResolvePropertiesKHR(PhysicalDeviceDepthStencilResolvePropertiesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDepthStencilResolvePropertiesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthStencilResolvePropertiesKHR p)
        {
            return new PhysicalDeviceDepthStencilResolvePropertiesKHR(p);
        }

    }

    public partial class PhysicalDeviceVulkanMemoryModelFeaturesKHR : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceVulkanMemoryModelFeaturesKHR _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceVulkanMemoryModelFeaturesKHR()
        {
        }

        public PhysicalDeviceVulkanMemoryModelFeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceVulkanMemoryModelFeaturesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool VulkanMemoryModel
        {
            get => _internal.vulkanMemoryModel;
            set
            {
                _internal.vulkanMemoryModel = value;
            }
        }

        public bool VulkanMemoryModelDeviceScope
        {
            get => _internal.vulkanMemoryModelDeviceScope;
            set
            {
                _internal.vulkanMemoryModelDeviceScope = value;
            }
        }

        public bool VulkanMemoryModelAvailabilityVisibilityChains
        {
            get => _internal.vulkanMemoryModelAvailabilityVisibilityChains;
            set
            {
                _internal.vulkanMemoryModelAvailabilityVisibilityChains = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceVulkanMemoryModelFeaturesKHR(PhysicalDeviceVulkanMemoryModelFeaturesKHR p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceVulkanMemoryModelFeaturesKHR(AdamantiumVulkan.Core.Interop.PhysicalDeviceVulkanMemoryModelFeaturesKHR p)
        {
            return new PhysicalDeviceVulkanMemoryModelFeaturesKHR(p);
        }

    }

    public partial class DebugReportCallbackCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugReportCallbackCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpUserData;

        public DebugReportCallbackCreateInfoEXT()
        {
        }

        public DebugReportCallbackCreateInfoEXT(AdamantiumVulkan.Core.Interop.DebugReportCallbackCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PFN_vkDebugReportCallbackEXT PfnCallback
        {
            get => _internal.pfnCallback;
            set
            {
                _internal.pfnCallback = value;
            }
        }

        private System.IntPtr pUserData;
        public System.IntPtr PUserData
        {
            get
            {
                if(pUserData != null)
                    return pUserData;

                pUserData = _internal.pUserData;
                return pUserData;
            }
            set
            {
                refpUserData?.Dispose();
                refpUserData = new GCHandleReference(value);
                pUserData = value;
                _internal.pUserData = refpUserData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpUserData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugReportCallbackCreateInfoEXT(DebugReportCallbackCreateInfoEXT d)
        {
            if (d.PfnCallback != null)
            {
                d._internal.pfnCallback = d.PfnCallback;
            }
            return d._internal;
        }

        public static implicit operator DebugReportCallbackCreateInfoEXT(AdamantiumVulkan.Core.Interop.DebugReportCallbackCreateInfoEXT d)
        {
            return new DebugReportCallbackCreateInfoEXT(d);
        }

    }

    public partial class PipelineRasterizationStateRasterizationOrderAMD : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRasterizationStateRasterizationOrderAMD _internal;

        private GCHandleReference refpNext;

        public PipelineRasterizationStateRasterizationOrderAMD()
        {
        }

        public PipelineRasterizationStateRasterizationOrderAMD(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateRasterizationOrderAMD _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public RasterizationOrderAMD RasterizationOrder
        {
            get => _internal.rasterizationOrder;
            set
            {
                _internal.rasterizationOrder = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRasterizationStateRasterizationOrderAMD(PipelineRasterizationStateRasterizationOrderAMD p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRasterizationStateRasterizationOrderAMD(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateRasterizationOrderAMD p)
        {
            return new PipelineRasterizationStateRasterizationOrderAMD(p);
        }

    }

    public partial class DebugMarkerObjectNameInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugMarkerObjectNameInfoEXT _internal;

        private GCHandleReference refpNext;

        private StringReference refpObjectName;

        public DebugMarkerObjectNameInfoEXT()
        {
        }

        public DebugMarkerObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerObjectNameInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DebugReportObjectTypeEXT ObjectType
        {
            get => _internal.objectType;
            set
            {
                _internal.objectType = value;
            }
        }

        public ulong Object
        {
            get => _internal.@object;
            set
            {
                _internal.@object = value;
            }
        }

        private string pObjectName;
        public string PObjectName
        {
            get
            {
                if(pObjectName != null)
                    return pObjectName;

                pObjectName = Marshal.PtrToStringAnsi(_internal.pObjectName);
                return pObjectName;
            }
            set
            {
                refpObjectName?.Dispose();
                refpObjectName = new StringReference(value, false);
                pObjectName = value;
                _internal.pObjectName = refpObjectName.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpObjectName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugMarkerObjectNameInfoEXT(DebugMarkerObjectNameInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugMarkerObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerObjectNameInfoEXT d)
        {
            return new DebugMarkerObjectNameInfoEXT(d);
        }

    }

    public partial class DebugMarkerObjectTagInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugMarkerObjectTagInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpTag;

        public DebugMarkerObjectTagInfoEXT()
        {
        }

        public DebugMarkerObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerObjectTagInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DebugReportObjectTypeEXT ObjectType
        {
            get => _internal.objectType;
            set
            {
                _internal.objectType = value;
            }
        }

        public ulong Object
        {
            get => _internal.@object;
            set
            {
                _internal.@object = value;
            }
        }

        public ulong TagName
        {
            get => _internal.tagName;
            set
            {
                _internal.tagName = value;
            }
        }

        public ulong TagSize
        {
            get => _internal.tagSize;
            set
            {
                _internal.tagSize = value;
            }
        }

        private System.IntPtr pTag;
        public System.IntPtr PTag
        {
            get
            {
                if(pTag != null)
                    return pTag;

                pTag = _internal.pTag;
                return pTag;
            }
            set
            {
                refpTag?.Dispose();
                refpTag = new GCHandleReference(value);
                pTag = value;
                _internal.pTag = refpTag.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpTag?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugMarkerObjectTagInfoEXT(DebugMarkerObjectTagInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugMarkerObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerObjectTagInfoEXT d)
        {
            return new DebugMarkerObjectTagInfoEXT(d);
        }

    }

    public partial class DebugMarkerMarkerInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugMarkerMarkerInfoEXT _internal;

        private GCHandleReference refpNext;

        private StringReference refpMarkerName;

        private float[] color;

        public DebugMarkerMarkerInfoEXT()
        {
        }

        public DebugMarkerMarkerInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerMarkerInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private string pMarkerName;
        public string PMarkerName
        {
            get
            {
                if(pMarkerName != null)
                    return pMarkerName;

                pMarkerName = Marshal.PtrToStringAnsi(_internal.pMarkerName);
                return pMarkerName;
            }
            set
            {
                refpMarkerName?.Dispose();
                refpMarkerName = new StringReference(value, false);
                pMarkerName = value;
                _internal.pMarkerName = refpMarkerName.Handle;
            }
        }

        public float[] Color
        {
            get
            {
                if(color != null)
                    return color;

                var tmpArr = new float[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.color[i];
                    }
                }
                color = tmpArr;
                return color;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Color), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.color[i] = value[i];
                    }
                }
                color = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpMarkerName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugMarkerMarkerInfoEXT(DebugMarkerMarkerInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugMarkerMarkerInfoEXT(AdamantiumVulkan.Core.Interop.DebugMarkerMarkerInfoEXT d)
        {
            return new DebugMarkerMarkerInfoEXT(d);
        }

    }

    public partial class DedicatedAllocationImageCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DedicatedAllocationImageCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public DedicatedAllocationImageCreateInfoNV()
        {
        }

        public DedicatedAllocationImageCreateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationImageCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool DedicatedAllocation
        {
            get => _internal.dedicatedAllocation;
            set
            {
                _internal.dedicatedAllocation = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DedicatedAllocationImageCreateInfoNV(DedicatedAllocationImageCreateInfoNV d)
        {
            return d._internal;
        }

        public static implicit operator DedicatedAllocationImageCreateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationImageCreateInfoNV d)
        {
            return new DedicatedAllocationImageCreateInfoNV(d);
        }

    }

    public partial class DedicatedAllocationBufferCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DedicatedAllocationBufferCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public DedicatedAllocationBufferCreateInfoNV()
        {
        }

        public DedicatedAllocationBufferCreateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationBufferCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool DedicatedAllocation
        {
            get => _internal.dedicatedAllocation;
            set
            {
                _internal.dedicatedAllocation = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DedicatedAllocationBufferCreateInfoNV(DedicatedAllocationBufferCreateInfoNV d)
        {
            return d._internal;
        }

        public static implicit operator DedicatedAllocationBufferCreateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationBufferCreateInfoNV d)
        {
            return new DedicatedAllocationBufferCreateInfoNV(d);
        }

    }

    public partial class DedicatedAllocationMemoryAllocateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DedicatedAllocationMemoryAllocateInfoNV _internal;

        private GCHandleReference refpNext;

        private Image image;

        private Buffer buffer;

        public DedicatedAllocationMemoryAllocateInfoNV()
        {
        }

        public DedicatedAllocationMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationMemoryAllocateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Image Image
        {
            get
            {
                if (image != null)
                {
                    return image;
                }
                image = _internal.image;
                return image;
            }
            set
            {
                image = value;
                _internal.image = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DedicatedAllocationMemoryAllocateInfoNV(DedicatedAllocationMemoryAllocateInfoNV d)
        {
            if (d.Image != null)
            {
                d._internal.image = d.Image;
            }
            if (d.Buffer != null)
            {
                d._internal.buffer = d.Buffer;
            }
            return d._internal;
        }

        public static implicit operator DedicatedAllocationMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.DedicatedAllocationMemoryAllocateInfoNV d)
        {
            return new DedicatedAllocationMemoryAllocateInfoNV(d);
        }

    }

    public partial class PhysicalDeviceTransformFeedbackFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceTransformFeedbackFeaturesEXT()
        {
        }

        public PhysicalDeviceTransformFeedbackFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool TransformFeedback
        {
            get => _internal.transformFeedback;
            set
            {
                _internal.transformFeedback = value;
            }
        }

        public bool GeometryStreams
        {
            get => _internal.geometryStreams;
            set
            {
                _internal.geometryStreams = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackFeaturesEXT(PhysicalDeviceTransformFeedbackFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceTransformFeedbackFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackFeaturesEXT p)
        {
            return new PhysicalDeviceTransformFeedbackFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceTransformFeedbackPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceTransformFeedbackPropertiesEXT()
        {
        }

        public PhysicalDeviceTransformFeedbackPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxTransformFeedbackStreams
        {
            get => _internal.maxTransformFeedbackStreams;
            set
            {
                _internal.maxTransformFeedbackStreams = value;
            }
        }

        public uint MaxTransformFeedbackBuffers
        {
            get => _internal.maxTransformFeedbackBuffers;
            set
            {
                _internal.maxTransformFeedbackBuffers = value;
            }
        }

        public ulong MaxTransformFeedbackBufferSize
        {
            get => _internal.maxTransformFeedbackBufferSize;
            set
            {
                _internal.maxTransformFeedbackBufferSize = value;
            }
        }

        public uint MaxTransformFeedbackStreamDataSize
        {
            get => _internal.maxTransformFeedbackStreamDataSize;
            set
            {
                _internal.maxTransformFeedbackStreamDataSize = value;
            }
        }

        public uint MaxTransformFeedbackBufferDataSize
        {
            get => _internal.maxTransformFeedbackBufferDataSize;
            set
            {
                _internal.maxTransformFeedbackBufferDataSize = value;
            }
        }

        public uint MaxTransformFeedbackBufferDataStride
        {
            get => _internal.maxTransformFeedbackBufferDataStride;
            set
            {
                _internal.maxTransformFeedbackBufferDataStride = value;
            }
        }

        public bool TransformFeedbackQueries
        {
            get => _internal.transformFeedbackQueries;
            set
            {
                _internal.transformFeedbackQueries = value;
            }
        }

        public bool TransformFeedbackStreamsLinesTriangles
        {
            get => _internal.transformFeedbackStreamsLinesTriangles;
            set
            {
                _internal.transformFeedbackStreamsLinesTriangles = value;
            }
        }

        public bool TransformFeedbackRasterizationStreamSelect
        {
            get => _internal.transformFeedbackRasterizationStreamSelect;
            set
            {
                _internal.transformFeedbackRasterizationStreamSelect = value;
            }
        }

        public bool TransformFeedbackDraw
        {
            get => _internal.transformFeedbackDraw;
            set
            {
                _internal.transformFeedbackDraw = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackPropertiesEXT(PhysicalDeviceTransformFeedbackPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceTransformFeedbackPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceTransformFeedbackPropertiesEXT p)
        {
            return new PhysicalDeviceTransformFeedbackPropertiesEXT(p);
        }

    }

    public partial class PipelineRasterizationStateStreamCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRasterizationStateStreamCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public PipelineRasterizationStateStreamCreateInfoEXT()
        {
        }

        public PipelineRasterizationStateStreamCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateStreamCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint RasterizationStream
        {
            get => _internal.rasterizationStream;
            set
            {
                _internal.rasterizationStream = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRasterizationStateStreamCreateInfoEXT(PipelineRasterizationStateStreamCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRasterizationStateStreamCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationStateStreamCreateInfoEXT p)
        {
            return new PipelineRasterizationStateStreamCreateInfoEXT(p);
        }

    }

    public partial class TextureLODGatherFormatPropertiesAMD : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.TextureLODGatherFormatPropertiesAMD _internal;

        private GCHandleReference refpNext;

        public TextureLODGatherFormatPropertiesAMD()
        {
        }

        public TextureLODGatherFormatPropertiesAMD(AdamantiumVulkan.Core.Interop.TextureLODGatherFormatPropertiesAMD _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool SupportsTextureGatherLODBiasAMD
        {
            get => _internal.supportsTextureGatherLODBiasAMD;
            set
            {
                _internal.supportsTextureGatherLODBiasAMD = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.TextureLODGatherFormatPropertiesAMD(TextureLODGatherFormatPropertiesAMD t)
        {
            return t._internal;
        }

        public static implicit operator TextureLODGatherFormatPropertiesAMD(AdamantiumVulkan.Core.Interop.TextureLODGatherFormatPropertiesAMD t)
        {
            return new TextureLODGatherFormatPropertiesAMD(t);
        }

    }

    public partial class ShaderResourceUsageAMD
    {
        private AdamantiumVulkan.Core.Interop.ShaderResourceUsageAMD _internal;

        public ShaderResourceUsageAMD()
        {
        }

        public ShaderResourceUsageAMD(AdamantiumVulkan.Core.Interop.ShaderResourceUsageAMD _internal)
        {
            this._internal = _internal;
        }

        public uint NumUsedVgprs
        {
            get => _internal.numUsedVgprs;
            set
            {
                _internal.numUsedVgprs = value;
            }
        }

        public uint NumUsedSgprs
        {
            get => _internal.numUsedSgprs;
            set
            {
                _internal.numUsedSgprs = value;
            }
        }

        public uint LdsSizePerLocalWorkGroup
        {
            get => _internal.ldsSizePerLocalWorkGroup;
            set
            {
                _internal.ldsSizePerLocalWorkGroup = value;
            }
        }

        public ulong LdsUsageSizeInBytes
        {
            get => _internal.ldsUsageSizeInBytes;
            set
            {
                _internal.ldsUsageSizeInBytes = value;
            }
        }

        public ulong ScratchMemUsageInBytes
        {
            get => _internal.scratchMemUsageInBytes;
            set
            {
                _internal.scratchMemUsageInBytes = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ShaderResourceUsageAMD(ShaderResourceUsageAMD s)
        {
            return s._internal;
        }

        public static implicit operator ShaderResourceUsageAMD(AdamantiumVulkan.Core.Interop.ShaderResourceUsageAMD s)
        {
            return new ShaderResourceUsageAMD(s);
        }

    }

    public partial class ShaderStatisticsInfoAMD
    {
        private AdamantiumVulkan.Core.Interop.ShaderStatisticsInfoAMD _internal;

        private ShaderResourceUsageAMD resourceUsage;

        private uint[] computeWorkGroupSize;

        public ShaderStatisticsInfoAMD()
        {
        }

        public ShaderStatisticsInfoAMD(AdamantiumVulkan.Core.Interop.ShaderStatisticsInfoAMD _internal)
        {
            this._internal = _internal;
        }

        public uint ShaderStageMask
        {
            get => _internal.shaderStageMask;
            set
            {
                _internal.shaderStageMask = value;
            }
        }

        public ShaderResourceUsageAMD ResourceUsage
        {
            get
            {
                if (resourceUsage != null)
                {
                    return resourceUsage;
                }
                resourceUsage = _internal.resourceUsage;
                return resourceUsage;
            }
            set
            {
                resourceUsage = value;
                _internal.resourceUsage = value;
            }
        }

        public uint NumPhysicalVgprs
        {
            get => _internal.numPhysicalVgprs;
            set
            {
                _internal.numPhysicalVgprs = value;
            }
        }

        public uint NumPhysicalSgprs
        {
            get => _internal.numPhysicalSgprs;
            set
            {
                _internal.numPhysicalSgprs = value;
            }
        }

        public uint NumAvailableVgprs
        {
            get => _internal.numAvailableVgprs;
            set
            {
                _internal.numAvailableVgprs = value;
            }
        }

        public uint NumAvailableSgprs
        {
            get => _internal.numAvailableSgprs;
            set
            {
                _internal.numAvailableSgprs = value;
            }
        }

        public uint[] ComputeWorkGroupSize
        {
            get
            {
                if(computeWorkGroupSize != null)
                    return computeWorkGroupSize;

                var tmpArr = new uint[3];
                unsafe
                {
                    for(int i = 0; i < 3; ++i)
                    {
                        tmpArr[i] = _internal.computeWorkGroupSize[i];
                    }
                }
                computeWorkGroupSize = tmpArr;
                return computeWorkGroupSize;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(ComputeWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.computeWorkGroupSize[i] = value[i];
                    }
                }
                computeWorkGroupSize = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ShaderStatisticsInfoAMD(ShaderStatisticsInfoAMD s)
        {
            if (s.ResourceUsage != null)
            {
                s._internal.resourceUsage = s.ResourceUsage;
            }
            return s._internal;
        }

        public static implicit operator ShaderStatisticsInfoAMD(AdamantiumVulkan.Core.Interop.ShaderStatisticsInfoAMD s)
        {
            return new ShaderStatisticsInfoAMD(s);
        }

    }

    public partial class PhysicalDeviceCornerSampledImageFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceCornerSampledImageFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceCornerSampledImageFeaturesNV()
        {
        }

        public PhysicalDeviceCornerSampledImageFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCornerSampledImageFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool CornerSampledImage
        {
            get => _internal.cornerSampledImage;
            set
            {
                _internal.cornerSampledImage = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceCornerSampledImageFeaturesNV(PhysicalDeviceCornerSampledImageFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceCornerSampledImageFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCornerSampledImageFeaturesNV p)
        {
            return new PhysicalDeviceCornerSampledImageFeaturesNV(p);
        }

    }

    public partial class ExternalImageFormatPropertiesNV
    {
        private AdamantiumVulkan.Core.Interop.ExternalImageFormatPropertiesNV _internal;

        private ImageFormatProperties imageFormatProperties;

        public ExternalImageFormatPropertiesNV()
        {
        }

        public ExternalImageFormatPropertiesNV(AdamantiumVulkan.Core.Interop.ExternalImageFormatPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public ImageFormatProperties ImageFormatProperties
        {
            get
            {
                if (imageFormatProperties != null)
                {
                    return imageFormatProperties;
                }
                imageFormatProperties = _internal.imageFormatProperties;
                return imageFormatProperties;
            }
            set
            {
                imageFormatProperties = value;
                _internal.imageFormatProperties = value;
            }
        }

        public uint ExternalMemoryFeatures
        {
            get => _internal.externalMemoryFeatures;
            set
            {
                _internal.externalMemoryFeatures = value;
            }
        }

        public uint ExportFromImportedHandleTypes
        {
            get => _internal.exportFromImportedHandleTypes;
            set
            {
                _internal.exportFromImportedHandleTypes = value;
            }
        }

        public uint CompatibleHandleTypes
        {
            get => _internal.compatibleHandleTypes;
            set
            {
                _internal.compatibleHandleTypes = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalImageFormatPropertiesNV(ExternalImageFormatPropertiesNV e)
        {
            if (e.ImageFormatProperties != null)
            {
                e._internal.imageFormatProperties = e.ImageFormatProperties;
            }
            return e._internal;
        }

        public static implicit operator ExternalImageFormatPropertiesNV(AdamantiumVulkan.Core.Interop.ExternalImageFormatPropertiesNV e)
        {
            return new ExternalImageFormatPropertiesNV(e);
        }

    }

    public partial class ExternalMemoryImageCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public ExternalMemoryImageCreateInfoNV()
        {
        }

        public ExternalMemoryImageCreateInfoNV(AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfoNV(ExternalMemoryImageCreateInfoNV e)
        {
            return e._internal;
        }

        public static implicit operator ExternalMemoryImageCreateInfoNV(AdamantiumVulkan.Core.Interop.ExternalMemoryImageCreateInfoNV e)
        {
            return new ExternalMemoryImageCreateInfoNV(e);
        }

    }

    public partial class ExportMemoryAllocateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfoNV _internal;

        private GCHandleReference refpNext;

        public ExportMemoryAllocateInfoNV()
        {
        }

        public ExportMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleTypes
        {
            get => _internal.handleTypes;
            set
            {
                _internal.handleTypes = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfoNV(ExportMemoryAllocateInfoNV e)
        {
            return e._internal;
        }

        public static implicit operator ExportMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.ExportMemoryAllocateInfoNV e)
        {
            return new ExportMemoryAllocateInfoNV(e);
        }

    }

    public partial class ValidationFlagsEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ValidationFlagsEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpDisabledValidationChecks;

        public ValidationFlagsEXT()
        {
        }

        public ValidationFlagsEXT(AdamantiumVulkan.Core.Interop.ValidationFlagsEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DisabledValidationCheckCount
        {
            get => _internal.disabledValidationCheckCount;
            set
            {
                _internal.disabledValidationCheckCount = value;
            }
        }

        private ValidationCheckEXT pDisabledValidationChecks;
        public ValidationCheckEXT PDisabledValidationChecks
        {
            get
            {
                pDisabledValidationChecks = Marshal.PtrToStructure<ValidationCheckEXT>(_internal.pDisabledValidationChecks);
                return pDisabledValidationChecks;
            }
            set
            {
                refpDisabledValidationChecks?.Dispose();
                refpDisabledValidationChecks = new StructReference(value);
                pDisabledValidationChecks = value;
                _internal.pDisabledValidationChecks = refpDisabledValidationChecks.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDisabledValidationChecks?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ValidationFlagsEXT(ValidationFlagsEXT v)
        {
            return v._internal;
        }

        public static implicit operator ValidationFlagsEXT(AdamantiumVulkan.Core.Interop.ValidationFlagsEXT v)
        {
            return new ValidationFlagsEXT(v);
        }

    }

    public partial class ImageViewASTCDecodeModeEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageViewASTCDecodeModeEXT _internal;

        private GCHandleReference refpNext;

        public ImageViewASTCDecodeModeEXT()
        {
        }

        public ImageViewASTCDecodeModeEXT(AdamantiumVulkan.Core.Interop.ImageViewASTCDecodeModeEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Format DecodeMode
        {
            get => _internal.decodeMode;
            set
            {
                _internal.decodeMode = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageViewASTCDecodeModeEXT(ImageViewASTCDecodeModeEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImageViewASTCDecodeModeEXT(AdamantiumVulkan.Core.Interop.ImageViewASTCDecodeModeEXT i)
        {
            return new ImageViewASTCDecodeModeEXT(i);
        }

    }

    public partial class PhysicalDeviceASTCDecodeFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceASTCDecodeFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceASTCDecodeFeaturesEXT()
        {
        }

        public PhysicalDeviceASTCDecodeFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceASTCDecodeFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool DecodeModeSharedExponent
        {
            get => _internal.decodeModeSharedExponent;
            set
            {
                _internal.decodeModeSharedExponent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceASTCDecodeFeaturesEXT(PhysicalDeviceASTCDecodeFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceASTCDecodeFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceASTCDecodeFeaturesEXT p)
        {
            return new PhysicalDeviceASTCDecodeFeaturesEXT(p);
        }

    }

    public partial class ConditionalRenderingBeginInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ConditionalRenderingBeginInfoEXT _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        public ConditionalRenderingBeginInfoEXT()
        {
        }

        public ConditionalRenderingBeginInfoEXT(AdamantiumVulkan.Core.Interop.ConditionalRenderingBeginInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ConditionalRenderingBeginInfoEXT(ConditionalRenderingBeginInfoEXT c)
        {
            if (c.Buffer != null)
            {
                c._internal.buffer = c.Buffer;
            }
            return c._internal;
        }

        public static implicit operator ConditionalRenderingBeginInfoEXT(AdamantiumVulkan.Core.Interop.ConditionalRenderingBeginInfoEXT c)
        {
            return new ConditionalRenderingBeginInfoEXT(c);
        }

    }

    public partial class PhysicalDeviceConditionalRenderingFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceConditionalRenderingFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceConditionalRenderingFeaturesEXT()
        {
        }

        public PhysicalDeviceConditionalRenderingFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceConditionalRenderingFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ConditionalRendering
        {
            get => _internal.conditionalRendering;
            set
            {
                _internal.conditionalRendering = value;
            }
        }

        public bool InheritedConditionalRendering
        {
            get => _internal.inheritedConditionalRendering;
            set
            {
                _internal.inheritedConditionalRendering = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceConditionalRenderingFeaturesEXT(PhysicalDeviceConditionalRenderingFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceConditionalRenderingFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceConditionalRenderingFeaturesEXT p)
        {
            return new PhysicalDeviceConditionalRenderingFeaturesEXT(p);
        }

    }

    public partial class CommandBufferInheritanceConditionalRenderingInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CommandBufferInheritanceConditionalRenderingInfoEXT _internal;

        private GCHandleReference refpNext;

        public CommandBufferInheritanceConditionalRenderingInfoEXT()
        {
        }

        public CommandBufferInheritanceConditionalRenderingInfoEXT(AdamantiumVulkan.Core.Interop.CommandBufferInheritanceConditionalRenderingInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ConditionalRenderingEnable
        {
            get => _internal.conditionalRenderingEnable;
            set
            {
                _internal.conditionalRenderingEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CommandBufferInheritanceConditionalRenderingInfoEXT(CommandBufferInheritanceConditionalRenderingInfoEXT c)
        {
            return c._internal;
        }

        public static implicit operator CommandBufferInheritanceConditionalRenderingInfoEXT(AdamantiumVulkan.Core.Interop.CommandBufferInheritanceConditionalRenderingInfoEXT c)
        {
            return new CommandBufferInheritanceConditionalRenderingInfoEXT(c);
        }

    }

    public partial class DeviceGeneratedCommandsFeaturesNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsFeaturesNVX _internal;

        private GCHandleReference refpNext;

        public DeviceGeneratedCommandsFeaturesNVX()
        {
        }

        public DeviceGeneratedCommandsFeaturesNVX(AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsFeaturesNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ComputeBindingPointSupport
        {
            get => _internal.computeBindingPointSupport;
            set
            {
                _internal.computeBindingPointSupport = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsFeaturesNVX(DeviceGeneratedCommandsFeaturesNVX d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGeneratedCommandsFeaturesNVX(AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsFeaturesNVX d)
        {
            return new DeviceGeneratedCommandsFeaturesNVX(d);
        }

    }

    public partial class DeviceGeneratedCommandsLimitsNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsLimitsNVX _internal;

        private GCHandleReference refpNext;

        public DeviceGeneratedCommandsLimitsNVX()
        {
        }

        public DeviceGeneratedCommandsLimitsNVX(AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsLimitsNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxIndirectCommandsLayoutTokenCount
        {
            get => _internal.maxIndirectCommandsLayoutTokenCount;
            set
            {
                _internal.maxIndirectCommandsLayoutTokenCount = value;
            }
        }

        public uint MaxObjectEntryCounts
        {
            get => _internal.maxObjectEntryCounts;
            set
            {
                _internal.maxObjectEntryCounts = value;
            }
        }

        public uint MinSequenceCountBufferOffsetAlignment
        {
            get => _internal.minSequenceCountBufferOffsetAlignment;
            set
            {
                _internal.minSequenceCountBufferOffsetAlignment = value;
            }
        }

        public uint MinSequenceIndexBufferOffsetAlignment
        {
            get => _internal.minSequenceIndexBufferOffsetAlignment;
            set
            {
                _internal.minSequenceIndexBufferOffsetAlignment = value;
            }
        }

        public uint MinCommandsTokenBufferOffsetAlignment
        {
            get => _internal.minCommandsTokenBufferOffsetAlignment;
            set
            {
                _internal.minCommandsTokenBufferOffsetAlignment = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsLimitsNVX(DeviceGeneratedCommandsLimitsNVX d)
        {
            return d._internal;
        }

        public static implicit operator DeviceGeneratedCommandsLimitsNVX(AdamantiumVulkan.Core.Interop.DeviceGeneratedCommandsLimitsNVX d)
        {
            return new DeviceGeneratedCommandsLimitsNVX(d);
        }

    }

    public partial class IndirectCommandsTokenNVX
    {
        private AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX _internal;

        private Buffer buffer;

        public IndirectCommandsTokenNVX()
        {
        }

        public IndirectCommandsTokenNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX _internal)
        {
            this._internal = _internal;
        }

        public IndirectCommandsTokenTypeNVX TokenType
        {
            get => _internal.tokenType;
            set
            {
                _internal.tokenType = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX(IndirectCommandsTokenNVX i)
        {
            if (i.Buffer != null)
            {
                i._internal.buffer = i.Buffer;
            }
            return i._internal;
        }

        public static implicit operator IndirectCommandsTokenNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX i)
        {
            return new IndirectCommandsTokenNVX(i);
        }

    }

    public partial class IndirectCommandsLayoutTokenNVX
    {
        private AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX _internal;

        public IndirectCommandsLayoutTokenNVX()
        {
        }

        public IndirectCommandsLayoutTokenNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX _internal)
        {
            this._internal = _internal;
        }

        public IndirectCommandsTokenTypeNVX TokenType
        {
            get => _internal.tokenType;
            set
            {
                _internal.tokenType = value;
            }
        }

        public uint BindingUnit
        {
            get => _internal.bindingUnit;
            set
            {
                _internal.bindingUnit = value;
            }
        }

        public uint DynamicCount
        {
            get => _internal.dynamicCount;
            set
            {
                _internal.dynamicCount = value;
            }
        }

        public uint Divisor
        {
            get => _internal.divisor;
            set
            {
                _internal.divisor = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX(IndirectCommandsLayoutTokenNVX i)
        {
            return i._internal;
        }

        public static implicit operator IndirectCommandsLayoutTokenNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX i)
        {
            return new IndirectCommandsLayoutTokenNVX(i);
        }

    }

    public partial class IndirectCommandsLayoutCreateInfoNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutCreateInfoNVX _internal;

        private GCHandleReference refpNext;

        private StructReference refpTokens;

        public IndirectCommandsLayoutCreateInfoNVX()
        {
        }

        public IndirectCommandsLayoutCreateInfoNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutCreateInfoNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PipelineBindPoint PipelineBindPoint
        {
            get => _internal.pipelineBindPoint;
            set
            {
                _internal.pipelineBindPoint = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint TokenCount
        {
            get => _internal.tokenCount;
            set
            {
                _internal.tokenCount = value;
            }
        }

        private IndirectCommandsLayoutTokenNVX pTokens;
        public IndirectCommandsLayoutTokenNVX PTokens
        {
            get
            {
                if(pTokens != null)
                    return pTokens;

                pTokens = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX>(_internal.pTokens);
                return pTokens;
            }
            set
            {
                refpTokens?.Dispose();
                AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutTokenNVX tmp = value;
                refpTokens = new StructReference(tmp);
                pTokens = value;
                _internal.pTokens = refpTokens.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpTokens?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutCreateInfoNVX(IndirectCommandsLayoutCreateInfoNVX i)
        {
            return i._internal;
        }

        public static implicit operator IndirectCommandsLayoutCreateInfoNVX(AdamantiumVulkan.Core.Interop.IndirectCommandsLayoutCreateInfoNVX i)
        {
            return new IndirectCommandsLayoutCreateInfoNVX(i);
        }

    }

    public partial class CmdProcessCommandsInfoNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CmdProcessCommandsInfoNVX _internal;

        private GCHandleReference refpNext;

        private ObjectTableNVX objectTable;

        private IndirectCommandsLayoutNVX indirectCommandsLayout;

        private StructReference refpIndirectCommandsTokens;

        private CommandBuffer targetCommandBuffer;

        private Buffer sequencesCountBuffer;

        private Buffer sequencesIndexBuffer;

        public CmdProcessCommandsInfoNVX()
        {
        }

        public CmdProcessCommandsInfoNVX(AdamantiumVulkan.Core.Interop.CmdProcessCommandsInfoNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ObjectTableNVX ObjectTable
        {
            get
            {
                if (objectTable != null)
                {
                    return objectTable;
                }
                objectTable = _internal.objectTable;
                return objectTable;
            }
            set
            {
                objectTable = value;
                _internal.objectTable = value;
            }
        }

        public IndirectCommandsLayoutNVX IndirectCommandsLayout
        {
            get
            {
                if (indirectCommandsLayout != null)
                {
                    return indirectCommandsLayout;
                }
                indirectCommandsLayout = _internal.indirectCommandsLayout;
                return indirectCommandsLayout;
            }
            set
            {
                indirectCommandsLayout = value;
                _internal.indirectCommandsLayout = value;
            }
        }

        public uint IndirectCommandsTokenCount
        {
            get => _internal.indirectCommandsTokenCount;
            set
            {
                _internal.indirectCommandsTokenCount = value;
            }
        }

        private IndirectCommandsTokenNVX pIndirectCommandsTokens;
        public IndirectCommandsTokenNVX PIndirectCommandsTokens
        {
            get
            {
                if(pIndirectCommandsTokens != null)
                    return pIndirectCommandsTokens;

                pIndirectCommandsTokens = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX>(_internal.pIndirectCommandsTokens);
                return pIndirectCommandsTokens;
            }
            set
            {
                refpIndirectCommandsTokens?.Dispose();
                AdamantiumVulkan.Core.Interop.IndirectCommandsTokenNVX tmp = value;
                refpIndirectCommandsTokens = new StructReference(tmp);
                pIndirectCommandsTokens = value;
                _internal.pIndirectCommandsTokens = refpIndirectCommandsTokens.Handle;
            }
        }

        public uint MaxSequencesCount
        {
            get => _internal.maxSequencesCount;
            set
            {
                _internal.maxSequencesCount = value;
            }
        }

        public CommandBuffer TargetCommandBuffer
        {
            get
            {
                if (targetCommandBuffer != null)
                {
                    return targetCommandBuffer;
                }
                targetCommandBuffer = _internal.targetCommandBuffer;
                return targetCommandBuffer;
            }
            set
            {
                targetCommandBuffer = value;
                _internal.targetCommandBuffer = value;
            }
        }

        public Buffer SequencesCountBuffer
        {
            get
            {
                if (sequencesCountBuffer != null)
                {
                    return sequencesCountBuffer;
                }
                sequencesCountBuffer = _internal.sequencesCountBuffer;
                return sequencesCountBuffer;
            }
            set
            {
                sequencesCountBuffer = value;
                _internal.sequencesCountBuffer = value;
            }
        }

        public ulong SequencesCountOffset
        {
            get => _internal.sequencesCountOffset;
            set
            {
                _internal.sequencesCountOffset = value;
            }
        }

        public Buffer SequencesIndexBuffer
        {
            get
            {
                if (sequencesIndexBuffer != null)
                {
                    return sequencesIndexBuffer;
                }
                sequencesIndexBuffer = _internal.sequencesIndexBuffer;
                return sequencesIndexBuffer;
            }
            set
            {
                sequencesIndexBuffer = value;
                _internal.sequencesIndexBuffer = value;
            }
        }

        public ulong SequencesIndexOffset
        {
            get => _internal.sequencesIndexOffset;
            set
            {
                _internal.sequencesIndexOffset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpIndirectCommandsTokens?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CmdProcessCommandsInfoNVX(CmdProcessCommandsInfoNVX c)
        {
            if (c.ObjectTable != null)
            {
                c._internal.objectTable = c.ObjectTable;
            }
            if (c.IndirectCommandsLayout != null)
            {
                c._internal.indirectCommandsLayout = c.IndirectCommandsLayout;
            }
            if (c.TargetCommandBuffer != null)
            {
                c._internal.targetCommandBuffer = c.TargetCommandBuffer;
            }
            if (c.SequencesCountBuffer != null)
            {
                c._internal.sequencesCountBuffer = c.SequencesCountBuffer;
            }
            if (c.SequencesIndexBuffer != null)
            {
                c._internal.sequencesIndexBuffer = c.SequencesIndexBuffer;
            }
            return c._internal;
        }

        public static implicit operator CmdProcessCommandsInfoNVX(AdamantiumVulkan.Core.Interop.CmdProcessCommandsInfoNVX c)
        {
            return new CmdProcessCommandsInfoNVX(c);
        }

    }

    public partial class CmdReserveSpaceForCommandsInfoNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CmdReserveSpaceForCommandsInfoNVX _internal;

        private GCHandleReference refpNext;

        private ObjectTableNVX objectTable;

        private IndirectCommandsLayoutNVX indirectCommandsLayout;

        public CmdReserveSpaceForCommandsInfoNVX()
        {
        }

        public CmdReserveSpaceForCommandsInfoNVX(AdamantiumVulkan.Core.Interop.CmdReserveSpaceForCommandsInfoNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ObjectTableNVX ObjectTable
        {
            get
            {
                if (objectTable != null)
                {
                    return objectTable;
                }
                objectTable = _internal.objectTable;
                return objectTable;
            }
            set
            {
                objectTable = value;
                _internal.objectTable = value;
            }
        }

        public IndirectCommandsLayoutNVX IndirectCommandsLayout
        {
            get
            {
                if (indirectCommandsLayout != null)
                {
                    return indirectCommandsLayout;
                }
                indirectCommandsLayout = _internal.indirectCommandsLayout;
                return indirectCommandsLayout;
            }
            set
            {
                indirectCommandsLayout = value;
                _internal.indirectCommandsLayout = value;
            }
        }

        public uint MaxSequencesCount
        {
            get => _internal.maxSequencesCount;
            set
            {
                _internal.maxSequencesCount = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CmdReserveSpaceForCommandsInfoNVX(CmdReserveSpaceForCommandsInfoNVX c)
        {
            if (c.ObjectTable != null)
            {
                c._internal.objectTable = c.ObjectTable;
            }
            if (c.IndirectCommandsLayout != null)
            {
                c._internal.indirectCommandsLayout = c.IndirectCommandsLayout;
            }
            return c._internal;
        }

        public static implicit operator CmdReserveSpaceForCommandsInfoNVX(AdamantiumVulkan.Core.Interop.CmdReserveSpaceForCommandsInfoNVX c)
        {
            return new CmdReserveSpaceForCommandsInfoNVX(c);
        }

    }

    public partial class ObjectTableCreateInfoNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ObjectTableCreateInfoNVX _internal;

        private GCHandleReference refpNext;

        private StructReference refpObjectEntryTypes;

        private StructReference refpObjectEntryCounts;

        private StructReference refpObjectEntryUsageFlags;

        public ObjectTableCreateInfoNVX()
        {
        }

        public ObjectTableCreateInfoNVX(AdamantiumVulkan.Core.Interop.ObjectTableCreateInfoNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ObjectCount
        {
            get => _internal.objectCount;
            set
            {
                _internal.objectCount = value;
            }
        }

        private ObjectEntryTypeNVX pObjectEntryTypes;
        public ObjectEntryTypeNVX PObjectEntryTypes
        {
            get
            {
                pObjectEntryTypes = Marshal.PtrToStructure<ObjectEntryTypeNVX>(_internal.pObjectEntryTypes);
                return pObjectEntryTypes;
            }
            set
            {
                refpObjectEntryTypes?.Dispose();
                refpObjectEntryTypes = new StructReference(value);
                pObjectEntryTypes = value;
                _internal.pObjectEntryTypes = refpObjectEntryTypes.Handle;
            }
        }

        public uint PObjectEntryCounts
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pObjectEntryCounts);
            }
            set
            {
                refpObjectEntryCounts?.Dispose();
                refpObjectEntryCounts = new StructReference(value);
                _internal.pObjectEntryCounts = refpObjectEntryCounts.Handle;
            }
        }

        private uint pObjectEntryUsageFlags;
        public uint PObjectEntryUsageFlags
        {
            get
            {
                pObjectEntryUsageFlags = Marshal.PtrToStructure<uint>(_internal.pObjectEntryUsageFlags);
                return pObjectEntryUsageFlags;
            }
            set
            {
                refpObjectEntryUsageFlags?.Dispose();
                refpObjectEntryUsageFlags = new StructReference(value);
                pObjectEntryUsageFlags = value;
                _internal.pObjectEntryUsageFlags = refpObjectEntryUsageFlags.Handle;
            }
        }

        public uint MaxUniformBuffersPerDescriptor
        {
            get => _internal.maxUniformBuffersPerDescriptor;
            set
            {
                _internal.maxUniformBuffersPerDescriptor = value;
            }
        }

        public uint MaxStorageBuffersPerDescriptor
        {
            get => _internal.maxStorageBuffersPerDescriptor;
            set
            {
                _internal.maxStorageBuffersPerDescriptor = value;
            }
        }

        public uint MaxStorageImagesPerDescriptor
        {
            get => _internal.maxStorageImagesPerDescriptor;
            set
            {
                _internal.maxStorageImagesPerDescriptor = value;
            }
        }

        public uint MaxSampledImagesPerDescriptor
        {
            get => _internal.maxSampledImagesPerDescriptor;
            set
            {
                _internal.maxSampledImagesPerDescriptor = value;
            }
        }

        public uint MaxPipelineLayouts
        {
            get => _internal.maxPipelineLayouts;
            set
            {
                _internal.maxPipelineLayouts = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpObjectEntryTypes?.Dispose();
            refpObjectEntryCounts?.Dispose();
            refpObjectEntryUsageFlags?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTableCreateInfoNVX(ObjectTableCreateInfoNVX o)
        {
            return o._internal;
        }

        public static implicit operator ObjectTableCreateInfoNVX(AdamantiumVulkan.Core.Interop.ObjectTableCreateInfoNVX o)
        {
            return new ObjectTableCreateInfoNVX(o);
        }

    }

    public partial class ObjectTableEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTableEntryNVX _internal;

        public ObjectTableEntryNVX()
        {
        }

        public ObjectTableEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTableEntryNVX(ObjectTableEntryNVX o)
        {
            return o._internal;
        }

        public static implicit operator ObjectTableEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableEntryNVX o)
        {
            return new ObjectTableEntryNVX(o);
        }

    }

    public partial class ObjectTablePipelineEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTablePipelineEntryNVX _internal;

        private Pipeline pipeline;

        public ObjectTablePipelineEntryNVX()
        {
        }

        public ObjectTablePipelineEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTablePipelineEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Pipeline Pipeline
        {
            get
            {
                if (pipeline != null)
                {
                    return pipeline;
                }
                pipeline = _internal.pipeline;
                return pipeline;
            }
            set
            {
                pipeline = value;
                _internal.pipeline = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTablePipelineEntryNVX(ObjectTablePipelineEntryNVX o)
        {
            if (o.Pipeline != null)
            {
                o._internal.pipeline = o.Pipeline;
            }
            return o._internal;
        }

        public static implicit operator ObjectTablePipelineEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTablePipelineEntryNVX o)
        {
            return new ObjectTablePipelineEntryNVX(o);
        }

    }

    public partial class ObjectTableDescriptorSetEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTableDescriptorSetEntryNVX _internal;

        private PipelineLayout pipelineLayout;

        private DescriptorSet descriptorSet;

        public ObjectTableDescriptorSetEntryNVX()
        {
        }

        public ObjectTableDescriptorSetEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableDescriptorSetEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PipelineLayout PipelineLayout
        {
            get
            {
                if (pipelineLayout != null)
                {
                    return pipelineLayout;
                }
                pipelineLayout = _internal.pipelineLayout;
                return pipelineLayout;
            }
            set
            {
                pipelineLayout = value;
                _internal.pipelineLayout = value;
            }
        }

        public DescriptorSet DescriptorSet
        {
            get
            {
                if (descriptorSet != null)
                {
                    return descriptorSet;
                }
                descriptorSet = _internal.descriptorSet;
                return descriptorSet;
            }
            set
            {
                descriptorSet = value;
                _internal.descriptorSet = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTableDescriptorSetEntryNVX(ObjectTableDescriptorSetEntryNVX o)
        {
            if (o.PipelineLayout != null)
            {
                o._internal.pipelineLayout = o.PipelineLayout;
            }
            if (o.DescriptorSet != null)
            {
                o._internal.descriptorSet = o.DescriptorSet;
            }
            return o._internal;
        }

        public static implicit operator ObjectTableDescriptorSetEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableDescriptorSetEntryNVX o)
        {
            return new ObjectTableDescriptorSetEntryNVX(o);
        }

    }

    public partial class ObjectTableVertexBufferEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTableVertexBufferEntryNVX _internal;

        private Buffer buffer;

        public ObjectTableVertexBufferEntryNVX()
        {
        }

        public ObjectTableVertexBufferEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableVertexBufferEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTableVertexBufferEntryNVX(ObjectTableVertexBufferEntryNVX o)
        {
            if (o.Buffer != null)
            {
                o._internal.buffer = o.Buffer;
            }
            return o._internal;
        }

        public static implicit operator ObjectTableVertexBufferEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableVertexBufferEntryNVX o)
        {
            return new ObjectTableVertexBufferEntryNVX(o);
        }

    }

    public partial class ObjectTableIndexBufferEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTableIndexBufferEntryNVX _internal;

        private Buffer buffer;

        public ObjectTableIndexBufferEntryNVX()
        {
        }

        public ObjectTableIndexBufferEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableIndexBufferEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        public IndexType IndexType
        {
            get => _internal.indexType;
            set
            {
                _internal.indexType = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTableIndexBufferEntryNVX(ObjectTableIndexBufferEntryNVX o)
        {
            if (o.Buffer != null)
            {
                o._internal.buffer = o.Buffer;
            }
            return o._internal;
        }

        public static implicit operator ObjectTableIndexBufferEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTableIndexBufferEntryNVX o)
        {
            return new ObjectTableIndexBufferEntryNVX(o);
        }

    }

    public partial class ObjectTablePushConstantEntryNVX
    {
        private AdamantiumVulkan.Core.Interop.ObjectTablePushConstantEntryNVX _internal;

        private PipelineLayout pipelineLayout;

        public ObjectTablePushConstantEntryNVX()
        {
        }

        public ObjectTablePushConstantEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTablePushConstantEntryNVX _internal)
        {
            this._internal = _internal;
        }

        public ObjectEntryTypeNVX Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public PipelineLayout PipelineLayout
        {
            get
            {
                if (pipelineLayout != null)
                {
                    return pipelineLayout;
                }
                pipelineLayout = _internal.pipelineLayout;
                return pipelineLayout;
            }
            set
            {
                pipelineLayout = value;
                _internal.pipelineLayout = value;
            }
        }

        public uint StageFlags
        {
            get => _internal.stageFlags;
            set
            {
                _internal.stageFlags = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ObjectTablePushConstantEntryNVX(ObjectTablePushConstantEntryNVX o)
        {
            if (o.PipelineLayout != null)
            {
                o._internal.pipelineLayout = o.PipelineLayout;
            }
            return o._internal;
        }

        public static implicit operator ObjectTablePushConstantEntryNVX(AdamantiumVulkan.Core.Interop.ObjectTablePushConstantEntryNVX o)
        {
            return new ObjectTablePushConstantEntryNVX(o);
        }

    }

    public partial class ViewportWScalingNV
    {
        private AdamantiumVulkan.Core.Interop.ViewportWScalingNV _internal;

        public ViewportWScalingNV()
        {
        }

        public ViewportWScalingNV(AdamantiumVulkan.Core.Interop.ViewportWScalingNV _internal)
        {
            this._internal = _internal;
        }

        public float Xcoeff
        {
            get => _internal.xcoeff;
            set
            {
                _internal.xcoeff = value;
            }
        }

        public float Ycoeff
        {
            get => _internal.ycoeff;
            set
            {
                _internal.ycoeff = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ViewportWScalingNV(ViewportWScalingNV v)
        {
            return v._internal;
        }

        public static implicit operator ViewportWScalingNV(AdamantiumVulkan.Core.Interop.ViewportWScalingNV v)
        {
            return new ViewportWScalingNV(v);
        }

    }

    public partial class PipelineViewportWScalingStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportWScalingStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpViewportWScalings;

        public PipelineViewportWScalingStateCreateInfoNV()
        {
        }

        public PipelineViewportWScalingStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportWScalingStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ViewportWScalingEnable
        {
            get => _internal.viewportWScalingEnable;
            set
            {
                _internal.viewportWScalingEnable = value;
            }
        }

        public uint ViewportCount
        {
            get => _internal.viewportCount;
            set
            {
                _internal.viewportCount = value;
            }
        }

        private ViewportWScalingNV pViewportWScalings;
        public ViewportWScalingNV PViewportWScalings
        {
            get
            {
                if(pViewportWScalings != null)
                    return pViewportWScalings;

                pViewportWScalings = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.ViewportWScalingNV>(_internal.pViewportWScalings);
                return pViewportWScalings;
            }
            set
            {
                refpViewportWScalings?.Dispose();
                AdamantiumVulkan.Core.Interop.ViewportWScalingNV tmp = value;
                refpViewportWScalings = new StructReference(tmp);
                pViewportWScalings = value;
                _internal.pViewportWScalings = refpViewportWScalings.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpViewportWScalings?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportWScalingStateCreateInfoNV(PipelineViewportWScalingStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportWScalingStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportWScalingStateCreateInfoNV p)
        {
            return new PipelineViewportWScalingStateCreateInfoNV(p);
        }

    }

    public partial class SurfaceCapabilities2EXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SurfaceCapabilities2EXT _internal;

        private GCHandleReference refpNext;

        private Extent2D currentExtent;

        private Extent2D minImageExtent;

        private Extent2D maxImageExtent;

        public SurfaceCapabilities2EXT()
        {
        }

        public SurfaceCapabilities2EXT(AdamantiumVulkan.Core.Interop.SurfaceCapabilities2EXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MinImageCount
        {
            get => _internal.minImageCount;
            set
            {
                _internal.minImageCount = value;
            }
        }

        public uint MaxImageCount
        {
            get => _internal.maxImageCount;
            set
            {
                _internal.maxImageCount = value;
            }
        }

        public Extent2D CurrentExtent
        {
            get
            {
                if (currentExtent != null)
                {
                    return currentExtent;
                }
                currentExtent = _internal.currentExtent;
                return currentExtent;
            }
            set
            {
                currentExtent = value;
                _internal.currentExtent = value;
            }
        }

        public Extent2D MinImageExtent
        {
            get
            {
                if (minImageExtent != null)
                {
                    return minImageExtent;
                }
                minImageExtent = _internal.minImageExtent;
                return minImageExtent;
            }
            set
            {
                minImageExtent = value;
                _internal.minImageExtent = value;
            }
        }

        public Extent2D MaxImageExtent
        {
            get
            {
                if (maxImageExtent != null)
                {
                    return maxImageExtent;
                }
                maxImageExtent = _internal.maxImageExtent;
                return maxImageExtent;
            }
            set
            {
                maxImageExtent = value;
                _internal.maxImageExtent = value;
            }
        }

        public uint MaxImageArrayLayers
        {
            get => _internal.maxImageArrayLayers;
            set
            {
                _internal.maxImageArrayLayers = value;
            }
        }

        public uint SupportedTransforms
        {
            get => _internal.supportedTransforms;
            set
            {
                _internal.supportedTransforms = value;
            }
        }

        public SurfaceTransformFlagBitsKHR CurrentTransform
        {
            get => _internal.currentTransform;
            set
            {
                _internal.currentTransform = value;
            }
        }

        public uint SupportedCompositeAlpha
        {
            get => _internal.supportedCompositeAlpha;
            set
            {
                _internal.supportedCompositeAlpha = value;
            }
        }

        public uint SupportedUsageFlags
        {
            get => _internal.supportedUsageFlags;
            set
            {
                _internal.supportedUsageFlags = value;
            }
        }

        public uint SupportedSurfaceCounters
        {
            get => _internal.supportedSurfaceCounters;
            set
            {
                _internal.supportedSurfaceCounters = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SurfaceCapabilities2EXT(SurfaceCapabilities2EXT s)
        {
            if (s.CurrentExtent != null)
            {
                s._internal.currentExtent = s.CurrentExtent;
            }
            if (s.MinImageExtent != null)
            {
                s._internal.minImageExtent = s.MinImageExtent;
            }
            if (s.MaxImageExtent != null)
            {
                s._internal.maxImageExtent = s.MaxImageExtent;
            }
            return s._internal;
        }

        public static implicit operator SurfaceCapabilities2EXT(AdamantiumVulkan.Core.Interop.SurfaceCapabilities2EXT s)
        {
            return new SurfaceCapabilities2EXT(s);
        }

    }

    public partial class DisplayPowerInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayPowerInfoEXT _internal;

        private GCHandleReference refpNext;

        public DisplayPowerInfoEXT()
        {
        }

        public DisplayPowerInfoEXT(AdamantiumVulkan.Core.Interop.DisplayPowerInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayPowerStateEXT PowerState
        {
            get => _internal.powerState;
            set
            {
                _internal.powerState = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayPowerInfoEXT(DisplayPowerInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DisplayPowerInfoEXT(AdamantiumVulkan.Core.Interop.DisplayPowerInfoEXT d)
        {
            return new DisplayPowerInfoEXT(d);
        }

    }

    public partial class DeviceEventInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceEventInfoEXT _internal;

        private GCHandleReference refpNext;

        public DeviceEventInfoEXT()
        {
        }

        public DeviceEventInfoEXT(AdamantiumVulkan.Core.Interop.DeviceEventInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DeviceEventTypeEXT DeviceEvent
        {
            get => _internal.deviceEvent;
            set
            {
                _internal.deviceEvent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceEventInfoEXT(DeviceEventInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DeviceEventInfoEXT(AdamantiumVulkan.Core.Interop.DeviceEventInfoEXT d)
        {
            return new DeviceEventInfoEXT(d);
        }

    }

    public partial class DisplayEventInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DisplayEventInfoEXT _internal;

        private GCHandleReference refpNext;

        public DisplayEventInfoEXT()
        {
        }

        public DisplayEventInfoEXT(AdamantiumVulkan.Core.Interop.DisplayEventInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DisplayEventTypeEXT DisplayEvent
        {
            get => _internal.displayEvent;
            set
            {
                _internal.displayEvent = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DisplayEventInfoEXT(DisplayEventInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DisplayEventInfoEXT(AdamantiumVulkan.Core.Interop.DisplayEventInfoEXT d)
        {
            return new DisplayEventInfoEXT(d);
        }

    }

    public partial class SwapchainCounterCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SwapchainCounterCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public SwapchainCounterCreateInfoEXT()
        {
        }

        public SwapchainCounterCreateInfoEXT(AdamantiumVulkan.Core.Interop.SwapchainCounterCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SurfaceCounters
        {
            get => _internal.surfaceCounters;
            set
            {
                _internal.surfaceCounters = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SwapchainCounterCreateInfoEXT(SwapchainCounterCreateInfoEXT s)
        {
            return s._internal;
        }

        public static implicit operator SwapchainCounterCreateInfoEXT(AdamantiumVulkan.Core.Interop.SwapchainCounterCreateInfoEXT s)
        {
            return new SwapchainCounterCreateInfoEXT(s);
        }

    }

    public partial class RefreshCycleDurationGOOGLE
    {
        private AdamantiumVulkan.Core.Interop.RefreshCycleDurationGOOGLE _internal;

        public RefreshCycleDurationGOOGLE()
        {
        }

        public RefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.Interop.RefreshCycleDurationGOOGLE _internal)
        {
            this._internal = _internal;
        }

        public ulong RefreshDuration
        {
            get => _internal.refreshDuration;
            set
            {
                _internal.refreshDuration = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RefreshCycleDurationGOOGLE(RefreshCycleDurationGOOGLE r)
        {
            return r._internal;
        }

        public static implicit operator RefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.Interop.RefreshCycleDurationGOOGLE r)
        {
            return new RefreshCycleDurationGOOGLE(r);
        }

    }

    public partial class PastPresentationTimingGOOGLE
    {
        private AdamantiumVulkan.Core.Interop.PastPresentationTimingGOOGLE _internal;

        public PastPresentationTimingGOOGLE()
        {
        }

        public PastPresentationTimingGOOGLE(AdamantiumVulkan.Core.Interop.PastPresentationTimingGOOGLE _internal)
        {
            this._internal = _internal;
        }

        public uint PresentID
        {
            get => _internal.presentID;
            set
            {
                _internal.presentID = value;
            }
        }

        public ulong DesiredPresentTime
        {
            get => _internal.desiredPresentTime;
            set
            {
                _internal.desiredPresentTime = value;
            }
        }

        public ulong ActualPresentTime
        {
            get => _internal.actualPresentTime;
            set
            {
                _internal.actualPresentTime = value;
            }
        }

        public ulong EarliestPresentTime
        {
            get => _internal.earliestPresentTime;
            set
            {
                _internal.earliestPresentTime = value;
            }
        }

        public ulong PresentMargin
        {
            get => _internal.presentMargin;
            set
            {
                _internal.presentMargin = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PastPresentationTimingGOOGLE(PastPresentationTimingGOOGLE p)
        {
            return p._internal;
        }

        public static implicit operator PastPresentationTimingGOOGLE(AdamantiumVulkan.Core.Interop.PastPresentationTimingGOOGLE p)
        {
            return new PastPresentationTimingGOOGLE(p);
        }

    }

    public partial class PresentTimeGOOGLE
    {
        private AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE _internal;

        public PresentTimeGOOGLE()
        {
        }

        public PresentTimeGOOGLE(AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE _internal)
        {
            this._internal = _internal;
        }

        public uint PresentID
        {
            get => _internal.presentID;
            set
            {
                _internal.presentID = value;
            }
        }

        public ulong DesiredPresentTime
        {
            get => _internal.desiredPresentTime;
            set
            {
                _internal.desiredPresentTime = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE(PresentTimeGOOGLE p)
        {
            return p._internal;
        }

        public static implicit operator PresentTimeGOOGLE(AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE p)
        {
            return new PresentTimeGOOGLE(p);
        }

    }

    public partial class PresentTimesInfoGOOGLE : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PresentTimesInfoGOOGLE _internal;

        private GCHandleReference refpNext;

        private StructReference refpTimes;

        public PresentTimesInfoGOOGLE()
        {
        }

        public PresentTimesInfoGOOGLE(AdamantiumVulkan.Core.Interop.PresentTimesInfoGOOGLE _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SwapchainCount
        {
            get => _internal.swapchainCount;
            set
            {
                _internal.swapchainCount = value;
            }
        }

        private PresentTimeGOOGLE pTimes;
        public PresentTimeGOOGLE PTimes
        {
            get
            {
                if(pTimes != null)
                    return pTimes;

                pTimes = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE>(_internal.pTimes);
                return pTimes;
            }
            set
            {
                refpTimes?.Dispose();
                AdamantiumVulkan.Core.Interop.PresentTimeGOOGLE tmp = value;
                refpTimes = new StructReference(tmp);
                pTimes = value;
                _internal.pTimes = refpTimes.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpTimes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PresentTimesInfoGOOGLE(PresentTimesInfoGOOGLE p)
        {
            return p._internal;
        }

        public static implicit operator PresentTimesInfoGOOGLE(AdamantiumVulkan.Core.Interop.PresentTimesInfoGOOGLE p)
        {
            return new PresentTimesInfoGOOGLE(p);
        }

    }

    public partial class PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX()
        {
        }

        public PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool PerViewPositionAllComponents
        {
            get => _internal.perViewPositionAllComponents;
            set
            {
                _internal.perViewPositionAllComponents = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(AdamantiumVulkan.Core.Interop.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX p)
        {
            return new PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(p);
        }

    }

    public partial class ViewportSwizzleNV
    {
        private AdamantiumVulkan.Core.Interop.ViewportSwizzleNV _internal;

        public ViewportSwizzleNV()
        {
        }

        public ViewportSwizzleNV(AdamantiumVulkan.Core.Interop.ViewportSwizzleNV _internal)
        {
            this._internal = _internal;
        }

        public ViewportCoordinateSwizzleNV X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public ViewportCoordinateSwizzleNV Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public ViewportCoordinateSwizzleNV Z
        {
            get => _internal.z;
            set
            {
                _internal.z = value;
            }
        }

        public ViewportCoordinateSwizzleNV W
        {
            get => _internal.w;
            set
            {
                _internal.w = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ViewportSwizzleNV(ViewportSwizzleNV v)
        {
            return v._internal;
        }

        public static implicit operator ViewportSwizzleNV(AdamantiumVulkan.Core.Interop.ViewportSwizzleNV v)
        {
            return new ViewportSwizzleNV(v);
        }

    }

    public partial class PipelineViewportSwizzleStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportSwizzleStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpViewportSwizzles;

        public PipelineViewportSwizzleStateCreateInfoNV()
        {
        }

        public PipelineViewportSwizzleStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportSwizzleStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint ViewportCount
        {
            get => _internal.viewportCount;
            set
            {
                _internal.viewportCount = value;
            }
        }

        private ViewportSwizzleNV pViewportSwizzles;
        public ViewportSwizzleNV PViewportSwizzles
        {
            get
            {
                if(pViewportSwizzles != null)
                    return pViewportSwizzles;

                pViewportSwizzles = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.ViewportSwizzleNV>(_internal.pViewportSwizzles);
                return pViewportSwizzles;
            }
            set
            {
                refpViewportSwizzles?.Dispose();
                AdamantiumVulkan.Core.Interop.ViewportSwizzleNV tmp = value;
                refpViewportSwizzles = new StructReference(tmp);
                pViewportSwizzles = value;
                _internal.pViewportSwizzles = refpViewportSwizzles.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpViewportSwizzles?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportSwizzleStateCreateInfoNV(PipelineViewportSwizzleStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportSwizzleStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportSwizzleStateCreateInfoNV p)
        {
            return new PipelineViewportSwizzleStateCreateInfoNV(p);
        }

    }

    public partial class PhysicalDeviceDiscardRectanglePropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDiscardRectanglePropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDiscardRectanglePropertiesEXT()
        {
        }

        public PhysicalDeviceDiscardRectanglePropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDiscardRectanglePropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxDiscardRectangles
        {
            get => _internal.maxDiscardRectangles;
            set
            {
                _internal.maxDiscardRectangles = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDiscardRectanglePropertiesEXT(PhysicalDeviceDiscardRectanglePropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDiscardRectanglePropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDiscardRectanglePropertiesEXT p)
        {
            return new PhysicalDeviceDiscardRectanglePropertiesEXT(p);
        }

    }

    public partial class PipelineDiscardRectangleStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineDiscardRectangleStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpDiscardRectangles;

        public PipelineDiscardRectangleStateCreateInfoEXT()
        {
        }

        public PipelineDiscardRectangleStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineDiscardRectangleStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public DiscardRectangleModeEXT DiscardRectangleMode
        {
            get => _internal.discardRectangleMode;
            set
            {
                _internal.discardRectangleMode = value;
            }
        }

        public uint DiscardRectangleCount
        {
            get => _internal.discardRectangleCount;
            set
            {
                _internal.discardRectangleCount = value;
            }
        }

        private Rect2D pDiscardRectangles;
        public Rect2D PDiscardRectangles
        {
            get
            {
                if(pDiscardRectangles != null)
                    return pDiscardRectangles;

                pDiscardRectangles = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Rect2D>(_internal.pDiscardRectangles);
                return pDiscardRectangles;
            }
            set
            {
                refpDiscardRectangles?.Dispose();
                AdamantiumVulkan.Core.Interop.Rect2D tmp = value;
                refpDiscardRectangles = new StructReference(tmp);
                pDiscardRectangles = value;
                _internal.pDiscardRectangles = refpDiscardRectangles.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDiscardRectangles?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineDiscardRectangleStateCreateInfoEXT(PipelineDiscardRectangleStateCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineDiscardRectangleStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineDiscardRectangleStateCreateInfoEXT p)
        {
            return new PipelineDiscardRectangleStateCreateInfoEXT(p);
        }

    }

    public partial class PhysicalDeviceConservativeRasterizationPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceConservativeRasterizationPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceConservativeRasterizationPropertiesEXT()
        {
        }

        public PhysicalDeviceConservativeRasterizationPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceConservativeRasterizationPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public float PrimitiveOverestimationSize
        {
            get => _internal.primitiveOverestimationSize;
            set
            {
                _internal.primitiveOverestimationSize = value;
            }
        }

        public float MaxExtraPrimitiveOverestimationSize
        {
            get => _internal.maxExtraPrimitiveOverestimationSize;
            set
            {
                _internal.maxExtraPrimitiveOverestimationSize = value;
            }
        }

        public float ExtraPrimitiveOverestimationSizeGranularity
        {
            get => _internal.extraPrimitiveOverestimationSizeGranularity;
            set
            {
                _internal.extraPrimitiveOverestimationSizeGranularity = value;
            }
        }

        public bool PrimitiveUnderestimation
        {
            get => _internal.primitiveUnderestimation;
            set
            {
                _internal.primitiveUnderestimation = value;
            }
        }

        public bool ConservativePointAndLineRasterization
        {
            get => _internal.conservativePointAndLineRasterization;
            set
            {
                _internal.conservativePointAndLineRasterization = value;
            }
        }

        public bool DegenerateTrianglesRasterized
        {
            get => _internal.degenerateTrianglesRasterized;
            set
            {
                _internal.degenerateTrianglesRasterized = value;
            }
        }

        public bool DegenerateLinesRasterized
        {
            get => _internal.degenerateLinesRasterized;
            set
            {
                _internal.degenerateLinesRasterized = value;
            }
        }

        public bool FullyCoveredFragmentShaderInputVariable
        {
            get => _internal.fullyCoveredFragmentShaderInputVariable;
            set
            {
                _internal.fullyCoveredFragmentShaderInputVariable = value;
            }
        }

        public bool ConservativeRasterizationPostDepthCoverage
        {
            get => _internal.conservativeRasterizationPostDepthCoverage;
            set
            {
                _internal.conservativeRasterizationPostDepthCoverage = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceConservativeRasterizationPropertiesEXT(PhysicalDeviceConservativeRasterizationPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceConservativeRasterizationPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceConservativeRasterizationPropertiesEXT p)
        {
            return new PhysicalDeviceConservativeRasterizationPropertiesEXT(p);
        }

    }

    public partial class PipelineRasterizationConservativeStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRasterizationConservativeStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public PipelineRasterizationConservativeStateCreateInfoEXT()
        {
        }

        public PipelineRasterizationConservativeStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationConservativeStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ConservativeRasterizationModeEXT ConservativeRasterizationMode
        {
            get => _internal.conservativeRasterizationMode;
            set
            {
                _internal.conservativeRasterizationMode = value;
            }
        }

        public float ExtraPrimitiveOverestimationSize
        {
            get => _internal.extraPrimitiveOverestimationSize;
            set
            {
                _internal.extraPrimitiveOverestimationSize = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRasterizationConservativeStateCreateInfoEXT(PipelineRasterizationConservativeStateCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRasterizationConservativeStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationConservativeStateCreateInfoEXT p)
        {
            return new PipelineRasterizationConservativeStateCreateInfoEXT(p);
        }

    }

    public partial class PhysicalDeviceDepthClipEnableFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthClipEnableFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDepthClipEnableFeaturesEXT()
        {
        }

        public PhysicalDeviceDepthClipEnableFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthClipEnableFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool DepthClipEnable
        {
            get => _internal.depthClipEnable;
            set
            {
                _internal.depthClipEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthClipEnableFeaturesEXT(PhysicalDeviceDepthClipEnableFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDepthClipEnableFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDepthClipEnableFeaturesEXT p)
        {
            return new PhysicalDeviceDepthClipEnableFeaturesEXT(p);
        }

    }

    public partial class PipelineRasterizationDepthClipStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRasterizationDepthClipStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public PipelineRasterizationDepthClipStateCreateInfoEXT()
        {
        }

        public PipelineRasterizationDepthClipStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationDepthClipStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public bool DepthClipEnable
        {
            get => _internal.depthClipEnable;
            set
            {
                _internal.depthClipEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRasterizationDepthClipStateCreateInfoEXT(PipelineRasterizationDepthClipStateCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRasterizationDepthClipStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineRasterizationDepthClipStateCreateInfoEXT p)
        {
            return new PipelineRasterizationDepthClipStateCreateInfoEXT(p);
        }

    }

    public partial class XYColorEXT
    {
        private AdamantiumVulkan.Core.Interop.XYColorEXT _internal;

        public XYColorEXT()
        {
        }

        public XYColorEXT(AdamantiumVulkan.Core.Interop.XYColorEXT _internal)
        {
            this._internal = _internal;
        }

        public float X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public float Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.XYColorEXT(XYColorEXT x)
        {
            return x._internal;
        }

        public static implicit operator XYColorEXT(AdamantiumVulkan.Core.Interop.XYColorEXT x)
        {
            return new XYColorEXT(x);
        }

    }

    public partial class HdrMetadataEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.HdrMetadataEXT _internal;

        private GCHandleReference refpNext;

        private XYColorEXT displayPrimaryRed;

        private XYColorEXT displayPrimaryGreen;

        private XYColorEXT displayPrimaryBlue;

        private XYColorEXT whitePoint;

        public HdrMetadataEXT()
        {
        }

        public HdrMetadataEXT(AdamantiumVulkan.Core.Interop.HdrMetadataEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public XYColorEXT DisplayPrimaryRed
        {
            get
            {
                if (displayPrimaryRed != null)
                {
                    return displayPrimaryRed;
                }
                displayPrimaryRed = _internal.displayPrimaryRed;
                return displayPrimaryRed;
            }
            set
            {
                displayPrimaryRed = value;
                _internal.displayPrimaryRed = value;
            }
        }

        public XYColorEXT DisplayPrimaryGreen
        {
            get
            {
                if (displayPrimaryGreen != null)
                {
                    return displayPrimaryGreen;
                }
                displayPrimaryGreen = _internal.displayPrimaryGreen;
                return displayPrimaryGreen;
            }
            set
            {
                displayPrimaryGreen = value;
                _internal.displayPrimaryGreen = value;
            }
        }

        public XYColorEXT DisplayPrimaryBlue
        {
            get
            {
                if (displayPrimaryBlue != null)
                {
                    return displayPrimaryBlue;
                }
                displayPrimaryBlue = _internal.displayPrimaryBlue;
                return displayPrimaryBlue;
            }
            set
            {
                displayPrimaryBlue = value;
                _internal.displayPrimaryBlue = value;
            }
        }

        public XYColorEXT WhitePoint
        {
            get
            {
                if (whitePoint != null)
                {
                    return whitePoint;
                }
                whitePoint = _internal.whitePoint;
                return whitePoint;
            }
            set
            {
                whitePoint = value;
                _internal.whitePoint = value;
            }
        }

        public float MaxLuminance
        {
            get => _internal.maxLuminance;
            set
            {
                _internal.maxLuminance = value;
            }
        }

        public float MinLuminance
        {
            get => _internal.minLuminance;
            set
            {
                _internal.minLuminance = value;
            }
        }

        public float MaxContentLightLevel
        {
            get => _internal.maxContentLightLevel;
            set
            {
                _internal.maxContentLightLevel = value;
            }
        }

        public float MaxFrameAverageLightLevel
        {
            get => _internal.maxFrameAverageLightLevel;
            set
            {
                _internal.maxFrameAverageLightLevel = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.HdrMetadataEXT(HdrMetadataEXT h)
        {
            if (h.DisplayPrimaryRed != null)
            {
                h._internal.displayPrimaryRed = h.DisplayPrimaryRed;
            }
            if (h.DisplayPrimaryGreen != null)
            {
                h._internal.displayPrimaryGreen = h.DisplayPrimaryGreen;
            }
            if (h.DisplayPrimaryBlue != null)
            {
                h._internal.displayPrimaryBlue = h.DisplayPrimaryBlue;
            }
            if (h.WhitePoint != null)
            {
                h._internal.whitePoint = h.WhitePoint;
            }
            return h._internal;
        }

        public static implicit operator HdrMetadataEXT(AdamantiumVulkan.Core.Interop.HdrMetadataEXT h)
        {
            return new HdrMetadataEXT(h);
        }

    }

    public partial class DebugUtilsObjectNameInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT _internal;

        private GCHandleReference refpNext;

        private StringReference refpObjectName;

        public DebugUtilsObjectNameInfoEXT()
        {
        }

        public DebugUtilsObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ObjectType ObjectType
        {
            get => _internal.objectType;
            set
            {
                _internal.objectType = value;
            }
        }

        public ulong ObjectHandle
        {
            get => _internal.objectHandle;
            set
            {
                _internal.objectHandle = value;
            }
        }

        private string pObjectName;
        public string PObjectName
        {
            get
            {
                if(pObjectName != null)
                    return pObjectName;

                pObjectName = Marshal.PtrToStringAnsi(_internal.pObjectName);
                return pObjectName;
            }
            set
            {
                refpObjectName?.Dispose();
                refpObjectName = new StringReference(value, false);
                pObjectName = value;
                _internal.pObjectName = refpObjectName.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpObjectName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT(DebugUtilsObjectNameInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugUtilsObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT d)
        {
            return new DebugUtilsObjectNameInfoEXT(d);
        }

    }

    public partial class DebugUtilsObjectTagInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugUtilsObjectTagInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpTag;

        public DebugUtilsObjectTagInfoEXT()
        {
        }

        public DebugUtilsObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsObjectTagInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ObjectType ObjectType
        {
            get => _internal.objectType;
            set
            {
                _internal.objectType = value;
            }
        }

        public ulong ObjectHandle
        {
            get => _internal.objectHandle;
            set
            {
                _internal.objectHandle = value;
            }
        }

        public ulong TagName
        {
            get => _internal.tagName;
            set
            {
                _internal.tagName = value;
            }
        }

        public ulong TagSize
        {
            get => _internal.tagSize;
            set
            {
                _internal.tagSize = value;
            }
        }

        private System.IntPtr pTag;
        public System.IntPtr PTag
        {
            get
            {
                if(pTag != null)
                    return pTag;

                pTag = _internal.pTag;
                return pTag;
            }
            set
            {
                refpTag?.Dispose();
                refpTag = new GCHandleReference(value);
                pTag = value;
                _internal.pTag = refpTag.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpTag?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugUtilsObjectTagInfoEXT(DebugUtilsObjectTagInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugUtilsObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsObjectTagInfoEXT d)
        {
            return new DebugUtilsObjectTagInfoEXT(d);
        }

    }

    public partial class DebugUtilsLabelEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT _internal;

        private GCHandleReference refpNext;

        private StringReference refpLabelName;

        private float[] color;

        public DebugUtilsLabelEXT()
        {
        }

        public DebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private string pLabelName;
        public string PLabelName
        {
            get
            {
                if(pLabelName != null)
                    return pLabelName;

                pLabelName = Marshal.PtrToStringAnsi(_internal.pLabelName);
                return pLabelName;
            }
            set
            {
                refpLabelName?.Dispose();
                refpLabelName = new StringReference(value, false);
                pLabelName = value;
                _internal.pLabelName = refpLabelName.Handle;
            }
        }

        public float[] Color
        {
            get
            {
                if(color != null)
                    return color;

                var tmpArr = new float[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.color[i];
                    }
                }
                color = tmpArr;
                return color;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Color), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.color[i] = value[i];
                    }
                }
                color = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpLabelName?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT(DebugUtilsLabelEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT d)
        {
            return new DebugUtilsLabelEXT(d);
        }

    }

    public partial class DebugUtilsMessengerCallbackDataEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCallbackDataEXT _internal;

        private GCHandleReference refpNext;

        private StringReference refpMessageIdName;

        private StringReference refpMessage;

        private StructReference refpQueueLabels;

        private StructReference refpCmdBufLabels;

        private StructReference refpObjects;

        public DebugUtilsMessengerCallbackDataEXT()
        {
        }

        public DebugUtilsMessengerCallbackDataEXT(AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCallbackDataEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        private string pMessageIdName;
        public string PMessageIdName
        {
            get
            {
                if(pMessageIdName != null)
                    return pMessageIdName;

                pMessageIdName = Marshal.PtrToStringAnsi(_internal.pMessageIdName);
                return pMessageIdName;
            }
            set
            {
                refpMessageIdName?.Dispose();
                refpMessageIdName = new StringReference(value, false);
                pMessageIdName = value;
                _internal.pMessageIdName = refpMessageIdName.Handle;
            }
        }

        public int MessageIdNumber
        {
            get => _internal.messageIdNumber;
            set
            {
                _internal.messageIdNumber = value;
            }
        }

        private string pMessage;
        public string PMessage
        {
            get
            {
                if(pMessage != null)
                    return pMessage;

                pMessage = Marshal.PtrToStringAnsi(_internal.pMessage);
                return pMessage;
            }
            set
            {
                refpMessage?.Dispose();
                refpMessage = new StringReference(value, false);
                pMessage = value;
                _internal.pMessage = refpMessage.Handle;
            }
        }

        public uint QueueLabelCount
        {
            get => _internal.queueLabelCount;
            set
            {
                _internal.queueLabelCount = value;
            }
        }

        private DebugUtilsLabelEXT pQueueLabels;
        public DebugUtilsLabelEXT PQueueLabels
        {
            get
            {
                if(pQueueLabels != null)
                    return pQueueLabels;

                pQueueLabels = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT>(_internal.pQueueLabels);
                return pQueueLabels;
            }
            set
            {
                refpQueueLabels?.Dispose();
                AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT tmp = value;
                refpQueueLabels = new StructReference(tmp);
                pQueueLabels = value;
                _internal.pQueueLabels = refpQueueLabels.Handle;
            }
        }

        public uint CmdBufLabelCount
        {
            get => _internal.cmdBufLabelCount;
            set
            {
                _internal.cmdBufLabelCount = value;
            }
        }

        private DebugUtilsLabelEXT pCmdBufLabels;
        public DebugUtilsLabelEXT PCmdBufLabels
        {
            get
            {
                if(pCmdBufLabels != null)
                    return pCmdBufLabels;

                pCmdBufLabels = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT>(_internal.pCmdBufLabels);
                return pCmdBufLabels;
            }
            set
            {
                refpCmdBufLabels?.Dispose();
                AdamantiumVulkan.Core.Interop.DebugUtilsLabelEXT tmp = value;
                refpCmdBufLabels = new StructReference(tmp);
                pCmdBufLabels = value;
                _internal.pCmdBufLabels = refpCmdBufLabels.Handle;
            }
        }

        public uint ObjectCount
        {
            get => _internal.objectCount;
            set
            {
                _internal.objectCount = value;
            }
        }

        private DebugUtilsObjectNameInfoEXT pObjects;
        public DebugUtilsObjectNameInfoEXT PObjects
        {
            get
            {
                if(pObjects != null)
                    return pObjects;

                pObjects = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT>(_internal.pObjects);
                return pObjects;
            }
            set
            {
                refpObjects?.Dispose();
                AdamantiumVulkan.Core.Interop.DebugUtilsObjectNameInfoEXT tmp = value;
                refpObjects = new StructReference(tmp);
                pObjects = value;
                _internal.pObjects = refpObjects.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpMessageIdName?.Dispose();
            refpMessage?.Dispose();
            refpQueueLabels?.Dispose();
            refpCmdBufLabels?.Dispose();
            refpObjects?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCallbackDataEXT(DebugUtilsMessengerCallbackDataEXT d)
        {
            return d._internal;
        }

        public static implicit operator DebugUtilsMessengerCallbackDataEXT(AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCallbackDataEXT d)
        {
            return new DebugUtilsMessengerCallbackDataEXT(d);
        }

    }

    public partial class DebugUtilsMessengerCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpUserData;

        public DebugUtilsMessengerCreateInfoEXT()
        {
        }

        public DebugUtilsMessengerCreateInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint MessageSeverity
        {
            get => _internal.messageSeverity;
            set
            {
                _internal.messageSeverity = value;
            }
        }

        public uint MessageType
        {
            get => _internal.messageType;
            set
            {
                _internal.messageType = value;
            }
        }

        public PFN_vkDebugUtilsMessengerCallbackEXT PfnUserCallback
        {
            get => _internal.pfnUserCallback;
            set
            {
                _internal.pfnUserCallback = value;
            }
        }

        private System.IntPtr pUserData;
        public System.IntPtr PUserData
        {
            get
            {
                if(pUserData != null)
                    return pUserData;

                pUserData = _internal.pUserData;
                return pUserData;
            }
            set
            {
                refpUserData?.Dispose();
                refpUserData = new GCHandleReference(value);
                pUserData = value;
                _internal.pUserData = refpUserData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpUserData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCreateInfoEXT(DebugUtilsMessengerCreateInfoEXT d)
        {
            if (d.PfnUserCallback != null)
            {
                d._internal.pfnUserCallback = d.PfnUserCallback;
            }
            return d._internal;
        }

        public static implicit operator DebugUtilsMessengerCreateInfoEXT(AdamantiumVulkan.Core.Interop.DebugUtilsMessengerCreateInfoEXT d)
        {
            return new DebugUtilsMessengerCreateInfoEXT(d);
        }

    }

    public partial class SamplerReductionModeCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SamplerReductionModeCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public SamplerReductionModeCreateInfoEXT()
        {
        }

        public SamplerReductionModeCreateInfoEXT(AdamantiumVulkan.Core.Interop.SamplerReductionModeCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SamplerReductionModeEXT ReductionMode
        {
            get => _internal.reductionMode;
            set
            {
                _internal.reductionMode = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SamplerReductionModeCreateInfoEXT(SamplerReductionModeCreateInfoEXT s)
        {
            return s._internal;
        }

        public static implicit operator SamplerReductionModeCreateInfoEXT(AdamantiumVulkan.Core.Interop.SamplerReductionModeCreateInfoEXT s)
        {
            return new SamplerReductionModeCreateInfoEXT(s);
        }

    }

    public partial class PhysicalDeviceSamplerFilterMinmaxPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceSamplerFilterMinmaxPropertiesEXT()
        {
        }

        public PhysicalDeviceSamplerFilterMinmaxPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool FilterMinmaxSingleComponentFormats
        {
            get => _internal.filterMinmaxSingleComponentFormats;
            set
            {
                _internal.filterMinmaxSingleComponentFormats = value;
            }
        }

        public bool FilterMinmaxImageComponentMapping
        {
            get => _internal.filterMinmaxImageComponentMapping;
            set
            {
                _internal.filterMinmaxImageComponentMapping = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesEXT(PhysicalDeviceSamplerFilterMinmaxPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSamplerFilterMinmaxPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceSamplerFilterMinmaxPropertiesEXT p)
        {
            return new PhysicalDeviceSamplerFilterMinmaxPropertiesEXT(p);
        }

    }

    public partial class PhysicalDeviceInlineUniformBlockFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceInlineUniformBlockFeaturesEXT()
        {
        }

        public PhysicalDeviceInlineUniformBlockFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool InlineUniformBlock
        {
            get => _internal.inlineUniformBlock;
            set
            {
                _internal.inlineUniformBlock = value;
            }
        }

        public bool DescriptorBindingInlineUniformBlockUpdateAfterBind
        {
            get => _internal.descriptorBindingInlineUniformBlockUpdateAfterBind;
            set
            {
                _internal.descriptorBindingInlineUniformBlockUpdateAfterBind = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockFeaturesEXT(PhysicalDeviceInlineUniformBlockFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceInlineUniformBlockFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockFeaturesEXT p)
        {
            return new PhysicalDeviceInlineUniformBlockFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceInlineUniformBlockPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceInlineUniformBlockPropertiesEXT()
        {
        }

        public PhysicalDeviceInlineUniformBlockPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxInlineUniformBlockSize
        {
            get => _internal.maxInlineUniformBlockSize;
            set
            {
                _internal.maxInlineUniformBlockSize = value;
            }
        }

        public uint MaxPerStageDescriptorInlineUniformBlocks
        {
            get => _internal.maxPerStageDescriptorInlineUniformBlocks;
            set
            {
                _internal.maxPerStageDescriptorInlineUniformBlocks = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = value;
            }
        }

        public uint MaxDescriptorSetInlineUniformBlocks
        {
            get => _internal.maxDescriptorSetInlineUniformBlocks;
            set
            {
                _internal.maxDescriptorSetInlineUniformBlocks = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks
        {
            get => _internal.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockPropertiesEXT(PhysicalDeviceInlineUniformBlockPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceInlineUniformBlockPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceInlineUniformBlockPropertiesEXT p)
        {
            return new PhysicalDeviceInlineUniformBlockPropertiesEXT(p);
        }

    }

    public partial class WriteDescriptorSetInlineUniformBlockEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.WriteDescriptorSetInlineUniformBlockEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpData;

        public WriteDescriptorSetInlineUniformBlockEXT()
        {
        }

        public WriteDescriptorSetInlineUniformBlockEXT(AdamantiumVulkan.Core.Interop.WriteDescriptorSetInlineUniformBlockEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DataSize
        {
            get => _internal.dataSize;
            set
            {
                _internal.dataSize = value;
            }
        }

        private System.IntPtr pData;
        public System.IntPtr PData
        {
            get
            {
                if(pData != null)
                    return pData;

                pData = _internal.pData;
                return pData;
            }
            set
            {
                refpData?.Dispose();
                refpData = new GCHandleReference(value);
                pData = value;
                _internal.pData = refpData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.WriteDescriptorSetInlineUniformBlockEXT(WriteDescriptorSetInlineUniformBlockEXT w)
        {
            return w._internal;
        }

        public static implicit operator WriteDescriptorSetInlineUniformBlockEXT(AdamantiumVulkan.Core.Interop.WriteDescriptorSetInlineUniformBlockEXT w)
        {
            return new WriteDescriptorSetInlineUniformBlockEXT(w);
        }

    }

    public partial class DescriptorPoolInlineUniformBlockCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorPoolInlineUniformBlockCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public DescriptorPoolInlineUniformBlockCreateInfoEXT()
        {
        }

        public DescriptorPoolInlineUniformBlockCreateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorPoolInlineUniformBlockCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxInlineUniformBlockBindings
        {
            get => _internal.maxInlineUniformBlockBindings;
            set
            {
                _internal.maxInlineUniformBlockBindings = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorPoolInlineUniformBlockCreateInfoEXT(DescriptorPoolInlineUniformBlockCreateInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorPoolInlineUniformBlockCreateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorPoolInlineUniformBlockCreateInfoEXT d)
        {
            return new DescriptorPoolInlineUniformBlockCreateInfoEXT(d);
        }

    }

    public partial class SampleLocationEXT
    {
        private AdamantiumVulkan.Core.Interop.SampleLocationEXT _internal;

        public SampleLocationEXT()
        {
        }

        public SampleLocationEXT(AdamantiumVulkan.Core.Interop.SampleLocationEXT _internal)
        {
            this._internal = _internal;
        }

        public float X
        {
            get => _internal.x;
            set
            {
                _internal.x = value;
            }
        }

        public float Y
        {
            get => _internal.y;
            set
            {
                _internal.y = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SampleLocationEXT(SampleLocationEXT s)
        {
            return s._internal;
        }

        public static implicit operator SampleLocationEXT(AdamantiumVulkan.Core.Interop.SampleLocationEXT s)
        {
            return new SampleLocationEXT(s);
        }

    }

    public partial class SampleLocationsInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.SampleLocationsInfoEXT _internal;

        private GCHandleReference refpNext;

        private Extent2D sampleLocationGridSize;

        private StructReference refpSampleLocations;

        public SampleLocationsInfoEXT()
        {
        }

        public SampleLocationsInfoEXT(AdamantiumVulkan.Core.Interop.SampleLocationsInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public SampleCountFlagBits SampleLocationsPerPixel
        {
            get => _internal.sampleLocationsPerPixel;
            set
            {
                _internal.sampleLocationsPerPixel = value;
            }
        }

        public Extent2D SampleLocationGridSize
        {
            get
            {
                if (sampleLocationGridSize != null)
                {
                    return sampleLocationGridSize;
                }
                sampleLocationGridSize = _internal.sampleLocationGridSize;
                return sampleLocationGridSize;
            }
            set
            {
                sampleLocationGridSize = value;
                _internal.sampleLocationGridSize = value;
            }
        }

        public uint SampleLocationsCount
        {
            get => _internal.sampleLocationsCount;
            set
            {
                _internal.sampleLocationsCount = value;
            }
        }

        private SampleLocationEXT pSampleLocations;
        public SampleLocationEXT PSampleLocations
        {
            get
            {
                if(pSampleLocations != null)
                    return pSampleLocations;

                pSampleLocations = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SampleLocationEXT>(_internal.pSampleLocations);
                return pSampleLocations;
            }
            set
            {
                refpSampleLocations?.Dispose();
                AdamantiumVulkan.Core.Interop.SampleLocationEXT tmp = value;
                refpSampleLocations = new StructReference(tmp);
                pSampleLocations = value;
                _internal.pSampleLocations = refpSampleLocations.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpSampleLocations?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SampleLocationsInfoEXT(SampleLocationsInfoEXT s)
        {
            if (s.SampleLocationGridSize != null)
            {
                s._internal.sampleLocationGridSize = s.SampleLocationGridSize;
            }
            return s._internal;
        }

        public static implicit operator SampleLocationsInfoEXT(AdamantiumVulkan.Core.Interop.SampleLocationsInfoEXT s)
        {
            return new SampleLocationsInfoEXT(s);
        }

    }

    public partial class AttachmentSampleLocationsEXT
    {
        private AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT _internal;

        private SampleLocationsInfoEXT sampleLocationsInfo;

        public AttachmentSampleLocationsEXT()
        {
        }

        public AttachmentSampleLocationsEXT(AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT _internal)
        {
            this._internal = _internal;
        }

        public uint AttachmentIndex
        {
            get => _internal.attachmentIndex;
            set
            {
                _internal.attachmentIndex = value;
            }
        }

        public SampleLocationsInfoEXT SampleLocationsInfo
        {
            get
            {
                if (sampleLocationsInfo != null)
                {
                    return sampleLocationsInfo;
                }
                sampleLocationsInfo = _internal.sampleLocationsInfo;
                return sampleLocationsInfo;
            }
            set
            {
                sampleLocationsInfo = value;
                _internal.sampleLocationsInfo = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT(AttachmentSampleLocationsEXT a)
        {
            if (a.SampleLocationsInfo != null)
            {
                a._internal.sampleLocationsInfo = a.SampleLocationsInfo;
            }
            return a._internal;
        }

        public static implicit operator AttachmentSampleLocationsEXT(AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT a)
        {
            return new AttachmentSampleLocationsEXT(a);
        }

    }

    public partial class SubpassSampleLocationsEXT
    {
        private AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT _internal;

        private SampleLocationsInfoEXT sampleLocationsInfo;

        public SubpassSampleLocationsEXT()
        {
        }

        public SubpassSampleLocationsEXT(AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT _internal)
        {
            this._internal = _internal;
        }

        public uint SubpassIndex
        {
            get => _internal.subpassIndex;
            set
            {
                _internal.subpassIndex = value;
            }
        }

        public SampleLocationsInfoEXT SampleLocationsInfo
        {
            get
            {
                if (sampleLocationsInfo != null)
                {
                    return sampleLocationsInfo;
                }
                sampleLocationsInfo = _internal.sampleLocationsInfo;
                return sampleLocationsInfo;
            }
            set
            {
                sampleLocationsInfo = value;
                _internal.sampleLocationsInfo = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT(SubpassSampleLocationsEXT s)
        {
            if (s.SampleLocationsInfo != null)
            {
                s._internal.sampleLocationsInfo = s.SampleLocationsInfo;
            }
            return s._internal;
        }

        public static implicit operator SubpassSampleLocationsEXT(AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT s)
        {
            return new SubpassSampleLocationsEXT(s);
        }

    }

    public partial class RenderPassSampleLocationsBeginInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassSampleLocationsBeginInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttachmentInitialSampleLocations;

        private StructReference refpPostSubpassSampleLocations;

        public RenderPassSampleLocationsBeginInfoEXT()
        {
        }

        public RenderPassSampleLocationsBeginInfoEXT(AdamantiumVulkan.Core.Interop.RenderPassSampleLocationsBeginInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AttachmentInitialSampleLocationsCount
        {
            get => _internal.attachmentInitialSampleLocationsCount;
            set
            {
                _internal.attachmentInitialSampleLocationsCount = value;
            }
        }

        private AttachmentSampleLocationsEXT pAttachmentInitialSampleLocations;
        public AttachmentSampleLocationsEXT PAttachmentInitialSampleLocations
        {
            get
            {
                if(pAttachmentInitialSampleLocations != null)
                    return pAttachmentInitialSampleLocations;

                pAttachmentInitialSampleLocations = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT>(_internal.pAttachmentInitialSampleLocations);
                return pAttachmentInitialSampleLocations;
            }
            set
            {
                refpAttachmentInitialSampleLocations?.Dispose();
                AdamantiumVulkan.Core.Interop.AttachmentSampleLocationsEXT tmp = value;
                refpAttachmentInitialSampleLocations = new StructReference(tmp);
                pAttachmentInitialSampleLocations = value;
                _internal.pAttachmentInitialSampleLocations = refpAttachmentInitialSampleLocations.Handle;
            }
        }

        public uint PostSubpassSampleLocationsCount
        {
            get => _internal.postSubpassSampleLocationsCount;
            set
            {
                _internal.postSubpassSampleLocationsCount = value;
            }
        }

        private SubpassSampleLocationsEXT pPostSubpassSampleLocations;
        public SubpassSampleLocationsEXT PPostSubpassSampleLocations
        {
            get
            {
                if(pPostSubpassSampleLocations != null)
                    return pPostSubpassSampleLocations;

                pPostSubpassSampleLocations = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT>(_internal.pPostSubpassSampleLocations);
                return pPostSubpassSampleLocations;
            }
            set
            {
                refpPostSubpassSampleLocations?.Dispose();
                AdamantiumVulkan.Core.Interop.SubpassSampleLocationsEXT tmp = value;
                refpPostSubpassSampleLocations = new StructReference(tmp);
                pPostSubpassSampleLocations = value;
                _internal.pPostSubpassSampleLocations = refpPostSubpassSampleLocations.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttachmentInitialSampleLocations?.Dispose();
            refpPostSubpassSampleLocations?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassSampleLocationsBeginInfoEXT(RenderPassSampleLocationsBeginInfoEXT r)
        {
            return r._internal;
        }

        public static implicit operator RenderPassSampleLocationsBeginInfoEXT(AdamantiumVulkan.Core.Interop.RenderPassSampleLocationsBeginInfoEXT r)
        {
            return new RenderPassSampleLocationsBeginInfoEXT(r);
        }

    }

    public partial class PipelineSampleLocationsStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineSampleLocationsStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private SampleLocationsInfoEXT sampleLocationsInfo;

        public PipelineSampleLocationsStateCreateInfoEXT()
        {
        }

        public PipelineSampleLocationsStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineSampleLocationsStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool SampleLocationsEnable
        {
            get => _internal.sampleLocationsEnable;
            set
            {
                _internal.sampleLocationsEnable = value;
            }
        }

        public SampleLocationsInfoEXT SampleLocationsInfo
        {
            get
            {
                if (sampleLocationsInfo != null)
                {
                    return sampleLocationsInfo;
                }
                sampleLocationsInfo = _internal.sampleLocationsInfo;
                return sampleLocationsInfo;
            }
            set
            {
                sampleLocationsInfo = value;
                _internal.sampleLocationsInfo = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineSampleLocationsStateCreateInfoEXT(PipelineSampleLocationsStateCreateInfoEXT p)
        {
            if (p.SampleLocationsInfo != null)
            {
                p._internal.sampleLocationsInfo = p.SampleLocationsInfo;
            }
            return p._internal;
        }

        public static implicit operator PipelineSampleLocationsStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineSampleLocationsStateCreateInfoEXT p)
        {
            return new PipelineSampleLocationsStateCreateInfoEXT(p);
        }

    }

    public partial class PhysicalDeviceSampleLocationsPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceSampleLocationsPropertiesEXT _internal;

        private GCHandleReference refpNext;

        private Extent2D maxSampleLocationGridSize;

        private float[] sampleLocationCoordinateRange;

        public PhysicalDeviceSampleLocationsPropertiesEXT()
        {
        }

        public PhysicalDeviceSampleLocationsPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceSampleLocationsPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint SampleLocationSampleCounts
        {
            get => _internal.sampleLocationSampleCounts;
            set
            {
                _internal.sampleLocationSampleCounts = value;
            }
        }

        public Extent2D MaxSampleLocationGridSize
        {
            get
            {
                if (maxSampleLocationGridSize != null)
                {
                    return maxSampleLocationGridSize;
                }
                maxSampleLocationGridSize = _internal.maxSampleLocationGridSize;
                return maxSampleLocationGridSize;
            }
            set
            {
                maxSampleLocationGridSize = value;
                _internal.maxSampleLocationGridSize = value;
            }
        }

        public float[] SampleLocationCoordinateRange
        {
            get
            {
                if(sampleLocationCoordinateRange != null)
                    return sampleLocationCoordinateRange;

                var tmpArr = new float[2];
                unsafe
                {
                    for(int i = 0; i < 2; ++i)
                    {
                        tmpArr[i] = _internal.sampleLocationCoordinateRange[i];
                    }
                }
                sampleLocationCoordinateRange = tmpArr;
                return sampleLocationCoordinateRange;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(SampleLocationCoordinateRange), "Array is out of bounds. Size should not be more than 2");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.sampleLocationCoordinateRange[i] = value[i];
                    }
                }
                sampleLocationCoordinateRange = value;
            }
        }

        public uint SampleLocationSubPixelBits
        {
            get => _internal.sampleLocationSubPixelBits;
            set
            {
                _internal.sampleLocationSubPixelBits = value;
            }
        }

        public bool VariableSampleLocations
        {
            get => _internal.variableSampleLocations;
            set
            {
                _internal.variableSampleLocations = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceSampleLocationsPropertiesEXT(PhysicalDeviceSampleLocationsPropertiesEXT p)
        {
            if (p.MaxSampleLocationGridSize != null)
            {
                p._internal.maxSampleLocationGridSize = p.MaxSampleLocationGridSize;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceSampleLocationsPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceSampleLocationsPropertiesEXT p)
        {
            return new PhysicalDeviceSampleLocationsPropertiesEXT(p);
        }

    }

    public partial class MultisamplePropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MultisamplePropertiesEXT _internal;

        private GCHandleReference refpNext;

        private Extent2D maxSampleLocationGridSize;

        public MultisamplePropertiesEXT()
        {
        }

        public MultisamplePropertiesEXT(AdamantiumVulkan.Core.Interop.MultisamplePropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Extent2D MaxSampleLocationGridSize
        {
            get
            {
                if (maxSampleLocationGridSize != null)
                {
                    return maxSampleLocationGridSize;
                }
                maxSampleLocationGridSize = _internal.maxSampleLocationGridSize;
                return maxSampleLocationGridSize;
            }
            set
            {
                maxSampleLocationGridSize = value;
                _internal.maxSampleLocationGridSize = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MultisamplePropertiesEXT(MultisamplePropertiesEXT m)
        {
            if (m.MaxSampleLocationGridSize != null)
            {
                m._internal.maxSampleLocationGridSize = m.MaxSampleLocationGridSize;
            }
            return m._internal;
        }

        public static implicit operator MultisamplePropertiesEXT(AdamantiumVulkan.Core.Interop.MultisamplePropertiesEXT m)
        {
            return new MultisamplePropertiesEXT(m);
        }

    }

    public partial class PhysicalDeviceBlendOperationAdvancedFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceBlendOperationAdvancedFeaturesEXT()
        {
        }

        public PhysicalDeviceBlendOperationAdvancedFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool AdvancedBlendCoherentOperations
        {
            get => _internal.advancedBlendCoherentOperations;
            set
            {
                _internal.advancedBlendCoherentOperations = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedFeaturesEXT(PhysicalDeviceBlendOperationAdvancedFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceBlendOperationAdvancedFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedFeaturesEXT p)
        {
            return new PhysicalDeviceBlendOperationAdvancedFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceBlendOperationAdvancedPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceBlendOperationAdvancedPropertiesEXT()
        {
        }

        public PhysicalDeviceBlendOperationAdvancedPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AdvancedBlendMaxColorAttachments
        {
            get => _internal.advancedBlendMaxColorAttachments;
            set
            {
                _internal.advancedBlendMaxColorAttachments = value;
            }
        }

        public bool AdvancedBlendIndependentBlend
        {
            get => _internal.advancedBlendIndependentBlend;
            set
            {
                _internal.advancedBlendIndependentBlend = value;
            }
        }

        public bool AdvancedBlendNonPremultipliedSrcColor
        {
            get => _internal.advancedBlendNonPremultipliedSrcColor;
            set
            {
                _internal.advancedBlendNonPremultipliedSrcColor = value;
            }
        }

        public bool AdvancedBlendNonPremultipliedDstColor
        {
            get => _internal.advancedBlendNonPremultipliedDstColor;
            set
            {
                _internal.advancedBlendNonPremultipliedDstColor = value;
            }
        }

        public bool AdvancedBlendCorrelatedOverlap
        {
            get => _internal.advancedBlendCorrelatedOverlap;
            set
            {
                _internal.advancedBlendCorrelatedOverlap = value;
            }
        }

        public bool AdvancedBlendAllOperations
        {
            get => _internal.advancedBlendAllOperations;
            set
            {
                _internal.advancedBlendAllOperations = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedPropertiesEXT(PhysicalDeviceBlendOperationAdvancedPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceBlendOperationAdvancedPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBlendOperationAdvancedPropertiesEXT p)
        {
            return new PhysicalDeviceBlendOperationAdvancedPropertiesEXT(p);
        }

    }

    public partial class PipelineColorBlendAdvancedStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineColorBlendAdvancedStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public PipelineColorBlendAdvancedStateCreateInfoEXT()
        {
        }

        public PipelineColorBlendAdvancedStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineColorBlendAdvancedStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool SrcPremultiplied
        {
            get => _internal.srcPremultiplied;
            set
            {
                _internal.srcPremultiplied = value;
            }
        }

        public bool DstPremultiplied
        {
            get => _internal.dstPremultiplied;
            set
            {
                _internal.dstPremultiplied = value;
            }
        }

        public BlendOverlapEXT BlendOverlap
        {
            get => _internal.blendOverlap;
            set
            {
                _internal.blendOverlap = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineColorBlendAdvancedStateCreateInfoEXT(PipelineColorBlendAdvancedStateCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineColorBlendAdvancedStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineColorBlendAdvancedStateCreateInfoEXT p)
        {
            return new PipelineColorBlendAdvancedStateCreateInfoEXT(p);
        }

    }

    public partial class PipelineCoverageToColorStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineCoverageToColorStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public PipelineCoverageToColorStateCreateInfoNV()
        {
        }

        public PipelineCoverageToColorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineCoverageToColorStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public bool CoverageToColorEnable
        {
            get => _internal.coverageToColorEnable;
            set
            {
                _internal.coverageToColorEnable = value;
            }
        }

        public uint CoverageToColorLocation
        {
            get => _internal.coverageToColorLocation;
            set
            {
                _internal.coverageToColorLocation = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineCoverageToColorStateCreateInfoNV(PipelineCoverageToColorStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineCoverageToColorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineCoverageToColorStateCreateInfoNV p)
        {
            return new PipelineCoverageToColorStateCreateInfoNV(p);
        }

    }

    public partial class PipelineCoverageModulationStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineCoverageModulationStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpCoverageModulationTable;

        public PipelineCoverageModulationStateCreateInfoNV()
        {
        }

        public PipelineCoverageModulationStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineCoverageModulationStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public CoverageModulationModeNV CoverageModulationMode
        {
            get => _internal.coverageModulationMode;
            set
            {
                _internal.coverageModulationMode = value;
            }
        }

        public bool CoverageModulationTableEnable
        {
            get => _internal.coverageModulationTableEnable;
            set
            {
                _internal.coverageModulationTableEnable = value;
            }
        }

        public uint CoverageModulationTableCount
        {
            get => _internal.coverageModulationTableCount;
            set
            {
                _internal.coverageModulationTableCount = value;
            }
        }

        public float PCoverageModulationTable
        {
            get
            {
                return Marshal.PtrToStructure<float>(_internal.pCoverageModulationTable);
            }
            set
            {
                refpCoverageModulationTable?.Dispose();
                refpCoverageModulationTable = new StructReference(value);
                _internal.pCoverageModulationTable = refpCoverageModulationTable.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpCoverageModulationTable?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineCoverageModulationStateCreateInfoNV(PipelineCoverageModulationStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineCoverageModulationStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineCoverageModulationStateCreateInfoNV p)
        {
            return new PipelineCoverageModulationStateCreateInfoNV(p);
        }

    }

    public partial class DrmFormatModifierPropertiesEXT
    {
        private AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT _internal;

        public DrmFormatModifierPropertiesEXT()
        {
        }

        public DrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public ulong DrmFormatModifier
        {
            get => _internal.drmFormatModifier;
            set
            {
                _internal.drmFormatModifier = value;
            }
        }

        public uint DrmFormatModifierPlaneCount
        {
            get => _internal.drmFormatModifierPlaneCount;
            set
            {
                _internal.drmFormatModifierPlaneCount = value;
            }
        }

        public uint DrmFormatModifierTilingFeatures
        {
            get => _internal.drmFormatModifierTilingFeatures;
            set
            {
                _internal.drmFormatModifierTilingFeatures = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT(DrmFormatModifierPropertiesEXT d)
        {
            return d._internal;
        }

        public static implicit operator DrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT d)
        {
            return new DrmFormatModifierPropertiesEXT(d);
        }

    }

    public partial class DrmFormatModifierPropertiesListEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesListEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpDrmFormatModifierProperties;

        public DrmFormatModifierPropertiesListEXT()
        {
        }

        public DrmFormatModifierPropertiesListEXT(AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesListEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DrmFormatModifierCount
        {
            get => _internal.drmFormatModifierCount;
            set
            {
                _internal.drmFormatModifierCount = value;
            }
        }

        private DrmFormatModifierPropertiesEXT pDrmFormatModifierProperties;
        public DrmFormatModifierPropertiesEXT PDrmFormatModifierProperties
        {
            get
            {
                if(pDrmFormatModifierProperties != null)
                    return pDrmFormatModifierProperties;

                pDrmFormatModifierProperties = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT>(_internal.pDrmFormatModifierProperties);
                return pDrmFormatModifierProperties;
            }
            set
            {
                refpDrmFormatModifierProperties?.Dispose();
                AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesEXT tmp = value;
                refpDrmFormatModifierProperties = new StructReference(tmp);
                pDrmFormatModifierProperties = value;
                _internal.pDrmFormatModifierProperties = refpDrmFormatModifierProperties.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDrmFormatModifierProperties?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesListEXT(DrmFormatModifierPropertiesListEXT d)
        {
            return d._internal;
        }

        public static implicit operator DrmFormatModifierPropertiesListEXT(AdamantiumVulkan.Core.Interop.DrmFormatModifierPropertiesListEXT d)
        {
            return new DrmFormatModifierPropertiesListEXT(d);
        }

    }

    public partial class PhysicalDeviceImageDrmFormatModifierInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceImageDrmFormatModifierInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpQueueFamilyIndices;

        public PhysicalDeviceImageDrmFormatModifierInfoEXT()
        {
        }

        public PhysicalDeviceImageDrmFormatModifierInfoEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageDrmFormatModifierInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong DrmFormatModifier
        {
            get => _internal.drmFormatModifier;
            set
            {
                _internal.drmFormatModifier = value;
            }
        }

        public SharingMode SharingMode
        {
            get => _internal.sharingMode;
            set
            {
                _internal.sharingMode = value;
            }
        }

        public uint QueueFamilyIndexCount
        {
            get => _internal.queueFamilyIndexCount;
            set
            {
                _internal.queueFamilyIndexCount = value;
            }
        }

        public uint PQueueFamilyIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pQueueFamilyIndices);
            }
            set
            {
                refpQueueFamilyIndices?.Dispose();
                refpQueueFamilyIndices = new StructReference(value);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpQueueFamilyIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceImageDrmFormatModifierInfoEXT(PhysicalDeviceImageDrmFormatModifierInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceImageDrmFormatModifierInfoEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageDrmFormatModifierInfoEXT p)
        {
            return new PhysicalDeviceImageDrmFormatModifierInfoEXT(p);
        }

    }

    public partial class ImageDrmFormatModifierListCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierListCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpDrmFormatModifiers;

        public ImageDrmFormatModifierListCreateInfoEXT()
        {
        }

        public ImageDrmFormatModifierListCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierListCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DrmFormatModifierCount
        {
            get => _internal.drmFormatModifierCount;
            set
            {
                _internal.drmFormatModifierCount = value;
            }
        }

        public ulong PDrmFormatModifiers
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pDrmFormatModifiers);
            }
            set
            {
                refpDrmFormatModifiers?.Dispose();
                refpDrmFormatModifiers = new StructReference(value);
                _internal.pDrmFormatModifiers = refpDrmFormatModifiers.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDrmFormatModifiers?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierListCreateInfoEXT(ImageDrmFormatModifierListCreateInfoEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImageDrmFormatModifierListCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierListCreateInfoEXT i)
        {
            return new ImageDrmFormatModifierListCreateInfoEXT(i);
        }

    }

    public partial class ImageDrmFormatModifierExplicitCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierExplicitCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpPlaneLayouts;

        public ImageDrmFormatModifierExplicitCreateInfoEXT()
        {
        }

        public ImageDrmFormatModifierExplicitCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierExplicitCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong DrmFormatModifier
        {
            get => _internal.drmFormatModifier;
            set
            {
                _internal.drmFormatModifier = value;
            }
        }

        public uint DrmFormatModifierPlaneCount
        {
            get => _internal.drmFormatModifierPlaneCount;
            set
            {
                _internal.drmFormatModifierPlaneCount = value;
            }
        }

        private SubresourceLayout pPlaneLayouts;
        public SubresourceLayout PPlaneLayouts
        {
            get
            {
                if(pPlaneLayouts != null)
                    return pPlaneLayouts;

                pPlaneLayouts = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.SubresourceLayout>(_internal.pPlaneLayouts);
                return pPlaneLayouts;
            }
            set
            {
                refpPlaneLayouts?.Dispose();
                AdamantiumVulkan.Core.Interop.SubresourceLayout tmp = value;
                refpPlaneLayouts = new StructReference(tmp);
                pPlaneLayouts = value;
                _internal.pPlaneLayouts = refpPlaneLayouts.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpPlaneLayouts?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierExplicitCreateInfoEXT(ImageDrmFormatModifierExplicitCreateInfoEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImageDrmFormatModifierExplicitCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierExplicitCreateInfoEXT i)
        {
            return new ImageDrmFormatModifierExplicitCreateInfoEXT(i);
        }

    }

    public partial class ImageDrmFormatModifierPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public ImageDrmFormatModifierPropertiesEXT()
        {
        }

        public ImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong DrmFormatModifier
        {
            get => _internal.drmFormatModifier;
            set
            {
                _internal.drmFormatModifier = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierPropertiesEXT(ImageDrmFormatModifierPropertiesEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.ImageDrmFormatModifierPropertiesEXT i)
        {
            return new ImageDrmFormatModifierPropertiesEXT(i);
        }

    }

    public partial class ValidationCacheCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ValidationCacheCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpInitialData;

        public ValidationCacheCreateInfoEXT()
        {
        }

        public ValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.ValidationCacheCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ulong InitialDataSize
        {
            get => _internal.initialDataSize;
            set
            {
                _internal.initialDataSize = value;
            }
        }

        private System.IntPtr pInitialData;
        public System.IntPtr PInitialData
        {
            get
            {
                if(pInitialData != null)
                    return pInitialData;

                pInitialData = _internal.pInitialData;
                return pInitialData;
            }
            set
            {
                refpInitialData?.Dispose();
                refpInitialData = new GCHandleReference(value);
                pInitialData = value;
                _internal.pInitialData = refpInitialData.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpInitialData?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ValidationCacheCreateInfoEXT(ValidationCacheCreateInfoEXT v)
        {
            return v._internal;
        }

        public static implicit operator ValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.ValidationCacheCreateInfoEXT v)
        {
            return new ValidationCacheCreateInfoEXT(v);
        }

    }

    public partial class ShaderModuleValidationCacheCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ShaderModuleValidationCacheCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private ValidationCacheEXT validationCache;

        public ShaderModuleValidationCacheCreateInfoEXT()
        {
        }

        public ShaderModuleValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.ShaderModuleValidationCacheCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ValidationCacheEXT ValidationCache
        {
            get
            {
                if (validationCache != null)
                {
                    return validationCache;
                }
                validationCache = _internal.validationCache;
                return validationCache;
            }
            set
            {
                validationCache = value;
                _internal.validationCache = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ShaderModuleValidationCacheCreateInfoEXT(ShaderModuleValidationCacheCreateInfoEXT s)
        {
            if (s.ValidationCache != null)
            {
                s._internal.validationCache = s.ValidationCache;
            }
            return s._internal;
        }

        public static implicit operator ShaderModuleValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.ShaderModuleValidationCacheCreateInfoEXT s)
        {
            return new ShaderModuleValidationCacheCreateInfoEXT(s);
        }

    }

    public partial class DescriptorSetLayoutBindingFlagsCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBindingFlagsCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpBindingFlags;

        public DescriptorSetLayoutBindingFlagsCreateInfoEXT()
        {
        }

        public DescriptorSetLayoutBindingFlagsCreateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBindingFlagsCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint BindingCount
        {
            get => _internal.bindingCount;
            set
            {
                _internal.bindingCount = value;
            }
        }

        private uint pBindingFlags;
        public uint PBindingFlags
        {
            get
            {
                pBindingFlags = Marshal.PtrToStructure<uint>(_internal.pBindingFlags);
                return pBindingFlags;
            }
            set
            {
                refpBindingFlags?.Dispose();
                refpBindingFlags = new StructReference(value);
                pBindingFlags = value;
                _internal.pBindingFlags = refpBindingFlags.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpBindingFlags?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBindingFlagsCreateInfoEXT(DescriptorSetLayoutBindingFlagsCreateInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetLayoutBindingFlagsCreateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorSetLayoutBindingFlagsCreateInfoEXT d)
        {
            return new DescriptorSetLayoutBindingFlagsCreateInfoEXT(d);
        }

    }

    public partial class PhysicalDeviceDescriptorIndexingFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDescriptorIndexingFeaturesEXT()
        {
        }

        public PhysicalDeviceDescriptorIndexingFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShaderInputAttachmentArrayDynamicIndexing
        {
            get => _internal.shaderInputAttachmentArrayDynamicIndexing;
            set
            {
                _internal.shaderInputAttachmentArrayDynamicIndexing = value;
            }
        }

        public bool ShaderUniformTexelBufferArrayDynamicIndexing
        {
            get => _internal.shaderUniformTexelBufferArrayDynamicIndexing;
            set
            {
                _internal.shaderUniformTexelBufferArrayDynamicIndexing = value;
            }
        }

        public bool ShaderStorageTexelBufferArrayDynamicIndexing
        {
            get => _internal.shaderStorageTexelBufferArrayDynamicIndexing;
            set
            {
                _internal.shaderStorageTexelBufferArrayDynamicIndexing = value;
            }
        }

        public bool ShaderUniformBufferArrayNonUniformIndexing
        {
            get => _internal.shaderUniformBufferArrayNonUniformIndexing;
            set
            {
                _internal.shaderUniformBufferArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderSampledImageArrayNonUniformIndexing
        {
            get => _internal.shaderSampledImageArrayNonUniformIndexing;
            set
            {
                _internal.shaderSampledImageArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderStorageBufferArrayNonUniformIndexing
        {
            get => _internal.shaderStorageBufferArrayNonUniformIndexing;
            set
            {
                _internal.shaderStorageBufferArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderStorageImageArrayNonUniformIndexing
        {
            get => _internal.shaderStorageImageArrayNonUniformIndexing;
            set
            {
                _internal.shaderStorageImageArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderInputAttachmentArrayNonUniformIndexing
        {
            get => _internal.shaderInputAttachmentArrayNonUniformIndexing;
            set
            {
                _internal.shaderInputAttachmentArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderUniformTexelBufferArrayNonUniformIndexing
        {
            get => _internal.shaderUniformTexelBufferArrayNonUniformIndexing;
            set
            {
                _internal.shaderUniformTexelBufferArrayNonUniformIndexing = value;
            }
        }

        public bool ShaderStorageTexelBufferArrayNonUniformIndexing
        {
            get => _internal.shaderStorageTexelBufferArrayNonUniformIndexing;
            set
            {
                _internal.shaderStorageTexelBufferArrayNonUniformIndexing = value;
            }
        }

        public bool DescriptorBindingUniformBufferUpdateAfterBind
        {
            get => _internal.descriptorBindingUniformBufferUpdateAfterBind;
            set
            {
                _internal.descriptorBindingUniformBufferUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingSampledImageUpdateAfterBind
        {
            get => _internal.descriptorBindingSampledImageUpdateAfterBind;
            set
            {
                _internal.descriptorBindingSampledImageUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingStorageImageUpdateAfterBind
        {
            get => _internal.descriptorBindingStorageImageUpdateAfterBind;
            set
            {
                _internal.descriptorBindingStorageImageUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingStorageBufferUpdateAfterBind
        {
            get => _internal.descriptorBindingStorageBufferUpdateAfterBind;
            set
            {
                _internal.descriptorBindingStorageBufferUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingUniformTexelBufferUpdateAfterBind
        {
            get => _internal.descriptorBindingUniformTexelBufferUpdateAfterBind;
            set
            {
                _internal.descriptorBindingUniformTexelBufferUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingStorageTexelBufferUpdateAfterBind
        {
            get => _internal.descriptorBindingStorageTexelBufferUpdateAfterBind;
            set
            {
                _internal.descriptorBindingStorageTexelBufferUpdateAfterBind = value;
            }
        }

        public bool DescriptorBindingUpdateUnusedWhilePending
        {
            get => _internal.descriptorBindingUpdateUnusedWhilePending;
            set
            {
                _internal.descriptorBindingUpdateUnusedWhilePending = value;
            }
        }

        public bool DescriptorBindingPartiallyBound
        {
            get => _internal.descriptorBindingPartiallyBound;
            set
            {
                _internal.descriptorBindingPartiallyBound = value;
            }
        }

        public bool DescriptorBindingVariableDescriptorCount
        {
            get => _internal.descriptorBindingVariableDescriptorCount;
            set
            {
                _internal.descriptorBindingVariableDescriptorCount = value;
            }
        }

        public bool RuntimeDescriptorArray
        {
            get => _internal.runtimeDescriptorArray;
            set
            {
                _internal.runtimeDescriptorArray = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingFeaturesEXT(PhysicalDeviceDescriptorIndexingFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDescriptorIndexingFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingFeaturesEXT p)
        {
            return new PhysicalDeviceDescriptorIndexingFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceDescriptorIndexingPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDescriptorIndexingPropertiesEXT()
        {
        }

        public PhysicalDeviceDescriptorIndexingPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxUpdateAfterBindDescriptorsInAllPools
        {
            get => _internal.maxUpdateAfterBindDescriptorsInAllPools;
            set
            {
                _internal.maxUpdateAfterBindDescriptorsInAllPools = value;
            }
        }

        public bool ShaderUniformBufferArrayNonUniformIndexingNative
        {
            get => _internal.shaderUniformBufferArrayNonUniformIndexingNative;
            set
            {
                _internal.shaderUniformBufferArrayNonUniformIndexingNative = value;
            }
        }

        public bool ShaderSampledImageArrayNonUniformIndexingNative
        {
            get => _internal.shaderSampledImageArrayNonUniformIndexingNative;
            set
            {
                _internal.shaderSampledImageArrayNonUniformIndexingNative = value;
            }
        }

        public bool ShaderStorageBufferArrayNonUniformIndexingNative
        {
            get => _internal.shaderStorageBufferArrayNonUniformIndexingNative;
            set
            {
                _internal.shaderStorageBufferArrayNonUniformIndexingNative = value;
            }
        }

        public bool ShaderStorageImageArrayNonUniformIndexingNative
        {
            get => _internal.shaderStorageImageArrayNonUniformIndexingNative;
            set
            {
                _internal.shaderStorageImageArrayNonUniformIndexingNative = value;
            }
        }

        public bool ShaderInputAttachmentArrayNonUniformIndexingNative
        {
            get => _internal.shaderInputAttachmentArrayNonUniformIndexingNative;
            set
            {
                _internal.shaderInputAttachmentArrayNonUniformIndexingNative = value;
            }
        }

        public bool RobustBufferAccessUpdateAfterBind
        {
            get => _internal.robustBufferAccessUpdateAfterBind;
            set
            {
                _internal.robustBufferAccessUpdateAfterBind = value;
            }
        }

        public bool QuadDivergentImplicitLod
        {
            get => _internal.quadDivergentImplicitLod;
            set
            {
                _internal.quadDivergentImplicitLod = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindSamplers
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindSamplers;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindSamplers = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindSampledImages
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindSampledImages;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindSampledImages = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindStorageImages
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindStorageImages;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindStorageImages = value;
            }
        }

        public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments
        {
            get => _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments;
            set
            {
                _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments = value;
            }
        }

        public uint MaxPerStageUpdateAfterBindResources
        {
            get => _internal.maxPerStageUpdateAfterBindResources;
            set
            {
                _internal.maxPerStageUpdateAfterBindResources = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindSamplers
        {
            get => _internal.maxDescriptorSetUpdateAfterBindSamplers;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindSamplers = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindUniformBuffers
        {
            get => _internal.maxDescriptorSetUpdateAfterBindUniformBuffers;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindUniformBuffers = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic
        {
            get => _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindStorageBuffers
        {
            get => _internal.maxDescriptorSetUpdateAfterBindStorageBuffers;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindStorageBuffers = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic
        {
            get => _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindSampledImages
        {
            get => _internal.maxDescriptorSetUpdateAfterBindSampledImages;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindSampledImages = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindStorageImages
        {
            get => _internal.maxDescriptorSetUpdateAfterBindStorageImages;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindStorageImages = value;
            }
        }

        public uint MaxDescriptorSetUpdateAfterBindInputAttachments
        {
            get => _internal.maxDescriptorSetUpdateAfterBindInputAttachments;
            set
            {
                _internal.maxDescriptorSetUpdateAfterBindInputAttachments = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingPropertiesEXT(PhysicalDeviceDescriptorIndexingPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDescriptorIndexingPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceDescriptorIndexingPropertiesEXT p)
        {
            return new PhysicalDeviceDescriptorIndexingPropertiesEXT(p);
        }

    }

    public partial class DescriptorSetVariableDescriptorCountAllocateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountAllocateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpDescriptorCounts;

        public DescriptorSetVariableDescriptorCountAllocateInfoEXT()
        {
        }

        public DescriptorSetVariableDescriptorCountAllocateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountAllocateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint DescriptorSetCount
        {
            get => _internal.descriptorSetCount;
            set
            {
                _internal.descriptorSetCount = value;
            }
        }

        public uint PDescriptorCounts
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pDescriptorCounts);
            }
            set
            {
                refpDescriptorCounts?.Dispose();
                refpDescriptorCounts = new StructReference(value);
                _internal.pDescriptorCounts = refpDescriptorCounts.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDescriptorCounts?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountAllocateInfoEXT(DescriptorSetVariableDescriptorCountAllocateInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetVariableDescriptorCountAllocateInfoEXT(AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountAllocateInfoEXT d)
        {
            return new DescriptorSetVariableDescriptorCountAllocateInfoEXT(d);
        }

    }

    public partial class DescriptorSetVariableDescriptorCountLayoutSupportEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountLayoutSupportEXT _internal;

        private GCHandleReference refpNext;

        public DescriptorSetVariableDescriptorCountLayoutSupportEXT()
        {
        }

        public DescriptorSetVariableDescriptorCountLayoutSupportEXT(AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountLayoutSupportEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxVariableDescriptorCount
        {
            get => _internal.maxVariableDescriptorCount;
            set
            {
                _internal.maxVariableDescriptorCount = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountLayoutSupportEXT(DescriptorSetVariableDescriptorCountLayoutSupportEXT d)
        {
            return d._internal;
        }

        public static implicit operator DescriptorSetVariableDescriptorCountLayoutSupportEXT(AdamantiumVulkan.Core.Interop.DescriptorSetVariableDescriptorCountLayoutSupportEXT d)
        {
            return new DescriptorSetVariableDescriptorCountLayoutSupportEXT(d);
        }

    }

    public partial class ShadingRatePaletteNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV _internal;

        private StructReference refpShadingRatePaletteEntries;

        public ShadingRatePaletteNV()
        {
        }

        public ShadingRatePaletteNV(AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV _internal)
        {
            this._internal = _internal;
        }

        public uint ShadingRatePaletteEntryCount
        {
            get => _internal.shadingRatePaletteEntryCount;
            set
            {
                _internal.shadingRatePaletteEntryCount = value;
            }
        }

        private ShadingRatePaletteEntryNV pShadingRatePaletteEntries;
        public ShadingRatePaletteEntryNV PShadingRatePaletteEntries
        {
            get
            {
                pShadingRatePaletteEntries = Marshal.PtrToStructure<ShadingRatePaletteEntryNV>(_internal.pShadingRatePaletteEntries);
                return pShadingRatePaletteEntries;
            }
            set
            {
                refpShadingRatePaletteEntries?.Dispose();
                refpShadingRatePaletteEntries = new StructReference(value);
                pShadingRatePaletteEntries = value;
                _internal.pShadingRatePaletteEntries = refpShadingRatePaletteEntries.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpShadingRatePaletteEntries?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV(ShadingRatePaletteNV s)
        {
            return s._internal;
        }

        public static implicit operator ShadingRatePaletteNV(AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV s)
        {
            return new ShadingRatePaletteNV(s);
        }

    }

    public partial class PipelineViewportShadingRateImageStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportShadingRateImageStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpShadingRatePalettes;

        public PipelineViewportShadingRateImageStateCreateInfoNV()
        {
        }

        public PipelineViewportShadingRateImageStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportShadingRateImageStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShadingRateImageEnable
        {
            get => _internal.shadingRateImageEnable;
            set
            {
                _internal.shadingRateImageEnable = value;
            }
        }

        public uint ViewportCount
        {
            get => _internal.viewportCount;
            set
            {
                _internal.viewportCount = value;
            }
        }

        private ShadingRatePaletteNV pShadingRatePalettes;
        public ShadingRatePaletteNV PShadingRatePalettes
        {
            get
            {
                if(pShadingRatePalettes != null)
                    return pShadingRatePalettes;

                pShadingRatePalettes = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV>(_internal.pShadingRatePalettes);
                return pShadingRatePalettes;
            }
            set
            {
                refpShadingRatePalettes?.Dispose();
                AdamantiumVulkan.Core.Interop.ShadingRatePaletteNV tmp = value;
                refpShadingRatePalettes = new StructReference(tmp);
                pShadingRatePalettes = value;
                _internal.pShadingRatePalettes = refpShadingRatePalettes.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpShadingRatePalettes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportShadingRateImageStateCreateInfoNV(PipelineViewportShadingRateImageStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportShadingRateImageStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportShadingRateImageStateCreateInfoNV p)
        {
            return new PipelineViewportShadingRateImageStateCreateInfoNV(p);
        }

    }

    public partial class PhysicalDeviceShadingRateImageFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImageFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceShadingRateImageFeaturesNV()
        {
        }

        public PhysicalDeviceShadingRateImageFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImageFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ShadingRateImage
        {
            get => _internal.shadingRateImage;
            set
            {
                _internal.shadingRateImage = value;
            }
        }

        public bool ShadingRateCoarseSampleOrder
        {
            get => _internal.shadingRateCoarseSampleOrder;
            set
            {
                _internal.shadingRateCoarseSampleOrder = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImageFeaturesNV(PhysicalDeviceShadingRateImageFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShadingRateImageFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImageFeaturesNV p)
        {
            return new PhysicalDeviceShadingRateImageFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceShadingRateImagePropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImagePropertiesNV _internal;

        private GCHandleReference refpNext;

        private Extent2D shadingRateTexelSize;

        public PhysicalDeviceShadingRateImagePropertiesNV()
        {
        }

        public PhysicalDeviceShadingRateImagePropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImagePropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Extent2D ShadingRateTexelSize
        {
            get
            {
                if (shadingRateTexelSize != null)
                {
                    return shadingRateTexelSize;
                }
                shadingRateTexelSize = _internal.shadingRateTexelSize;
                return shadingRateTexelSize;
            }
            set
            {
                shadingRateTexelSize = value;
                _internal.shadingRateTexelSize = value;
            }
        }

        public uint ShadingRatePaletteSize
        {
            get => _internal.shadingRatePaletteSize;
            set
            {
                _internal.shadingRatePaletteSize = value;
            }
        }

        public uint ShadingRateMaxCoarseSamples
        {
            get => _internal.shadingRateMaxCoarseSamples;
            set
            {
                _internal.shadingRateMaxCoarseSamples = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImagePropertiesNV(PhysicalDeviceShadingRateImagePropertiesNV p)
        {
            if (p.ShadingRateTexelSize != null)
            {
                p._internal.shadingRateTexelSize = p.ShadingRateTexelSize;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShadingRateImagePropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShadingRateImagePropertiesNV p)
        {
            return new PhysicalDeviceShadingRateImagePropertiesNV(p);
        }

    }

    public partial class CoarseSampleLocationNV
    {
        private AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV _internal;

        public CoarseSampleLocationNV()
        {
        }

        public CoarseSampleLocationNV(AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV _internal)
        {
            this._internal = _internal;
        }

        public uint PixelX
        {
            get => _internal.pixelX;
            set
            {
                _internal.pixelX = value;
            }
        }

        public uint PixelY
        {
            get => _internal.pixelY;
            set
            {
                _internal.pixelY = value;
            }
        }

        public uint Sample
        {
            get => _internal.sample;
            set
            {
                _internal.sample = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV(CoarseSampleLocationNV c)
        {
            return c._internal;
        }

        public static implicit operator CoarseSampleLocationNV(AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV c)
        {
            return new CoarseSampleLocationNV(c);
        }

    }

    public partial class CoarseSampleOrderCustomNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV _internal;

        private StructReference refpSampleLocations;

        public CoarseSampleOrderCustomNV()
        {
        }

        public CoarseSampleOrderCustomNV(AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV _internal)
        {
            this._internal = _internal;
        }

        public ShadingRatePaletteEntryNV ShadingRate
        {
            get => _internal.shadingRate;
            set
            {
                _internal.shadingRate = value;
            }
        }

        public uint SampleCount
        {
            get => _internal.sampleCount;
            set
            {
                _internal.sampleCount = value;
            }
        }

        public uint SampleLocationCount
        {
            get => _internal.sampleLocationCount;
            set
            {
                _internal.sampleLocationCount = value;
            }
        }

        private CoarseSampleLocationNV pSampleLocations;
        public CoarseSampleLocationNV PSampleLocations
        {
            get
            {
                if(pSampleLocations != null)
                    return pSampleLocations;

                pSampleLocations = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV>(_internal.pSampleLocations);
                return pSampleLocations;
            }
            set
            {
                refpSampleLocations?.Dispose();
                AdamantiumVulkan.Core.Interop.CoarseSampleLocationNV tmp = value;
                refpSampleLocations = new StructReference(tmp);
                pSampleLocations = value;
                _internal.pSampleLocations = refpSampleLocations.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSampleLocations?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV(CoarseSampleOrderCustomNV c)
        {
            return c._internal;
        }

        public static implicit operator CoarseSampleOrderCustomNV(AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV c)
        {
            return new CoarseSampleOrderCustomNV(c);
        }

    }

    public partial class PipelineViewportCoarseSampleOrderStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportCoarseSampleOrderStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpCustomSampleOrders;

        public PipelineViewportCoarseSampleOrderStateCreateInfoNV()
        {
        }

        public PipelineViewportCoarseSampleOrderStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportCoarseSampleOrderStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public CoarseSampleOrderTypeNV SampleOrderType
        {
            get => _internal.sampleOrderType;
            set
            {
                _internal.sampleOrderType = value;
            }
        }

        public uint CustomSampleOrderCount
        {
            get => _internal.customSampleOrderCount;
            set
            {
                _internal.customSampleOrderCount = value;
            }
        }

        private CoarseSampleOrderCustomNV pCustomSampleOrders;
        public CoarseSampleOrderCustomNV PCustomSampleOrders
        {
            get
            {
                if(pCustomSampleOrders != null)
                    return pCustomSampleOrders;

                pCustomSampleOrders = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV>(_internal.pCustomSampleOrders);
                return pCustomSampleOrders;
            }
            set
            {
                refpCustomSampleOrders?.Dispose();
                AdamantiumVulkan.Core.Interop.CoarseSampleOrderCustomNV tmp = value;
                refpCustomSampleOrders = new StructReference(tmp);
                pCustomSampleOrders = value;
                _internal.pCustomSampleOrders = refpCustomSampleOrders.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpCustomSampleOrders?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportCoarseSampleOrderStateCreateInfoNV(PipelineViewportCoarseSampleOrderStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportCoarseSampleOrderStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportCoarseSampleOrderStateCreateInfoNV p)
        {
            return new PipelineViewportCoarseSampleOrderStateCreateInfoNV(p);
        }

    }

    public partial class RayTracingShaderGroupCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public RayTracingShaderGroupCreateInfoNV()
        {
        }

        public RayTracingShaderGroupCreateInfoNV(AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public RayTracingShaderGroupTypeNV Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint GeneralShader
        {
            get => _internal.generalShader;
            set
            {
                _internal.generalShader = value;
            }
        }

        public uint ClosestHitShader
        {
            get => _internal.closestHitShader;
            set
            {
                _internal.closestHitShader = value;
            }
        }

        public uint AnyHitShader
        {
            get => _internal.anyHitShader;
            set
            {
                _internal.anyHitShader = value;
            }
        }

        public uint IntersectionShader
        {
            get => _internal.intersectionShader;
            set
            {
                _internal.intersectionShader = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV(RayTracingShaderGroupCreateInfoNV r)
        {
            return r._internal;
        }

        public static implicit operator RayTracingShaderGroupCreateInfoNV(AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV r)
        {
            return new RayTracingShaderGroupCreateInfoNV(r);
        }

    }

    public partial class RayTracingPipelineCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RayTracingPipelineCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpStages;

        private StructReference refpGroups;

        private PipelineLayout layout;

        private Pipeline basePipelineHandle;

        public RayTracingPipelineCreateInfoNV()
        {
        }

        public RayTracingPipelineCreateInfoNV(AdamantiumVulkan.Core.Interop.RayTracingPipelineCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint StageCount
        {
            get => _internal.stageCount;
            set
            {
                _internal.stageCount = value;
            }
        }

        private PipelineShaderStageCreateInfo pStages;
        public PipelineShaderStageCreateInfo PStages
        {
            get
            {
                if(pStages != null)
                    return pStages;

                pStages = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo>(_internal.pStages);
                return pStages;
            }
            set
            {
                refpStages?.Dispose();
                AdamantiumVulkan.Core.Interop.PipelineShaderStageCreateInfo tmp = value;
                refpStages = new StructReference(tmp);
                pStages = value;
                _internal.pStages = refpStages.Handle;
            }
        }

        public uint GroupCount
        {
            get => _internal.groupCount;
            set
            {
                _internal.groupCount = value;
            }
        }

        private RayTracingShaderGroupCreateInfoNV pGroups;
        public RayTracingShaderGroupCreateInfoNV PGroups
        {
            get
            {
                if(pGroups != null)
                    return pGroups;

                pGroups = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV>(_internal.pGroups);
                return pGroups;
            }
            set
            {
                refpGroups?.Dispose();
                AdamantiumVulkan.Core.Interop.RayTracingShaderGroupCreateInfoNV tmp = value;
                refpGroups = new StructReference(tmp);
                pGroups = value;
                _internal.pGroups = refpGroups.Handle;
            }
        }

        public uint MaxRecursionDepth
        {
            get => _internal.maxRecursionDepth;
            set
            {
                _internal.maxRecursionDepth = value;
            }
        }

        public PipelineLayout Layout
        {
            get
            {
                if (layout != null)
                {
                    return layout;
                }
                layout = _internal.layout;
                return layout;
            }
            set
            {
                layout = value;
                _internal.layout = value;
            }
        }

        public Pipeline BasePipelineHandle
        {
            get
            {
                if (basePipelineHandle != null)
                {
                    return basePipelineHandle;
                }
                basePipelineHandle = _internal.basePipelineHandle;
                return basePipelineHandle;
            }
            set
            {
                basePipelineHandle = value;
                _internal.basePipelineHandle = value;
            }
        }

        public int BasePipelineIndex
        {
            get => _internal.basePipelineIndex;
            set
            {
                _internal.basePipelineIndex = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpStages?.Dispose();
            refpGroups?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RayTracingPipelineCreateInfoNV(RayTracingPipelineCreateInfoNV r)
        {
            if (r.Layout != null)
            {
                r._internal.layout = r.Layout;
            }
            if (r.BasePipelineHandle != null)
            {
                r._internal.basePipelineHandle = r.BasePipelineHandle;
            }
            return r._internal;
        }

        public static implicit operator RayTracingPipelineCreateInfoNV(AdamantiumVulkan.Core.Interop.RayTracingPipelineCreateInfoNV r)
        {
            return new RayTracingPipelineCreateInfoNV(r);
        }

    }

    public partial class GeometryTrianglesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.GeometryTrianglesNV _internal;

        private GCHandleReference refpNext;

        private Buffer vertexData;

        private Buffer indexData;

        private Buffer transformData;

        public GeometryTrianglesNV()
        {
        }

        public GeometryTrianglesNV(AdamantiumVulkan.Core.Interop.GeometryTrianglesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer VertexData
        {
            get
            {
                if (vertexData != null)
                {
                    return vertexData;
                }
                vertexData = _internal.vertexData;
                return vertexData;
            }
            set
            {
                vertexData = value;
                _internal.vertexData = value;
            }
        }

        public ulong VertexOffset
        {
            get => _internal.vertexOffset;
            set
            {
                _internal.vertexOffset = value;
            }
        }

        public uint VertexCount
        {
            get => _internal.vertexCount;
            set
            {
                _internal.vertexCount = value;
            }
        }

        public ulong VertexStride
        {
            get => _internal.vertexStride;
            set
            {
                _internal.vertexStride = value;
            }
        }

        public Format VertexFormat
        {
            get => _internal.vertexFormat;
            set
            {
                _internal.vertexFormat = value;
            }
        }

        public Buffer IndexData
        {
            get
            {
                if (indexData != null)
                {
                    return indexData;
                }
                indexData = _internal.indexData;
                return indexData;
            }
            set
            {
                indexData = value;
                _internal.indexData = value;
            }
        }

        public ulong IndexOffset
        {
            get => _internal.indexOffset;
            set
            {
                _internal.indexOffset = value;
            }
        }

        public uint IndexCount
        {
            get => _internal.indexCount;
            set
            {
                _internal.indexCount = value;
            }
        }

        public IndexType IndexType
        {
            get => _internal.indexType;
            set
            {
                _internal.indexType = value;
            }
        }

        public Buffer TransformData
        {
            get
            {
                if (transformData != null)
                {
                    return transformData;
                }
                transformData = _internal.transformData;
                return transformData;
            }
            set
            {
                transformData = value;
                _internal.transformData = value;
            }
        }

        public ulong TransformOffset
        {
            get => _internal.transformOffset;
            set
            {
                _internal.transformOffset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.GeometryTrianglesNV(GeometryTrianglesNV g)
        {
            if (g.VertexData != null)
            {
                g._internal.vertexData = g.VertexData;
            }
            if (g.IndexData != null)
            {
                g._internal.indexData = g.IndexData;
            }
            if (g.TransformData != null)
            {
                g._internal.transformData = g.TransformData;
            }
            return g._internal;
        }

        public static implicit operator GeometryTrianglesNV(AdamantiumVulkan.Core.Interop.GeometryTrianglesNV g)
        {
            return new GeometryTrianglesNV(g);
        }

    }

    public partial class GeometryAABBNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.GeometryAABBNV _internal;

        private GCHandleReference refpNext;

        private Buffer aabbData;

        public GeometryAABBNV()
        {
        }

        public GeometryAABBNV(AdamantiumVulkan.Core.Interop.GeometryAABBNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer AabbData
        {
            get
            {
                if (aabbData != null)
                {
                    return aabbData;
                }
                aabbData = _internal.aabbData;
                return aabbData;
            }
            set
            {
                aabbData = value;
                _internal.aabbData = value;
            }
        }

        public uint NumAABBs
        {
            get => _internal.numAABBs;
            set
            {
                _internal.numAABBs = value;
            }
        }

        public uint Stride
        {
            get => _internal.stride;
            set
            {
                _internal.stride = value;
            }
        }

        public ulong Offset
        {
            get => _internal.offset;
            set
            {
                _internal.offset = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.GeometryAABBNV(GeometryAABBNV g)
        {
            if (g.AabbData != null)
            {
                g._internal.aabbData = g.AabbData;
            }
            return g._internal;
        }

        public static implicit operator GeometryAABBNV(AdamantiumVulkan.Core.Interop.GeometryAABBNV g)
        {
            return new GeometryAABBNV(g);
        }

    }

    public partial class GeometryDataNV
    {
        private AdamantiumVulkan.Core.Interop.GeometryDataNV _internal;

        private GeometryTrianglesNV triangles;

        private GeometryAABBNV aabbs;

        public GeometryDataNV()
        {
        }

        public GeometryDataNV(AdamantiumVulkan.Core.Interop.GeometryDataNV _internal)
        {
            this._internal = _internal;
        }

        public GeometryTrianglesNV Triangles
        {
            get
            {
                if (triangles != null)
                {
                    return triangles;
                }
                triangles = _internal.triangles;
                return triangles;
            }
            set
            {
                triangles = value;
                _internal.triangles = value;
            }
        }

        public GeometryAABBNV Aabbs
        {
            get
            {
                if (aabbs != null)
                {
                    return aabbs;
                }
                aabbs = _internal.aabbs;
                return aabbs;
            }
            set
            {
                aabbs = value;
                _internal.aabbs = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.GeometryDataNV(GeometryDataNV g)
        {
            if (g.Triangles != null)
            {
                g._internal.triangles = g.Triangles;
            }
            if (g.Aabbs != null)
            {
                g._internal.aabbs = g.Aabbs;
            }
            return g._internal;
        }

        public static implicit operator GeometryDataNV(AdamantiumVulkan.Core.Interop.GeometryDataNV g)
        {
            return new GeometryDataNV(g);
        }

    }

    public partial class GeometryNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.GeometryNV _internal;

        private GCHandleReference refpNext;

        private GeometryDataNV geometry;

        public GeometryNV()
        {
        }

        public GeometryNV(AdamantiumVulkan.Core.Interop.GeometryNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public GeometryTypeNV GeometryType
        {
            get => _internal.geometryType;
            set
            {
                _internal.geometryType = value;
            }
        }

        public GeometryDataNV Geometry
        {
            get
            {
                if (geometry != null)
                {
                    return geometry;
                }
                geometry = _internal.geometry;
                return geometry;
            }
            set
            {
                geometry = value;
                _internal.geometry = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.GeometryNV(GeometryNV g)
        {
            if (g.Geometry != null)
            {
                g._internal.geometry = g.Geometry;
            }
            return g._internal;
        }

        public static implicit operator GeometryNV(AdamantiumVulkan.Core.Interop.GeometryNV g)
        {
            return new GeometryNV(g);
        }

    }

    public partial class AccelerationStructureInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AccelerationStructureInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpGeometries;

        public AccelerationStructureInfoNV()
        {
        }

        public AccelerationStructureInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public AccelerationStructureTypeNV Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public uint InstanceCount
        {
            get => _internal.instanceCount;
            set
            {
                _internal.instanceCount = value;
            }
        }

        public uint GeometryCount
        {
            get => _internal.geometryCount;
            set
            {
                _internal.geometryCount = value;
            }
        }

        private GeometryNV pGeometries;
        public GeometryNV PGeometries
        {
            get
            {
                if(pGeometries != null)
                    return pGeometries;

                pGeometries = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.GeometryNV>(_internal.pGeometries);
                return pGeometries;
            }
            set
            {
                refpGeometries?.Dispose();
                AdamantiumVulkan.Core.Interop.GeometryNV tmp = value;
                refpGeometries = new StructReference(tmp);
                pGeometries = value;
                _internal.pGeometries = refpGeometries.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpGeometries?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AccelerationStructureInfoNV(AccelerationStructureInfoNV a)
        {
            return a._internal;
        }

        public static implicit operator AccelerationStructureInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureInfoNV a)
        {
            return new AccelerationStructureInfoNV(a);
        }

    }

    public partial class AccelerationStructureCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AccelerationStructureCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private AccelerationStructureInfoNV info;

        public AccelerationStructureCreateInfoNV()
        {
        }

        public AccelerationStructureCreateInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong CompactedSize
        {
            get => _internal.compactedSize;
            set
            {
                _internal.compactedSize = value;
            }
        }

        public AccelerationStructureInfoNV Info
        {
            get
            {
                if (info != null)
                {
                    return info;
                }
                info = _internal.info;
                return info;
            }
            set
            {
                info = value;
                _internal.info = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AccelerationStructureCreateInfoNV(AccelerationStructureCreateInfoNV a)
        {
            if (a.Info != null)
            {
                a._internal.info = a.Info;
            }
            return a._internal;
        }

        public static implicit operator AccelerationStructureCreateInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureCreateInfoNV a)
        {
            return new AccelerationStructureCreateInfoNV(a);
        }

    }

    public partial class BindAccelerationStructureMemoryInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BindAccelerationStructureMemoryInfoNV _internal;

        private GCHandleReference refpNext;

        private AccelerationStructureNV accelerationStructure;

        private DeviceMemory memory;

        private StructReference refpDeviceIndices;

        public BindAccelerationStructureMemoryInfoNV()
        {
        }

        public BindAccelerationStructureMemoryInfoNV(AdamantiumVulkan.Core.Interop.BindAccelerationStructureMemoryInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public AccelerationStructureNV AccelerationStructure
        {
            get
            {
                if (accelerationStructure != null)
                {
                    return accelerationStructure;
                }
                accelerationStructure = _internal.accelerationStructure;
                return accelerationStructure;
            }
            set
            {
                accelerationStructure = value;
                _internal.accelerationStructure = value;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ulong MemoryOffset
        {
            get => _internal.memoryOffset;
            set
            {
                _internal.memoryOffset = value;
            }
        }

        public uint DeviceIndexCount
        {
            get => _internal.deviceIndexCount;
            set
            {
                _internal.deviceIndexCount = value;
            }
        }

        public uint PDeviceIndices
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pDeviceIndices);
            }
            set
            {
                refpDeviceIndices?.Dispose();
                refpDeviceIndices = new StructReference(value);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpDeviceIndices?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BindAccelerationStructureMemoryInfoNV(BindAccelerationStructureMemoryInfoNV b)
        {
            if (b.AccelerationStructure != null)
            {
                b._internal.accelerationStructure = b.AccelerationStructure;
            }
            if (b.Memory != null)
            {
                b._internal.memory = b.Memory;
            }
            return b._internal;
        }

        public static implicit operator BindAccelerationStructureMemoryInfoNV(AdamantiumVulkan.Core.Interop.BindAccelerationStructureMemoryInfoNV b)
        {
            return new BindAccelerationStructureMemoryInfoNV(b);
        }

    }

    public partial class WriteDescriptorSetAccelerationStructureNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.WriteDescriptorSetAccelerationStructureNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpAccelerationStructures;

        public WriteDescriptorSetAccelerationStructureNV()
        {
        }

        public WriteDescriptorSetAccelerationStructureNV(AdamantiumVulkan.Core.Interop.WriteDescriptorSetAccelerationStructureNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AccelerationStructureCount
        {
            get => _internal.accelerationStructureCount;
            set
            {
                _internal.accelerationStructureCount = value;
            }
        }

        private AccelerationStructureNV pAccelerationStructures;
        public AccelerationStructureNV PAccelerationStructures
        {
            get
            {
                if(pAccelerationStructures != null)
                    return pAccelerationStructures;

                pAccelerationStructures = Marshal.PtrToStructure<AccelerationStructureNV>(_internal.pAccelerationStructures);
                return pAccelerationStructures;
            }
            set
            {
                refpAccelerationStructures?.Dispose();
                AdamantiumVulkan.Core.Interop.AccelerationStructureNV_T tmp = value;
                refpAccelerationStructures = new StructReference(tmp);
                pAccelerationStructures = value;
                _internal.pAccelerationStructures = refpAccelerationStructures.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAccelerationStructures?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.WriteDescriptorSetAccelerationStructureNV(WriteDescriptorSetAccelerationStructureNV w)
        {
            return w._internal;
        }

        public static implicit operator WriteDescriptorSetAccelerationStructureNV(AdamantiumVulkan.Core.Interop.WriteDescriptorSetAccelerationStructureNV w)
        {
            return new WriteDescriptorSetAccelerationStructureNV(w);
        }

    }

    public partial class AccelerationStructureMemoryRequirementsInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.AccelerationStructureMemoryRequirementsInfoNV _internal;

        private GCHandleReference refpNext;

        private AccelerationStructureNV accelerationStructure;

        public AccelerationStructureMemoryRequirementsInfoNV()
        {
        }

        public AccelerationStructureMemoryRequirementsInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureMemoryRequirementsInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public AccelerationStructureMemoryRequirementsTypeNV Type
        {
            get => _internal.type;
            set
            {
                _internal.type = value;
            }
        }

        public AccelerationStructureNV AccelerationStructure
        {
            get
            {
                if (accelerationStructure != null)
                {
                    return accelerationStructure;
                }
                accelerationStructure = _internal.accelerationStructure;
                return accelerationStructure;
            }
            set
            {
                accelerationStructure = value;
                _internal.accelerationStructure = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.AccelerationStructureMemoryRequirementsInfoNV(AccelerationStructureMemoryRequirementsInfoNV a)
        {
            if (a.AccelerationStructure != null)
            {
                a._internal.accelerationStructure = a.AccelerationStructure;
            }
            return a._internal;
        }

        public static implicit operator AccelerationStructureMemoryRequirementsInfoNV(AdamantiumVulkan.Core.Interop.AccelerationStructureMemoryRequirementsInfoNV a)
        {
            return new AccelerationStructureMemoryRequirementsInfoNV(a);
        }

    }

    public partial class PhysicalDeviceRayTracingPropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceRayTracingPropertiesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceRayTracingPropertiesNV()
        {
        }

        public PhysicalDeviceRayTracingPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceRayTracingPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ShaderGroupHandleSize
        {
            get => _internal.shaderGroupHandleSize;
            set
            {
                _internal.shaderGroupHandleSize = value;
            }
        }

        public uint MaxRecursionDepth
        {
            get => _internal.maxRecursionDepth;
            set
            {
                _internal.maxRecursionDepth = value;
            }
        }

        public uint MaxShaderGroupStride
        {
            get => _internal.maxShaderGroupStride;
            set
            {
                _internal.maxShaderGroupStride = value;
            }
        }

        public uint ShaderGroupBaseAlignment
        {
            get => _internal.shaderGroupBaseAlignment;
            set
            {
                _internal.shaderGroupBaseAlignment = value;
            }
        }

        public ulong MaxGeometryCount
        {
            get => _internal.maxGeometryCount;
            set
            {
                _internal.maxGeometryCount = value;
            }
        }

        public ulong MaxInstanceCount
        {
            get => _internal.maxInstanceCount;
            set
            {
                _internal.maxInstanceCount = value;
            }
        }

        public ulong MaxTriangleCount
        {
            get => _internal.maxTriangleCount;
            set
            {
                _internal.maxTriangleCount = value;
            }
        }

        public uint MaxDescriptorSetAccelerationStructures
        {
            get => _internal.maxDescriptorSetAccelerationStructures;
            set
            {
                _internal.maxDescriptorSetAccelerationStructures = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceRayTracingPropertiesNV(PhysicalDeviceRayTracingPropertiesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceRayTracingPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceRayTracingPropertiesNV p)
        {
            return new PhysicalDeviceRayTracingPropertiesNV(p);
        }

    }

    public partial class PhysicalDeviceRepresentativeFragmentTestFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceRepresentativeFragmentTestFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceRepresentativeFragmentTestFeaturesNV()
        {
        }

        public PhysicalDeviceRepresentativeFragmentTestFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceRepresentativeFragmentTestFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool RepresentativeFragmentTest
        {
            get => _internal.representativeFragmentTest;
            set
            {
                _internal.representativeFragmentTest = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceRepresentativeFragmentTestFeaturesNV(PhysicalDeviceRepresentativeFragmentTestFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceRepresentativeFragmentTestFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceRepresentativeFragmentTestFeaturesNV p)
        {
            return new PhysicalDeviceRepresentativeFragmentTestFeaturesNV(p);
        }

    }

    public partial class PipelineRepresentativeFragmentTestStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineRepresentativeFragmentTestStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        public PipelineRepresentativeFragmentTestStateCreateInfoNV()
        {
        }

        public PipelineRepresentativeFragmentTestStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineRepresentativeFragmentTestStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool RepresentativeFragmentTestEnable
        {
            get => _internal.representativeFragmentTestEnable;
            set
            {
                _internal.representativeFragmentTestEnable = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineRepresentativeFragmentTestStateCreateInfoNV(PipelineRepresentativeFragmentTestStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineRepresentativeFragmentTestStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineRepresentativeFragmentTestStateCreateInfoNV p)
        {
            return new PipelineRepresentativeFragmentTestStateCreateInfoNV(p);
        }

    }

    public partial class PhysicalDeviceImageViewImageFormatInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceImageViewImageFormatInfoEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceImageViewImageFormatInfoEXT()
        {
        }

        public PhysicalDeviceImageViewImageFormatInfoEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageViewImageFormatInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ImageViewType ImageViewType
        {
            get => _internal.imageViewType;
            set
            {
                _internal.imageViewType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceImageViewImageFormatInfoEXT(PhysicalDeviceImageViewImageFormatInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceImageViewImageFormatInfoEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceImageViewImageFormatInfoEXT p)
        {
            return new PhysicalDeviceImageViewImageFormatInfoEXT(p);
        }

    }

    public partial class FilterCubicImageViewImageFormatPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.FilterCubicImageViewImageFormatPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public FilterCubicImageViewImageFormatPropertiesEXT()
        {
        }

        public FilterCubicImageViewImageFormatPropertiesEXT(AdamantiumVulkan.Core.Interop.FilterCubicImageViewImageFormatPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool FilterCubic
        {
            get => _internal.filterCubic;
            set
            {
                _internal.filterCubic = value;
            }
        }

        public bool FilterCubicMinmax
        {
            get => _internal.filterCubicMinmax;
            set
            {
                _internal.filterCubicMinmax = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.FilterCubicImageViewImageFormatPropertiesEXT(FilterCubicImageViewImageFormatPropertiesEXT f)
        {
            return f._internal;
        }

        public static implicit operator FilterCubicImageViewImageFormatPropertiesEXT(AdamantiumVulkan.Core.Interop.FilterCubicImageViewImageFormatPropertiesEXT f)
        {
            return new FilterCubicImageViewImageFormatPropertiesEXT(f);
        }

    }

    public partial class DeviceQueueGlobalPriorityCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceQueueGlobalPriorityCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public DeviceQueueGlobalPriorityCreateInfoEXT()
        {
        }

        public DeviceQueueGlobalPriorityCreateInfoEXT(AdamantiumVulkan.Core.Interop.DeviceQueueGlobalPriorityCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public QueueGlobalPriorityEXT GlobalPriority
        {
            get => _internal.globalPriority;
            set
            {
                _internal.globalPriority = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceQueueGlobalPriorityCreateInfoEXT(DeviceQueueGlobalPriorityCreateInfoEXT d)
        {
            return d._internal;
        }

        public static implicit operator DeviceQueueGlobalPriorityCreateInfoEXT(AdamantiumVulkan.Core.Interop.DeviceQueueGlobalPriorityCreateInfoEXT d)
        {
            return new DeviceQueueGlobalPriorityCreateInfoEXT(d);
        }

    }

    public partial class ImportMemoryHostPointerInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImportMemoryHostPointerInfoEXT _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpHostPointer;

        public ImportMemoryHostPointerInfoEXT()
        {
        }

        public ImportMemoryHostPointerInfoEXT(AdamantiumVulkan.Core.Interop.ImportMemoryHostPointerInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        private System.IntPtr pHostPointer;
        public System.IntPtr PHostPointer
        {
            get
            {
                if(pHostPointer != null)
                    return pHostPointer;

                pHostPointer = _internal.pHostPointer;
                return pHostPointer;
            }
            set
            {
                refpHostPointer?.Dispose();
                refpHostPointer = new GCHandleReference(value);
                pHostPointer = value;
                _internal.pHostPointer = refpHostPointer.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpHostPointer?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImportMemoryHostPointerInfoEXT(ImportMemoryHostPointerInfoEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImportMemoryHostPointerInfoEXT(AdamantiumVulkan.Core.Interop.ImportMemoryHostPointerInfoEXT i)
        {
            return new ImportMemoryHostPointerInfoEXT(i);
        }

    }

    public partial class MemoryHostPointerPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryHostPointerPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public MemoryHostPointerPropertiesEXT()
        {
        }

        public MemoryHostPointerPropertiesEXT(AdamantiumVulkan.Core.Interop.MemoryHostPointerPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MemoryTypeBits
        {
            get => _internal.memoryTypeBits;
            set
            {
                _internal.memoryTypeBits = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryHostPointerPropertiesEXT(MemoryHostPointerPropertiesEXT m)
        {
            return m._internal;
        }

        public static implicit operator MemoryHostPointerPropertiesEXT(AdamantiumVulkan.Core.Interop.MemoryHostPointerPropertiesEXT m)
        {
            return new MemoryHostPointerPropertiesEXT(m);
        }

    }

    public partial class PhysicalDeviceExternalMemoryHostPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalMemoryHostPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExternalMemoryHostPropertiesEXT()
        {
        }

        public PhysicalDeviceExternalMemoryHostPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalMemoryHostPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong MinImportedHostPointerAlignment
        {
            get => _internal.minImportedHostPointerAlignment;
            set
            {
                _internal.minImportedHostPointerAlignment = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalMemoryHostPropertiesEXT(PhysicalDeviceExternalMemoryHostPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExternalMemoryHostPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceExternalMemoryHostPropertiesEXT p)
        {
            return new PhysicalDeviceExternalMemoryHostPropertiesEXT(p);
        }

    }

    public partial class CalibratedTimestampInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CalibratedTimestampInfoEXT _internal;

        private GCHandleReference refpNext;

        public CalibratedTimestampInfoEXT()
        {
        }

        public CalibratedTimestampInfoEXT(AdamantiumVulkan.Core.Interop.CalibratedTimestampInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public TimeDomainEXT TimeDomain
        {
            get => _internal.timeDomain;
            set
            {
                _internal.timeDomain = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CalibratedTimestampInfoEXT(CalibratedTimestampInfoEXT c)
        {
            return c._internal;
        }

        public static implicit operator CalibratedTimestampInfoEXT(AdamantiumVulkan.Core.Interop.CalibratedTimestampInfoEXT c)
        {
            return new CalibratedTimestampInfoEXT(c);
        }

    }

    public partial class PhysicalDeviceShaderCorePropertiesAMD : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderCorePropertiesAMD _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceShaderCorePropertiesAMD()
        {
        }

        public PhysicalDeviceShaderCorePropertiesAMD(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderCorePropertiesAMD _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ShaderEngineCount
        {
            get => _internal.shaderEngineCount;
            set
            {
                _internal.shaderEngineCount = value;
            }
        }

        public uint ShaderArraysPerEngineCount
        {
            get => _internal.shaderArraysPerEngineCount;
            set
            {
                _internal.shaderArraysPerEngineCount = value;
            }
        }

        public uint ComputeUnitsPerShaderArray
        {
            get => _internal.computeUnitsPerShaderArray;
            set
            {
                _internal.computeUnitsPerShaderArray = value;
            }
        }

        public uint SimdPerComputeUnit
        {
            get => _internal.simdPerComputeUnit;
            set
            {
                _internal.simdPerComputeUnit = value;
            }
        }

        public uint WavefrontsPerSimd
        {
            get => _internal.wavefrontsPerSimd;
            set
            {
                _internal.wavefrontsPerSimd = value;
            }
        }

        public uint WavefrontSize
        {
            get => _internal.wavefrontSize;
            set
            {
                _internal.wavefrontSize = value;
            }
        }

        public uint SgprsPerSimd
        {
            get => _internal.sgprsPerSimd;
            set
            {
                _internal.sgprsPerSimd = value;
            }
        }

        public uint MinSgprAllocation
        {
            get => _internal.minSgprAllocation;
            set
            {
                _internal.minSgprAllocation = value;
            }
        }

        public uint MaxSgprAllocation
        {
            get => _internal.maxSgprAllocation;
            set
            {
                _internal.maxSgprAllocation = value;
            }
        }

        public uint SgprAllocationGranularity
        {
            get => _internal.sgprAllocationGranularity;
            set
            {
                _internal.sgprAllocationGranularity = value;
            }
        }

        public uint VgprsPerSimd
        {
            get => _internal.vgprsPerSimd;
            set
            {
                _internal.vgprsPerSimd = value;
            }
        }

        public uint MinVgprAllocation
        {
            get => _internal.minVgprAllocation;
            set
            {
                _internal.minVgprAllocation = value;
            }
        }

        public uint MaxVgprAllocation
        {
            get => _internal.maxVgprAllocation;
            set
            {
                _internal.maxVgprAllocation = value;
            }
        }

        public uint VgprAllocationGranularity
        {
            get => _internal.vgprAllocationGranularity;
            set
            {
                _internal.vgprAllocationGranularity = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderCorePropertiesAMD(PhysicalDeviceShaderCorePropertiesAMD p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShaderCorePropertiesAMD(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderCorePropertiesAMD p)
        {
            return new PhysicalDeviceShaderCorePropertiesAMD(p);
        }

    }

    public partial class DeviceMemoryOverallocationCreateInfoAMD : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.DeviceMemoryOverallocationCreateInfoAMD _internal;

        private GCHandleReference refpNext;

        public DeviceMemoryOverallocationCreateInfoAMD()
        {
        }

        public DeviceMemoryOverallocationCreateInfoAMD(AdamantiumVulkan.Core.Interop.DeviceMemoryOverallocationCreateInfoAMD _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public MemoryOverallocationBehaviorAMD OverallocationBehavior
        {
            get => _internal.overallocationBehavior;
            set
            {
                _internal.overallocationBehavior = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DeviceMemoryOverallocationCreateInfoAMD(DeviceMemoryOverallocationCreateInfoAMD d)
        {
            return d._internal;
        }

        public static implicit operator DeviceMemoryOverallocationCreateInfoAMD(AdamantiumVulkan.Core.Interop.DeviceMemoryOverallocationCreateInfoAMD d)
        {
            return new DeviceMemoryOverallocationCreateInfoAMD(d);
        }

    }

    public partial class PhysicalDeviceVertexAttributeDivisorPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceVertexAttributeDivisorPropertiesEXT()
        {
        }

        public PhysicalDeviceVertexAttributeDivisorPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxVertexAttribDivisor
        {
            get => _internal.maxVertexAttribDivisor;
            set
            {
                _internal.maxVertexAttribDivisor = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorPropertiesEXT(PhysicalDeviceVertexAttributeDivisorPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceVertexAttributeDivisorPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorPropertiesEXT p)
        {
            return new PhysicalDeviceVertexAttributeDivisorPropertiesEXT(p);
        }

    }

    public partial class VertexInputBindingDivisorDescriptionEXT
    {
        private AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT _internal;

        public VertexInputBindingDivisorDescriptionEXT()
        {
        }

        public VertexInputBindingDivisorDescriptionEXT(AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT _internal)
        {
            this._internal = _internal;
        }

        public uint Binding
        {
            get => _internal.binding;
            set
            {
                _internal.binding = value;
            }
        }

        public uint Divisor
        {
            get => _internal.divisor;
            set
            {
                _internal.divisor = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT(VertexInputBindingDivisorDescriptionEXT v)
        {
            return v._internal;
        }

        public static implicit operator VertexInputBindingDivisorDescriptionEXT(AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT v)
        {
            return new VertexInputBindingDivisorDescriptionEXT(v);
        }

    }

    public partial class PipelineVertexInputDivisorStateCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineVertexInputDivisorStateCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpVertexBindingDivisors;

        public PipelineVertexInputDivisorStateCreateInfoEXT()
        {
        }

        public PipelineVertexInputDivisorStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineVertexInputDivisorStateCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint VertexBindingDivisorCount
        {
            get => _internal.vertexBindingDivisorCount;
            set
            {
                _internal.vertexBindingDivisorCount = value;
            }
        }

        private VertexInputBindingDivisorDescriptionEXT pVertexBindingDivisors;
        public VertexInputBindingDivisorDescriptionEXT PVertexBindingDivisors
        {
            get
            {
                if(pVertexBindingDivisors != null)
                    return pVertexBindingDivisors;

                pVertexBindingDivisors = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT>(_internal.pVertexBindingDivisors);
                return pVertexBindingDivisors;
            }
            set
            {
                refpVertexBindingDivisors?.Dispose();
                AdamantiumVulkan.Core.Interop.VertexInputBindingDivisorDescriptionEXT tmp = value;
                refpVertexBindingDivisors = new StructReference(tmp);
                pVertexBindingDivisors = value;
                _internal.pVertexBindingDivisors = refpVertexBindingDivisors.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpVertexBindingDivisors?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineVertexInputDivisorStateCreateInfoEXT(PipelineVertexInputDivisorStateCreateInfoEXT p)
        {
            return p._internal;
        }

        public static implicit operator PipelineVertexInputDivisorStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.PipelineVertexInputDivisorStateCreateInfoEXT p)
        {
            return new PipelineVertexInputDivisorStateCreateInfoEXT(p);
        }

    }

    public partial class PhysicalDeviceVertexAttributeDivisorFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceVertexAttributeDivisorFeaturesEXT()
        {
        }

        public PhysicalDeviceVertexAttributeDivisorFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool VertexAttributeInstanceRateDivisor
        {
            get => _internal.vertexAttributeInstanceRateDivisor;
            set
            {
                _internal.vertexAttributeInstanceRateDivisor = value;
            }
        }

        public bool VertexAttributeInstanceRateZeroDivisor
        {
            get => _internal.vertexAttributeInstanceRateZeroDivisor;
            set
            {
                _internal.vertexAttributeInstanceRateZeroDivisor = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorFeaturesEXT(PhysicalDeviceVertexAttributeDivisorFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceVertexAttributeDivisorFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceVertexAttributeDivisorFeaturesEXT p)
        {
            return new PhysicalDeviceVertexAttributeDivisorFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceComputeShaderDerivativesFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceComputeShaderDerivativesFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceComputeShaderDerivativesFeaturesNV()
        {
        }

        public PhysicalDeviceComputeShaderDerivativesFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceComputeShaderDerivativesFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ComputeDerivativeGroupQuads
        {
            get => _internal.computeDerivativeGroupQuads;
            set
            {
                _internal.computeDerivativeGroupQuads = value;
            }
        }

        public bool ComputeDerivativeGroupLinear
        {
            get => _internal.computeDerivativeGroupLinear;
            set
            {
                _internal.computeDerivativeGroupLinear = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceComputeShaderDerivativesFeaturesNV(PhysicalDeviceComputeShaderDerivativesFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceComputeShaderDerivativesFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceComputeShaderDerivativesFeaturesNV p)
        {
            return new PhysicalDeviceComputeShaderDerivativesFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceMeshShaderFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMeshShaderFeaturesNV()
        {
        }

        public PhysicalDeviceMeshShaderFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool TaskShader
        {
            get => _internal.taskShader;
            set
            {
                _internal.taskShader = value;
            }
        }

        public bool MeshShader
        {
            get => _internal.meshShader;
            set
            {
                _internal.meshShader = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderFeaturesNV(PhysicalDeviceMeshShaderFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMeshShaderFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderFeaturesNV p)
        {
            return new PhysicalDeviceMeshShaderFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceMeshShaderPropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderPropertiesNV _internal;

        private GCHandleReference refpNext;

        private uint[] maxTaskWorkGroupSize;

        private uint[] maxMeshWorkGroupSize;

        public PhysicalDeviceMeshShaderPropertiesNV()
        {
        }

        public PhysicalDeviceMeshShaderPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MaxDrawMeshTasksCount
        {
            get => _internal.maxDrawMeshTasksCount;
            set
            {
                _internal.maxDrawMeshTasksCount = value;
            }
        }

        public uint MaxTaskWorkGroupInvocations
        {
            get => _internal.maxTaskWorkGroupInvocations;
            set
            {
                _internal.maxTaskWorkGroupInvocations = value;
            }
        }

        public uint[] MaxTaskWorkGroupSize
        {
            get
            {
                if(maxTaskWorkGroupSize != null)
                    return maxTaskWorkGroupSize;

                var tmpArr = new uint[3];
                unsafe
                {
                    for(int i = 0; i < 3; ++i)
                    {
                        tmpArr[i] = _internal.maxTaskWorkGroupSize[i];
                    }
                }
                maxTaskWorkGroupSize = tmpArr;
                return maxTaskWorkGroupSize;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxTaskWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.maxTaskWorkGroupSize[i] = value[i];
                    }
                }
                maxTaskWorkGroupSize = value;
            }
        }

        public uint MaxTaskTotalMemorySize
        {
            get => _internal.maxTaskTotalMemorySize;
            set
            {
                _internal.maxTaskTotalMemorySize = value;
            }
        }

        public uint MaxTaskOutputCount
        {
            get => _internal.maxTaskOutputCount;
            set
            {
                _internal.maxTaskOutputCount = value;
            }
        }

        public uint MaxMeshWorkGroupInvocations
        {
            get => _internal.maxMeshWorkGroupInvocations;
            set
            {
                _internal.maxMeshWorkGroupInvocations = value;
            }
        }

        public uint[] MaxMeshWorkGroupSize
        {
            get
            {
                if(maxMeshWorkGroupSize != null)
                    return maxMeshWorkGroupSize;

                var tmpArr = new uint[3];
                unsafe
                {
                    for(int i = 0; i < 3; ++i)
                    {
                        tmpArr[i] = _internal.maxMeshWorkGroupSize[i];
                    }
                }
                maxMeshWorkGroupSize = tmpArr;
                return maxMeshWorkGroupSize;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxMeshWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.maxMeshWorkGroupSize[i] = value[i];
                    }
                }
                maxMeshWorkGroupSize = value;
            }
        }

        public uint MaxMeshTotalMemorySize
        {
            get => _internal.maxMeshTotalMemorySize;
            set
            {
                _internal.maxMeshTotalMemorySize = value;
            }
        }

        public uint MaxMeshOutputVertices
        {
            get => _internal.maxMeshOutputVertices;
            set
            {
                _internal.maxMeshOutputVertices = value;
            }
        }

        public uint MaxMeshOutputPrimitives
        {
            get => _internal.maxMeshOutputPrimitives;
            set
            {
                _internal.maxMeshOutputPrimitives = value;
            }
        }

        public uint MaxMeshMultiviewViewCount
        {
            get => _internal.maxMeshMultiviewViewCount;
            set
            {
                _internal.maxMeshMultiviewViewCount = value;
            }
        }

        public uint MeshOutputPerVertexGranularity
        {
            get => _internal.meshOutputPerVertexGranularity;
            set
            {
                _internal.meshOutputPerVertexGranularity = value;
            }
        }

        public uint MeshOutputPerPrimitiveGranularity
        {
            get => _internal.meshOutputPerPrimitiveGranularity;
            set
            {
                _internal.meshOutputPerPrimitiveGranularity = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderPropertiesNV(PhysicalDeviceMeshShaderPropertiesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMeshShaderPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceMeshShaderPropertiesNV p)
        {
            return new PhysicalDeviceMeshShaderPropertiesNV(p);
        }

    }

    public partial class DrawMeshTasksIndirectCommandNV
    {
        private AdamantiumVulkan.Core.Interop.DrawMeshTasksIndirectCommandNV _internal;

        public DrawMeshTasksIndirectCommandNV()
        {
        }

        public DrawMeshTasksIndirectCommandNV(AdamantiumVulkan.Core.Interop.DrawMeshTasksIndirectCommandNV _internal)
        {
            this._internal = _internal;
        }

        public uint TaskCount
        {
            get => _internal.taskCount;
            set
            {
                _internal.taskCount = value;
            }
        }

        public uint FirstTask
        {
            get => _internal.firstTask;
            set
            {
                _internal.firstTask = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.DrawMeshTasksIndirectCommandNV(DrawMeshTasksIndirectCommandNV d)
        {
            return d._internal;
        }

        public static implicit operator DrawMeshTasksIndirectCommandNV(AdamantiumVulkan.Core.Interop.DrawMeshTasksIndirectCommandNV d)
        {
            return new DrawMeshTasksIndirectCommandNV(d);
        }

    }

    public partial class PhysicalDeviceFragmentShaderBarycentricFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentShaderBarycentricFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceFragmentShaderBarycentricFeaturesNV()
        {
        }

        public PhysicalDeviceFragmentShaderBarycentricFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentShaderBarycentricFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool FragmentShaderBarycentric
        {
            get => _internal.fragmentShaderBarycentric;
            set
            {
                _internal.fragmentShaderBarycentric = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentShaderBarycentricFeaturesNV(PhysicalDeviceFragmentShaderBarycentricFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFragmentShaderBarycentricFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentShaderBarycentricFeaturesNV p)
        {
            return new PhysicalDeviceFragmentShaderBarycentricFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceShaderImageFootprintFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderImageFootprintFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceShaderImageFootprintFeaturesNV()
        {
        }

        public PhysicalDeviceShaderImageFootprintFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderImageFootprintFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ImageFootprint
        {
            get => _internal.imageFootprint;
            set
            {
                _internal.imageFootprint = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderImageFootprintFeaturesNV(PhysicalDeviceShaderImageFootprintFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceShaderImageFootprintFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceShaderImageFootprintFeaturesNV p)
        {
            return new PhysicalDeviceShaderImageFootprintFeaturesNV(p);
        }

    }

    public partial class PipelineViewportExclusiveScissorStateCreateInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PipelineViewportExclusiveScissorStateCreateInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpExclusiveScissors;

        public PipelineViewportExclusiveScissorStateCreateInfoNV()
        {
        }

        public PipelineViewportExclusiveScissorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportExclusiveScissorStateCreateInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint ExclusiveScissorCount
        {
            get => _internal.exclusiveScissorCount;
            set
            {
                _internal.exclusiveScissorCount = value;
            }
        }

        private Rect2D pExclusiveScissors;
        public Rect2D PExclusiveScissors
        {
            get
            {
                if(pExclusiveScissors != null)
                    return pExclusiveScissors;

                pExclusiveScissors = Marshal.PtrToStructure<AdamantiumVulkan.Core.Interop.Rect2D>(_internal.pExclusiveScissors);
                return pExclusiveScissors;
            }
            set
            {
                refpExclusiveScissors?.Dispose();
                AdamantiumVulkan.Core.Interop.Rect2D tmp = value;
                refpExclusiveScissors = new StructReference(tmp);
                pExclusiveScissors = value;
                _internal.pExclusiveScissors = refpExclusiveScissors.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpExclusiveScissors?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PipelineViewportExclusiveScissorStateCreateInfoNV(PipelineViewportExclusiveScissorStateCreateInfoNV p)
        {
            return p._internal;
        }

        public static implicit operator PipelineViewportExclusiveScissorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.PipelineViewportExclusiveScissorStateCreateInfoNV p)
        {
            return new PipelineViewportExclusiveScissorStateCreateInfoNV(p);
        }

    }

    public partial class PhysicalDeviceExclusiveScissorFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceExclusiveScissorFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceExclusiveScissorFeaturesNV()
        {
        }

        public PhysicalDeviceExclusiveScissorFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceExclusiveScissorFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ExclusiveScissor
        {
            get => _internal.exclusiveScissor;
            set
            {
                _internal.exclusiveScissor = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceExclusiveScissorFeaturesNV(PhysicalDeviceExclusiveScissorFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceExclusiveScissorFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceExclusiveScissorFeaturesNV p)
        {
            return new PhysicalDeviceExclusiveScissorFeaturesNV(p);
        }

    }

    public partial class QueueFamilyCheckpointPropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.QueueFamilyCheckpointPropertiesNV _internal;

        private GCHandleReference refpNext;

        public QueueFamilyCheckpointPropertiesNV()
        {
        }

        public QueueFamilyCheckpointPropertiesNV(AdamantiumVulkan.Core.Interop.QueueFamilyCheckpointPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint CheckpointExecutionStageMask
        {
            get => _internal.checkpointExecutionStageMask;
            set
            {
                _internal.checkpointExecutionStageMask = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.QueueFamilyCheckpointPropertiesNV(QueueFamilyCheckpointPropertiesNV q)
        {
            return q._internal;
        }

        public static implicit operator QueueFamilyCheckpointPropertiesNV(AdamantiumVulkan.Core.Interop.QueueFamilyCheckpointPropertiesNV q)
        {
            return new QueueFamilyCheckpointPropertiesNV(q);
        }

    }

    public partial class CheckpointDataNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CheckpointDataNV _internal;

        private GCHandleReference refpNext;

        private GCHandleReference refpCheckpointMarker;

        public CheckpointDataNV()
        {
        }

        public CheckpointDataNV(AdamantiumVulkan.Core.Interop.CheckpointDataNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public PipelineStageFlagBits Stage
        {
            get => _internal.stage;
            set
            {
                _internal.stage = value;
            }
        }

        private System.IntPtr pCheckpointMarker;
        public System.IntPtr PCheckpointMarker
        {
            get
            {
                if(pCheckpointMarker != null)
                    return pCheckpointMarker;

                pCheckpointMarker = _internal.pCheckpointMarker;
                return pCheckpointMarker;
            }
            set
            {
                refpCheckpointMarker?.Dispose();
                refpCheckpointMarker = new GCHandleReference(value);
                pCheckpointMarker = value;
                _internal.pCheckpointMarker = refpCheckpointMarker.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpCheckpointMarker?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CheckpointDataNV(CheckpointDataNV c)
        {
            return c._internal;
        }

        public static implicit operator CheckpointDataNV(AdamantiumVulkan.Core.Interop.CheckpointDataNV c)
        {
            return new CheckpointDataNV(c);
        }

    }

    public partial class PhysicalDevicePCIBusInfoPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDevicePCIBusInfoPropertiesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDevicePCIBusInfoPropertiesEXT()
        {
        }

        public PhysicalDevicePCIBusInfoPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDevicePCIBusInfoPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint PciDomain
        {
            get => _internal.pciDomain;
            set
            {
                _internal.pciDomain = value;
            }
        }

        public uint PciBus
        {
            get => _internal.pciBus;
            set
            {
                _internal.pciBus = value;
            }
        }

        public uint PciDevice
        {
            get => _internal.pciDevice;
            set
            {
                _internal.pciDevice = value;
            }
        }

        public uint PciFunction
        {
            get => _internal.pciFunction;
            set
            {
                _internal.pciFunction = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDevicePCIBusInfoPropertiesEXT(PhysicalDevicePCIBusInfoPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDevicePCIBusInfoPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDevicePCIBusInfoPropertiesEXT p)
        {
            return new PhysicalDevicePCIBusInfoPropertiesEXT(p);
        }

    }

    public partial class PhysicalDeviceFragmentDensityMapFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceFragmentDensityMapFeaturesEXT()
        {
        }

        public PhysicalDeviceFragmentDensityMapFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool FragmentDensityMap
        {
            get => _internal.fragmentDensityMap;
            set
            {
                _internal.fragmentDensityMap = value;
            }
        }

        public bool FragmentDensityMapDynamic
        {
            get => _internal.fragmentDensityMapDynamic;
            set
            {
                _internal.fragmentDensityMapDynamic = value;
            }
        }

        public bool FragmentDensityMapNonSubsampledImages
        {
            get => _internal.fragmentDensityMapNonSubsampledImages;
            set
            {
                _internal.fragmentDensityMapNonSubsampledImages = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapFeaturesEXT(PhysicalDeviceFragmentDensityMapFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFragmentDensityMapFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapFeaturesEXT p)
        {
            return new PhysicalDeviceFragmentDensityMapFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceFragmentDensityMapPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapPropertiesEXT _internal;

        private GCHandleReference refpNext;

        private Extent2D minFragmentDensityTexelSize;

        private Extent2D maxFragmentDensityTexelSize;

        public PhysicalDeviceFragmentDensityMapPropertiesEXT()
        {
        }

        public PhysicalDeviceFragmentDensityMapPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Extent2D MinFragmentDensityTexelSize
        {
            get
            {
                if (minFragmentDensityTexelSize != null)
                {
                    return minFragmentDensityTexelSize;
                }
                minFragmentDensityTexelSize = _internal.minFragmentDensityTexelSize;
                return minFragmentDensityTexelSize;
            }
            set
            {
                minFragmentDensityTexelSize = value;
                _internal.minFragmentDensityTexelSize = value;
            }
        }

        public Extent2D MaxFragmentDensityTexelSize
        {
            get
            {
                if (maxFragmentDensityTexelSize != null)
                {
                    return maxFragmentDensityTexelSize;
                }
                maxFragmentDensityTexelSize = _internal.maxFragmentDensityTexelSize;
                return maxFragmentDensityTexelSize;
            }
            set
            {
                maxFragmentDensityTexelSize = value;
                _internal.maxFragmentDensityTexelSize = value;
            }
        }

        public bool FragmentDensityInvocations
        {
            get => _internal.fragmentDensityInvocations;
            set
            {
                _internal.fragmentDensityInvocations = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapPropertiesEXT(PhysicalDeviceFragmentDensityMapPropertiesEXT p)
        {
            if (p.MinFragmentDensityTexelSize != null)
            {
                p._internal.minFragmentDensityTexelSize = p.MinFragmentDensityTexelSize;
            }
            if (p.MaxFragmentDensityTexelSize != null)
            {
                p._internal.maxFragmentDensityTexelSize = p.MaxFragmentDensityTexelSize;
            }
            return p._internal;
        }

        public static implicit operator PhysicalDeviceFragmentDensityMapPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceFragmentDensityMapPropertiesEXT p)
        {
            return new PhysicalDeviceFragmentDensityMapPropertiesEXT(p);
        }

    }

    public partial class RenderPassFragmentDensityMapCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.RenderPassFragmentDensityMapCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        private AttachmentReference fragmentDensityMapAttachment;

        public RenderPassFragmentDensityMapCreateInfoEXT()
        {
        }

        public RenderPassFragmentDensityMapCreateInfoEXT(AdamantiumVulkan.Core.Interop.RenderPassFragmentDensityMapCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public AttachmentReference FragmentDensityMapAttachment
        {
            get
            {
                if (fragmentDensityMapAttachment != null)
                {
                    return fragmentDensityMapAttachment;
                }
                fragmentDensityMapAttachment = _internal.fragmentDensityMapAttachment;
                return fragmentDensityMapAttachment;
            }
            set
            {
                fragmentDensityMapAttachment = value;
                _internal.fragmentDensityMapAttachment = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.RenderPassFragmentDensityMapCreateInfoEXT(RenderPassFragmentDensityMapCreateInfoEXT r)
        {
            if (r.FragmentDensityMapAttachment != null)
            {
                r._internal.fragmentDensityMapAttachment = r.FragmentDensityMapAttachment;
            }
            return r._internal;
        }

        public static implicit operator RenderPassFragmentDensityMapCreateInfoEXT(AdamantiumVulkan.Core.Interop.RenderPassFragmentDensityMapCreateInfoEXT r)
        {
            return new RenderPassFragmentDensityMapCreateInfoEXT(r);
        }

    }

    public partial class PhysicalDeviceScalarBlockLayoutFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceScalarBlockLayoutFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceScalarBlockLayoutFeaturesEXT()
        {
        }

        public PhysicalDeviceScalarBlockLayoutFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceScalarBlockLayoutFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool ScalarBlockLayout
        {
            get => _internal.scalarBlockLayout;
            set
            {
                _internal.scalarBlockLayout = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceScalarBlockLayoutFeaturesEXT(PhysicalDeviceScalarBlockLayoutFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceScalarBlockLayoutFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceScalarBlockLayoutFeaturesEXT p)
        {
            return new PhysicalDeviceScalarBlockLayoutFeaturesEXT(p);
        }

    }

    public partial class PhysicalDeviceMemoryBudgetPropertiesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryBudgetPropertiesEXT _internal;

        private GCHandleReference refpNext;

        private ulong[] heapBudget;

        private ulong[] heapUsage;

        public PhysicalDeviceMemoryBudgetPropertiesEXT()
        {
        }

        public PhysicalDeviceMemoryBudgetPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryBudgetPropertiesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong[] HeapBudget
        {
            get
            {
                if(heapBudget != null)
                    return heapBudget;

                var tmpArr = new ulong[16];
                unsafe
                {
                    for(int i = 0; i < 16; ++i)
                    {
                        tmpArr[i] = _internal.heapBudget[i];
                    }
                }
                heapBudget = tmpArr;
                return heapBudget;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(HeapBudget), "Array is out of bounds. Size should not be more than 16");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.heapBudget[i] = value[i];
                    }
                }
                heapBudget = value;
            }
        }

        public ulong[] HeapUsage
        {
            get
            {
                if(heapUsage != null)
                    return heapUsage;

                var tmpArr = new ulong[16];
                unsafe
                {
                    for(int i = 0; i < 16; ++i)
                    {
                        tmpArr[i] = _internal.heapUsage[i];
                    }
                }
                heapUsage = tmpArr;
                return heapUsage;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(HeapUsage), "Array is out of bounds. Size should not be more than 16");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.heapUsage[i] = value[i];
                    }
                }
                heapUsage = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryBudgetPropertiesEXT(PhysicalDeviceMemoryBudgetPropertiesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMemoryBudgetPropertiesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryBudgetPropertiesEXT p)
        {
            return new PhysicalDeviceMemoryBudgetPropertiesEXT(p);
        }

    }

    public partial class PhysicalDeviceMemoryPriorityFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryPriorityFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceMemoryPriorityFeaturesEXT()
        {
        }

        public PhysicalDeviceMemoryPriorityFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryPriorityFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool MemoryPriority
        {
            get => _internal.memoryPriority;
            set
            {
                _internal.memoryPriority = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryPriorityFeaturesEXT(PhysicalDeviceMemoryPriorityFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceMemoryPriorityFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceMemoryPriorityFeaturesEXT p)
        {
            return new PhysicalDeviceMemoryPriorityFeaturesEXT(p);
        }

    }

    public partial class MemoryPriorityAllocateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.MemoryPriorityAllocateInfoEXT _internal;

        private GCHandleReference refpNext;

        public MemoryPriorityAllocateInfoEXT()
        {
        }

        public MemoryPriorityAllocateInfoEXT(AdamantiumVulkan.Core.Interop.MemoryPriorityAllocateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public float Priority
        {
            get => _internal.priority;
            set
            {
                _internal.priority = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.MemoryPriorityAllocateInfoEXT(MemoryPriorityAllocateInfoEXT m)
        {
            return m._internal;
        }

        public static implicit operator MemoryPriorityAllocateInfoEXT(AdamantiumVulkan.Core.Interop.MemoryPriorityAllocateInfoEXT m)
        {
            return new MemoryPriorityAllocateInfoEXT(m);
        }

    }

    public partial class PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV()
        {
        }

        public PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool DedicatedAllocationImageAliasing
        {
            get => _internal.dedicatedAllocationImageAliasing;
            set
            {
                _internal.dedicatedAllocationImageAliasing = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV p)
        {
            return new PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceBufferAddressFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceBufferAddressFeaturesEXT _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceBufferAddressFeaturesEXT()
        {
        }

        public PhysicalDeviceBufferAddressFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBufferAddressFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool BufferDeviceAddress
        {
            get => _internal.bufferDeviceAddress;
            set
            {
                _internal.bufferDeviceAddress = value;
            }
        }

        public bool BufferDeviceAddressCaptureReplay
        {
            get => _internal.bufferDeviceAddressCaptureReplay;
            set
            {
                _internal.bufferDeviceAddressCaptureReplay = value;
            }
        }

        public bool BufferDeviceAddressMultiDevice
        {
            get => _internal.bufferDeviceAddressMultiDevice;
            set
            {
                _internal.bufferDeviceAddressMultiDevice = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceBufferAddressFeaturesEXT(PhysicalDeviceBufferAddressFeaturesEXT p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceBufferAddressFeaturesEXT(AdamantiumVulkan.Core.Interop.PhysicalDeviceBufferAddressFeaturesEXT p)
        {
            return new PhysicalDeviceBufferAddressFeaturesEXT(p);
        }

    }

    public partial class BufferDeviceAddressInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferDeviceAddressInfoEXT _internal;

        private GCHandleReference refpNext;

        private Buffer buffer;

        public BufferDeviceAddressInfoEXT()
        {
        }

        public BufferDeviceAddressInfoEXT(AdamantiumVulkan.Core.Interop.BufferDeviceAddressInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Buffer Buffer
        {
            get
            {
                if (buffer != null)
                {
                    return buffer;
                }
                buffer = _internal.buffer;
                return buffer;
            }
            set
            {
                buffer = value;
                _internal.buffer = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferDeviceAddressInfoEXT(BufferDeviceAddressInfoEXT b)
        {
            if (b.Buffer != null)
            {
                b._internal.buffer = b.Buffer;
            }
            return b._internal;
        }

        public static implicit operator BufferDeviceAddressInfoEXT(AdamantiumVulkan.Core.Interop.BufferDeviceAddressInfoEXT b)
        {
            return new BufferDeviceAddressInfoEXT(b);
        }

    }

    public partial class BufferDeviceAddressCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.BufferDeviceAddressCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public BufferDeviceAddressCreateInfoEXT()
        {
        }

        public BufferDeviceAddressCreateInfoEXT(AdamantiumVulkan.Core.Interop.BufferDeviceAddressCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ulong DeviceAddress
        {
            get => _internal.deviceAddress;
            set
            {
                _internal.deviceAddress = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.BufferDeviceAddressCreateInfoEXT(BufferDeviceAddressCreateInfoEXT b)
        {
            return b._internal;
        }

        public static implicit operator BufferDeviceAddressCreateInfoEXT(AdamantiumVulkan.Core.Interop.BufferDeviceAddressCreateInfoEXT b)
        {
            return new BufferDeviceAddressCreateInfoEXT(b);
        }

    }

    public partial class ImageStencilUsageCreateInfoEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ImageStencilUsageCreateInfoEXT _internal;

        private GCHandleReference refpNext;

        public ImageStencilUsageCreateInfoEXT()
        {
        }

        public ImageStencilUsageCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageStencilUsageCreateInfoEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint StencilUsage
        {
            get => _internal.stencilUsage;
            set
            {
                _internal.stencilUsage = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ImageStencilUsageCreateInfoEXT(ImageStencilUsageCreateInfoEXT i)
        {
            return i._internal;
        }

        public static implicit operator ImageStencilUsageCreateInfoEXT(AdamantiumVulkan.Core.Interop.ImageStencilUsageCreateInfoEXT i)
        {
            return new ImageStencilUsageCreateInfoEXT(i);
        }

    }

    public partial class ValidationFeaturesEXT : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.ValidationFeaturesEXT _internal;

        private GCHandleReference refpNext;

        private StructReference refpEnabledValidationFeatures;

        private StructReference refpDisabledValidationFeatures;

        public ValidationFeaturesEXT()
        {
        }

        public ValidationFeaturesEXT(AdamantiumVulkan.Core.Interop.ValidationFeaturesEXT _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint EnabledValidationFeatureCount
        {
            get => _internal.enabledValidationFeatureCount;
            set
            {
                _internal.enabledValidationFeatureCount = value;
            }
        }

        private ValidationFeatureEnableEXT pEnabledValidationFeatures;
        public ValidationFeatureEnableEXT PEnabledValidationFeatures
        {
            get
            {
                pEnabledValidationFeatures = Marshal.PtrToStructure<ValidationFeatureEnableEXT>(_internal.pEnabledValidationFeatures);
                return pEnabledValidationFeatures;
            }
            set
            {
                refpEnabledValidationFeatures?.Dispose();
                refpEnabledValidationFeatures = new StructReference(value);
                pEnabledValidationFeatures = value;
                _internal.pEnabledValidationFeatures = refpEnabledValidationFeatures.Handle;
            }
        }

        public uint DisabledValidationFeatureCount
        {
            get => _internal.disabledValidationFeatureCount;
            set
            {
                _internal.disabledValidationFeatureCount = value;
            }
        }

        private ValidationFeatureDisableEXT pDisabledValidationFeatures;
        public ValidationFeatureDisableEXT PDisabledValidationFeatures
        {
            get
            {
                pDisabledValidationFeatures = Marshal.PtrToStructure<ValidationFeatureDisableEXT>(_internal.pDisabledValidationFeatures);
                return pDisabledValidationFeatures;
            }
            set
            {
                refpDisabledValidationFeatures?.Dispose();
                refpDisabledValidationFeatures = new StructReference(value);
                pDisabledValidationFeatures = value;
                _internal.pDisabledValidationFeatures = refpDisabledValidationFeatures.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpEnabledValidationFeatures?.Dispose();
            refpDisabledValidationFeatures?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ValidationFeaturesEXT(ValidationFeaturesEXT v)
        {
            return v._internal;
        }

        public static implicit operator ValidationFeaturesEXT(AdamantiumVulkan.Core.Interop.ValidationFeaturesEXT v)
        {
            return new ValidationFeaturesEXT(v);
        }

    }

    public partial class CooperativeMatrixPropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.CooperativeMatrixPropertiesNV _internal;

        private GCHandleReference refpNext;

        public CooperativeMatrixPropertiesNV()
        {
        }

        public CooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.CooperativeMatrixPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MSize
        {
            get => _internal.MSize;
            set
            {
                _internal.MSize = value;
            }
        }

        public uint NSize
        {
            get => _internal.NSize;
            set
            {
                _internal.NSize = value;
            }
        }

        public uint KSize
        {
            get => _internal.KSize;
            set
            {
                _internal.KSize = value;
            }
        }

        public ComponentTypeNV AType
        {
            get => _internal.AType;
            set
            {
                _internal.AType = value;
            }
        }

        public ComponentTypeNV BType
        {
            get => _internal.BType;
            set
            {
                _internal.BType = value;
            }
        }

        public ComponentTypeNV CType
        {
            get => _internal.CType;
            set
            {
                _internal.CType = value;
            }
        }

        public ComponentTypeNV DType
        {
            get => _internal.DType;
            set
            {
                _internal.DType = value;
            }
        }

        public ScopeNV Scope
        {
            get => _internal.scope;
            set
            {
                _internal.scope = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.CooperativeMatrixPropertiesNV(CooperativeMatrixPropertiesNV c)
        {
            return c._internal;
        }

        public static implicit operator CooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.CooperativeMatrixPropertiesNV c)
        {
            return new CooperativeMatrixPropertiesNV(c);
        }

    }

    public partial class PhysicalDeviceCooperativeMatrixFeaturesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixFeaturesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceCooperativeMatrixFeaturesNV()
        {
        }

        public PhysicalDeviceCooperativeMatrixFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixFeaturesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public bool CooperativeMatrix
        {
            get => _internal.cooperativeMatrix;
            set
            {
                _internal.cooperativeMatrix = value;
            }
        }

        public bool CooperativeMatrixRobustBufferAccess
        {
            get => _internal.cooperativeMatrixRobustBufferAccess;
            set
            {
                _internal.cooperativeMatrixRobustBufferAccess = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixFeaturesNV(PhysicalDeviceCooperativeMatrixFeaturesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceCooperativeMatrixFeaturesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixFeaturesNV p)
        {
            return new PhysicalDeviceCooperativeMatrixFeaturesNV(p);
        }

    }

    public partial class PhysicalDeviceCooperativeMatrixPropertiesNV : DisposableObject
    {
        private AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixPropertiesNV _internal;

        private GCHandleReference refpNext;

        public PhysicalDeviceCooperativeMatrixPropertiesNV()
        {
        }

        public PhysicalDeviceCooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixPropertiesNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint CooperativeMatrixSupportedStages
        {
            get => _internal.cooperativeMatrixSupportedStages;
            set
            {
                _internal.cooperativeMatrixSupportedStages = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixPropertiesNV(PhysicalDeviceCooperativeMatrixPropertiesNV p)
        {
            return p._internal;
        }

        public static implicit operator PhysicalDeviceCooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.PhysicalDeviceCooperativeMatrixPropertiesNV p)
        {
            return new PhysicalDeviceCooperativeMatrixPropertiesNV(p);
        }

    }


}
