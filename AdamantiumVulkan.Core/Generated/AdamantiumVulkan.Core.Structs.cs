// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Core
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan;
    using AdamantiumVulkan.Core.Interop;

    public partial class ApplicationInfo : DisposableObject
    {
        private StringReference refpApplicationName;

        private StringReference refpEngineName;

        public ApplicationInfo()
        {
        }

        public ApplicationInfo(AdamantiumVulkan.Core.Interop.VkApplicationInfo _internal)
        {
            PNext = _internal.pNext;
            PApplicationName = Marshal.PtrToStringAnsi(_internal.pApplicationName);
            ApplicationVersion = _internal.applicationVersion;
            PEngineName = Marshal.PtrToStringAnsi(_internal.pEngineName);
            EngineVersion = _internal.engineVersion;
            ApiVersion = _internal.apiVersion;
        }

        public StructureType SType => StructureType.ApplicationInfo;
        public System.IntPtr PNext { get; set; }
        public string PApplicationName { get; set; }
        public uint ApplicationVersion { get; set; }
        public string PEngineName { get; set; }
        public uint EngineVersion { get; set; }
        public uint ApiVersion { get; set; }

        public AdamantiumVulkan.Core.Interop.VkApplicationInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkApplicationInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            refpApplicationName?.Dispose();
            if (PApplicationName != null)
            {
                refpApplicationName = new StringReference(PApplicationName, false);
                _internal.pApplicationName = refpApplicationName.Handle;
            }
            _internal.applicationVersion = ApplicationVersion;
            refpEngineName?.Dispose();
            if (PEngineName != null)
            {
                refpEngineName = new StringReference(PEngineName, false);
                _internal.pEngineName = refpEngineName.Handle;
            }
            _internal.engineVersion = EngineVersion;
            _internal.apiVersion = ApiVersion;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpApplicationName?.Dispose();
            refpEngineName?.Dispose();
        }

    }

    public partial class InstanceCreateInfo : DisposableObject
    {
        private StructReference refpApplicationInfo;

        private StringArrayReference refppEnabledLayerNames;

        private StringArrayReference refppEnabledExtensionNames;

        public InstanceCreateInfo()
        {
        }

        public InstanceCreateInfo(AdamantiumVulkan.Core.Interop.VkInstanceCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PApplicationInfo = new ApplicationInfo(Marshal.PtrToStructure<VkApplicationInfo>(_internal.pApplicationInfo));
            Marshal.FreeHGlobal(_internal.pApplicationInfo);
            EnabledLayerCount = _internal.enabledLayerCount;
            EnabledExtensionCount = _internal.enabledExtensionCount;
        }

        public StructureType SType => StructureType.InstanceCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ApplicationInfo PApplicationInfo { get; set; }
        public uint EnabledLayerCount { get; set; }
        public string[] PpEnabledLayerNames { get; set; }
        public uint EnabledExtensionCount { get; set; }
        public string[] PpEnabledExtensionNames { get; set; }

        public AdamantiumVulkan.Core.Interop.VkInstanceCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkInstanceCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            refpApplicationInfo?.Dispose();
            if (PApplicationInfo != null)
            {
                var struct0 = PApplicationInfo.ToInternal();
                refpApplicationInfo = new StructReference(struct0);
                _internal.pApplicationInfo = refpApplicationInfo.Handle;
            }
            _internal.enabledLayerCount = EnabledLayerCount;
            refppEnabledLayerNames?.Dispose();
            if (PpEnabledLayerNames != null)
            {
                refppEnabledLayerNames = new StringArrayReference(PpEnabledLayerNames, false);
                _internal.ppEnabledLayerNames = refppEnabledLayerNames.Handle;
            }
            _internal.enabledExtensionCount = EnabledExtensionCount;
            refppEnabledExtensionNames?.Dispose();
            if (PpEnabledExtensionNames != null)
            {
                refppEnabledExtensionNames = new StringArrayReference(PpEnabledExtensionNames, false);
                _internal.ppEnabledExtensionNames = refppEnabledExtensionNames.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpApplicationInfo?.Dispose();
            refppEnabledLayerNames?.Dispose();
            refppEnabledExtensionNames?.Dispose();
        }

    }

    public partial class AllocationCallbacks : DisposableObject
    {
        public AllocationCallbacks()
        {
        }

        public AllocationCallbacks(AdamantiumVulkan.Core.Interop.VkAllocationCallbacks _internal)
        {
            PUserData = _internal.pUserData;
            PfnAllocation = _internal.pfnAllocation;
            PfnReallocation = _internal.pfnReallocation;
            PfnFree = _internal.pfnFree;
            PfnInternalAllocation = _internal.pfnInternalAllocation;
            PfnInternalFree = _internal.pfnInternalFree;
        }

        public System.IntPtr PUserData { get; set; }
        public PFN_vkAllocationFunction PfnAllocation { get; set; }
        public PFN_vkReallocationFunction PfnReallocation { get; set; }
        public PFN_vkFreeFunction PfnFree { get; set; }
        public PFN_vkInternalAllocationNotification PfnInternalAllocation { get; set; }
        public PFN_vkInternalFreeNotification PfnInternalFree { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAllocationCallbacks ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAllocationCallbacks();
            _internal.pUserData = PUserData;
            _internal.pfnAllocation = PfnAllocation;
            _internal.pfnReallocation = PfnReallocation;
            _internal.pfnFree = PfnFree;
            _internal.pfnInternalAllocation = PfnInternalAllocation;
            _internal.pfnInternalFree = PfnInternalFree;
            return _internal;
        }
    }

    public partial class PhysicalDeviceFeatures
    {
        public PhysicalDeviceFeatures()
        {
        }

        public PhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures _internal)
        {
            RobustBufferAccess = _internal.robustBufferAccess;
            FullDrawIndexUint32 = _internal.fullDrawIndexUint32;
            ImageCubeArray = _internal.imageCubeArray;
            IndependentBlend = _internal.independentBlend;
            GeometryShader = _internal.geometryShader;
            TessellationShader = _internal.tessellationShader;
            SampleRateShading = _internal.sampleRateShading;
            DualSrcBlend = _internal.dualSrcBlend;
            LogicOp = _internal.logicOp;
            MultiDrawIndirect = _internal.multiDrawIndirect;
            DrawIndirectFirstInstance = _internal.drawIndirectFirstInstance;
            DepthClamp = _internal.depthClamp;
            DepthBiasClamp = _internal.depthBiasClamp;
            FillModeNonSolid = _internal.fillModeNonSolid;
            DepthBounds = _internal.depthBounds;
            WideLines = _internal.wideLines;
            LargePoints = _internal.largePoints;
            AlphaToOne = _internal.alphaToOne;
            MultiViewport = _internal.multiViewport;
            SamplerAnisotropy = _internal.samplerAnisotropy;
            TextureCompressionETC2 = _internal.textureCompressionETC2;
            TextureCompressionASTC_LDR = _internal.textureCompressionASTC_LDR;
            TextureCompressionBC = _internal.textureCompressionBC;
            OcclusionQueryPrecise = _internal.occlusionQueryPrecise;
            PipelineStatisticsQuery = _internal.pipelineStatisticsQuery;
            VertexPipelineStoresAndAtomics = _internal.vertexPipelineStoresAndAtomics;
            FragmentStoresAndAtomics = _internal.fragmentStoresAndAtomics;
            ShaderTessellationAndGeometryPointSize = _internal.shaderTessellationAndGeometryPointSize;
            ShaderImageGatherExtended = _internal.shaderImageGatherExtended;
            ShaderStorageImageExtendedFormats = _internal.shaderStorageImageExtendedFormats;
            ShaderStorageImageMultisample = _internal.shaderStorageImageMultisample;
            ShaderStorageImageReadWithoutFormat = _internal.shaderStorageImageReadWithoutFormat;
            ShaderStorageImageWriteWithoutFormat = _internal.shaderStorageImageWriteWithoutFormat;
            ShaderUniformBufferArrayDynamicIndexing = _internal.shaderUniformBufferArrayDynamicIndexing;
            ShaderSampledImageArrayDynamicIndexing = _internal.shaderSampledImageArrayDynamicIndexing;
            ShaderStorageBufferArrayDynamicIndexing = _internal.shaderStorageBufferArrayDynamicIndexing;
            ShaderStorageImageArrayDynamicIndexing = _internal.shaderStorageImageArrayDynamicIndexing;
            ShaderClipDistance = _internal.shaderClipDistance;
            ShaderCullDistance = _internal.shaderCullDistance;
            ShaderFloat64 = _internal.shaderFloat64;
            ShaderInt64 = _internal.shaderInt64;
            ShaderInt16 = _internal.shaderInt16;
            ShaderResourceResidency = _internal.shaderResourceResidency;
            ShaderResourceMinLod = _internal.shaderResourceMinLod;
            SparseBinding = _internal.sparseBinding;
            SparseResidencyBuffer = _internal.sparseResidencyBuffer;
            SparseResidencyImage2D = _internal.sparseResidencyImage2D;
            SparseResidencyImage3D = _internal.sparseResidencyImage3D;
            SparseResidency2Samples = _internal.sparseResidency2Samples;
            SparseResidency4Samples = _internal.sparseResidency4Samples;
            SparseResidency8Samples = _internal.sparseResidency8Samples;
            SparseResidency16Samples = _internal.sparseResidency16Samples;
            SparseResidencyAliased = _internal.sparseResidencyAliased;
            VariableMultisampleRate = _internal.variableMultisampleRate;
            InheritedQueries = _internal.inheritedQueries;
        }

        public bool RobustBufferAccess { get; set; }
        public bool FullDrawIndexUint32 { get; set; }
        public bool ImageCubeArray { get; set; }
        public bool IndependentBlend { get; set; }
        public bool GeometryShader { get; set; }
        public bool TessellationShader { get; set; }
        public bool SampleRateShading { get; set; }
        public bool DualSrcBlend { get; set; }
        public bool LogicOp { get; set; }
        public bool MultiDrawIndirect { get; set; }
        public bool DrawIndirectFirstInstance { get; set; }
        public bool DepthClamp { get; set; }
        public bool DepthBiasClamp { get; set; }
        public bool FillModeNonSolid { get; set; }
        public bool DepthBounds { get; set; }
        public bool WideLines { get; set; }
        public bool LargePoints { get; set; }
        public bool AlphaToOne { get; set; }
        public bool MultiViewport { get; set; }
        public bool SamplerAnisotropy { get; set; }
        public bool TextureCompressionETC2 { get; set; }
        public bool TextureCompressionASTC_LDR { get; set; }
        public bool TextureCompressionBC { get; set; }
        public bool OcclusionQueryPrecise { get; set; }
        public bool PipelineStatisticsQuery { get; set; }
        public bool VertexPipelineStoresAndAtomics { get; set; }
        public bool FragmentStoresAndAtomics { get; set; }
        public bool ShaderTessellationAndGeometryPointSize { get; set; }
        public bool ShaderImageGatherExtended { get; set; }
        public bool ShaderStorageImageExtendedFormats { get; set; }
        public bool ShaderStorageImageMultisample { get; set; }
        public bool ShaderStorageImageReadWithoutFormat { get; set; }
        public bool ShaderStorageImageWriteWithoutFormat { get; set; }
        public bool ShaderUniformBufferArrayDynamicIndexing { get; set; }
        public bool ShaderSampledImageArrayDynamicIndexing { get; set; }
        public bool ShaderStorageBufferArrayDynamicIndexing { get; set; }
        public bool ShaderStorageImageArrayDynamicIndexing { get; set; }
        public bool ShaderClipDistance { get; set; }
        public bool ShaderCullDistance { get; set; }
        public bool ShaderFloat64 { get; set; }
        public bool ShaderInt64 { get; set; }
        public bool ShaderInt16 { get; set; }
        public bool ShaderResourceResidency { get; set; }
        public bool ShaderResourceMinLod { get; set; }
        public bool SparseBinding { get; set; }
        public bool SparseResidencyBuffer { get; set; }
        public bool SparseResidencyImage2D { get; set; }
        public bool SparseResidencyImage3D { get; set; }
        public bool SparseResidency2Samples { get; set; }
        public bool SparseResidency4Samples { get; set; }
        public bool SparseResidency8Samples { get; set; }
        public bool SparseResidency16Samples { get; set; }
        public bool SparseResidencyAliased { get; set; }
        public bool VariableMultisampleRate { get; set; }
        public bool InheritedQueries { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures();
            _internal.robustBufferAccess = RobustBufferAccess;
            _internal.fullDrawIndexUint32 = FullDrawIndexUint32;
            _internal.imageCubeArray = ImageCubeArray;
            _internal.independentBlend = IndependentBlend;
            _internal.geometryShader = GeometryShader;
            _internal.tessellationShader = TessellationShader;
            _internal.sampleRateShading = SampleRateShading;
            _internal.dualSrcBlend = DualSrcBlend;
            _internal.logicOp = LogicOp;
            _internal.multiDrawIndirect = MultiDrawIndirect;
            _internal.drawIndirectFirstInstance = DrawIndirectFirstInstance;
            _internal.depthClamp = DepthClamp;
            _internal.depthBiasClamp = DepthBiasClamp;
            _internal.fillModeNonSolid = FillModeNonSolid;
            _internal.depthBounds = DepthBounds;
            _internal.wideLines = WideLines;
            _internal.largePoints = LargePoints;
            _internal.alphaToOne = AlphaToOne;
            _internal.multiViewport = MultiViewport;
            _internal.samplerAnisotropy = SamplerAnisotropy;
            _internal.textureCompressionETC2 = TextureCompressionETC2;
            _internal.textureCompressionASTC_LDR = TextureCompressionASTC_LDR;
            _internal.textureCompressionBC = TextureCompressionBC;
            _internal.occlusionQueryPrecise = OcclusionQueryPrecise;
            _internal.pipelineStatisticsQuery = PipelineStatisticsQuery;
            _internal.vertexPipelineStoresAndAtomics = VertexPipelineStoresAndAtomics;
            _internal.fragmentStoresAndAtomics = FragmentStoresAndAtomics;
            _internal.shaderTessellationAndGeometryPointSize = ShaderTessellationAndGeometryPointSize;
            _internal.shaderImageGatherExtended = ShaderImageGatherExtended;
            _internal.shaderStorageImageExtendedFormats = ShaderStorageImageExtendedFormats;
            _internal.shaderStorageImageMultisample = ShaderStorageImageMultisample;
            _internal.shaderStorageImageReadWithoutFormat = ShaderStorageImageReadWithoutFormat;
            _internal.shaderStorageImageWriteWithoutFormat = ShaderStorageImageWriteWithoutFormat;
            _internal.shaderUniformBufferArrayDynamicIndexing = ShaderUniformBufferArrayDynamicIndexing;
            _internal.shaderSampledImageArrayDynamicIndexing = ShaderSampledImageArrayDynamicIndexing;
            _internal.shaderStorageBufferArrayDynamicIndexing = ShaderStorageBufferArrayDynamicIndexing;
            _internal.shaderStorageImageArrayDynamicIndexing = ShaderStorageImageArrayDynamicIndexing;
            _internal.shaderClipDistance = ShaderClipDistance;
            _internal.shaderCullDistance = ShaderCullDistance;
            _internal.shaderFloat64 = ShaderFloat64;
            _internal.shaderInt64 = ShaderInt64;
            _internal.shaderInt16 = ShaderInt16;
            _internal.shaderResourceResidency = ShaderResourceResidency;
            _internal.shaderResourceMinLod = ShaderResourceMinLod;
            _internal.sparseBinding = SparseBinding;
            _internal.sparseResidencyBuffer = SparseResidencyBuffer;
            _internal.sparseResidencyImage2D = SparseResidencyImage2D;
            _internal.sparseResidencyImage3D = SparseResidencyImage3D;
            _internal.sparseResidency2Samples = SparseResidency2Samples;
            _internal.sparseResidency4Samples = SparseResidency4Samples;
            _internal.sparseResidency8Samples = SparseResidency8Samples;
            _internal.sparseResidency16Samples = SparseResidency16Samples;
            _internal.sparseResidencyAliased = SparseResidencyAliased;
            _internal.variableMultisampleRate = VariableMultisampleRate;
            _internal.inheritedQueries = InheritedQueries;
            return _internal;
        }
    }

    public partial class FormatProperties
    {
        public FormatProperties()
        {
        }

        public FormatProperties(AdamantiumVulkan.Core.Interop.VkFormatProperties _internal)
        {
            LinearTilingFeatures = _internal.linearTilingFeatures;
            OptimalTilingFeatures = _internal.optimalTilingFeatures;
            BufferFeatures = _internal.bufferFeatures;
        }

        public uint LinearTilingFeatures { get; set; }
        public uint OptimalTilingFeatures { get; set; }
        public uint BufferFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFormatProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFormatProperties();
            _internal.linearTilingFeatures = LinearTilingFeatures;
            _internal.optimalTilingFeatures = OptimalTilingFeatures;
            _internal.bufferFeatures = BufferFeatures;
            return _internal;
        }
    }

    public partial class Extent3D
    {
        public Extent3D()
        {
        }

        public Extent3D(AdamantiumVulkan.Core.Interop.VkExtent3D _internal)
        {
            Width = _internal.width;
            Height = _internal.height;
            Depth = _internal.depth;
        }

        public uint Width { get; set; }
        public uint Height { get; set; }
        public uint Depth { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExtent3D ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExtent3D();
            _internal.width = Width;
            _internal.height = Height;
            _internal.depth = Depth;
            return _internal;
        }
    }

    public partial class ImageFormatProperties
    {
        public ImageFormatProperties()
        {
        }

        public ImageFormatProperties(AdamantiumVulkan.Core.Interop.VkImageFormatProperties _internal)
        {
            MaxExtent = new Extent3D(_internal.maxExtent);
            MaxMipLevels = _internal.maxMipLevels;
            MaxArrayLayers = _internal.maxArrayLayers;
            SampleCounts = _internal.sampleCounts;
            MaxResourceSize = _internal.maxResourceSize;
        }

        public Extent3D MaxExtent { get; set; }
        public uint MaxMipLevels { get; set; }
        public uint MaxArrayLayers { get; set; }
        public uint SampleCounts { get; set; }
        public ulong MaxResourceSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageFormatProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageFormatProperties();
            if (MaxExtent != null)
            {
                _internal.maxExtent = MaxExtent.ToInternal();
            }
            _internal.maxMipLevels = MaxMipLevels;
            _internal.maxArrayLayers = MaxArrayLayers;
            _internal.sampleCounts = SampleCounts;
            _internal.maxResourceSize = MaxResourceSize;
            return _internal;
        }
    }

    public partial class PhysicalDeviceLimits
    {
        public PhysicalDeviceLimits()
        {
        }

        public PhysicalDeviceLimits(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceLimits _internal)
        {
            MaxImageDimension1D = _internal.maxImageDimension1D;
            MaxImageDimension2D = _internal.maxImageDimension2D;
            MaxImageDimension3D = _internal.maxImageDimension3D;
            MaxImageDimensionCube = _internal.maxImageDimensionCube;
            MaxImageArrayLayers = _internal.maxImageArrayLayers;
            MaxTexelBufferElements = _internal.maxTexelBufferElements;
            MaxUniformBufferRange = _internal.maxUniformBufferRange;
            MaxStorageBufferRange = _internal.maxStorageBufferRange;
            MaxPushConstantsSize = _internal.maxPushConstantsSize;
            MaxMemoryAllocationCount = _internal.maxMemoryAllocationCount;
            MaxSamplerAllocationCount = _internal.maxSamplerAllocationCount;
            BufferImageGranularity = _internal.bufferImageGranularity;
            SparseAddressSpaceSize = _internal.sparseAddressSpaceSize;
            MaxBoundDescriptorSets = _internal.maxBoundDescriptorSets;
            MaxPerStageDescriptorSamplers = _internal.maxPerStageDescriptorSamplers;
            MaxPerStageDescriptorUniformBuffers = _internal.maxPerStageDescriptorUniformBuffers;
            MaxPerStageDescriptorStorageBuffers = _internal.maxPerStageDescriptorStorageBuffers;
            MaxPerStageDescriptorSampledImages = _internal.maxPerStageDescriptorSampledImages;
            MaxPerStageDescriptorStorageImages = _internal.maxPerStageDescriptorStorageImages;
            MaxPerStageDescriptorInputAttachments = _internal.maxPerStageDescriptorInputAttachments;
            MaxPerStageResources = _internal.maxPerStageResources;
            MaxDescriptorSetSamplers = _internal.maxDescriptorSetSamplers;
            MaxDescriptorSetUniformBuffers = _internal.maxDescriptorSetUniformBuffers;
            MaxDescriptorSetUniformBuffersDynamic = _internal.maxDescriptorSetUniformBuffersDynamic;
            MaxDescriptorSetStorageBuffers = _internal.maxDescriptorSetStorageBuffers;
            MaxDescriptorSetStorageBuffersDynamic = _internal.maxDescriptorSetStorageBuffersDynamic;
            MaxDescriptorSetSampledImages = _internal.maxDescriptorSetSampledImages;
            MaxDescriptorSetStorageImages = _internal.maxDescriptorSetStorageImages;
            MaxDescriptorSetInputAttachments = _internal.maxDescriptorSetInputAttachments;
            MaxVertexInputAttributes = _internal.maxVertexInputAttributes;
            MaxVertexInputBindings = _internal.maxVertexInputBindings;
            MaxVertexInputAttributeOffset = _internal.maxVertexInputAttributeOffset;
            MaxVertexInputBindingStride = _internal.maxVertexInputBindingStride;
            MaxVertexOutputComponents = _internal.maxVertexOutputComponents;
            MaxTessellationGenerationLevel = _internal.maxTessellationGenerationLevel;
            MaxTessellationPatchSize = _internal.maxTessellationPatchSize;
            MaxTessellationControlPerVertexInputComponents = _internal.maxTessellationControlPerVertexInputComponents;
            MaxTessellationControlPerVertexOutputComponents = _internal.maxTessellationControlPerVertexOutputComponents;
            MaxTessellationControlPerPatchOutputComponents = _internal.maxTessellationControlPerPatchOutputComponents;
            MaxTessellationControlTotalOutputComponents = _internal.maxTessellationControlTotalOutputComponents;
            MaxTessellationEvaluationInputComponents = _internal.maxTessellationEvaluationInputComponents;
            MaxTessellationEvaluationOutputComponents = _internal.maxTessellationEvaluationOutputComponents;
            MaxGeometryShaderInvocations = _internal.maxGeometryShaderInvocations;
            MaxGeometryInputComponents = _internal.maxGeometryInputComponents;
            MaxGeometryOutputComponents = _internal.maxGeometryOutputComponents;
            MaxGeometryOutputVertices = _internal.maxGeometryOutputVertices;
            MaxGeometryTotalOutputComponents = _internal.maxGeometryTotalOutputComponents;
            MaxFragmentInputComponents = _internal.maxFragmentInputComponents;
            MaxFragmentOutputAttachments = _internal.maxFragmentOutputAttachments;
            MaxFragmentDualSrcAttachments = _internal.maxFragmentDualSrcAttachments;
            MaxFragmentCombinedOutputResources = _internal.maxFragmentCombinedOutputResources;
            MaxComputeSharedMemorySize = _internal.maxComputeSharedMemorySize;
            var tmpArr0 = new uint[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr0[i] = _internal.maxComputeWorkGroupCount[i];
                }
            }
            MaxComputeWorkGroupCount = tmpArr0;
            MaxComputeWorkGroupInvocations = _internal.maxComputeWorkGroupInvocations;
            var tmpArr1 = new uint[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr1[i] = _internal.maxComputeWorkGroupSize[i];
                }
            }
            MaxComputeWorkGroupSize = tmpArr1;
            SubPixelPrecisionBits = _internal.subPixelPrecisionBits;
            SubTexelPrecisionBits = _internal.subTexelPrecisionBits;
            MipmapPrecisionBits = _internal.mipmapPrecisionBits;
            MaxDrawIndexedIndexValue = _internal.maxDrawIndexedIndexValue;
            MaxDrawIndirectCount = _internal.maxDrawIndirectCount;
            MaxSamplerLodBias = _internal.maxSamplerLodBias;
            MaxSamplerAnisotropy = _internal.maxSamplerAnisotropy;
            MaxViewports = _internal.maxViewports;
            var tmpArr2 = new uint[2];
            unsafe
            {
                for (int i = 0; i < 2; ++i)
                {
                    tmpArr2[i] = _internal.maxViewportDimensions[i];
                }
            }
            MaxViewportDimensions = tmpArr2;
            var tmpArr3 = new float[2];
            unsafe
            {
                for (int i = 0; i < 2; ++i)
                {
                    tmpArr3[i] = _internal.viewportBoundsRange[i];
                }
            }
            ViewportBoundsRange = tmpArr3;
            ViewportSubPixelBits = _internal.viewportSubPixelBits;
            MinMemoryMapAlignment = _internal.minMemoryMapAlignment;
            MinTexelBufferOffsetAlignment = _internal.minTexelBufferOffsetAlignment;
            MinUniformBufferOffsetAlignment = _internal.minUniformBufferOffsetAlignment;
            MinStorageBufferOffsetAlignment = _internal.minStorageBufferOffsetAlignment;
            MinTexelOffset = _internal.minTexelOffset;
            MaxTexelOffset = _internal.maxTexelOffset;
            MinTexelGatherOffset = _internal.minTexelGatherOffset;
            MaxTexelGatherOffset = _internal.maxTexelGatherOffset;
            MinInterpolationOffset = _internal.minInterpolationOffset;
            MaxInterpolationOffset = _internal.maxInterpolationOffset;
            SubPixelInterpolationOffsetBits = _internal.subPixelInterpolationOffsetBits;
            MaxFramebufferWidth = _internal.maxFramebufferWidth;
            MaxFramebufferHeight = _internal.maxFramebufferHeight;
            MaxFramebufferLayers = _internal.maxFramebufferLayers;
            FramebufferColorSampleCounts = _internal.framebufferColorSampleCounts;
            FramebufferDepthSampleCounts = _internal.framebufferDepthSampleCounts;
            FramebufferStencilSampleCounts = _internal.framebufferStencilSampleCounts;
            FramebufferNoAttachmentsSampleCounts = _internal.framebufferNoAttachmentsSampleCounts;
            MaxColorAttachments = _internal.maxColorAttachments;
            SampledImageColorSampleCounts = _internal.sampledImageColorSampleCounts;
            SampledImageIntegerSampleCounts = _internal.sampledImageIntegerSampleCounts;
            SampledImageDepthSampleCounts = _internal.sampledImageDepthSampleCounts;
            SampledImageStencilSampleCounts = _internal.sampledImageStencilSampleCounts;
            StorageImageSampleCounts = _internal.storageImageSampleCounts;
            MaxSampleMaskWords = _internal.maxSampleMaskWords;
            TimestampComputeAndGraphics = _internal.timestampComputeAndGraphics;
            TimestampPeriod = _internal.timestampPeriod;
            MaxClipDistances = _internal.maxClipDistances;
            MaxCullDistances = _internal.maxCullDistances;
            MaxCombinedClipAndCullDistances = _internal.maxCombinedClipAndCullDistances;
            DiscreteQueuePriorities = _internal.discreteQueuePriorities;
            var tmpArr4 = new float[2];
            unsafe
            {
                for (int i = 0; i < 2; ++i)
                {
                    tmpArr4[i] = _internal.pointSizeRange[i];
                }
            }
            PointSizeRange = tmpArr4;
            var tmpArr5 = new float[2];
            unsafe
            {
                for (int i = 0; i < 2; ++i)
                {
                    tmpArr5[i] = _internal.lineWidthRange[i];
                }
            }
            LineWidthRange = tmpArr5;
            PointSizeGranularity = _internal.pointSizeGranularity;
            LineWidthGranularity = _internal.lineWidthGranularity;
            StrictLines = _internal.strictLines;
            StandardSampleLocations = _internal.standardSampleLocations;
            OptimalBufferCopyOffsetAlignment = _internal.optimalBufferCopyOffsetAlignment;
            OptimalBufferCopyRowPitchAlignment = _internal.optimalBufferCopyRowPitchAlignment;
            NonCoherentAtomSize = _internal.nonCoherentAtomSize;
        }

        public uint MaxImageDimension1D { get; set; }
        public uint MaxImageDimension2D { get; set; }
        public uint MaxImageDimension3D { get; set; }
        public uint MaxImageDimensionCube { get; set; }
        public uint MaxImageArrayLayers { get; set; }
        public uint MaxTexelBufferElements { get; set; }
        public uint MaxUniformBufferRange { get; set; }
        public uint MaxStorageBufferRange { get; set; }
        public uint MaxPushConstantsSize { get; set; }
        public uint MaxMemoryAllocationCount { get; set; }
        public uint MaxSamplerAllocationCount { get; set; }
        public ulong BufferImageGranularity { get; set; }
        public ulong SparseAddressSpaceSize { get; set; }
        public uint MaxBoundDescriptorSets { get; set; }
        public uint MaxPerStageDescriptorSamplers { get; set; }
        public uint MaxPerStageDescriptorUniformBuffers { get; set; }
        public uint MaxPerStageDescriptorStorageBuffers { get; set; }
        public uint MaxPerStageDescriptorSampledImages { get; set; }
        public uint MaxPerStageDescriptorStorageImages { get; set; }
        public uint MaxPerStageDescriptorInputAttachments { get; set; }
        public uint MaxPerStageResources { get; set; }
        public uint MaxDescriptorSetSamplers { get; set; }
        public uint MaxDescriptorSetUniformBuffers { get; set; }
        public uint MaxDescriptorSetUniformBuffersDynamic { get; set; }
        public uint MaxDescriptorSetStorageBuffers { get; set; }
        public uint MaxDescriptorSetStorageBuffersDynamic { get; set; }
        public uint MaxDescriptorSetSampledImages { get; set; }
        public uint MaxDescriptorSetStorageImages { get; set; }
        public uint MaxDescriptorSetInputAttachments { get; set; }
        public uint MaxVertexInputAttributes { get; set; }
        public uint MaxVertexInputBindings { get; set; }
        public uint MaxVertexInputAttributeOffset { get; set; }
        public uint MaxVertexInputBindingStride { get; set; }
        public uint MaxVertexOutputComponents { get; set; }
        public uint MaxTessellationGenerationLevel { get; set; }
        public uint MaxTessellationPatchSize { get; set; }
        public uint MaxTessellationControlPerVertexInputComponents { get; set; }
        public uint MaxTessellationControlPerVertexOutputComponents { get; set; }
        public uint MaxTessellationControlPerPatchOutputComponents { get; set; }
        public uint MaxTessellationControlTotalOutputComponents { get; set; }
        public uint MaxTessellationEvaluationInputComponents { get; set; }
        public uint MaxTessellationEvaluationOutputComponents { get; set; }
        public uint MaxGeometryShaderInvocations { get; set; }
        public uint MaxGeometryInputComponents { get; set; }
        public uint MaxGeometryOutputComponents { get; set; }
        public uint MaxGeometryOutputVertices { get; set; }
        public uint MaxGeometryTotalOutputComponents { get; set; }
        public uint MaxFragmentInputComponents { get; set; }
        public uint MaxFragmentOutputAttachments { get; set; }
        public uint MaxFragmentDualSrcAttachments { get; set; }
        public uint MaxFragmentCombinedOutputResources { get; set; }
        public uint MaxComputeSharedMemorySize { get; set; }
        public uint[] MaxComputeWorkGroupCount { get; set; }
        public uint MaxComputeWorkGroupInvocations { get; set; }
        public uint[] MaxComputeWorkGroupSize { get; set; }
        public uint SubPixelPrecisionBits { get; set; }
        public uint SubTexelPrecisionBits { get; set; }
        public uint MipmapPrecisionBits { get; set; }
        public uint MaxDrawIndexedIndexValue { get; set; }
        public uint MaxDrawIndirectCount { get; set; }
        public float MaxSamplerLodBias { get; set; }
        public float MaxSamplerAnisotropy { get; set; }
        public uint MaxViewports { get; set; }
        public uint[] MaxViewportDimensions { get; set; }
        public float[] ViewportBoundsRange { get; set; }
        public uint ViewportSubPixelBits { get; set; }
        public ulong MinMemoryMapAlignment { get; set; }
        public ulong MinTexelBufferOffsetAlignment { get; set; }
        public ulong MinUniformBufferOffsetAlignment { get; set; }
        public ulong MinStorageBufferOffsetAlignment { get; set; }
        public int MinTexelOffset { get; set; }
        public uint MaxTexelOffset { get; set; }
        public int MinTexelGatherOffset { get; set; }
        public uint MaxTexelGatherOffset { get; set; }
        public float MinInterpolationOffset { get; set; }
        public float MaxInterpolationOffset { get; set; }
        public uint SubPixelInterpolationOffsetBits { get; set; }
        public uint MaxFramebufferWidth { get; set; }
        public uint MaxFramebufferHeight { get; set; }
        public uint MaxFramebufferLayers { get; set; }
        public uint FramebufferColorSampleCounts { get; set; }
        public uint FramebufferDepthSampleCounts { get; set; }
        public uint FramebufferStencilSampleCounts { get; set; }
        public uint FramebufferNoAttachmentsSampleCounts { get; set; }
        public uint MaxColorAttachments { get; set; }
        public uint SampledImageColorSampleCounts { get; set; }
        public uint SampledImageIntegerSampleCounts { get; set; }
        public uint SampledImageDepthSampleCounts { get; set; }
        public uint SampledImageStencilSampleCounts { get; set; }
        public uint StorageImageSampleCounts { get; set; }
        public uint MaxSampleMaskWords { get; set; }
        public bool TimestampComputeAndGraphics { get; set; }
        public float TimestampPeriod { get; set; }
        public uint MaxClipDistances { get; set; }
        public uint MaxCullDistances { get; set; }
        public uint MaxCombinedClipAndCullDistances { get; set; }
        public uint DiscreteQueuePriorities { get; set; }
        public float[] PointSizeRange { get; set; }
        public float[] LineWidthRange { get; set; }
        public float PointSizeGranularity { get; set; }
        public float LineWidthGranularity { get; set; }
        public bool StrictLines { get; set; }
        public bool StandardSampleLocations { get; set; }
        public ulong OptimalBufferCopyOffsetAlignment { get; set; }
        public ulong OptimalBufferCopyRowPitchAlignment { get; set; }
        public ulong NonCoherentAtomSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceLimits ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceLimits();
            _internal.maxImageDimension1D = MaxImageDimension1D;
            _internal.maxImageDimension2D = MaxImageDimension2D;
            _internal.maxImageDimension3D = MaxImageDimension3D;
            _internal.maxImageDimensionCube = MaxImageDimensionCube;
            _internal.maxImageArrayLayers = MaxImageArrayLayers;
            _internal.maxTexelBufferElements = MaxTexelBufferElements;
            _internal.maxUniformBufferRange = MaxUniformBufferRange;
            _internal.maxStorageBufferRange = MaxStorageBufferRange;
            _internal.maxPushConstantsSize = MaxPushConstantsSize;
            _internal.maxMemoryAllocationCount = MaxMemoryAllocationCount;
            _internal.maxSamplerAllocationCount = MaxSamplerAllocationCount;
            _internal.bufferImageGranularity = BufferImageGranularity;
            _internal.sparseAddressSpaceSize = SparseAddressSpaceSize;
            _internal.maxBoundDescriptorSets = MaxBoundDescriptorSets;
            _internal.maxPerStageDescriptorSamplers = MaxPerStageDescriptorSamplers;
            _internal.maxPerStageDescriptorUniformBuffers = MaxPerStageDescriptorUniformBuffers;
            _internal.maxPerStageDescriptorStorageBuffers = MaxPerStageDescriptorStorageBuffers;
            _internal.maxPerStageDescriptorSampledImages = MaxPerStageDescriptorSampledImages;
            _internal.maxPerStageDescriptorStorageImages = MaxPerStageDescriptorStorageImages;
            _internal.maxPerStageDescriptorInputAttachments = MaxPerStageDescriptorInputAttachments;
            _internal.maxPerStageResources = MaxPerStageResources;
            _internal.maxDescriptorSetSamplers = MaxDescriptorSetSamplers;
            _internal.maxDescriptorSetUniformBuffers = MaxDescriptorSetUniformBuffers;
            _internal.maxDescriptorSetUniformBuffersDynamic = MaxDescriptorSetUniformBuffersDynamic;
            _internal.maxDescriptorSetStorageBuffers = MaxDescriptorSetStorageBuffers;
            _internal.maxDescriptorSetStorageBuffersDynamic = MaxDescriptorSetStorageBuffersDynamic;
            _internal.maxDescriptorSetSampledImages = MaxDescriptorSetSampledImages;
            _internal.maxDescriptorSetStorageImages = MaxDescriptorSetStorageImages;
            _internal.maxDescriptorSetInputAttachments = MaxDescriptorSetInputAttachments;
            _internal.maxVertexInputAttributes = MaxVertexInputAttributes;
            _internal.maxVertexInputBindings = MaxVertexInputBindings;
            _internal.maxVertexInputAttributeOffset = MaxVertexInputAttributeOffset;
            _internal.maxVertexInputBindingStride = MaxVertexInputBindingStride;
            _internal.maxVertexOutputComponents = MaxVertexOutputComponents;
            _internal.maxTessellationGenerationLevel = MaxTessellationGenerationLevel;
            _internal.maxTessellationPatchSize = MaxTessellationPatchSize;
            _internal.maxTessellationControlPerVertexInputComponents = MaxTessellationControlPerVertexInputComponents;
            _internal.maxTessellationControlPerVertexOutputComponents = MaxTessellationControlPerVertexOutputComponents;
            _internal.maxTessellationControlPerPatchOutputComponents = MaxTessellationControlPerPatchOutputComponents;
            _internal.maxTessellationControlTotalOutputComponents = MaxTessellationControlTotalOutputComponents;
            _internal.maxTessellationEvaluationInputComponents = MaxTessellationEvaluationInputComponents;
            _internal.maxTessellationEvaluationOutputComponents = MaxTessellationEvaluationOutputComponents;
            _internal.maxGeometryShaderInvocations = MaxGeometryShaderInvocations;
            _internal.maxGeometryInputComponents = MaxGeometryInputComponents;
            _internal.maxGeometryOutputComponents = MaxGeometryOutputComponents;
            _internal.maxGeometryOutputVertices = MaxGeometryOutputVertices;
            _internal.maxGeometryTotalOutputComponents = MaxGeometryTotalOutputComponents;
            _internal.maxFragmentInputComponents = MaxFragmentInputComponents;
            _internal.maxFragmentOutputAttachments = MaxFragmentOutputAttachments;
            _internal.maxFragmentDualSrcAttachments = MaxFragmentDualSrcAttachments;
            _internal.maxFragmentCombinedOutputResources = MaxFragmentCombinedOutputResources;
            _internal.maxComputeSharedMemorySize = MaxComputeSharedMemorySize;
            if(MaxComputeWorkGroupCount != null)
            {
                if (MaxComputeWorkGroupCount.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxComputeWorkGroupCount), "Array is out of bounds. Size should not be more than 3");

                var inputArray0 = MaxComputeWorkGroupCount;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.maxComputeWorkGroupCount[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.maxComputeWorkGroupInvocations = MaxComputeWorkGroupInvocations;
            if(MaxComputeWorkGroupSize != null)
            {
                if (MaxComputeWorkGroupSize.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxComputeWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                var inputArray1 = MaxComputeWorkGroupSize;
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.maxComputeWorkGroupSize[i] = inputArray1[i];
                        }
                    }
                }
            }
            _internal.subPixelPrecisionBits = SubPixelPrecisionBits;
            _internal.subTexelPrecisionBits = SubTexelPrecisionBits;
            _internal.mipmapPrecisionBits = MipmapPrecisionBits;
            _internal.maxDrawIndexedIndexValue = MaxDrawIndexedIndexValue;
            _internal.maxDrawIndirectCount = MaxDrawIndirectCount;
            _internal.maxSamplerLodBias = MaxSamplerLodBias;
            _internal.maxSamplerAnisotropy = MaxSamplerAnisotropy;
            _internal.maxViewports = MaxViewports;
            if(MaxViewportDimensions != null)
            {
                if (MaxViewportDimensions.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxViewportDimensions), "Array is out of bounds. Size should not be more than 2");

                var inputArray2 = MaxViewportDimensions;
                unsafe
                {
                    if (inputArray2 != null)
                    {
                        for (int i = 0; i < inputArray2.Length; ++i)
                        {
                            _internal.maxViewportDimensions[i] = inputArray2[i];
                        }
                    }
                }
            }
            if(ViewportBoundsRange != null)
            {
                if (ViewportBoundsRange.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(ViewportBoundsRange), "Array is out of bounds. Size should not be more than 2");

                var inputArray3 = ViewportBoundsRange;
                unsafe
                {
                    if (inputArray3 != null)
                    {
                        for (int i = 0; i < inputArray3.Length; ++i)
                        {
                            _internal.viewportBoundsRange[i] = inputArray3[i];
                        }
                    }
                }
            }
            _internal.viewportSubPixelBits = ViewportSubPixelBits;
            _internal.minMemoryMapAlignment = MinMemoryMapAlignment;
            _internal.minTexelBufferOffsetAlignment = MinTexelBufferOffsetAlignment;
            _internal.minUniformBufferOffsetAlignment = MinUniformBufferOffsetAlignment;
            _internal.minStorageBufferOffsetAlignment = MinStorageBufferOffsetAlignment;
            _internal.minTexelOffset = MinTexelOffset;
            _internal.maxTexelOffset = MaxTexelOffset;
            _internal.minTexelGatherOffset = MinTexelGatherOffset;
            _internal.maxTexelGatherOffset = MaxTexelGatherOffset;
            _internal.minInterpolationOffset = MinInterpolationOffset;
            _internal.maxInterpolationOffset = MaxInterpolationOffset;
            _internal.subPixelInterpolationOffsetBits = SubPixelInterpolationOffsetBits;
            _internal.maxFramebufferWidth = MaxFramebufferWidth;
            _internal.maxFramebufferHeight = MaxFramebufferHeight;
            _internal.maxFramebufferLayers = MaxFramebufferLayers;
            _internal.framebufferColorSampleCounts = FramebufferColorSampleCounts;
            _internal.framebufferDepthSampleCounts = FramebufferDepthSampleCounts;
            _internal.framebufferStencilSampleCounts = FramebufferStencilSampleCounts;
            _internal.framebufferNoAttachmentsSampleCounts = FramebufferNoAttachmentsSampleCounts;
            _internal.maxColorAttachments = MaxColorAttachments;
            _internal.sampledImageColorSampleCounts = SampledImageColorSampleCounts;
            _internal.sampledImageIntegerSampleCounts = SampledImageIntegerSampleCounts;
            _internal.sampledImageDepthSampleCounts = SampledImageDepthSampleCounts;
            _internal.sampledImageStencilSampleCounts = SampledImageStencilSampleCounts;
            _internal.storageImageSampleCounts = StorageImageSampleCounts;
            _internal.maxSampleMaskWords = MaxSampleMaskWords;
            _internal.timestampComputeAndGraphics = TimestampComputeAndGraphics;
            _internal.timestampPeriod = TimestampPeriod;
            _internal.maxClipDistances = MaxClipDistances;
            _internal.maxCullDistances = MaxCullDistances;
            _internal.maxCombinedClipAndCullDistances = MaxCombinedClipAndCullDistances;
            _internal.discreteQueuePriorities = DiscreteQueuePriorities;
            if(PointSizeRange != null)
            {
                if (PointSizeRange.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(PointSizeRange), "Array is out of bounds. Size should not be more than 2");

                var inputArray4 = PointSizeRange;
                unsafe
                {
                    if (inputArray4 != null)
                    {
                        for (int i = 0; i < inputArray4.Length; ++i)
                        {
                            _internal.pointSizeRange[i] = inputArray4[i];
                        }
                    }
                }
            }
            if(LineWidthRange != null)
            {
                if (LineWidthRange.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(LineWidthRange), "Array is out of bounds. Size should not be more than 2");

                var inputArray5 = LineWidthRange;
                unsafe
                {
                    if (inputArray5 != null)
                    {
                        for (int i = 0; i < inputArray5.Length; ++i)
                        {
                            _internal.lineWidthRange[i] = inputArray5[i];
                        }
                    }
                }
            }
            _internal.pointSizeGranularity = PointSizeGranularity;
            _internal.lineWidthGranularity = LineWidthGranularity;
            _internal.strictLines = StrictLines;
            _internal.standardSampleLocations = StandardSampleLocations;
            _internal.optimalBufferCopyOffsetAlignment = OptimalBufferCopyOffsetAlignment;
            _internal.optimalBufferCopyRowPitchAlignment = OptimalBufferCopyRowPitchAlignment;
            _internal.nonCoherentAtomSize = NonCoherentAtomSize;
            return _internal;
        }
    }

    public partial class PhysicalDeviceSparseProperties
    {
        public PhysicalDeviceSparseProperties()
        {
        }

        public PhysicalDeviceSparseProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseProperties _internal)
        {
            ResidencyStandard2DBlockShape = _internal.residencyStandard2DBlockShape;
            ResidencyStandard2DMultisampleBlockShape = _internal.residencyStandard2DMultisampleBlockShape;
            ResidencyStandard3DBlockShape = _internal.residencyStandard3DBlockShape;
            ResidencyAlignedMipSize = _internal.residencyAlignedMipSize;
            ResidencyNonResidentStrict = _internal.residencyNonResidentStrict;
        }

        public bool ResidencyStandard2DBlockShape { get; set; }
        public bool ResidencyStandard2DMultisampleBlockShape { get; set; }
        public bool ResidencyStandard3DBlockShape { get; set; }
        public bool ResidencyAlignedMipSize { get; set; }
        public bool ResidencyNonResidentStrict { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseProperties();
            _internal.residencyStandard2DBlockShape = ResidencyStandard2DBlockShape;
            _internal.residencyStandard2DMultisampleBlockShape = ResidencyStandard2DMultisampleBlockShape;
            _internal.residencyStandard3DBlockShape = ResidencyStandard3DBlockShape;
            _internal.residencyAlignedMipSize = ResidencyAlignedMipSize;
            _internal.residencyNonResidentStrict = ResidencyNonResidentStrict;
            return _internal;
        }
    }

    public partial class PhysicalDeviceProperties
    {
        public PhysicalDeviceProperties()
        {
        }

        public PhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties _internal)
        {
            ApiVersion = _internal.apiVersion;
            DriverVersion = _internal.driverVersion;
            VendorID = _internal.vendorID;
            DeviceID = _internal.deviceID;
            DeviceType = _internal.deviceType;
            var tmpArr0 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr0[i] = (byte)_internal.deviceName[i];
                }
            }
            DeviceName = System.Text.Encoding.ASCII.GetString(tmpArr0).Replace("\0", string.Empty);
            var tmpArr1 = new byte[16];
            unsafe
            {
                for (int i = 0; i < 16; ++i)
                {
                    tmpArr1[i] = _internal.pipelineCacheUUID[i];
                }
            }
            PipelineCacheUUID = System.Text.Encoding.ASCII.GetString(tmpArr1).Replace("\0", string.Empty);
            Limits = new PhysicalDeviceLimits(_internal.limits);
            SparseProperties = new PhysicalDeviceSparseProperties(_internal.sparseProperties);
        }

        public uint ApiVersion { get; set; }
        public uint DriverVersion { get; set; }
        public uint VendorID { get; set; }
        public uint DeviceID { get; set; }
        public PhysicalDeviceType DeviceType { get; set; }
        public string DeviceName { get; set; }
        public string PipelineCacheUUID { get; set; }
        public PhysicalDeviceLimits Limits { get; set; }
        public PhysicalDeviceSparseProperties SparseProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties();
            _internal.apiVersion = ApiVersion;
            _internal.driverVersion = DriverVersion;
            _internal.vendorID = VendorID;
            _internal.deviceID = DeviceID;
            _internal.deviceType = DeviceType;
            if(DeviceName != null)
            {
                if (DeviceName.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceName), "Array is out of bounds. Size should not be more than 256");

                var inputArray0 = System.Text.Encoding.ASCII.GetBytes(DeviceName);
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.deviceName[i] = (sbyte)inputArray0[i];
                        }
                    }
                }
            }
            if(PipelineCacheUUID != null)
            {
                if (PipelineCacheUUID.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(PipelineCacheUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray1 = System.Text.Encoding.ASCII.GetBytes(PipelineCacheUUID);
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.pipelineCacheUUID[i] = inputArray1[i];
                        }
                    }
                }
            }
            if (Limits != null)
            {
                _internal.limits = Limits.ToInternal();
            }
            if (SparseProperties != null)
            {
                _internal.sparseProperties = SparseProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class QueueFamilyProperties
    {
        public QueueFamilyProperties()
        {
        }

        public QueueFamilyProperties(AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties _internal)
        {
            QueueFlags = _internal.queueFlags;
            QueueCount = _internal.queueCount;
            TimestampValidBits = _internal.timestampValidBits;
            MinImageTransferGranularity = new Extent3D(_internal.minImageTransferGranularity);
        }

        public uint QueueFlags { get; set; }
        public uint QueueCount { get; set; }
        public uint TimestampValidBits { get; set; }
        public Extent3D MinImageTransferGranularity { get; set; }

        public AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties();
            _internal.queueFlags = QueueFlags;
            _internal.queueCount = QueueCount;
            _internal.timestampValidBits = TimestampValidBits;
            if (MinImageTransferGranularity != null)
            {
                _internal.minImageTransferGranularity = MinImageTransferGranularity.ToInternal();
            }
            return _internal;
        }
    }

    public partial class MemoryType
    {
        public MemoryType()
        {
        }

        public MemoryType(AdamantiumVulkan.Core.Interop.VkMemoryType _internal)
        {
            PropertyFlags = _internal.propertyFlags;
            HeapIndex = _internal.heapIndex;
        }

        public uint PropertyFlags { get; set; }
        public uint HeapIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryType ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryType();
            _internal.propertyFlags = PropertyFlags;
            _internal.heapIndex = HeapIndex;
            return _internal;
        }
    }

    public partial class MemoryHeap
    {
        public MemoryHeap()
        {
        }

        public MemoryHeap(AdamantiumVulkan.Core.Interop.VkMemoryHeap _internal)
        {
            Size = _internal.size;
            Flags = _internal.flags;
        }

        public ulong Size { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryHeap ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryHeap();
            _internal.size = Size;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMemoryProperties
    {
        public PhysicalDeviceMemoryProperties()
        {
        }

        public PhysicalDeviceMemoryProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties _internal)
        {
            MemoryTypeCount = _internal.memoryTypeCount;
            MemoryTypes = new MemoryType[32];
            for (int i = 0; i < 32; ++i)
            {
                MemoryTypes[i] = new MemoryType(_internal.memoryTypes[i]);
            }
            MemoryHeapCount = _internal.memoryHeapCount;
            MemoryHeaps = new MemoryHeap[16];
            for (int i = 0; i < 16; ++i)
            {
                MemoryHeaps[i] = new MemoryHeap(_internal.memoryHeaps[i]);
            }
        }

        public uint MemoryTypeCount { get; set; }
        public MemoryType[] MemoryTypes { get; set; }
        public uint MemoryHeapCount { get; set; }
        public MemoryHeap[] MemoryHeaps { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties();
            _internal.memoryTypeCount = MemoryTypeCount;
            if(MemoryTypes != null)
            {
                if (MemoryTypes.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(MemoryTypes), "Array is out of bounds. Size should not be more than 32");

                _internal.memoryTypes = new VkMemoryType[32];
                for (int i = 0; i < MemoryTypes.Length; ++i)
                {
                    _internal.memoryTypes[i] = MemoryTypes[i].ToInternal();
                }
            }
            _internal.memoryHeapCount = MemoryHeapCount;
            if(MemoryHeaps != null)
            {
                if (MemoryHeaps.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(MemoryHeaps), "Array is out of bounds. Size should not be more than 16");

                _internal.memoryHeaps = new VkMemoryHeap[16];
                for (int i = 0; i < MemoryHeaps.Length; ++i)
                {
                    _internal.memoryHeaps[i] = MemoryHeaps[i].ToInternal();
                }
            }
            return _internal;
        }
    }

    public partial class DeviceQueueCreateInfo : DisposableObject
    {
        private StructReference refpQueuePriorities;

        public DeviceQueueCreateInfo()
        {
        }

        public DeviceQueueCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            QueueFamilyIndex = _internal.queueFamilyIndex;
            QueueCount = _internal.queueCount;
            if(_internal.pQueuePriorities != System.IntPtr.Zero)
            {
                PQueuePriorities = (float?)_internal.pQueuePriorities;
                Marshal.FreeHGlobal(_internal.pQueuePriorities);
            }
        }

        public StructureType SType => StructureType.DeviceQueueCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint QueueFamilyIndex { get; set; }
        public uint QueueCount { get; set; }
        public float? PQueuePriorities { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.queueFamilyIndex = QueueFamilyIndex;
            _internal.queueCount = QueueCount;
            refpQueuePriorities?.Dispose();
            if (PQueuePriorities != null)
            {
                refpQueuePriorities = new StructReference(PQueuePriorities);
                _internal.pQueuePriorities = refpQueuePriorities.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueuePriorities?.Dispose();
        }

    }

    public partial class DeviceCreateInfo : DisposableObject
    {
        private GCHandleReference refpQueueCreateInfos;

        private StringArrayReference refppEnabledLayerNames;

        private StringArrayReference refppEnabledExtensionNames;

        private StructReference refpEnabledFeatures;

        public DeviceCreateInfo()
        {
        }

        public DeviceCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            QueueCreateInfoCount = _internal.queueCreateInfoCount;
            PQueueCreateInfos = new DeviceQueueCreateInfo[_internal.queueCreateInfoCount];
            MarshalUtils.IntPtrToManagedArray<DeviceQueueCreateInfo>(_internal.pQueueCreateInfos, PQueueCreateInfos);
            Marshal.FreeHGlobal(_internal.pQueueCreateInfos);
            EnabledLayerCount = _internal.enabledLayerCount;
            EnabledExtensionCount = _internal.enabledExtensionCount;
            PEnabledFeatures = new PhysicalDeviceFeatures(Marshal.PtrToStructure<VkPhysicalDeviceFeatures>(_internal.pEnabledFeatures));
            Marshal.FreeHGlobal(_internal.pEnabledFeatures);
        }

        public StructureType SType => StructureType.DeviceCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint QueueCreateInfoCount { get; set; }
        public DeviceQueueCreateInfo[] PQueueCreateInfos { get; set; }
        public uint EnabledLayerCount { get; set; }
        public string[] PpEnabledLayerNames { get; set; }
        public uint EnabledExtensionCount { get; set; }
        public string[] PpEnabledExtensionNames { get; set; }
        public PhysicalDeviceFeatures PEnabledFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.queueCreateInfoCount = QueueCreateInfoCount;
            refpQueueCreateInfos?.Dispose();
            if (PQueueCreateInfos != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo[QueueCreateInfoCount];
                for (int i = 0; i < PQueueCreateInfos.Length; ++i)
                {
                    tmpArray0[i] = PQueueCreateInfos[i].ToInternal();
                }
                refpQueueCreateInfos = new GCHandleReference(tmpArray0);
                _internal.pQueueCreateInfos = refpQueueCreateInfos.Handle;
            }
            _internal.enabledLayerCount = EnabledLayerCount;
            refppEnabledLayerNames?.Dispose();
            if (PpEnabledLayerNames != null)
            {
                refppEnabledLayerNames = new StringArrayReference(PpEnabledLayerNames, false);
                _internal.ppEnabledLayerNames = refppEnabledLayerNames.Handle;
            }
            _internal.enabledExtensionCount = EnabledExtensionCount;
            refppEnabledExtensionNames?.Dispose();
            if (PpEnabledExtensionNames != null)
            {
                refppEnabledExtensionNames = new StringArrayReference(PpEnabledExtensionNames, false);
                _internal.ppEnabledExtensionNames = refppEnabledExtensionNames.Handle;
            }
            refpEnabledFeatures?.Dispose();
            if (PEnabledFeatures != null)
            {
                var struct0 = PEnabledFeatures.ToInternal();
                refpEnabledFeatures = new StructReference(struct0);
                _internal.pEnabledFeatures = refpEnabledFeatures.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueueCreateInfos?.Dispose();
            refppEnabledLayerNames?.Dispose();
            refppEnabledExtensionNames?.Dispose();
            refpEnabledFeatures?.Dispose();
        }

    }

    public partial class ExtensionProperties
    {
        public ExtensionProperties()
        {
        }

        public ExtensionProperties(AdamantiumVulkan.Core.Interop.VkExtensionProperties _internal)
        {
            var tmpArr0 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr0[i] = (byte)_internal.extensionName[i];
                }
            }
            ExtensionName = System.Text.Encoding.ASCII.GetString(tmpArr0).Replace("\0", string.Empty);
            SpecVersion = _internal.specVersion;
        }

        public string ExtensionName { get; set; }
        public uint SpecVersion { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExtensionProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExtensionProperties();
            if(ExtensionName != null)
            {
                if (ExtensionName.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(ExtensionName), "Array is out of bounds. Size should not be more than 256");

                var inputArray0 = System.Text.Encoding.ASCII.GetBytes(ExtensionName);
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.extensionName[i] = (sbyte)inputArray0[i];
                        }
                    }
                }
            }
            _internal.specVersion = SpecVersion;
            return _internal;
        }
    }

    public partial class LayerProperties
    {
        public LayerProperties()
        {
        }

        public LayerProperties(AdamantiumVulkan.Core.Interop.VkLayerProperties _internal)
        {
            var tmpArr0 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr0[i] = (byte)_internal.layerName[i];
                }
            }
            LayerName = System.Text.Encoding.ASCII.GetString(tmpArr0).Replace("\0", string.Empty);
            SpecVersion = _internal.specVersion;
            ImplementationVersion = _internal.implementationVersion;
            var tmpArr1 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr1[i] = (byte)_internal.description[i];
                }
            }
            Description = System.Text.Encoding.ASCII.GetString(tmpArr1).Replace("\0", string.Empty);
        }

        public string LayerName { get; set; }
        public uint SpecVersion { get; set; }
        public uint ImplementationVersion { get; set; }
        public string Description { get; set; }

        public AdamantiumVulkan.Core.Interop.VkLayerProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkLayerProperties();
            if(LayerName != null)
            {
                if (LayerName.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(LayerName), "Array is out of bounds. Size should not be more than 256");

                var inputArray0 = System.Text.Encoding.ASCII.GetBytes(LayerName);
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.layerName[i] = (sbyte)inputArray0[i];
                        }
                    }
                }
            }
            _internal.specVersion = SpecVersion;
            _internal.implementationVersion = ImplementationVersion;
            if(Description != null)
            {
                if (Description.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(Description), "Array is out of bounds. Size should not be more than 256");

                var inputArray1 = System.Text.Encoding.ASCII.GetBytes(Description);
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.description[i] = (sbyte)inputArray1[i];
                        }
                    }
                }
            }
            return _internal;
        }
    }

    public partial class SubmitInfo : DisposableObject
    {
        private GCHandleReference refpWaitSemaphores;

        private GCHandleReference refpWaitDstStageMask;

        private GCHandleReference refpCommandBuffers;

        private GCHandleReference refpSignalSemaphores;

        public SubmitInfo()
        {
        }

        public SubmitInfo(AdamantiumVulkan.Core.Interop.VkSubmitInfo _internal)
        {
            PNext = _internal.pNext;
            WaitSemaphoreCount = _internal.waitSemaphoreCount;
            PWaitSemaphores = new Semaphore[_internal.waitSemaphoreCount];
            MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pWaitSemaphores, PWaitSemaphores);
            Marshal.FreeHGlobal(_internal.pWaitSemaphores);
            CommandBufferCount = _internal.commandBufferCount;
            PCommandBuffers = new CommandBuffer[_internal.commandBufferCount];
            MarshalUtils.IntPtrToManagedArray<CommandBuffer>(_internal.pCommandBuffers, PCommandBuffers);
            Marshal.FreeHGlobal(_internal.pCommandBuffers);
            SignalSemaphoreCount = _internal.signalSemaphoreCount;
            PSignalSemaphores = new Semaphore[_internal.signalSemaphoreCount];
            MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pSignalSemaphores, PSignalSemaphores);
            Marshal.FreeHGlobal(_internal.pSignalSemaphores);
        }

        public StructureType SType => StructureType.SubmitInfo;
        public System.IntPtr PNext { get; set; }
        public uint WaitSemaphoreCount { get; set; }
        public Semaphore[] PWaitSemaphores { get; set; }
        public uint[] PWaitDstStageMask { get; set; }
        public uint CommandBufferCount { get; set; }
        public CommandBuffer[] PCommandBuffers { get; set; }
        public uint SignalSemaphoreCount { get; set; }
        public Semaphore[] PSignalSemaphores { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubmitInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubmitInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.waitSemaphoreCount = WaitSemaphoreCount;
            refpWaitSemaphores?.Dispose();
            if (PWaitSemaphores != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkSemaphore_T[WaitSemaphoreCount];
                for (int i = 0; i < PWaitSemaphores.Length; ++i)
                {
                    tmpArray0[i] = PWaitSemaphores[i];
                }
                refpWaitSemaphores = new GCHandleReference(tmpArray0);
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
            refpWaitDstStageMask?.Dispose();
            if (PWaitDstStageMask != null)
            {
                var tmpArray1 = new uint[PWaitDstStageMask.Length];
                for (int i = 0; i < PWaitDstStageMask.Length; ++i)
                {
                    tmpArray1[i] = PWaitDstStageMask[i];
                }
                refpWaitDstStageMask = new GCHandleReference(tmpArray1);
                _internal.pWaitDstStageMask = refpWaitDstStageMask.Handle;
            }
            _internal.commandBufferCount = CommandBufferCount;
            refpCommandBuffers?.Dispose();
            if (PCommandBuffers != null)
            {
                var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkCommandBuffer_T[CommandBufferCount];
                for (int i = 0; i < PCommandBuffers.Length; ++i)
                {
                    tmpArray2[i] = PCommandBuffers[i];
                }
                refpCommandBuffers = new GCHandleReference(tmpArray2);
                _internal.pCommandBuffers = refpCommandBuffers.Handle;
            }
            _internal.signalSemaphoreCount = SignalSemaphoreCount;
            refpSignalSemaphores?.Dispose();
            if (PSignalSemaphores != null)
            {
                var tmpArray3 = new AdamantiumVulkan.Core.Interop.VkSemaphore_T[SignalSemaphoreCount];
                for (int i = 0; i < PSignalSemaphores.Length; ++i)
                {
                    tmpArray3[i] = PSignalSemaphores[i];
                }
                refpSignalSemaphores = new GCHandleReference(tmpArray3);
                _internal.pSignalSemaphores = refpSignalSemaphores.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpWaitSemaphores?.Dispose();
            refpWaitDstStageMask?.Dispose();
            refpCommandBuffers?.Dispose();
            refpSignalSemaphores?.Dispose();
        }

    }

    public partial class MemoryAllocateInfo : DisposableObject
    {
        public MemoryAllocateInfo()
        {
        }

        public MemoryAllocateInfo(AdamantiumVulkan.Core.Interop.VkMemoryAllocateInfo _internal)
        {
            PNext = _internal.pNext;
            AllocationSize = _internal.allocationSize;
            MemoryTypeIndex = _internal.memoryTypeIndex;
        }

        public StructureType SType => StructureType.MemoryAllocateInfo;
        public System.IntPtr PNext { get; set; }
        public ulong AllocationSize { get; set; }
        public uint MemoryTypeIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryAllocateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryAllocateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.allocationSize = AllocationSize;
            _internal.memoryTypeIndex = MemoryTypeIndex;
            return _internal;
        }
    }

    public partial class MappedMemoryRange : DisposableObject
    {
        public MappedMemoryRange()
        {
        }

        public MappedMemoryRange(AdamantiumVulkan.Core.Interop.VkMappedMemoryRange _internal)
        {
            PNext = _internal.pNext;
            Memory = new DeviceMemory(_internal.memory);
            Offset = _internal.offset;
            Size = _internal.size;
        }

        public StructureType SType => StructureType.MappedMemoryRange;
        public System.IntPtr PNext { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong Offset { get; set; }
        public ulong Size { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMappedMemoryRange ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMappedMemoryRange();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.memory = Memory;
            _internal.offset = Offset;
            _internal.size = Size;
            return _internal;
        }
    }

    public partial class MemoryRequirements
    {
        public MemoryRequirements()
        {
        }

        public MemoryRequirements(AdamantiumVulkan.Core.Interop.VkMemoryRequirements _internal)
        {
            Size = _internal.size;
            Alignment = _internal.alignment;
            MemoryTypeBits = _internal.memoryTypeBits;
        }

        public ulong Size { get; set; }
        public ulong Alignment { get; set; }
        public uint MemoryTypeBits { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryRequirements ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryRequirements();
            _internal.size = Size;
            _internal.alignment = Alignment;
            _internal.memoryTypeBits = MemoryTypeBits;
            return _internal;
        }
    }

    public partial class SparseImageFormatProperties
    {
        public SparseImageFormatProperties()
        {
        }

        public SparseImageFormatProperties(AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties _internal)
        {
            AspectMask = _internal.aspectMask;
            ImageGranularity = new Extent3D(_internal.imageGranularity);
            Flags = _internal.flags;
        }

        public uint AspectMask { get; set; }
        public Extent3D ImageGranularity { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties();
            _internal.aspectMask = AspectMask;
            if (ImageGranularity != null)
            {
                _internal.imageGranularity = ImageGranularity.ToInternal();
            }
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class SparseImageMemoryRequirements
    {
        public SparseImageMemoryRequirements()
        {
        }

        public SparseImageMemoryRequirements(AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements _internal)
        {
            FormatProperties = new SparseImageFormatProperties(_internal.formatProperties);
            ImageMipTailFirstLod = _internal.imageMipTailFirstLod;
            ImageMipTailSize = _internal.imageMipTailSize;
            ImageMipTailOffset = _internal.imageMipTailOffset;
            ImageMipTailStride = _internal.imageMipTailStride;
        }

        public SparseImageFormatProperties FormatProperties { get; set; }
        public uint ImageMipTailFirstLod { get; set; }
        public ulong ImageMipTailSize { get; set; }
        public ulong ImageMipTailOffset { get; set; }
        public ulong ImageMipTailStride { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements();
            if (FormatProperties != null)
            {
                _internal.formatProperties = FormatProperties.ToInternal();
            }
            _internal.imageMipTailFirstLod = ImageMipTailFirstLod;
            _internal.imageMipTailSize = ImageMipTailSize;
            _internal.imageMipTailOffset = ImageMipTailOffset;
            _internal.imageMipTailStride = ImageMipTailStride;
            return _internal;
        }
    }

    public partial class SparseMemoryBind
    {
        public SparseMemoryBind()
        {
        }

        public SparseMemoryBind(AdamantiumVulkan.Core.Interop.VkSparseMemoryBind _internal)
        {
            ResourceOffset = _internal.resourceOffset;
            Size = _internal.size;
            Memory = new DeviceMemory(_internal.memory);
            MemoryOffset = _internal.memoryOffset;
            Flags = _internal.flags;
        }

        public ulong ResourceOffset { get; set; }
        public ulong Size { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong MemoryOffset { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseMemoryBind ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseMemoryBind();
            _internal.resourceOffset = ResourceOffset;
            _internal.size = Size;
            _internal.memory = Memory;
            _internal.memoryOffset = MemoryOffset;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class SparseBufferMemoryBindInfo : DisposableObject
    {
        private StructReference refpBinds;

        public SparseBufferMemoryBindInfo()
        {
        }

        public SparseBufferMemoryBindInfo(AdamantiumVulkan.Core.Interop.VkSparseBufferMemoryBindInfo _internal)
        {
            Buffer = new Buffer(_internal.buffer);
            BindCount = _internal.bindCount;
            PBinds = new SparseMemoryBind(Marshal.PtrToStructure<VkSparseMemoryBind>(_internal.pBinds));
            Marshal.FreeHGlobal(_internal.pBinds);
        }

        public Buffer Buffer { get; set; }
        public uint BindCount { get; set; }
        public SparseMemoryBind PBinds { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseBufferMemoryBindInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseBufferMemoryBindInfo();
            _internal.buffer = Buffer;
            _internal.bindCount = BindCount;
            refpBinds?.Dispose();
            if (PBinds != null)
            {
                var struct0 = PBinds.ToInternal();
                refpBinds = new StructReference(struct0);
                _internal.pBinds = refpBinds.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

    }

    public partial class SparseImageOpaqueMemoryBindInfo : DisposableObject
    {
        private StructReference refpBinds;

        public SparseImageOpaqueMemoryBindInfo()
        {
        }

        public SparseImageOpaqueMemoryBindInfo(AdamantiumVulkan.Core.Interop.VkSparseImageOpaqueMemoryBindInfo _internal)
        {
            Image = new Image(_internal.image);
            BindCount = _internal.bindCount;
            PBinds = new SparseMemoryBind(Marshal.PtrToStructure<VkSparseMemoryBind>(_internal.pBinds));
            Marshal.FreeHGlobal(_internal.pBinds);
        }

        public Image Image { get; set; }
        public uint BindCount { get; set; }
        public SparseMemoryBind PBinds { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageOpaqueMemoryBindInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageOpaqueMemoryBindInfo();
            _internal.image = Image;
            _internal.bindCount = BindCount;
            refpBinds?.Dispose();
            if (PBinds != null)
            {
                var struct0 = PBinds.ToInternal();
                refpBinds = new StructReference(struct0);
                _internal.pBinds = refpBinds.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

    }

    public partial class ImageSubresource
    {
        public ImageSubresource()
        {
        }

        public ImageSubresource(AdamantiumVulkan.Core.Interop.VkImageSubresource _internal)
        {
            AspectMask = _internal.aspectMask;
            MipLevel = _internal.mipLevel;
            ArrayLayer = _internal.arrayLayer;
        }

        public uint AspectMask { get; set; }
        public uint MipLevel { get; set; }
        public uint ArrayLayer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageSubresource ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageSubresource();
            _internal.aspectMask = AspectMask;
            _internal.mipLevel = MipLevel;
            _internal.arrayLayer = ArrayLayer;
            return _internal;
        }
    }

    public partial class Offset3D
    {
        public Offset3D()
        {
        }

        public Offset3D(AdamantiumVulkan.Core.Interop.VkOffset3D _internal)
        {
            X = _internal.x;
            Y = _internal.y;
            Z = _internal.z;
        }

        public int X { get; set; }
        public int Y { get; set; }
        public int Z { get; set; }

        public AdamantiumVulkan.Core.Interop.VkOffset3D ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkOffset3D();
            _internal.x = X;
            _internal.y = Y;
            _internal.z = Z;
            return _internal;
        }
    }

    public partial class SparseImageMemoryBind
    {
        public SparseImageMemoryBind()
        {
        }

        public SparseImageMemoryBind(AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBind _internal)
        {
            Subresource = new ImageSubresource(_internal.subresource);
            Offset = new Offset3D(_internal.offset);
            Extent = new Extent3D(_internal.extent);
            Memory = new DeviceMemory(_internal.memory);
            MemoryOffset = _internal.memoryOffset;
            Flags = _internal.flags;
        }

        public ImageSubresource Subresource { get; set; }
        public Offset3D Offset { get; set; }
        public Extent3D Extent { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong MemoryOffset { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBind ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBind();
            if (Subresource != null)
            {
                _internal.subresource = Subresource.ToInternal();
            }
            if (Offset != null)
            {
                _internal.offset = Offset.ToInternal();
            }
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            _internal.memory = Memory;
            _internal.memoryOffset = MemoryOffset;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class SparseImageMemoryBindInfo : DisposableObject
    {
        private StructReference refpBinds;

        public SparseImageMemoryBindInfo()
        {
        }

        public SparseImageMemoryBindInfo(AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBindInfo _internal)
        {
            Image = new Image(_internal.image);
            BindCount = _internal.bindCount;
            PBinds = new SparseImageMemoryBind(Marshal.PtrToStructure<VkSparseImageMemoryBind>(_internal.pBinds));
            Marshal.FreeHGlobal(_internal.pBinds);
        }

        public Image Image { get; set; }
        public uint BindCount { get; set; }
        public SparseImageMemoryBind PBinds { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBindInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageMemoryBindInfo();
            _internal.image = Image;
            _internal.bindCount = BindCount;
            refpBinds?.Dispose();
            if (PBinds != null)
            {
                var struct0 = PBinds.ToInternal();
                refpBinds = new StructReference(struct0);
                _internal.pBinds = refpBinds.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBinds?.Dispose();
        }

    }

    public partial class BindSparseInfo : DisposableObject
    {
        private StructReference refpWaitSemaphores;

        private StructReference refpBufferBinds;

        private StructReference refpImageOpaqueBinds;

        private StructReference refpImageBinds;

        private StructReference refpSignalSemaphores;

        public BindSparseInfo()
        {
        }

        public BindSparseInfo(AdamantiumVulkan.Core.Interop.VkBindSparseInfo _internal)
        {
            PNext = _internal.pNext;
            WaitSemaphoreCount = _internal.waitSemaphoreCount;
            PWaitSemaphores = new Semaphore(Marshal.PtrToStructure<Semaphore>(_internal.pWaitSemaphores));
            Marshal.FreeHGlobal(_internal.pWaitSemaphores);
            BufferBindCount = _internal.bufferBindCount;
            PBufferBinds = new SparseBufferMemoryBindInfo(Marshal.PtrToStructure<VkSparseBufferMemoryBindInfo>(_internal.pBufferBinds));
            Marshal.FreeHGlobal(_internal.pBufferBinds);
            ImageOpaqueBindCount = _internal.imageOpaqueBindCount;
            PImageOpaqueBinds = new SparseImageOpaqueMemoryBindInfo(Marshal.PtrToStructure<VkSparseImageOpaqueMemoryBindInfo>(_internal.pImageOpaqueBinds));
            Marshal.FreeHGlobal(_internal.pImageOpaqueBinds);
            ImageBindCount = _internal.imageBindCount;
            PImageBinds = new SparseImageMemoryBindInfo(Marshal.PtrToStructure<VkSparseImageMemoryBindInfo>(_internal.pImageBinds));
            Marshal.FreeHGlobal(_internal.pImageBinds);
            SignalSemaphoreCount = _internal.signalSemaphoreCount;
            PSignalSemaphores = new Semaphore(Marshal.PtrToStructure<Semaphore>(_internal.pSignalSemaphores));
            Marshal.FreeHGlobal(_internal.pSignalSemaphores);
        }

        public StructureType SType => StructureType.BindSparseInfo;
        public System.IntPtr PNext { get; set; }
        public uint WaitSemaphoreCount { get; set; }
        public Semaphore PWaitSemaphores { get; set; }
        public uint BufferBindCount { get; set; }
        public SparseBufferMemoryBindInfo PBufferBinds { get; set; }
        public uint ImageOpaqueBindCount { get; set; }
        public SparseImageOpaqueMemoryBindInfo PImageOpaqueBinds { get; set; }
        public uint ImageBindCount { get; set; }
        public SparseImageMemoryBindInfo PImageBinds { get; set; }
        public uint SignalSemaphoreCount { get; set; }
        public Semaphore PSignalSemaphores { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindSparseInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindSparseInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.waitSemaphoreCount = WaitSemaphoreCount;
            refpWaitSemaphores?.Dispose();
            if (PWaitSemaphores != null)
            {
                AdamantiumVulkan.Core.Interop.VkSemaphore_T struct0 = PWaitSemaphores;
                refpWaitSemaphores = new StructReference(struct0);
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
            _internal.bufferBindCount = BufferBindCount;
            refpBufferBinds?.Dispose();
            if (PBufferBinds != null)
            {
                var struct1 = PBufferBinds.ToInternal();
                refpBufferBinds = new StructReference(struct1);
                _internal.pBufferBinds = refpBufferBinds.Handle;
            }
            _internal.imageOpaqueBindCount = ImageOpaqueBindCount;
            refpImageOpaqueBinds?.Dispose();
            if (PImageOpaqueBinds != null)
            {
                var struct2 = PImageOpaqueBinds.ToInternal();
                refpImageOpaqueBinds = new StructReference(struct2);
                _internal.pImageOpaqueBinds = refpImageOpaqueBinds.Handle;
            }
            _internal.imageBindCount = ImageBindCount;
            refpImageBinds?.Dispose();
            if (PImageBinds != null)
            {
                var struct3 = PImageBinds.ToInternal();
                refpImageBinds = new StructReference(struct3);
                _internal.pImageBinds = refpImageBinds.Handle;
            }
            _internal.signalSemaphoreCount = SignalSemaphoreCount;
            refpSignalSemaphores?.Dispose();
            if (PSignalSemaphores != null)
            {
                AdamantiumVulkan.Core.Interop.VkSemaphore_T struct4 = PSignalSemaphores;
                refpSignalSemaphores = new StructReference(struct4);
                _internal.pSignalSemaphores = refpSignalSemaphores.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpWaitSemaphores?.Dispose();
            refpBufferBinds?.Dispose();
            refpImageOpaqueBinds?.Dispose();
            refpImageBinds?.Dispose();
            refpSignalSemaphores?.Dispose();
        }

    }

    public partial class FenceCreateInfo : DisposableObject
    {
        public FenceCreateInfo()
        {
        }

        public FenceCreateInfo(AdamantiumVulkan.Core.Interop.VkFenceCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.FenceCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFenceCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFenceCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class SemaphoreCreateInfo : DisposableObject
    {
        public SemaphoreCreateInfo()
        {
        }

        public SemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.VkSemaphoreCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.SemaphoreCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSemaphoreCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSemaphoreCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class EventCreateInfo : DisposableObject
    {
        public EventCreateInfo()
        {
        }

        public EventCreateInfo(AdamantiumVulkan.Core.Interop.VkEventCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.EventCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkEventCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkEventCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class QueryPoolCreateInfo : DisposableObject
    {
        public QueryPoolCreateInfo()
        {
        }

        public QueryPoolCreateInfo(AdamantiumVulkan.Core.Interop.VkQueryPoolCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            QueryType = _internal.queryType;
            QueryCount = _internal.queryCount;
            PipelineStatistics = _internal.pipelineStatistics;
        }

        public StructureType SType => StructureType.QueryPoolCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public QueryType QueryType { get; set; }
        public uint QueryCount { get; set; }
        public uint PipelineStatistics { get; set; }

        public AdamantiumVulkan.Core.Interop.VkQueryPoolCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkQueryPoolCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.queryType = QueryType;
            _internal.queryCount = QueryCount;
            _internal.pipelineStatistics = PipelineStatistics;
            return _internal;
        }
    }

    public partial class BufferCreateInfo : DisposableObject
    {
        private StructReference refpQueueFamilyIndices;

        public BufferCreateInfo()
        {
        }

        public BufferCreateInfo(AdamantiumVulkan.Core.Interop.VkBufferCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Size = _internal.size;
            Usage = _internal.usage;
            SharingMode = _internal.sharingMode;
            QueueFamilyIndexCount = _internal.queueFamilyIndexCount;
            if(_internal.pQueueFamilyIndices != System.IntPtr.Zero)
            {
                PQueueFamilyIndices = (uint?)_internal.pQueueFamilyIndices;
                Marshal.FreeHGlobal(_internal.pQueueFamilyIndices);
            }
        }

        public StructureType SType => StructureType.BufferCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ulong Size { get; set; }
        public uint Usage { get; set; }
        public SharingMode SharingMode { get; set; }
        public uint QueueFamilyIndexCount { get; set; }
        public uint? PQueueFamilyIndices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.size = Size;
            _internal.usage = Usage;
            _internal.sharingMode = SharingMode;
            _internal.queueFamilyIndexCount = QueueFamilyIndexCount;
            refpQueueFamilyIndices?.Dispose();
            if (PQueueFamilyIndices != null)
            {
                refpQueueFamilyIndices = new StructReference(PQueueFamilyIndices);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueueFamilyIndices?.Dispose();
        }

    }

    public partial class BufferViewCreateInfo : DisposableObject
    {
        public BufferViewCreateInfo()
        {
        }

        public BufferViewCreateInfo(AdamantiumVulkan.Core.Interop.VkBufferViewCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Buffer = new Buffer(_internal.buffer);
            Format = _internal.format;
            Offset = _internal.offset;
            Range = _internal.range;
        }

        public StructureType SType => StructureType.BufferViewCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public Buffer Buffer { get; set; }
        public Format Format { get; set; }
        public ulong Offset { get; set; }
        public ulong Range { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferViewCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferViewCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.buffer = Buffer;
            _internal.format = Format;
            _internal.offset = Offset;
            _internal.range = Range;
            return _internal;
        }
    }

    public partial class ImageCreateInfo : DisposableObject
    {
        private StructReference refpQueueFamilyIndices;

        public ImageCreateInfo()
        {
        }

        public ImageCreateInfo(AdamantiumVulkan.Core.Interop.VkImageCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            ImageType = _internal.imageType;
            Format = _internal.format;
            Extent = new Extent3D(_internal.extent);
            MipLevels = _internal.mipLevels;
            ArrayLayers = _internal.arrayLayers;
            Samples = _internal.samples;
            Tiling = _internal.tiling;
            Usage = _internal.usage;
            SharingMode = _internal.sharingMode;
            QueueFamilyIndexCount = _internal.queueFamilyIndexCount;
            if(_internal.pQueueFamilyIndices != System.IntPtr.Zero)
            {
                PQueueFamilyIndices = (uint?)_internal.pQueueFamilyIndices;
                Marshal.FreeHGlobal(_internal.pQueueFamilyIndices);
            }
            InitialLayout = _internal.initialLayout;
        }

        public StructureType SType => StructureType.ImageCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ImageType ImageType { get; set; }
        public Format Format { get; set; }
        public Extent3D Extent { get; set; }
        public uint MipLevels { get; set; }
        public uint ArrayLayers { get; set; }
        public SampleCountFlagBits Samples { get; set; }
        public ImageTiling Tiling { get; set; }
        public uint Usage { get; set; }
        public SharingMode SharingMode { get; set; }
        public uint QueueFamilyIndexCount { get; set; }
        public uint? PQueueFamilyIndices { get; set; }
        public ImageLayout InitialLayout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.imageType = ImageType;
            _internal.format = Format;
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            _internal.mipLevels = MipLevels;
            _internal.arrayLayers = ArrayLayers;
            _internal.samples = Samples;
            _internal.tiling = Tiling;
            _internal.usage = Usage;
            _internal.sharingMode = SharingMode;
            _internal.queueFamilyIndexCount = QueueFamilyIndexCount;
            refpQueueFamilyIndices?.Dispose();
            if (PQueueFamilyIndices != null)
            {
                refpQueueFamilyIndices = new StructReference(PQueueFamilyIndices);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
            _internal.initialLayout = InitialLayout;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueueFamilyIndices?.Dispose();
        }

    }

    public partial class SubresourceLayout
    {
        public SubresourceLayout()
        {
        }

        public SubresourceLayout(AdamantiumVulkan.Core.Interop.VkSubresourceLayout _internal)
        {
            Offset = _internal.offset;
            Size = _internal.size;
            RowPitch = _internal.rowPitch;
            ArrayPitch = _internal.arrayPitch;
            DepthPitch = _internal.depthPitch;
        }

        public ulong Offset { get; set; }
        public ulong Size { get; set; }
        public ulong RowPitch { get; set; }
        public ulong ArrayPitch { get; set; }
        public ulong DepthPitch { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubresourceLayout ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubresourceLayout();
            _internal.offset = Offset;
            _internal.size = Size;
            _internal.rowPitch = RowPitch;
            _internal.arrayPitch = ArrayPitch;
            _internal.depthPitch = DepthPitch;
            return _internal;
        }
    }

    public partial class ComponentMapping
    {
        public ComponentMapping()
        {
        }

        public ComponentMapping(AdamantiumVulkan.Core.Interop.VkComponentMapping _internal)
        {
            R = _internal.r;
            G = _internal.g;
            B = _internal.b;
            A = _internal.a;
        }

        public ComponentSwizzle R { get; set; }
        public ComponentSwizzle G { get; set; }
        public ComponentSwizzle B { get; set; }
        public ComponentSwizzle A { get; set; }

        public AdamantiumVulkan.Core.Interop.VkComponentMapping ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkComponentMapping();
            _internal.r = R;
            _internal.g = G;
            _internal.b = B;
            _internal.a = A;
            return _internal;
        }
    }

    public partial class ImageSubresourceRange
    {
        public ImageSubresourceRange()
        {
        }

        public ImageSubresourceRange(AdamantiumVulkan.Core.Interop.VkImageSubresourceRange _internal)
        {
            AspectMask = _internal.aspectMask;
            BaseMipLevel = _internal.baseMipLevel;
            LevelCount = _internal.levelCount;
            BaseArrayLayer = _internal.baseArrayLayer;
            LayerCount = _internal.layerCount;
        }

        public uint AspectMask { get; set; }
        public uint BaseMipLevel { get; set; }
        public uint LevelCount { get; set; }
        public uint BaseArrayLayer { get; set; }
        public uint LayerCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageSubresourceRange ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageSubresourceRange();
            _internal.aspectMask = AspectMask;
            _internal.baseMipLevel = BaseMipLevel;
            _internal.levelCount = LevelCount;
            _internal.baseArrayLayer = BaseArrayLayer;
            _internal.layerCount = LayerCount;
            return _internal;
        }
    }

    public partial class ImageViewCreateInfo : DisposableObject
    {
        public ImageViewCreateInfo()
        {
        }

        public ImageViewCreateInfo(AdamantiumVulkan.Core.Interop.VkImageViewCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Image = new Image(_internal.image);
            ViewType = _internal.viewType;
            Format = _internal.format;
            Components = new ComponentMapping(_internal.components);
            SubresourceRange = new ImageSubresourceRange(_internal.subresourceRange);
        }

        public StructureType SType => StructureType.ImageViewCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public Image Image { get; set; }
        public ImageViewType ViewType { get; set; }
        public Format Format { get; set; }
        public ComponentMapping Components { get; set; }
        public ImageSubresourceRange SubresourceRange { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageViewCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageViewCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.image = Image;
            _internal.viewType = ViewType;
            _internal.format = Format;
            if (Components != null)
            {
                _internal.components = Components.ToInternal();
            }
            if (SubresourceRange != null)
            {
                _internal.subresourceRange = SubresourceRange.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ShaderModuleCreateInfo : DisposableObject
    {
        private GCHandleReference refpCode;

        public ShaderModuleCreateInfo()
        {
        }

        public ShaderModuleCreateInfo(AdamantiumVulkan.Core.Interop.VkShaderModuleCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            CodeSize = _internal.codeSize;
            PCode = new byte[_internal.codeSize];
            MarshalUtils.IntPtrToManagedArray<byte>(_internal.pCode, PCode);
            Marshal.FreeHGlobal(_internal.pCode);
        }

        public StructureType SType => StructureType.ShaderModuleCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ulong CodeSize { get; set; }
        public byte[] PCode { get; set; }

        public AdamantiumVulkan.Core.Interop.VkShaderModuleCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkShaderModuleCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.codeSize = CodeSize;
            refpCode?.Dispose();
            if (PCode != null)
            {
                var tmpArray0 = new byte[CodeSize];
                for (int i = 0; i < PCode.Length; ++i)
                {
                    tmpArray0[i] = PCode[i];
                }
                refpCode = new GCHandleReference(tmpArray0);
                _internal.pCode = refpCode.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpCode?.Dispose();
        }

    }

    public partial class PipelineCacheCreateInfo : DisposableObject
    {
        public PipelineCacheCreateInfo()
        {
        }

        public PipelineCacheCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineCacheCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            InitialDataSize = _internal.initialDataSize;
            PInitialData = _internal.pInitialData;
        }

        public StructureType SType => StructureType.PipelineCacheCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ulong InitialDataSize { get; set; }
        public System.IntPtr PInitialData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineCacheCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineCacheCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.initialDataSize = InitialDataSize;
            _internal.pInitialData = PInitialData;
            return _internal;
        }
    }

    public partial class SpecializationMapEntry
    {
        public SpecializationMapEntry()
        {
        }

        public SpecializationMapEntry(AdamantiumVulkan.Core.Interop.VkSpecializationMapEntry _internal)
        {
            ConstantID = _internal.constantID;
            Offset = _internal.offset;
            Size = _internal.size;
        }

        public uint ConstantID { get; set; }
        public uint Offset { get; set; }
        public ulong Size { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSpecializationMapEntry ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSpecializationMapEntry();
            _internal.constantID = ConstantID;
            _internal.offset = Offset;
            _internal.size = Size;
            return _internal;
        }
    }

    public partial class SpecializationInfo : DisposableObject
    {
        private StructReference refpMapEntries;

        public SpecializationInfo()
        {
        }

        public SpecializationInfo(AdamantiumVulkan.Core.Interop.VkSpecializationInfo _internal)
        {
            MapEntryCount = _internal.mapEntryCount;
            PMapEntries = new SpecializationMapEntry(Marshal.PtrToStructure<VkSpecializationMapEntry>(_internal.pMapEntries));
            Marshal.FreeHGlobal(_internal.pMapEntries);
            DataSize = _internal.dataSize;
            PData = _internal.pData;
        }

        public uint MapEntryCount { get; set; }
        public SpecializationMapEntry PMapEntries { get; set; }
        public ulong DataSize { get; set; }
        public System.IntPtr PData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSpecializationInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSpecializationInfo();
            _internal.mapEntryCount = MapEntryCount;
            refpMapEntries?.Dispose();
            if (PMapEntries != null)
            {
                var struct0 = PMapEntries.ToInternal();
                refpMapEntries = new StructReference(struct0);
                _internal.pMapEntries = refpMapEntries.Handle;
            }
            _internal.dataSize = DataSize;
            _internal.pData = PData;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpMapEntries?.Dispose();
        }

    }

    public partial class PipelineShaderStageCreateInfo : DisposableObject
    {
        private StringReference refpName;

        private StructReference refpSpecializationInfo;

        public PipelineShaderStageCreateInfo()
        {
        }

        public PipelineShaderStageCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineShaderStageCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Stage = _internal.stage;
            Module = new ShaderModule(_internal.module);
            PName = Marshal.PtrToStringAnsi(_internal.pName);
            PSpecializationInfo = new SpecializationInfo(Marshal.PtrToStructure<VkSpecializationInfo>(_internal.pSpecializationInfo));
            Marshal.FreeHGlobal(_internal.pSpecializationInfo);
        }

        public StructureType SType => StructureType.PipelineShaderStageCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ShaderStageFlagBits Stage { get; set; }
        public ShaderModule Module { get; set; }
        public string PName { get; set; }
        public SpecializationInfo PSpecializationInfo { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineShaderStageCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineShaderStageCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.stage = Stage;
            _internal.module = Module;
            refpName?.Dispose();
            if (PName != null)
            {
                refpName = new StringReference(PName, false);
                _internal.pName = refpName.Handle;
            }
            refpSpecializationInfo?.Dispose();
            if (PSpecializationInfo != null)
            {
                var struct0 = PSpecializationInfo.ToInternal();
                refpSpecializationInfo = new StructReference(struct0);
                _internal.pSpecializationInfo = refpSpecializationInfo.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpName?.Dispose();
            refpSpecializationInfo?.Dispose();
        }

    }

    public partial class VertexInputBindingDescription
    {
        public VertexInputBindingDescription()
        {
        }

        public VertexInputBindingDescription(AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription _internal)
        {
            Binding = _internal.binding;
            Stride = _internal.stride;
            InputRate = _internal.inputRate;
        }

        public uint Binding { get; set; }
        public uint Stride { get; set; }
        public VertexInputRate InputRate { get; set; }

        public AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription();
            _internal.binding = Binding;
            _internal.stride = Stride;
            _internal.inputRate = InputRate;
            return _internal;
        }
    }

    public partial class VertexInputAttributeDescription
    {
        public VertexInputAttributeDescription()
        {
        }

        public VertexInputAttributeDescription(AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription _internal)
        {
            Location = _internal.location;
            Binding = _internal.binding;
            Format = _internal.format;
            Offset = _internal.offset;
        }

        public uint Location { get; set; }
        public uint Binding { get; set; }
        public Format Format { get; set; }
        public uint Offset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription();
            _internal.location = Location;
            _internal.binding = Binding;
            _internal.format = Format;
            _internal.offset = Offset;
            return _internal;
        }
    }

    public partial class PipelineVertexInputStateCreateInfo : DisposableObject
    {
        private GCHandleReference refpVertexBindingDescriptions;

        private GCHandleReference refpVertexAttributeDescriptions;

        public PipelineVertexInputStateCreateInfo()
        {
        }

        public PipelineVertexInputStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            VertexBindingDescriptionCount = _internal.vertexBindingDescriptionCount;
            PVertexBindingDescriptions = new VertexInputBindingDescription[_internal.vertexBindingDescriptionCount];
            MarshalUtils.IntPtrToManagedArray<VertexInputBindingDescription>(_internal.pVertexBindingDescriptions, PVertexBindingDescriptions);
            Marshal.FreeHGlobal(_internal.pVertexBindingDescriptions);
            VertexAttributeDescriptionCount = _internal.vertexAttributeDescriptionCount;
            PVertexAttributeDescriptions = new VertexInputAttributeDescription[_internal.vertexAttributeDescriptionCount];
            MarshalUtils.IntPtrToManagedArray<VertexInputAttributeDescription>(_internal.pVertexAttributeDescriptions, PVertexAttributeDescriptions);
            Marshal.FreeHGlobal(_internal.pVertexAttributeDescriptions);
        }

        public StructureType SType => StructureType.PipelineVertexInputStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint VertexBindingDescriptionCount { get; set; }
        public VertexInputBindingDescription[] PVertexBindingDescriptions { get; set; }
        public uint VertexAttributeDescriptionCount { get; set; }
        public VertexInputAttributeDescription[] PVertexAttributeDescriptions { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.vertexBindingDescriptionCount = VertexBindingDescriptionCount;
            refpVertexBindingDescriptions?.Dispose();
            if (PVertexBindingDescriptions != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription[VertexBindingDescriptionCount];
                for (int i = 0; i < PVertexBindingDescriptions.Length; ++i)
                {
                    tmpArray0[i] = PVertexBindingDescriptions[i].ToInternal();
                }
                refpVertexBindingDescriptions = new GCHandleReference(tmpArray0);
                _internal.pVertexBindingDescriptions = refpVertexBindingDescriptions.Handle;
            }
            _internal.vertexAttributeDescriptionCount = VertexAttributeDescriptionCount;
            refpVertexAttributeDescriptions?.Dispose();
            if (PVertexAttributeDescriptions != null)
            {
                var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription[VertexAttributeDescriptionCount];
                for (int i = 0; i < PVertexAttributeDescriptions.Length; ++i)
                {
                    tmpArray1[i] = PVertexAttributeDescriptions[i].ToInternal();
                }
                refpVertexAttributeDescriptions = new GCHandleReference(tmpArray1);
                _internal.pVertexAttributeDescriptions = refpVertexAttributeDescriptions.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpVertexBindingDescriptions?.Dispose();
            refpVertexAttributeDescriptions?.Dispose();
        }

    }

    public partial class PipelineInputAssemblyStateCreateInfo : DisposableObject
    {
        public PipelineInputAssemblyStateCreateInfo()
        {
        }

        public PipelineInputAssemblyStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineInputAssemblyStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Topology = _internal.topology;
            PrimitiveRestartEnable = _internal.primitiveRestartEnable;
        }

        public StructureType SType => StructureType.PipelineInputAssemblyStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public PrimitiveTopology Topology { get; set; }
        public bool PrimitiveRestartEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineInputAssemblyStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineInputAssemblyStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.topology = Topology;
            _internal.primitiveRestartEnable = PrimitiveRestartEnable;
            return _internal;
        }
    }

    public partial class PipelineTessellationStateCreateInfo : DisposableObject
    {
        public PipelineTessellationStateCreateInfo()
        {
        }

        public PipelineTessellationStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineTessellationStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PatchControlPoints = _internal.patchControlPoints;
        }

        public StructureType SType => StructureType.PipelineTessellationStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint PatchControlPoints { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineTessellationStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineTessellationStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.patchControlPoints = PatchControlPoints;
            return _internal;
        }
    }

    public partial class Viewport
    {
        public Viewport()
        {
        }

        public Viewport(AdamantiumVulkan.Core.Interop.VkViewport _internal)
        {
            X = _internal.x;
            Y = _internal.y;
            Width = _internal.width;
            Height = _internal.height;
            MinDepth = _internal.minDepth;
            MaxDepth = _internal.maxDepth;
        }

        public float X { get; set; }
        public float Y { get; set; }
        public float Width { get; set; }
        public float Height { get; set; }
        public float MinDepth { get; set; }
        public float MaxDepth { get; set; }

        public AdamantiumVulkan.Core.Interop.VkViewport ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkViewport();
            _internal.x = X;
            _internal.y = Y;
            _internal.width = Width;
            _internal.height = Height;
            _internal.minDepth = MinDepth;
            _internal.maxDepth = MaxDepth;
            return _internal;
        }
    }

    public partial class Offset2D
    {
        public Offset2D()
        {
        }

        public Offset2D(AdamantiumVulkan.Core.Interop.VkOffset2D _internal)
        {
            X = _internal.x;
            Y = _internal.y;
        }

        public int X { get; set; }
        public int Y { get; set; }

        public AdamantiumVulkan.Core.Interop.VkOffset2D ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkOffset2D();
            _internal.x = X;
            _internal.y = Y;
            return _internal;
        }
    }

    public partial class Extent2D
    {
        public Extent2D()
        {
        }

        public Extent2D(AdamantiumVulkan.Core.Interop.VkExtent2D _internal)
        {
            Width = _internal.width;
            Height = _internal.height;
        }

        public uint Width { get; set; }
        public uint Height { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExtent2D ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExtent2D();
            _internal.width = Width;
            _internal.height = Height;
            return _internal;
        }
    }

    public partial class Rect2D
    {
        public Rect2D()
        {
        }

        public Rect2D(AdamantiumVulkan.Core.Interop.VkRect2D _internal)
        {
            Offset = new Offset2D(_internal.offset);
            Extent = new Extent2D(_internal.extent);
        }

        public Offset2D Offset { get; set; }
        public Extent2D Extent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRect2D ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRect2D();
            if (Offset != null)
            {
                _internal.offset = Offset.ToInternal();
            }
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PipelineViewportStateCreateInfo : DisposableObject
    {
        private StructReference refpViewports;

        private StructReference refpScissors;

        public PipelineViewportStateCreateInfo()
        {
        }

        public PipelineViewportStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            ViewportCount = _internal.viewportCount;
            PViewports = new Viewport(Marshal.PtrToStructure<VkViewport>(_internal.pViewports));
            Marshal.FreeHGlobal(_internal.pViewports);
            ScissorCount = _internal.scissorCount;
            PScissors = new Rect2D(Marshal.PtrToStructure<VkRect2D>(_internal.pScissors));
            Marshal.FreeHGlobal(_internal.pScissors);
        }

        public StructureType SType => StructureType.PipelineViewportStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint ViewportCount { get; set; }
        public Viewport PViewports { get; set; }
        public uint ScissorCount { get; set; }
        public Rect2D PScissors { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.viewportCount = ViewportCount;
            refpViewports?.Dispose();
            if (PViewports != null)
            {
                var struct0 = PViewports.ToInternal();
                refpViewports = new StructReference(struct0);
                _internal.pViewports = refpViewports.Handle;
            }
            _internal.scissorCount = ScissorCount;
            refpScissors?.Dispose();
            if (PScissors != null)
            {
                var struct1 = PScissors.ToInternal();
                refpScissors = new StructReference(struct1);
                _internal.pScissors = refpScissors.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpViewports?.Dispose();
            refpScissors?.Dispose();
        }

    }

    public partial class PipelineRasterizationStateCreateInfo : DisposableObject
    {
        public PipelineRasterizationStateCreateInfo()
        {
        }

        public PipelineRasterizationStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DepthClampEnable = _internal.depthClampEnable;
            RasterizerDiscardEnable = _internal.rasterizerDiscardEnable;
            PolygonMode = _internal.polygonMode;
            CullMode = _internal.cullMode;
            FrontFace = _internal.frontFace;
            DepthBiasEnable = _internal.depthBiasEnable;
            DepthBiasConstantFactor = _internal.depthBiasConstantFactor;
            DepthBiasClamp = _internal.depthBiasClamp;
            DepthBiasSlopeFactor = _internal.depthBiasSlopeFactor;
            LineWidth = _internal.lineWidth;
        }

        public StructureType SType => StructureType.PipelineRasterizationStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public bool DepthClampEnable { get; set; }
        public bool RasterizerDiscardEnable { get; set; }
        public PolygonMode PolygonMode { get; set; }
        public uint CullMode { get; set; }
        public FrontFace FrontFace { get; set; }
        public bool DepthBiasEnable { get; set; }
        public float DepthBiasConstantFactor { get; set; }
        public float DepthBiasClamp { get; set; }
        public float DepthBiasSlopeFactor { get; set; }
        public float LineWidth { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.depthClampEnable = DepthClampEnable;
            _internal.rasterizerDiscardEnable = RasterizerDiscardEnable;
            _internal.polygonMode = PolygonMode;
            _internal.cullMode = CullMode;
            _internal.frontFace = FrontFace;
            _internal.depthBiasEnable = DepthBiasEnable;
            _internal.depthBiasConstantFactor = DepthBiasConstantFactor;
            _internal.depthBiasClamp = DepthBiasClamp;
            _internal.depthBiasSlopeFactor = DepthBiasSlopeFactor;
            _internal.lineWidth = LineWidth;
            return _internal;
        }
    }

    public partial class PipelineMultisampleStateCreateInfo : DisposableObject
    {
        private StructReference refpSampleMask;

        public PipelineMultisampleStateCreateInfo()
        {
        }

        public PipelineMultisampleStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineMultisampleStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            RasterizationSamples = _internal.rasterizationSamples;
            SampleShadingEnable = _internal.sampleShadingEnable;
            MinSampleShading = _internal.minSampleShading;
            if(_internal.pSampleMask != System.IntPtr.Zero)
            {
                PSampleMask = (uint?)_internal.pSampleMask;
                Marshal.FreeHGlobal(_internal.pSampleMask);
            }
            AlphaToCoverageEnable = _internal.alphaToCoverageEnable;
            AlphaToOneEnable = _internal.alphaToOneEnable;
        }

        public StructureType SType => StructureType.PipelineMultisampleStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public SampleCountFlagBits RasterizationSamples { get; set; }
        public bool SampleShadingEnable { get; set; }
        public float MinSampleShading { get; set; }
        public uint? PSampleMask { get; set; }
        public bool AlphaToCoverageEnable { get; set; }
        public bool AlphaToOneEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineMultisampleStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineMultisampleStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.rasterizationSamples = RasterizationSamples;
            _internal.sampleShadingEnable = SampleShadingEnable;
            _internal.minSampleShading = MinSampleShading;
            refpSampleMask?.Dispose();
            if (PSampleMask != null)
            {
                refpSampleMask = new StructReference(PSampleMask);
                _internal.pSampleMask = refpSampleMask.Handle;
            }
            _internal.alphaToCoverageEnable = AlphaToCoverageEnable;
            _internal.alphaToOneEnable = AlphaToOneEnable;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSampleMask?.Dispose();
        }

    }

    public partial class StencilOpState
    {
        public StencilOpState()
        {
        }

        public StencilOpState(AdamantiumVulkan.Core.Interop.VkStencilOpState _internal)
        {
            FailOp = _internal.failOp;
            PassOp = _internal.passOp;
            DepthFailOp = _internal.depthFailOp;
            CompareOp = _internal.compareOp;
            CompareMask = _internal.compareMask;
            WriteMask = _internal.writeMask;
            Reference = _internal.reference;
        }

        public StencilOp FailOp { get; set; }
        public StencilOp PassOp { get; set; }
        public StencilOp DepthFailOp { get; set; }
        public CompareOp CompareOp { get; set; }
        public uint CompareMask { get; set; }
        public uint WriteMask { get; set; }
        public uint Reference { get; set; }

        public AdamantiumVulkan.Core.Interop.VkStencilOpState ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkStencilOpState();
            _internal.failOp = FailOp;
            _internal.passOp = PassOp;
            _internal.depthFailOp = DepthFailOp;
            _internal.compareOp = CompareOp;
            _internal.compareMask = CompareMask;
            _internal.writeMask = WriteMask;
            _internal.reference = Reference;
            return _internal;
        }
    }

    public partial class PipelineDepthStencilStateCreateInfo : DisposableObject
    {
        public PipelineDepthStencilStateCreateInfo()
        {
        }

        public PipelineDepthStencilStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineDepthStencilStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DepthTestEnable = _internal.depthTestEnable;
            DepthWriteEnable = _internal.depthWriteEnable;
            DepthCompareOp = _internal.depthCompareOp;
            DepthBoundsTestEnable = _internal.depthBoundsTestEnable;
            StencilTestEnable = _internal.stencilTestEnable;
            Front = new StencilOpState(_internal.front);
            Back = new StencilOpState(_internal.back);
            MinDepthBounds = _internal.minDepthBounds;
            MaxDepthBounds = _internal.maxDepthBounds;
        }

        public StructureType SType => StructureType.PipelineDepthStencilStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public bool DepthTestEnable { get; set; }
        public bool DepthWriteEnable { get; set; }
        public CompareOp DepthCompareOp { get; set; }
        public bool DepthBoundsTestEnable { get; set; }
        public bool StencilTestEnable { get; set; }
        public StencilOpState Front { get; set; }
        public StencilOpState Back { get; set; }
        public float MinDepthBounds { get; set; }
        public float MaxDepthBounds { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineDepthStencilStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineDepthStencilStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.depthTestEnable = DepthTestEnable;
            _internal.depthWriteEnable = DepthWriteEnable;
            _internal.depthCompareOp = DepthCompareOp;
            _internal.depthBoundsTestEnable = DepthBoundsTestEnable;
            _internal.stencilTestEnable = StencilTestEnable;
            if (Front != null)
            {
                _internal.front = Front.ToInternal();
            }
            if (Back != null)
            {
                _internal.back = Back.ToInternal();
            }
            _internal.minDepthBounds = MinDepthBounds;
            _internal.maxDepthBounds = MaxDepthBounds;
            return _internal;
        }
    }

    public partial class PipelineColorBlendAttachmentState
    {
        public PipelineColorBlendAttachmentState()
        {
        }

        public PipelineColorBlendAttachmentState(AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState _internal)
        {
            BlendEnable = _internal.blendEnable;
            SrcColorBlendFactor = _internal.srcColorBlendFactor;
            DstColorBlendFactor = _internal.dstColorBlendFactor;
            ColorBlendOp = _internal.colorBlendOp;
            SrcAlphaBlendFactor = _internal.srcAlphaBlendFactor;
            DstAlphaBlendFactor = _internal.dstAlphaBlendFactor;
            AlphaBlendOp = _internal.alphaBlendOp;
            ColorWriteMask = _internal.colorWriteMask;
        }

        public bool BlendEnable { get; set; }
        public BlendFactor SrcColorBlendFactor { get; set; }
        public BlendFactor DstColorBlendFactor { get; set; }
        public BlendOp ColorBlendOp { get; set; }
        public BlendFactor SrcAlphaBlendFactor { get; set; }
        public BlendFactor DstAlphaBlendFactor { get; set; }
        public BlendOp AlphaBlendOp { get; set; }
        public uint ColorWriteMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState();
            _internal.blendEnable = BlendEnable;
            _internal.srcColorBlendFactor = SrcColorBlendFactor;
            _internal.dstColorBlendFactor = DstColorBlendFactor;
            _internal.colorBlendOp = ColorBlendOp;
            _internal.srcAlphaBlendFactor = SrcAlphaBlendFactor;
            _internal.dstAlphaBlendFactor = DstAlphaBlendFactor;
            _internal.alphaBlendOp = AlphaBlendOp;
            _internal.colorWriteMask = ColorWriteMask;
            return _internal;
        }
    }

    public partial class PipelineColorBlendStateCreateInfo : DisposableObject
    {
        private StructReference refpAttachments;

        public PipelineColorBlendStateCreateInfo()
        {
        }

        public PipelineColorBlendStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            LogicOpEnable = _internal.logicOpEnable;
            LogicOp = _internal.logicOp;
            AttachmentCount = _internal.attachmentCount;
            PAttachments = new PipelineColorBlendAttachmentState(Marshal.PtrToStructure<VkPipelineColorBlendAttachmentState>(_internal.pAttachments));
            Marshal.FreeHGlobal(_internal.pAttachments);
            var tmpArr0 = new float[4];
            unsafe
            {
                for (int i = 0; i < 4; ++i)
                {
                    tmpArr0[i] = _internal.blendConstants[i];
                }
            }
            BlendConstants = tmpArr0;
        }

        public StructureType SType => StructureType.PipelineColorBlendStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public bool LogicOpEnable { get; set; }
        public LogicOp LogicOp { get; set; }
        public uint AttachmentCount { get; set; }
        public PipelineColorBlendAttachmentState PAttachments { get; set; }
        public float[] BlendConstants { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.logicOpEnable = LogicOpEnable;
            _internal.logicOp = LogicOp;
            _internal.attachmentCount = AttachmentCount;
            refpAttachments?.Dispose();
            if (PAttachments != null)
            {
                var struct0 = PAttachments.ToInternal();
                refpAttachments = new StructReference(struct0);
                _internal.pAttachments = refpAttachments.Handle;
            }
            if(BlendConstants != null)
            {
                if (BlendConstants.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(BlendConstants), "Array is out of bounds. Size should not be more than 4");

                var inputArray0 = BlendConstants;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.blendConstants[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttachments?.Dispose();
        }

    }

    public partial class PipelineDynamicStateCreateInfo : DisposableObject
    {
        private GCHandleReference refpDynamicStates;

        public PipelineDynamicStateCreateInfo()
        {
        }

        public PipelineDynamicStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineDynamicStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DynamicStateCount = _internal.dynamicStateCount;
            var tmppDynamicStates = new int[_internal.dynamicStateCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pDynamicStates, tmppDynamicStates);
            Marshal.FreeHGlobal(_internal.pDynamicStates);
            PDynamicStates = new AdamantiumVulkan.Core.DynamicState[_internal.dynamicStateCount];
            for (int i = 0; i < tmppDynamicStates.Length; ++i)
            {
                PDynamicStates[i] = (AdamantiumVulkan.Core.DynamicState)tmppDynamicStates[i];
            }
        }

        public StructureType SType => StructureType.PipelineDynamicStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint DynamicStateCount { get; set; }
        public DynamicState[] PDynamicStates { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineDynamicStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineDynamicStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.dynamicStateCount = DynamicStateCount;
            refpDynamicStates?.Dispose();
            if (PDynamicStates != null)
            {
                var tmpArray0 = new DynamicState[DynamicStateCount];
                for (int i = 0; i < PDynamicStates.Length; ++i)
                {
                    tmpArray0[i] = PDynamicStates[i];
                }
                refpDynamicStates = new GCHandleReference(tmpArray0);
                _internal.pDynamicStates = refpDynamicStates.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDynamicStates?.Dispose();
        }

    }

    public partial class GraphicsPipelineCreateInfo : DisposableObject
    {
        private GCHandleReference refpStages;

        private StructReference refpVertexInputState;

        private StructReference refpInputAssemblyState;

        private StructReference refpTessellationState;

        private StructReference refpViewportState;

        private StructReference refpRasterizationState;

        private StructReference refpMultisampleState;

        private StructReference refpDepthStencilState;

        private StructReference refpColorBlendState;

        private StructReference refpDynamicState;

        public GraphicsPipelineCreateInfo()
        {
        }

        public GraphicsPipelineCreateInfo(AdamantiumVulkan.Core.Interop.VkGraphicsPipelineCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            StageCount = _internal.stageCount;
            PStages = new PipelineShaderStageCreateInfo[_internal.stageCount];
            MarshalUtils.IntPtrToManagedArray<PipelineShaderStageCreateInfo>(_internal.pStages, PStages);
            Marshal.FreeHGlobal(_internal.pStages);
            PVertexInputState = new PipelineVertexInputStateCreateInfo(Marshal.PtrToStructure<VkPipelineVertexInputStateCreateInfo>(_internal.pVertexInputState));
            Marshal.FreeHGlobal(_internal.pVertexInputState);
            PInputAssemblyState = new PipelineInputAssemblyStateCreateInfo(Marshal.PtrToStructure<VkPipelineInputAssemblyStateCreateInfo>(_internal.pInputAssemblyState));
            Marshal.FreeHGlobal(_internal.pInputAssemblyState);
            PTessellationState = new PipelineTessellationStateCreateInfo(Marshal.PtrToStructure<VkPipelineTessellationStateCreateInfo>(_internal.pTessellationState));
            Marshal.FreeHGlobal(_internal.pTessellationState);
            PViewportState = new PipelineViewportStateCreateInfo(Marshal.PtrToStructure<VkPipelineViewportStateCreateInfo>(_internal.pViewportState));
            Marshal.FreeHGlobal(_internal.pViewportState);
            PRasterizationState = new PipelineRasterizationStateCreateInfo(Marshal.PtrToStructure<VkPipelineRasterizationStateCreateInfo>(_internal.pRasterizationState));
            Marshal.FreeHGlobal(_internal.pRasterizationState);
            PMultisampleState = new PipelineMultisampleStateCreateInfo(Marshal.PtrToStructure<VkPipelineMultisampleStateCreateInfo>(_internal.pMultisampleState));
            Marshal.FreeHGlobal(_internal.pMultisampleState);
            PDepthStencilState = new PipelineDepthStencilStateCreateInfo(Marshal.PtrToStructure<VkPipelineDepthStencilStateCreateInfo>(_internal.pDepthStencilState));
            Marshal.FreeHGlobal(_internal.pDepthStencilState);
            PColorBlendState = new PipelineColorBlendStateCreateInfo(Marshal.PtrToStructure<VkPipelineColorBlendStateCreateInfo>(_internal.pColorBlendState));
            Marshal.FreeHGlobal(_internal.pColorBlendState);
            PDynamicState = new PipelineDynamicStateCreateInfo(Marshal.PtrToStructure<VkPipelineDynamicStateCreateInfo>(_internal.pDynamicState));
            Marshal.FreeHGlobal(_internal.pDynamicState);
            Layout = new PipelineLayout(_internal.layout);
            RenderPass = new RenderPass(_internal.renderPass);
            Subpass = _internal.subpass;
            BasePipelineHandle = new Pipeline(_internal.basePipelineHandle);
            BasePipelineIndex = _internal.basePipelineIndex;
        }

        public StructureType SType => StructureType.GraphicsPipelineCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint StageCount { get; set; }
        public PipelineShaderStageCreateInfo[] PStages { get; set; }
        public PipelineVertexInputStateCreateInfo PVertexInputState { get; set; }
        public PipelineInputAssemblyStateCreateInfo PInputAssemblyState { get; set; }
        public PipelineTessellationStateCreateInfo PTessellationState { get; set; }
        public PipelineViewportStateCreateInfo PViewportState { get; set; }
        public PipelineRasterizationStateCreateInfo PRasterizationState { get; set; }
        public PipelineMultisampleStateCreateInfo PMultisampleState { get; set; }
        public PipelineDepthStencilStateCreateInfo PDepthStencilState { get; set; }
        public PipelineColorBlendStateCreateInfo PColorBlendState { get; set; }
        public PipelineDynamicStateCreateInfo PDynamicState { get; set; }
        public PipelineLayout Layout { get; set; }
        public RenderPass RenderPass { get; set; }
        public uint Subpass { get; set; }
        public Pipeline BasePipelineHandle { get; set; }
        public int BasePipelineIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkGraphicsPipelineCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkGraphicsPipelineCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.stageCount = StageCount;
            refpStages?.Dispose();
            if (PStages != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkPipelineShaderStageCreateInfo[StageCount];
                for (int i = 0; i < PStages.Length; ++i)
                {
                    tmpArray0[i] = PStages[i].ToInternal();
                }
                refpStages = new GCHandleReference(tmpArray0);
                _internal.pStages = refpStages.Handle;
            }
            refpVertexInputState?.Dispose();
            if (PVertexInputState != null)
            {
                var struct0 = PVertexInputState.ToInternal();
                refpVertexInputState = new StructReference(struct0);
                _internal.pVertexInputState = refpVertexInputState.Handle;
            }
            refpInputAssemblyState?.Dispose();
            if (PInputAssemblyState != null)
            {
                var struct1 = PInputAssemblyState.ToInternal();
                refpInputAssemblyState = new StructReference(struct1);
                _internal.pInputAssemblyState = refpInputAssemblyState.Handle;
            }
            refpTessellationState?.Dispose();
            if (PTessellationState != null)
            {
                var struct2 = PTessellationState.ToInternal();
                refpTessellationState = new StructReference(struct2);
                _internal.pTessellationState = refpTessellationState.Handle;
            }
            refpViewportState?.Dispose();
            if (PViewportState != null)
            {
                var struct3 = PViewportState.ToInternal();
                refpViewportState = new StructReference(struct3);
                _internal.pViewportState = refpViewportState.Handle;
            }
            refpRasterizationState?.Dispose();
            if (PRasterizationState != null)
            {
                var struct4 = PRasterizationState.ToInternal();
                refpRasterizationState = new StructReference(struct4);
                _internal.pRasterizationState = refpRasterizationState.Handle;
            }
            refpMultisampleState?.Dispose();
            if (PMultisampleState != null)
            {
                var struct5 = PMultisampleState.ToInternal();
                refpMultisampleState = new StructReference(struct5);
                _internal.pMultisampleState = refpMultisampleState.Handle;
            }
            refpDepthStencilState?.Dispose();
            if (PDepthStencilState != null)
            {
                var struct6 = PDepthStencilState.ToInternal();
                refpDepthStencilState = new StructReference(struct6);
                _internal.pDepthStencilState = refpDepthStencilState.Handle;
            }
            refpColorBlendState?.Dispose();
            if (PColorBlendState != null)
            {
                var struct7 = PColorBlendState.ToInternal();
                refpColorBlendState = new StructReference(struct7);
                _internal.pColorBlendState = refpColorBlendState.Handle;
            }
            refpDynamicState?.Dispose();
            if (PDynamicState != null)
            {
                var struct8 = PDynamicState.ToInternal();
                refpDynamicState = new StructReference(struct8);
                _internal.pDynamicState = refpDynamicState.Handle;
            }
            _internal.layout = Layout;
            _internal.renderPass = RenderPass;
            _internal.subpass = Subpass;
            _internal.basePipelineHandle = BasePipelineHandle;
            _internal.basePipelineIndex = BasePipelineIndex;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpStages?.Dispose();
            refpVertexInputState?.Dispose();
            refpInputAssemblyState?.Dispose();
            refpTessellationState?.Dispose();
            refpViewportState?.Dispose();
            refpRasterizationState?.Dispose();
            refpMultisampleState?.Dispose();
            refpDepthStencilState?.Dispose();
            refpColorBlendState?.Dispose();
            refpDynamicState?.Dispose();
        }

    }

    public partial class ComputePipelineCreateInfo : DisposableObject
    {
        public ComputePipelineCreateInfo()
        {
        }

        public ComputePipelineCreateInfo(AdamantiumVulkan.Core.Interop.VkComputePipelineCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Stage = new PipelineShaderStageCreateInfo(_internal.stage);
            Layout = new PipelineLayout(_internal.layout);
            BasePipelineHandle = new Pipeline(_internal.basePipelineHandle);
            BasePipelineIndex = _internal.basePipelineIndex;
        }

        public StructureType SType => StructureType.ComputePipelineCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public PipelineShaderStageCreateInfo Stage { get; set; }
        public PipelineLayout Layout { get; set; }
        public Pipeline BasePipelineHandle { get; set; }
        public int BasePipelineIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkComputePipelineCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkComputePipelineCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            if (Stage != null)
            {
                _internal.stage = Stage.ToInternal();
            }
            _internal.layout = Layout;
            _internal.basePipelineHandle = BasePipelineHandle;
            _internal.basePipelineIndex = BasePipelineIndex;
            return _internal;
        }
    }

    public partial class PushConstantRange
    {
        public PushConstantRange()
        {
        }

        public PushConstantRange(AdamantiumVulkan.Core.Interop.VkPushConstantRange _internal)
        {
            StageFlags = _internal.stageFlags;
            Offset = _internal.offset;
            Size = _internal.size;
        }

        public uint StageFlags { get; set; }
        public uint Offset { get; set; }
        public uint Size { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPushConstantRange ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPushConstantRange();
            _internal.stageFlags = StageFlags;
            _internal.offset = Offset;
            _internal.size = Size;
            return _internal;
        }
    }

    public partial class PipelineLayoutCreateInfo : DisposableObject
    {
        private GCHandleReference refpSetLayouts;

        private StructReference refpPushConstantRanges;

        public PipelineLayoutCreateInfo()
        {
        }

        public PipelineLayoutCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            SetLayoutCount = _internal.setLayoutCount;
            PSetLayouts = new DescriptorSetLayout[_internal.setLayoutCount];
            MarshalUtils.IntPtrToManagedArray<DescriptorSetLayout>(_internal.pSetLayouts, PSetLayouts);
            Marshal.FreeHGlobal(_internal.pSetLayouts);
            PushConstantRangeCount = _internal.pushConstantRangeCount;
            PPushConstantRanges = new PushConstantRange(Marshal.PtrToStructure<VkPushConstantRange>(_internal.pPushConstantRanges));
            Marshal.FreeHGlobal(_internal.pPushConstantRanges);
        }

        public StructureType SType => StructureType.PipelineLayoutCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint SetLayoutCount { get; set; }
        public DescriptorSetLayout[] PSetLayouts { get; set; }
        public uint PushConstantRangeCount { get; set; }
        public PushConstantRange PPushConstantRanges { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.setLayoutCount = SetLayoutCount;
            refpSetLayouts?.Dispose();
            if (PSetLayouts != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T[SetLayoutCount];
                for (int i = 0; i < PSetLayouts.Length; ++i)
                {
                    tmpArray0[i] = PSetLayouts[i];
                }
                refpSetLayouts = new GCHandleReference(tmpArray0);
                _internal.pSetLayouts = refpSetLayouts.Handle;
            }
            _internal.pushConstantRangeCount = PushConstantRangeCount;
            refpPushConstantRanges?.Dispose();
            if (PPushConstantRanges != null)
            {
                var struct0 = PPushConstantRanges.ToInternal();
                refpPushConstantRanges = new StructReference(struct0);
                _internal.pPushConstantRanges = refpPushConstantRanges.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSetLayouts?.Dispose();
            refpPushConstantRanges?.Dispose();
        }

    }

    public partial class SamplerCreateInfo : DisposableObject
    {
        public SamplerCreateInfo()
        {
        }

        public SamplerCreateInfo(AdamantiumVulkan.Core.Interop.VkSamplerCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            MagFilter = _internal.magFilter;
            MinFilter = _internal.minFilter;
            MipmapMode = _internal.mipmapMode;
            AddressModeU = _internal.addressModeU;
            AddressModeV = _internal.addressModeV;
            AddressModeW = _internal.addressModeW;
            MipLodBias = _internal.mipLodBias;
            AnisotropyEnable = _internal.anisotropyEnable;
            MaxAnisotropy = _internal.maxAnisotropy;
            CompareEnable = _internal.compareEnable;
            CompareOp = _internal.compareOp;
            MinLod = _internal.minLod;
            MaxLod = _internal.maxLod;
            BorderColor = _internal.borderColor;
            UnnormalizedCoordinates = _internal.unnormalizedCoordinates;
        }

        public StructureType SType => StructureType.SamplerCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public Filter MagFilter { get; set; }
        public Filter MinFilter { get; set; }
        public SamplerMipmapMode MipmapMode { get; set; }
        public SamplerAddressMode AddressModeU { get; set; }
        public SamplerAddressMode AddressModeV { get; set; }
        public SamplerAddressMode AddressModeW { get; set; }
        public float MipLodBias { get; set; }
        public bool AnisotropyEnable { get; set; }
        public float MaxAnisotropy { get; set; }
        public bool CompareEnable { get; set; }
        public CompareOp CompareOp { get; set; }
        public float MinLod { get; set; }
        public float MaxLod { get; set; }
        public BorderColor BorderColor { get; set; }
        public bool UnnormalizedCoordinates { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSamplerCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSamplerCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.magFilter = MagFilter;
            _internal.minFilter = MinFilter;
            _internal.mipmapMode = MipmapMode;
            _internal.addressModeU = AddressModeU;
            _internal.addressModeV = AddressModeV;
            _internal.addressModeW = AddressModeW;
            _internal.mipLodBias = MipLodBias;
            _internal.anisotropyEnable = AnisotropyEnable;
            _internal.maxAnisotropy = MaxAnisotropy;
            _internal.compareEnable = CompareEnable;
            _internal.compareOp = CompareOp;
            _internal.minLod = MinLod;
            _internal.maxLod = MaxLod;
            _internal.borderColor = BorderColor;
            _internal.unnormalizedCoordinates = UnnormalizedCoordinates;
            return _internal;
        }
    }

    public partial class DescriptorSetLayoutBinding : DisposableObject
    {
        private StructReference refpImmutableSamplers;

        public DescriptorSetLayoutBinding()
        {
        }

        public DescriptorSetLayoutBinding(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBinding _internal)
        {
            Binding = _internal.binding;
            DescriptorType = _internal.descriptorType;
            DescriptorCount = _internal.descriptorCount;
            StageFlags = _internal.stageFlags;
            PImmutableSamplers = new Sampler(Marshal.PtrToStructure<Sampler>(_internal.pImmutableSamplers));
            Marshal.FreeHGlobal(_internal.pImmutableSamplers);
        }

        public uint Binding { get; set; }
        public DescriptorType DescriptorType { get; set; }
        public uint DescriptorCount { get; set; }
        public uint StageFlags { get; set; }
        public Sampler PImmutableSamplers { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBinding ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBinding();
            _internal.binding = Binding;
            _internal.descriptorType = DescriptorType;
            _internal.descriptorCount = DescriptorCount;
            _internal.stageFlags = StageFlags;
            refpImmutableSamplers?.Dispose();
            if (PImmutableSamplers != null)
            {
                AdamantiumVulkan.Core.Interop.VkSampler_T struct0 = PImmutableSamplers;
                refpImmutableSamplers = new StructReference(struct0);
                _internal.pImmutableSamplers = refpImmutableSamplers.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpImmutableSamplers?.Dispose();
        }

    }

    public partial class DescriptorSetLayoutCreateInfo : DisposableObject
    {
        private GCHandleReference refpBindings;

        public DescriptorSetLayoutCreateInfo()
        {
        }

        public DescriptorSetLayoutCreateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            BindingCount = _internal.bindingCount;
            PBindings = new DescriptorSetLayoutBinding[_internal.bindingCount];
            MarshalUtils.IntPtrToManagedArray<DescriptorSetLayoutBinding>(_internal.pBindings, PBindings);
            Marshal.FreeHGlobal(_internal.pBindings);
        }

        public StructureType SType => StructureType.DescriptorSetLayoutCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint BindingCount { get; set; }
        public DescriptorSetLayoutBinding[] PBindings { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.bindingCount = BindingCount;
            refpBindings?.Dispose();
            if (PBindings != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBinding[BindingCount];
                for (int i = 0; i < PBindings.Length; ++i)
                {
                    tmpArray0[i] = PBindings[i].ToInternal();
                }
                refpBindings = new GCHandleReference(tmpArray0);
                _internal.pBindings = refpBindings.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBindings?.Dispose();
        }

    }

    public partial class DescriptorPoolSize
    {
        public DescriptorPoolSize()
        {
        }

        public DescriptorPoolSize(AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize _internal)
        {
            Type = _internal.type;
            DescriptorCount = _internal.descriptorCount;
        }

        public DescriptorType Type { get; set; }
        public uint DescriptorCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize();
            _internal.type = Type;
            _internal.descriptorCount = DescriptorCount;
            return _internal;
        }
    }

    public partial class DescriptorPoolCreateInfo : DisposableObject
    {
        private StructReference refpPoolSizes;

        public DescriptorPoolCreateInfo()
        {
        }

        public DescriptorPoolCreateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            MaxSets = _internal.maxSets;
            PoolSizeCount = _internal.poolSizeCount;
            PPoolSizes = new DescriptorPoolSize(Marshal.PtrToStructure<VkDescriptorPoolSize>(_internal.pPoolSizes));
            Marshal.FreeHGlobal(_internal.pPoolSizes);
        }

        public StructureType SType => StructureType.DescriptorPoolCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint MaxSets { get; set; }
        public uint PoolSizeCount { get; set; }
        public DescriptorPoolSize PPoolSizes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.maxSets = MaxSets;
            _internal.poolSizeCount = PoolSizeCount;
            refpPoolSizes?.Dispose();
            if (PPoolSizes != null)
            {
                var struct0 = PPoolSizes.ToInternal();
                refpPoolSizes = new StructReference(struct0);
                _internal.pPoolSizes = refpPoolSizes.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpPoolSizes?.Dispose();
        }

    }

    public partial class DescriptorSetAllocateInfo : DisposableObject
    {
        private GCHandleReference refpSetLayouts;

        public DescriptorSetAllocateInfo()
        {
        }

        public DescriptorSetAllocateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorSetAllocateInfo _internal)
        {
            PNext = _internal.pNext;
            DescriptorPool = new DescriptorPool(_internal.descriptorPool);
            DescriptorSetCount = _internal.descriptorSetCount;
            PSetLayouts = new DescriptorSetLayout[_internal.descriptorSetCount];
            MarshalUtils.IntPtrToManagedArray<DescriptorSetLayout>(_internal.pSetLayouts, PSetLayouts);
            Marshal.FreeHGlobal(_internal.pSetLayouts);
        }

        public StructureType SType => StructureType.DescriptorSetAllocateInfo;
        public System.IntPtr PNext { get; set; }
        public DescriptorPool DescriptorPool { get; set; }
        public uint DescriptorSetCount { get; set; }
        public DescriptorSetLayout[] PSetLayouts { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetAllocateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetAllocateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.descriptorPool = DescriptorPool;
            _internal.descriptorSetCount = DescriptorSetCount;
            refpSetLayouts?.Dispose();
            if (PSetLayouts != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T[DescriptorSetCount];
                for (int i = 0; i < PSetLayouts.Length; ++i)
                {
                    tmpArray0[i] = PSetLayouts[i];
                }
                refpSetLayouts = new GCHandleReference(tmpArray0);
                _internal.pSetLayouts = refpSetLayouts.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSetLayouts?.Dispose();
        }

    }

    public partial class DescriptorImageInfo
    {
        public DescriptorImageInfo()
        {
        }

        public DescriptorImageInfo(AdamantiumVulkan.Core.Interop.VkDescriptorImageInfo _internal)
        {
            Sampler = new Sampler(_internal.sampler);
            ImageView = new ImageView(_internal.imageView);
            ImageLayout = _internal.imageLayout;
        }

        public Sampler Sampler { get; set; }
        public ImageView ImageView { get; set; }
        public ImageLayout ImageLayout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorImageInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorImageInfo();
            _internal.sampler = Sampler;
            _internal.imageView = ImageView;
            _internal.imageLayout = ImageLayout;
            return _internal;
        }
    }

    public partial class DescriptorBufferInfo
    {
        public DescriptorBufferInfo()
        {
        }

        public DescriptorBufferInfo(AdamantiumVulkan.Core.Interop.VkDescriptorBufferInfo _internal)
        {
            Buffer = new Buffer(_internal.buffer);
            Offset = _internal.offset;
            Range = _internal.range;
        }

        public Buffer Buffer { get; set; }
        public ulong Offset { get; set; }
        public ulong Range { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorBufferInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorBufferInfo();
            _internal.buffer = Buffer;
            _internal.offset = Offset;
            _internal.range = Range;
            return _internal;
        }
    }

    public partial class WriteDescriptorSet : DisposableObject
    {
        private StructReference refpImageInfo;

        private StructReference refpBufferInfo;

        private StructReference refpTexelBufferView;

        public WriteDescriptorSet()
        {
        }

        public WriteDescriptorSet(AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet _internal)
        {
            PNext = _internal.pNext;
            DstSet = new DescriptorSet(_internal.dstSet);
            DstBinding = _internal.dstBinding;
            DstArrayElement = _internal.dstArrayElement;
            DescriptorCount = _internal.descriptorCount;
            DescriptorType = _internal.descriptorType;
            PImageInfo = new DescriptorImageInfo(Marshal.PtrToStructure<VkDescriptorImageInfo>(_internal.pImageInfo));
            Marshal.FreeHGlobal(_internal.pImageInfo);
            PBufferInfo = new DescriptorBufferInfo(Marshal.PtrToStructure<VkDescriptorBufferInfo>(_internal.pBufferInfo));
            Marshal.FreeHGlobal(_internal.pBufferInfo);
            PTexelBufferView = new BufferView(Marshal.PtrToStructure<BufferView>(_internal.pTexelBufferView));
            Marshal.FreeHGlobal(_internal.pTexelBufferView);
        }

        public StructureType SType => StructureType.WriteDescriptorSet;
        public System.IntPtr PNext { get; set; }
        public DescriptorSet DstSet { get; set; }
        public uint DstBinding { get; set; }
        public uint DstArrayElement { get; set; }
        public uint DescriptorCount { get; set; }
        public DescriptorType DescriptorType { get; set; }
        public DescriptorImageInfo PImageInfo { get; set; }
        public DescriptorBufferInfo PBufferInfo { get; set; }
        public BufferView PTexelBufferView { get; set; }

        public AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.dstSet = DstSet;
            _internal.dstBinding = DstBinding;
            _internal.dstArrayElement = DstArrayElement;
            _internal.descriptorCount = DescriptorCount;
            _internal.descriptorType = DescriptorType;
            refpImageInfo?.Dispose();
            if (PImageInfo != null)
            {
                var struct0 = PImageInfo.ToInternal();
                refpImageInfo = new StructReference(struct0);
                _internal.pImageInfo = refpImageInfo.Handle;
            }
            refpBufferInfo?.Dispose();
            if (PBufferInfo != null)
            {
                var struct1 = PBufferInfo.ToInternal();
                refpBufferInfo = new StructReference(struct1);
                _internal.pBufferInfo = refpBufferInfo.Handle;
            }
            refpTexelBufferView?.Dispose();
            if (PTexelBufferView != null)
            {
                AdamantiumVulkan.Core.Interop.VkBufferView_T struct2 = PTexelBufferView;
                refpTexelBufferView = new StructReference(struct2);
                _internal.pTexelBufferView = refpTexelBufferView.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpImageInfo?.Dispose();
            refpBufferInfo?.Dispose();
            refpTexelBufferView?.Dispose();
        }

    }

    public partial class CopyDescriptorSet : DisposableObject
    {
        public CopyDescriptorSet()
        {
        }

        public CopyDescriptorSet(AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet _internal)
        {
            PNext = _internal.pNext;
            SrcSet = new DescriptorSet(_internal.srcSet);
            SrcBinding = _internal.srcBinding;
            SrcArrayElement = _internal.srcArrayElement;
            DstSet = new DescriptorSet(_internal.dstSet);
            DstBinding = _internal.dstBinding;
            DstArrayElement = _internal.dstArrayElement;
            DescriptorCount = _internal.descriptorCount;
        }

        public StructureType SType => StructureType.CopyDescriptorSet;
        public System.IntPtr PNext { get; set; }
        public DescriptorSet SrcSet { get; set; }
        public uint SrcBinding { get; set; }
        public uint SrcArrayElement { get; set; }
        public DescriptorSet DstSet { get; set; }
        public uint DstBinding { get; set; }
        public uint DstArrayElement { get; set; }
        public uint DescriptorCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcSet = SrcSet;
            _internal.srcBinding = SrcBinding;
            _internal.srcArrayElement = SrcArrayElement;
            _internal.dstSet = DstSet;
            _internal.dstBinding = DstBinding;
            _internal.dstArrayElement = DstArrayElement;
            _internal.descriptorCount = DescriptorCount;
            return _internal;
        }
    }

    public partial class FramebufferCreateInfo : DisposableObject
    {
        private GCHandleReference refpAttachments;

        public FramebufferCreateInfo()
        {
        }

        public FramebufferCreateInfo(AdamantiumVulkan.Core.Interop.VkFramebufferCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            RenderPass = new RenderPass(_internal.renderPass);
            AttachmentCount = _internal.attachmentCount;
            PAttachments = new ImageView[_internal.attachmentCount];
            MarshalUtils.IntPtrToManagedArray<ImageView>(_internal.pAttachments, PAttachments);
            Marshal.FreeHGlobal(_internal.pAttachments);
            Width = _internal.width;
            Height = _internal.height;
            Layers = _internal.layers;
        }

        public StructureType SType => StructureType.FramebufferCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public RenderPass RenderPass { get; set; }
        public uint AttachmentCount { get; set; }
        public ImageView[] PAttachments { get; set; }
        public uint Width { get; set; }
        public uint Height { get; set; }
        public uint Layers { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFramebufferCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFramebufferCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.renderPass = RenderPass;
            _internal.attachmentCount = AttachmentCount;
            refpAttachments?.Dispose();
            if (PAttachments != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkImageView_T[AttachmentCount];
                for (int i = 0; i < PAttachments.Length; ++i)
                {
                    tmpArray0[i] = PAttachments[i];
                }
                refpAttachments = new GCHandleReference(tmpArray0);
                _internal.pAttachments = refpAttachments.Handle;
            }
            _internal.width = Width;
            _internal.height = Height;
            _internal.layers = Layers;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttachments?.Dispose();
        }

    }

    public partial class AttachmentDescription
    {
        public AttachmentDescription()
        {
        }

        public AttachmentDescription(AdamantiumVulkan.Core.Interop.VkAttachmentDescription _internal)
        {
            Flags = _internal.flags;
            Format = _internal.format;
            Samples = _internal.samples;
            LoadOp = _internal.loadOp;
            StoreOp = _internal.storeOp;
            StencilLoadOp = _internal.stencilLoadOp;
            StencilStoreOp = _internal.stencilStoreOp;
            InitialLayout = _internal.initialLayout;
            FinalLayout = _internal.finalLayout;
        }

        public uint Flags { get; set; }
        public Format Format { get; set; }
        public SampleCountFlagBits Samples { get; set; }
        public AttachmentLoadOp LoadOp { get; set; }
        public AttachmentStoreOp StoreOp { get; set; }
        public AttachmentLoadOp StencilLoadOp { get; set; }
        public AttachmentStoreOp StencilStoreOp { get; set; }
        public ImageLayout InitialLayout { get; set; }
        public ImageLayout FinalLayout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAttachmentDescription ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAttachmentDescription();
            _internal.flags = Flags;
            _internal.format = Format;
            _internal.samples = Samples;
            _internal.loadOp = LoadOp;
            _internal.storeOp = StoreOp;
            _internal.stencilLoadOp = StencilLoadOp;
            _internal.stencilStoreOp = StencilStoreOp;
            _internal.initialLayout = InitialLayout;
            _internal.finalLayout = FinalLayout;
            return _internal;
        }
    }

    public partial class AttachmentReference
    {
        public AttachmentReference()
        {
        }

        public AttachmentReference(AdamantiumVulkan.Core.Interop.VkAttachmentReference _internal)
        {
            Attachment = _internal.attachment;
            Layout = _internal.layout;
        }

        public uint Attachment { get; set; }
        public ImageLayout Layout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAttachmentReference ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAttachmentReference();
            _internal.attachment = Attachment;
            _internal.layout = Layout;
            return _internal;
        }
    }

    public partial class SubpassDescription : DisposableObject
    {
        private GCHandleReference refpInputAttachments;

        private GCHandleReference refpColorAttachments;

        private GCHandleReference refpResolveAttachments;

        private StructReference refpDepthStencilAttachment;

        private GCHandleReference refpPreserveAttachments;

        public SubpassDescription()
        {
        }

        public SubpassDescription(AdamantiumVulkan.Core.Interop.VkSubpassDescription _internal)
        {
            Flags = _internal.flags;
            PipelineBindPoint = _internal.pipelineBindPoint;
            InputAttachmentCount = _internal.inputAttachmentCount;
            PInputAttachments = new AttachmentReference[_internal.inputAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference>(_internal.pInputAttachments, PInputAttachments);
            Marshal.FreeHGlobal(_internal.pInputAttachments);
            ColorAttachmentCount = _internal.colorAttachmentCount;
            PColorAttachments = new AttachmentReference[_internal.colorAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference>(_internal.pColorAttachments, PColorAttachments);
            Marshal.FreeHGlobal(_internal.pColorAttachments);
            PResolveAttachments = new AttachmentReference[_internal.colorAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference>(_internal.pResolveAttachments, PResolveAttachments);
            Marshal.FreeHGlobal(_internal.pResolveAttachments);
            PDepthStencilAttachment = new AttachmentReference(Marshal.PtrToStructure<VkAttachmentReference>(_internal.pDepthStencilAttachment));
            Marshal.FreeHGlobal(_internal.pDepthStencilAttachment);
            PreserveAttachmentCount = _internal.preserveAttachmentCount;
            PPreserveAttachments = new uint[_internal.preserveAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pPreserveAttachments, PPreserveAttachments);
            Marshal.FreeHGlobal(_internal.pPreserveAttachments);
        }

        public uint Flags { get; set; }
        public PipelineBindPoint PipelineBindPoint { get; set; }
        public uint InputAttachmentCount { get; set; }
        public AttachmentReference[] PInputAttachments { get; set; }
        public uint ColorAttachmentCount { get; set; }
        public AttachmentReference[] PColorAttachments { get; set; }
        public AttachmentReference[] PResolveAttachments { get; set; }
        public AttachmentReference PDepthStencilAttachment { get; set; }
        public uint PreserveAttachmentCount { get; set; }
        public uint[] PPreserveAttachments { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassDescription ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDescription();
            _internal.flags = Flags;
            _internal.pipelineBindPoint = PipelineBindPoint;
            _internal.inputAttachmentCount = InputAttachmentCount;
            refpInputAttachments?.Dispose();
            if (PInputAttachments != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[InputAttachmentCount];
                for (int i = 0; i < PInputAttachments.Length; ++i)
                {
                    tmpArray0[i] = PInputAttachments[i].ToInternal();
                }
                refpInputAttachments = new GCHandleReference(tmpArray0);
                _internal.pInputAttachments = refpInputAttachments.Handle;
            }
            _internal.colorAttachmentCount = ColorAttachmentCount;
            refpColorAttachments?.Dispose();
            if (PColorAttachments != null)
            {
                var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[ColorAttachmentCount];
                for (int i = 0; i < PColorAttachments.Length; ++i)
                {
                    tmpArray1[i] = PColorAttachments[i].ToInternal();
                }
                refpColorAttachments = new GCHandleReference(tmpArray1);
                _internal.pColorAttachments = refpColorAttachments.Handle;
            }
            refpResolveAttachments?.Dispose();
            if (PResolveAttachments != null)
            {
                var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[ColorAttachmentCount];
                for (int i = 0; i < PResolveAttachments.Length; ++i)
                {
                    tmpArray2[i] = PResolveAttachments[i].ToInternal();
                }
                refpResolveAttachments = new GCHandleReference(tmpArray2);
                _internal.pResolveAttachments = refpResolveAttachments.Handle;
            }
            refpDepthStencilAttachment?.Dispose();
            if (PDepthStencilAttachment != null)
            {
                var struct0 = PDepthStencilAttachment.ToInternal();
                refpDepthStencilAttachment = new StructReference(struct0);
                _internal.pDepthStencilAttachment = refpDepthStencilAttachment.Handle;
            }
            _internal.preserveAttachmentCount = PreserveAttachmentCount;
            refpPreserveAttachments?.Dispose();
            if (PPreserveAttachments != null)
            {
                var tmpArray3 = new uint[PreserveAttachmentCount];
                for (int i = 0; i < PPreserveAttachments.Length; ++i)
                {
                    tmpArray3[i] = PPreserveAttachments[i];
                }
                refpPreserveAttachments = new GCHandleReference(tmpArray3);
                _internal.pPreserveAttachments = refpPreserveAttachments.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpInputAttachments?.Dispose();
            refpColorAttachments?.Dispose();
            refpResolveAttachments?.Dispose();
            refpDepthStencilAttachment?.Dispose();
            refpPreserveAttachments?.Dispose();
        }

    }

    public partial class SubpassDependency
    {
        public SubpassDependency()
        {
        }

        public SubpassDependency(AdamantiumVulkan.Core.Interop.VkSubpassDependency _internal)
        {
            SrcSubpass = _internal.srcSubpass;
            DstSubpass = _internal.dstSubpass;
            SrcStageMask = _internal.srcStageMask;
            DstStageMask = _internal.dstStageMask;
            SrcAccessMask = _internal.srcAccessMask;
            DstAccessMask = _internal.dstAccessMask;
            DependencyFlags = _internal.dependencyFlags;
        }

        public uint SrcSubpass { get; set; }
        public uint DstSubpass { get; set; }
        public uint SrcStageMask { get; set; }
        public uint DstStageMask { get; set; }
        public uint SrcAccessMask { get; set; }
        public uint DstAccessMask { get; set; }
        public uint DependencyFlags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassDependency ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDependency();
            _internal.srcSubpass = SrcSubpass;
            _internal.dstSubpass = DstSubpass;
            _internal.srcStageMask = SrcStageMask;
            _internal.dstStageMask = DstStageMask;
            _internal.srcAccessMask = SrcAccessMask;
            _internal.dstAccessMask = DstAccessMask;
            _internal.dependencyFlags = DependencyFlags;
            return _internal;
        }
    }

    public partial class RenderPassCreateInfo : DisposableObject
    {
        private GCHandleReference refpAttachments;

        private GCHandleReference refpSubpasses;

        private GCHandleReference refpDependencies;

        public RenderPassCreateInfo()
        {
        }

        public RenderPassCreateInfo(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            AttachmentCount = _internal.attachmentCount;
            PAttachments = new AttachmentDescription[_internal.attachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentDescription>(_internal.pAttachments, PAttachments);
            Marshal.FreeHGlobal(_internal.pAttachments);
            SubpassCount = _internal.subpassCount;
            PSubpasses = new SubpassDescription[_internal.subpassCount];
            MarshalUtils.IntPtrToManagedArray<SubpassDescription>(_internal.pSubpasses, PSubpasses);
            Marshal.FreeHGlobal(_internal.pSubpasses);
            DependencyCount = _internal.dependencyCount;
            PDependencies = new SubpassDependency[_internal.dependencyCount];
            MarshalUtils.IntPtrToManagedArray<SubpassDependency>(_internal.pDependencies, PDependencies);
            Marshal.FreeHGlobal(_internal.pDependencies);
        }

        public StructureType SType => StructureType.RenderPassCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint AttachmentCount { get; set; }
        public AttachmentDescription[] PAttachments { get; set; }
        public uint SubpassCount { get; set; }
        public SubpassDescription[] PSubpasses { get; set; }
        public uint DependencyCount { get; set; }
        public SubpassDependency[] PDependencies { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.attachmentCount = AttachmentCount;
            refpAttachments?.Dispose();
            if (PAttachments != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkAttachmentDescription[AttachmentCount];
                for (int i = 0; i < PAttachments.Length; ++i)
                {
                    tmpArray0[i] = PAttachments[i].ToInternal();
                }
                refpAttachments = new GCHandleReference(tmpArray0);
                _internal.pAttachments = refpAttachments.Handle;
            }
            _internal.subpassCount = SubpassCount;
            refpSubpasses?.Dispose();
            if (PSubpasses != null)
            {
                var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkSubpassDescription[SubpassCount];
                for (int i = 0; i < PSubpasses.Length; ++i)
                {
                    tmpArray1[i] = PSubpasses[i].ToInternal();
                }
                refpSubpasses = new GCHandleReference(tmpArray1);
                _internal.pSubpasses = refpSubpasses.Handle;
            }
            _internal.dependencyCount = DependencyCount;
            refpDependencies?.Dispose();
            if (PDependencies != null)
            {
                var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkSubpassDependency[DependencyCount];
                for (int i = 0; i < PDependencies.Length; ++i)
                {
                    tmpArray2[i] = PDependencies[i].ToInternal();
                }
                refpDependencies = new GCHandleReference(tmpArray2);
                _internal.pDependencies = refpDependencies.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttachments?.Dispose();
            refpSubpasses?.Dispose();
            refpDependencies?.Dispose();
        }

    }

    public partial class CommandPoolCreateInfo : DisposableObject
    {
        public CommandPoolCreateInfo()
        {
        }

        public CommandPoolCreateInfo(AdamantiumVulkan.Core.Interop.VkCommandPoolCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            QueueFamilyIndex = _internal.queueFamilyIndex;
        }

        public StructureType SType => StructureType.CommandPoolCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint QueueFamilyIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCommandPoolCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCommandPoolCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.queueFamilyIndex = QueueFamilyIndex;
            return _internal;
        }
    }

    public partial class CommandBufferAllocateInfo : DisposableObject
    {
        public CommandBufferAllocateInfo()
        {
        }

        public CommandBufferAllocateInfo(AdamantiumVulkan.Core.Interop.VkCommandBufferAllocateInfo _internal)
        {
            PNext = _internal.pNext;
            CommandPool = new CommandPool(_internal.commandPool);
            Level = _internal.level;
            CommandBufferCount = _internal.commandBufferCount;
        }

        public StructureType SType => StructureType.CommandBufferAllocateInfo;
        public System.IntPtr PNext { get; set; }
        public CommandPool CommandPool { get; set; }
        public CommandBufferLevel Level { get; set; }
        public uint CommandBufferCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCommandBufferAllocateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCommandBufferAllocateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.commandPool = CommandPool;
            _internal.level = Level;
            _internal.commandBufferCount = CommandBufferCount;
            return _internal;
        }
    }

    public partial class CommandBufferInheritanceInfo : DisposableObject
    {
        public CommandBufferInheritanceInfo()
        {
        }

        public CommandBufferInheritanceInfo(AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo _internal)
        {
            PNext = _internal.pNext;
            RenderPass = new RenderPass(_internal.renderPass);
            Subpass = _internal.subpass;
            Framebuffer = new Framebuffer(_internal.framebuffer);
            OcclusionQueryEnable = _internal.occlusionQueryEnable;
            QueryFlags = _internal.queryFlags;
            PipelineStatistics = _internal.pipelineStatistics;
        }

        public StructureType SType => StructureType.CommandBufferInheritanceInfo;
        public System.IntPtr PNext { get; set; }
        public RenderPass RenderPass { get; set; }
        public uint Subpass { get; set; }
        public Framebuffer Framebuffer { get; set; }
        public bool OcclusionQueryEnable { get; set; }
        public uint QueryFlags { get; set; }
        public uint PipelineStatistics { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.renderPass = RenderPass;
            _internal.subpass = Subpass;
            _internal.framebuffer = Framebuffer;
            _internal.occlusionQueryEnable = OcclusionQueryEnable;
            _internal.queryFlags = QueryFlags;
            _internal.pipelineStatistics = PipelineStatistics;
            return _internal;
        }
    }

    public partial class CommandBufferBeginInfo : DisposableObject
    {
        private StructReference refpInheritanceInfo;

        public CommandBufferBeginInfo()
        {
        }

        public CommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.VkCommandBufferBeginInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PInheritanceInfo = new CommandBufferInheritanceInfo(Marshal.PtrToStructure<VkCommandBufferInheritanceInfo>(_internal.pInheritanceInfo));
            Marshal.FreeHGlobal(_internal.pInheritanceInfo);
        }

        public StructureType SType => StructureType.CommandBufferBeginInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public CommandBufferInheritanceInfo PInheritanceInfo { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCommandBufferBeginInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCommandBufferBeginInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            refpInheritanceInfo?.Dispose();
            if (PInheritanceInfo != null)
            {
                var struct0 = PInheritanceInfo.ToInternal();
                refpInheritanceInfo = new StructReference(struct0);
                _internal.pInheritanceInfo = refpInheritanceInfo.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpInheritanceInfo?.Dispose();
        }

    }

    public partial class BufferCopy
    {
        public BufferCopy()
        {
        }

        public BufferCopy(AdamantiumVulkan.Core.Interop.VkBufferCopy _internal)
        {
            SrcOffset = _internal.srcOffset;
            DstOffset = _internal.dstOffset;
            Size = _internal.size;
        }

        public ulong SrcOffset { get; set; }
        public ulong DstOffset { get; set; }
        public ulong Size { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferCopy ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferCopy();
            _internal.srcOffset = SrcOffset;
            _internal.dstOffset = DstOffset;
            _internal.size = Size;
            return _internal;
        }
    }

    public partial class ImageSubresourceLayers
    {
        public ImageSubresourceLayers()
        {
        }

        public ImageSubresourceLayers(AdamantiumVulkan.Core.Interop.VkImageSubresourceLayers _internal)
        {
            AspectMask = _internal.aspectMask;
            MipLevel = _internal.mipLevel;
            BaseArrayLayer = _internal.baseArrayLayer;
            LayerCount = _internal.layerCount;
        }

        public uint AspectMask { get; set; }
        public uint MipLevel { get; set; }
        public uint BaseArrayLayer { get; set; }
        public uint LayerCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageSubresourceLayers ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageSubresourceLayers();
            _internal.aspectMask = AspectMask;
            _internal.mipLevel = MipLevel;
            _internal.baseArrayLayer = BaseArrayLayer;
            _internal.layerCount = LayerCount;
            return _internal;
        }
    }

    public partial class ImageCopy
    {
        public ImageCopy()
        {
        }

        public ImageCopy(AdamantiumVulkan.Core.Interop.VkImageCopy _internal)
        {
            SrcSubresource = new ImageSubresourceLayers(_internal.srcSubresource);
            SrcOffset = new Offset3D(_internal.srcOffset);
            DstSubresource = new ImageSubresourceLayers(_internal.dstSubresource);
            DstOffset = new Offset3D(_internal.dstOffset);
            Extent = new Extent3D(_internal.extent);
        }

        public ImageSubresourceLayers SrcSubresource { get; set; }
        public Offset3D SrcOffset { get; set; }
        public ImageSubresourceLayers DstSubresource { get; set; }
        public Offset3D DstOffset { get; set; }
        public Extent3D Extent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageCopy ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageCopy();
            if (SrcSubresource != null)
            {
                _internal.srcSubresource = SrcSubresource.ToInternal();
            }
            if (SrcOffset != null)
            {
                _internal.srcOffset = SrcOffset.ToInternal();
            }
            if (DstSubresource != null)
            {
                _internal.dstSubresource = DstSubresource.ToInternal();
            }
            if (DstOffset != null)
            {
                _internal.dstOffset = DstOffset.ToInternal();
            }
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ImageBlit
    {
        public ImageBlit()
        {
        }

        public ImageBlit(AdamantiumVulkan.Core.Interop.VkImageBlit _internal)
        {
            SrcSubresource = new ImageSubresourceLayers(_internal.srcSubresource);
            SrcOffsets = new Offset3D[2];
            for (int i = 0; i < 2; ++i)
            {
                SrcOffsets[i] = new Offset3D(_internal.srcOffsets[i]);
            }
            DstSubresource = new ImageSubresourceLayers(_internal.dstSubresource);
            DstOffsets = new Offset3D[2];
            for (int i = 0; i < 2; ++i)
            {
                DstOffsets[i] = new Offset3D(_internal.dstOffsets[i]);
            }
        }

        public ImageSubresourceLayers SrcSubresource { get; set; }
        public Offset3D[] SrcOffsets { get; set; }
        public ImageSubresourceLayers DstSubresource { get; set; }
        public Offset3D[] DstOffsets { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageBlit ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageBlit();
            if (SrcSubresource != null)
            {
                _internal.srcSubresource = SrcSubresource.ToInternal();
            }
            if(SrcOffsets != null)
            {
                if (SrcOffsets.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(SrcOffsets), "Array is out of bounds. Size should not be more than 2");

                _internal.srcOffsets = new VkOffset3D[2];
                for (int i = 0; i < SrcOffsets.Length; ++i)
                {
                    _internal.srcOffsets[i] = SrcOffsets[i].ToInternal();
                }
            }
            if (DstSubresource != null)
            {
                _internal.dstSubresource = DstSubresource.ToInternal();
            }
            if(DstOffsets != null)
            {
                if (DstOffsets.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(DstOffsets), "Array is out of bounds. Size should not be more than 2");

                _internal.dstOffsets = new VkOffset3D[2];
                for (int i = 0; i < DstOffsets.Length; ++i)
                {
                    _internal.dstOffsets[i] = DstOffsets[i].ToInternal();
                }
            }
            return _internal;
        }
    }

    public partial class BufferImageCopy
    {
        public BufferImageCopy()
        {
        }

        public BufferImageCopy(AdamantiumVulkan.Core.Interop.VkBufferImageCopy _internal)
        {
            BufferOffset = _internal.bufferOffset;
            BufferRowLength = _internal.bufferRowLength;
            BufferImageHeight = _internal.bufferImageHeight;
            ImageSubresource = new ImageSubresourceLayers(_internal.imageSubresource);
            ImageOffset = new Offset3D(_internal.imageOffset);
            ImageExtent = new Extent3D(_internal.imageExtent);
        }

        public ulong BufferOffset { get; set; }
        public uint BufferRowLength { get; set; }
        public uint BufferImageHeight { get; set; }
        public ImageSubresourceLayers ImageSubresource { get; set; }
        public Offset3D ImageOffset { get; set; }
        public Extent3D ImageExtent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferImageCopy ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferImageCopy();
            _internal.bufferOffset = BufferOffset;
            _internal.bufferRowLength = BufferRowLength;
            _internal.bufferImageHeight = BufferImageHeight;
            if (ImageSubresource != null)
            {
                _internal.imageSubresource = ImageSubresource.ToInternal();
            }
            if (ImageOffset != null)
            {
                _internal.imageOffset = ImageOffset.ToInternal();
            }
            if (ImageExtent != null)
            {
                _internal.imageExtent = ImageExtent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ClearDepthStencilValue
    {
        public ClearDepthStencilValue()
        {
        }

        public ClearDepthStencilValue(AdamantiumVulkan.Core.Interop.VkClearDepthStencilValue _internal)
        {
            Depth = _internal.depth;
            Stencil = _internal.stencil;
        }

        public float Depth { get; set; }
        public uint Stencil { get; set; }

        public AdamantiumVulkan.Core.Interop.VkClearDepthStencilValue ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkClearDepthStencilValue();
            _internal.depth = Depth;
            _internal.stencil = Stencil;
            return _internal;
        }
    }

    public partial class ClearAttachment
    {
        public ClearAttachment()
        {
        }

        public ClearAttachment(AdamantiumVulkan.Core.Interop.VkClearAttachment _internal)
        {
            AspectMask = _internal.aspectMask;
            ColorAttachment = _internal.colorAttachment;
            ClearValue = new ClearValue(_internal.clearValue);
        }

        public uint AspectMask { get; set; }
        public uint ColorAttachment { get; set; }
        public ClearValue ClearValue { get; set; }

        public AdamantiumVulkan.Core.Interop.VkClearAttachment ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkClearAttachment();
            _internal.aspectMask = AspectMask;
            _internal.colorAttachment = ColorAttachment;
            if (ClearValue != null)
            {
                _internal.clearValue = ClearValue.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ClearRect
    {
        public ClearRect()
        {
        }

        public ClearRect(AdamantiumVulkan.Core.Interop.VkClearRect _internal)
        {
            Rect = new Rect2D(_internal.rect);
            BaseArrayLayer = _internal.baseArrayLayer;
            LayerCount = _internal.layerCount;
        }

        public Rect2D Rect { get; set; }
        public uint BaseArrayLayer { get; set; }
        public uint LayerCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkClearRect ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkClearRect();
            if (Rect != null)
            {
                _internal.rect = Rect.ToInternal();
            }
            _internal.baseArrayLayer = BaseArrayLayer;
            _internal.layerCount = LayerCount;
            return _internal;
        }
    }

    public partial class ImageResolve
    {
        public ImageResolve()
        {
        }

        public ImageResolve(AdamantiumVulkan.Core.Interop.VkImageResolve _internal)
        {
            SrcSubresource = new ImageSubresourceLayers(_internal.srcSubresource);
            SrcOffset = new Offset3D(_internal.srcOffset);
            DstSubresource = new ImageSubresourceLayers(_internal.dstSubresource);
            DstOffset = new Offset3D(_internal.dstOffset);
            Extent = new Extent3D(_internal.extent);
        }

        public ImageSubresourceLayers SrcSubresource { get; set; }
        public Offset3D SrcOffset { get; set; }
        public ImageSubresourceLayers DstSubresource { get; set; }
        public Offset3D DstOffset { get; set; }
        public Extent3D Extent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageResolve ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageResolve();
            if (SrcSubresource != null)
            {
                _internal.srcSubresource = SrcSubresource.ToInternal();
            }
            if (SrcOffset != null)
            {
                _internal.srcOffset = SrcOffset.ToInternal();
            }
            if (DstSubresource != null)
            {
                _internal.dstSubresource = DstSubresource.ToInternal();
            }
            if (DstOffset != null)
            {
                _internal.dstOffset = DstOffset.ToInternal();
            }
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class MemoryBarrier : DisposableObject
    {
        public MemoryBarrier()
        {
        }

        public MemoryBarrier(AdamantiumVulkan.Core.Interop.VkMemoryBarrier _internal)
        {
            PNext = _internal.pNext;
            SrcAccessMask = _internal.srcAccessMask;
            DstAccessMask = _internal.dstAccessMask;
        }

        public StructureType SType => StructureType.MemoryBarrier;
        public System.IntPtr PNext { get; set; }
        public uint SrcAccessMask { get; set; }
        public uint DstAccessMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryBarrier ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryBarrier();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcAccessMask = SrcAccessMask;
            _internal.dstAccessMask = DstAccessMask;
            return _internal;
        }
    }

    public partial class BufferMemoryBarrier : DisposableObject
    {
        public BufferMemoryBarrier()
        {
        }

        public BufferMemoryBarrier(AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier _internal)
        {
            PNext = _internal.pNext;
            SrcAccessMask = _internal.srcAccessMask;
            DstAccessMask = _internal.dstAccessMask;
            SrcQueueFamilyIndex = _internal.srcQueueFamilyIndex;
            DstQueueFamilyIndex = _internal.dstQueueFamilyIndex;
            Buffer = new Buffer(_internal.buffer);
            Offset = _internal.offset;
            Size = _internal.size;
        }

        public StructureType SType => StructureType.BufferMemoryBarrier;
        public System.IntPtr PNext { get; set; }
        public uint SrcAccessMask { get; set; }
        public uint DstAccessMask { get; set; }
        public uint SrcQueueFamilyIndex { get; set; }
        public uint DstQueueFamilyIndex { get; set; }
        public Buffer Buffer { get; set; }
        public ulong Offset { get; set; }
        public ulong Size { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcAccessMask = SrcAccessMask;
            _internal.dstAccessMask = DstAccessMask;
            _internal.srcQueueFamilyIndex = SrcQueueFamilyIndex;
            _internal.dstQueueFamilyIndex = DstQueueFamilyIndex;
            _internal.buffer = Buffer;
            _internal.offset = Offset;
            _internal.size = Size;
            return _internal;
        }
    }

    public partial class ImageMemoryBarrier : DisposableObject
    {
        public ImageMemoryBarrier()
        {
        }

        public ImageMemoryBarrier(AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier _internal)
        {
            PNext = _internal.pNext;
            SrcAccessMask = _internal.srcAccessMask;
            DstAccessMask = _internal.dstAccessMask;
            OldLayout = _internal.oldLayout;
            NewLayout = _internal.newLayout;
            SrcQueueFamilyIndex = _internal.srcQueueFamilyIndex;
            DstQueueFamilyIndex = _internal.dstQueueFamilyIndex;
            Image = new Image(_internal.image);
            SubresourceRange = new ImageSubresourceRange(_internal.subresourceRange);
        }

        public StructureType SType => StructureType.ImageMemoryBarrier;
        public System.IntPtr PNext { get; set; }
        public uint SrcAccessMask { get; set; }
        public uint DstAccessMask { get; set; }
        public ImageLayout OldLayout { get; set; }
        public ImageLayout NewLayout { get; set; }
        public uint SrcQueueFamilyIndex { get; set; }
        public uint DstQueueFamilyIndex { get; set; }
        public Image Image { get; set; }
        public ImageSubresourceRange SubresourceRange { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcAccessMask = SrcAccessMask;
            _internal.dstAccessMask = DstAccessMask;
            _internal.oldLayout = OldLayout;
            _internal.newLayout = NewLayout;
            _internal.srcQueueFamilyIndex = SrcQueueFamilyIndex;
            _internal.dstQueueFamilyIndex = DstQueueFamilyIndex;
            _internal.image = Image;
            if (SubresourceRange != null)
            {
                _internal.subresourceRange = SubresourceRange.ToInternal();
            }
            return _internal;
        }
    }

    public partial class RenderPassBeginInfo : DisposableObject
    {
        private GCHandleReference refpClearValues;

        public RenderPassBeginInfo()
        {
        }

        public RenderPassBeginInfo(AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo _internal)
        {
            PNext = _internal.pNext;
            RenderPass = new RenderPass(_internal.renderPass);
            Framebuffer = new Framebuffer(_internal.framebuffer);
            RenderArea = new Rect2D(_internal.renderArea);
            ClearValueCount = _internal.clearValueCount;
            PClearValues = new ClearValue[_internal.clearValueCount];
            MarshalUtils.IntPtrToManagedArray<ClearValue>(_internal.pClearValues, PClearValues);
            Marshal.FreeHGlobal(_internal.pClearValues);
        }

        public StructureType SType => StructureType.RenderPassBeginInfo;
        public System.IntPtr PNext { get; set; }
        public RenderPass RenderPass { get; set; }
        public Framebuffer Framebuffer { get; set; }
        public Rect2D RenderArea { get; set; }
        public uint ClearValueCount { get; set; }
        public ClearValue[] PClearValues { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.renderPass = RenderPass;
            _internal.framebuffer = Framebuffer;
            if (RenderArea != null)
            {
                _internal.renderArea = RenderArea.ToInternal();
            }
            _internal.clearValueCount = ClearValueCount;
            refpClearValues?.Dispose();
            if (PClearValues != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkClearValue[ClearValueCount];
                for (int i = 0; i < PClearValues.Length; ++i)
                {
                    tmpArray0[i] = PClearValues[i].ToInternal();
                }
                refpClearValues = new GCHandleReference(tmpArray0);
                _internal.pClearValues = refpClearValues.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpClearValues?.Dispose();
        }

    }

    public partial class DispatchIndirectCommand
    {
        public DispatchIndirectCommand()
        {
        }

        public DispatchIndirectCommand(AdamantiumVulkan.Core.Interop.VkDispatchIndirectCommand _internal)
        {
            X = _internal.x;
            Y = _internal.y;
            Z = _internal.z;
        }

        public uint X { get; set; }
        public uint Y { get; set; }
        public uint Z { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDispatchIndirectCommand ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDispatchIndirectCommand();
            _internal.x = X;
            _internal.y = Y;
            _internal.z = Z;
            return _internal;
        }
    }

    public partial class DrawIndexedIndirectCommand
    {
        public DrawIndexedIndirectCommand()
        {
        }

        public DrawIndexedIndirectCommand(AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand _internal)
        {
            IndexCount = _internal.indexCount;
            InstanceCount = _internal.instanceCount;
            FirstIndex = _internal.firstIndex;
            VertexOffset = _internal.vertexOffset;
            FirstInstance = _internal.firstInstance;
        }

        public uint IndexCount { get; set; }
        public uint InstanceCount { get; set; }
        public uint FirstIndex { get; set; }
        public int VertexOffset { get; set; }
        public uint FirstInstance { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand();
            _internal.indexCount = IndexCount;
            _internal.instanceCount = InstanceCount;
            _internal.firstIndex = FirstIndex;
            _internal.vertexOffset = VertexOffset;
            _internal.firstInstance = FirstInstance;
            return _internal;
        }
    }

    public partial class DrawIndirectCommand
    {
        public DrawIndirectCommand()
        {
        }

        public DrawIndirectCommand(AdamantiumVulkan.Core.Interop.VkDrawIndirectCommand _internal)
        {
            VertexCount = _internal.vertexCount;
            InstanceCount = _internal.instanceCount;
            FirstVertex = _internal.firstVertex;
            FirstInstance = _internal.firstInstance;
        }

        public uint VertexCount { get; set; }
        public uint InstanceCount { get; set; }
        public uint FirstVertex { get; set; }
        public uint FirstInstance { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDrawIndirectCommand ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDrawIndirectCommand();
            _internal.vertexCount = VertexCount;
            _internal.instanceCount = InstanceCount;
            _internal.firstVertex = FirstVertex;
            _internal.firstInstance = FirstInstance;
            return _internal;
        }
    }

    public partial class BaseOutStructure : DisposableObject
    {
        private StructReference refpNext;

        public BaseOutStructure()
        {
        }

        public BaseOutStructure(AdamantiumVulkan.Core.Interop.VkBaseOutStructure _internal)
        {
            SType = _internal.sType;
            PNext = new BaseOutStructure(Marshal.PtrToStructure<VkBaseOutStructure>(_internal.pNext));
            Marshal.FreeHGlobal(_internal.pNext);
        }

        public StructureType SType { get; set; }
        public BaseOutStructure PNext { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBaseOutStructure ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBaseOutStructure();
            _internal.sType = SType;
            refpNext?.Dispose();
            if (PNext != null)
            {
                var struct0 = PNext.ToInternal();
                refpNext = new StructReference(struct0);
                _internal.pNext = refpNext.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

    }

    public partial class BaseInStructure : DisposableObject
    {
        private StructReference refpNext;

        public BaseInStructure()
        {
        }

        public BaseInStructure(AdamantiumVulkan.Core.Interop.VkBaseInStructure _internal)
        {
            SType = _internal.sType;
            PNext = new BaseInStructure(Marshal.PtrToStructure<VkBaseInStructure>(_internal.pNext));
            Marshal.FreeHGlobal(_internal.pNext);
        }

        public StructureType SType { get; set; }
        public BaseInStructure PNext { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBaseInStructure ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBaseInStructure();
            _internal.sType = SType;
            refpNext?.Dispose();
            if (PNext != null)
            {
                var struct0 = PNext.ToInternal();
                refpNext = new StructReference(struct0);
                _internal.pNext = refpNext.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

    }

    public partial class PhysicalDeviceSubgroupProperties : DisposableObject
    {
        public PhysicalDeviceSubgroupProperties()
        {
        }

        public PhysicalDeviceSubgroupProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSubgroupProperties _internal)
        {
            PNext = _internal.pNext;
            SubgroupSize = _internal.subgroupSize;
            SupportedStages = _internal.supportedStages;
            SupportedOperations = _internal.supportedOperations;
            QuadOperationsInAllStages = _internal.quadOperationsInAllStages;
        }

        public StructureType SType => StructureType.PhysicalDeviceSubgroupProperties;
        public System.IntPtr PNext { get; set; }
        public uint SubgroupSize { get; set; }
        public uint SupportedStages { get; set; }
        public uint SupportedOperations { get; set; }
        public bool QuadOperationsInAllStages { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSubgroupProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSubgroupProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.subgroupSize = SubgroupSize;
            _internal.supportedStages = SupportedStages;
            _internal.supportedOperations = SupportedOperations;
            _internal.quadOperationsInAllStages = QuadOperationsInAllStages;
            return _internal;
        }
    }

    public partial class BindBufferMemoryInfo : DisposableObject
    {
        public BindBufferMemoryInfo()
        {
        }

        public BindBufferMemoryInfo(AdamantiumVulkan.Core.Interop.VkBindBufferMemoryInfo _internal)
        {
            PNext = _internal.pNext;
            Buffer = new Buffer(_internal.buffer);
            Memory = new DeviceMemory(_internal.memory);
            MemoryOffset = _internal.memoryOffset;
        }

        public StructureType SType => StructureType.BindBufferMemoryInfo;
        public System.IntPtr PNext { get; set; }
        public Buffer Buffer { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong MemoryOffset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindBufferMemoryInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindBufferMemoryInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.buffer = Buffer;
            _internal.memory = Memory;
            _internal.memoryOffset = MemoryOffset;
            return _internal;
        }
    }

    public partial class BindImageMemoryInfo : DisposableObject
    {
        public BindImageMemoryInfo()
        {
        }

        public BindImageMemoryInfo(AdamantiumVulkan.Core.Interop.VkBindImageMemoryInfo _internal)
        {
            PNext = _internal.pNext;
            Image = new Image(_internal.image);
            Memory = new DeviceMemory(_internal.memory);
            MemoryOffset = _internal.memoryOffset;
        }

        public StructureType SType => StructureType.BindImageMemoryInfo;
        public System.IntPtr PNext { get; set; }
        public Image Image { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong MemoryOffset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindImageMemoryInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindImageMemoryInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.image = Image;
            _internal.memory = Memory;
            _internal.memoryOffset = MemoryOffset;
            return _internal;
        }
    }

    public partial class PhysicalDevice16BitStorageFeatures : DisposableObject
    {
        public PhysicalDevice16BitStorageFeatures()
        {
        }

        public PhysicalDevice16BitStorageFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDevice16BitStorageFeatures _internal)
        {
            PNext = _internal.pNext;
            StorageBuffer16BitAccess = _internal.storageBuffer16BitAccess;
            UniformAndStorageBuffer16BitAccess = _internal.uniformAndStorageBuffer16BitAccess;
            StoragePushConstant16 = _internal.storagePushConstant16;
            StorageInputOutput16 = _internal.storageInputOutput16;
        }

        public StructureType SType => StructureType.PhysicalDevice16bitStorageFeatures;
        public System.IntPtr PNext { get; set; }
        public bool StorageBuffer16BitAccess { get; set; }
        public bool UniformAndStorageBuffer16BitAccess { get; set; }
        public bool StoragePushConstant16 { get; set; }
        public bool StorageInputOutput16 { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDevice16BitStorageFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDevice16BitStorageFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.storageBuffer16BitAccess = StorageBuffer16BitAccess;
            _internal.uniformAndStorageBuffer16BitAccess = UniformAndStorageBuffer16BitAccess;
            _internal.storagePushConstant16 = StoragePushConstant16;
            _internal.storageInputOutput16 = StorageInputOutput16;
            return _internal;
        }
    }

    public partial class MemoryDedicatedRequirements : DisposableObject
    {
        public MemoryDedicatedRequirements()
        {
        }

        public MemoryDedicatedRequirements(AdamantiumVulkan.Core.Interop.VkMemoryDedicatedRequirements _internal)
        {
            PNext = _internal.pNext;
            PrefersDedicatedAllocation = _internal.prefersDedicatedAllocation;
            RequiresDedicatedAllocation = _internal.requiresDedicatedAllocation;
        }

        public StructureType SType => StructureType.MemoryDedicatedRequirements;
        public System.IntPtr PNext { get; set; }
        public bool PrefersDedicatedAllocation { get; set; }
        public bool RequiresDedicatedAllocation { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryDedicatedRequirements ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryDedicatedRequirements();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.prefersDedicatedAllocation = PrefersDedicatedAllocation;
            _internal.requiresDedicatedAllocation = RequiresDedicatedAllocation;
            return _internal;
        }
    }

    public partial class MemoryDedicatedAllocateInfo : DisposableObject
    {
        public MemoryDedicatedAllocateInfo()
        {
        }

        public MemoryDedicatedAllocateInfo(AdamantiumVulkan.Core.Interop.VkMemoryDedicatedAllocateInfo _internal)
        {
            PNext = _internal.pNext;
            Image = new Image(_internal.image);
            Buffer = new Buffer(_internal.buffer);
        }

        public StructureType SType => StructureType.MemoryDedicatedAllocateInfo;
        public System.IntPtr PNext { get; set; }
        public Image Image { get; set; }
        public Buffer Buffer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryDedicatedAllocateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryDedicatedAllocateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.image = Image;
            _internal.buffer = Buffer;
            return _internal;
        }
    }

    public partial class MemoryAllocateFlagsInfo : DisposableObject
    {
        public MemoryAllocateFlagsInfo()
        {
        }

        public MemoryAllocateFlagsInfo(AdamantiumVulkan.Core.Interop.VkMemoryAllocateFlagsInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DeviceMask = _internal.deviceMask;
        }

        public StructureType SType => StructureType.MemoryAllocateFlagsInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint DeviceMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryAllocateFlagsInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryAllocateFlagsInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.deviceMask = DeviceMask;
            return _internal;
        }
    }

    public partial class DeviceGroupRenderPassBeginInfo : DisposableObject
    {
        private StructReference refpDeviceRenderAreas;

        public DeviceGroupRenderPassBeginInfo()
        {
        }

        public DeviceGroupRenderPassBeginInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupRenderPassBeginInfo _internal)
        {
            PNext = _internal.pNext;
            DeviceMask = _internal.deviceMask;
            DeviceRenderAreaCount = _internal.deviceRenderAreaCount;
            PDeviceRenderAreas = new Rect2D(Marshal.PtrToStructure<VkRect2D>(_internal.pDeviceRenderAreas));
            Marshal.FreeHGlobal(_internal.pDeviceRenderAreas);
        }

        public StructureType SType => StructureType.DeviceGroupRenderPassBeginInfo;
        public System.IntPtr PNext { get; set; }
        public uint DeviceMask { get; set; }
        public uint DeviceRenderAreaCount { get; set; }
        public Rect2D PDeviceRenderAreas { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupRenderPassBeginInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupRenderPassBeginInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceMask = DeviceMask;
            _internal.deviceRenderAreaCount = DeviceRenderAreaCount;
            refpDeviceRenderAreas?.Dispose();
            if (PDeviceRenderAreas != null)
            {
                var struct0 = PDeviceRenderAreas.ToInternal();
                refpDeviceRenderAreas = new StructReference(struct0);
                _internal.pDeviceRenderAreas = refpDeviceRenderAreas.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDeviceRenderAreas?.Dispose();
        }

    }

    public partial class DeviceGroupCommandBufferBeginInfo : DisposableObject
    {
        public DeviceGroupCommandBufferBeginInfo()
        {
        }

        public DeviceGroupCommandBufferBeginInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupCommandBufferBeginInfo _internal)
        {
            PNext = _internal.pNext;
            DeviceMask = _internal.deviceMask;
        }

        public StructureType SType => StructureType.DeviceGroupCommandBufferBeginInfo;
        public System.IntPtr PNext { get; set; }
        public uint DeviceMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupCommandBufferBeginInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupCommandBufferBeginInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceMask = DeviceMask;
            return _internal;
        }
    }

    public partial class DeviceGroupSubmitInfo : DisposableObject
    {
        private StructReference refpWaitSemaphoreDeviceIndices;

        private StructReference refpCommandBufferDeviceMasks;

        private StructReference refpSignalSemaphoreDeviceIndices;

        public DeviceGroupSubmitInfo()
        {
        }

        public DeviceGroupSubmitInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo _internal)
        {
            PNext = _internal.pNext;
            WaitSemaphoreCount = _internal.waitSemaphoreCount;
            if(_internal.pWaitSemaphoreDeviceIndices != System.IntPtr.Zero)
            {
                PWaitSemaphoreDeviceIndices = (uint?)_internal.pWaitSemaphoreDeviceIndices;
                Marshal.FreeHGlobal(_internal.pWaitSemaphoreDeviceIndices);
            }
            CommandBufferCount = _internal.commandBufferCount;
            if(_internal.pCommandBufferDeviceMasks != System.IntPtr.Zero)
            {
                PCommandBufferDeviceMasks = (uint?)_internal.pCommandBufferDeviceMasks;
                Marshal.FreeHGlobal(_internal.pCommandBufferDeviceMasks);
            }
            SignalSemaphoreCount = _internal.signalSemaphoreCount;
            if(_internal.pSignalSemaphoreDeviceIndices != System.IntPtr.Zero)
            {
                PSignalSemaphoreDeviceIndices = (uint?)_internal.pSignalSemaphoreDeviceIndices;
                Marshal.FreeHGlobal(_internal.pSignalSemaphoreDeviceIndices);
            }
        }

        public StructureType SType => StructureType.DeviceGroupSubmitInfo;
        public System.IntPtr PNext { get; set; }
        public uint WaitSemaphoreCount { get; set; }
        public uint? PWaitSemaphoreDeviceIndices { get; set; }
        public uint CommandBufferCount { get; set; }
        public uint? PCommandBufferDeviceMasks { get; set; }
        public uint SignalSemaphoreCount { get; set; }
        public uint? PSignalSemaphoreDeviceIndices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.waitSemaphoreCount = WaitSemaphoreCount;
            refpWaitSemaphoreDeviceIndices?.Dispose();
            if (PWaitSemaphoreDeviceIndices != null)
            {
                refpWaitSemaphoreDeviceIndices = new StructReference(PWaitSemaphoreDeviceIndices);
                _internal.pWaitSemaphoreDeviceIndices = refpWaitSemaphoreDeviceIndices.Handle;
            }
            _internal.commandBufferCount = CommandBufferCount;
            refpCommandBufferDeviceMasks?.Dispose();
            if (PCommandBufferDeviceMasks != null)
            {
                refpCommandBufferDeviceMasks = new StructReference(PCommandBufferDeviceMasks);
                _internal.pCommandBufferDeviceMasks = refpCommandBufferDeviceMasks.Handle;
            }
            _internal.signalSemaphoreCount = SignalSemaphoreCount;
            refpSignalSemaphoreDeviceIndices?.Dispose();
            if (PSignalSemaphoreDeviceIndices != null)
            {
                refpSignalSemaphoreDeviceIndices = new StructReference(PSignalSemaphoreDeviceIndices);
                _internal.pSignalSemaphoreDeviceIndices = refpSignalSemaphoreDeviceIndices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpWaitSemaphoreDeviceIndices?.Dispose();
            refpCommandBufferDeviceMasks?.Dispose();
            refpSignalSemaphoreDeviceIndices?.Dispose();
        }

    }

    public partial class DeviceGroupBindSparseInfo : DisposableObject
    {
        public DeviceGroupBindSparseInfo()
        {
        }

        public DeviceGroupBindSparseInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupBindSparseInfo _internal)
        {
            PNext = _internal.pNext;
            ResourceDeviceIndex = _internal.resourceDeviceIndex;
            MemoryDeviceIndex = _internal.memoryDeviceIndex;
        }

        public StructureType SType => StructureType.DeviceGroupBindSparseInfo;
        public System.IntPtr PNext { get; set; }
        public uint ResourceDeviceIndex { get; set; }
        public uint MemoryDeviceIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupBindSparseInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupBindSparseInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.resourceDeviceIndex = ResourceDeviceIndex;
            _internal.memoryDeviceIndex = MemoryDeviceIndex;
            return _internal;
        }
    }

    public partial class BindBufferMemoryDeviceGroupInfo : DisposableObject
    {
        private StructReference refpDeviceIndices;

        public BindBufferMemoryDeviceGroupInfo()
        {
        }

        public BindBufferMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.VkBindBufferMemoryDeviceGroupInfo _internal)
        {
            PNext = _internal.pNext;
            DeviceIndexCount = _internal.deviceIndexCount;
            if(_internal.pDeviceIndices != System.IntPtr.Zero)
            {
                PDeviceIndices = (uint?)_internal.pDeviceIndices;
                Marshal.FreeHGlobal(_internal.pDeviceIndices);
            }
        }

        public StructureType SType => StructureType.BindBufferMemoryDeviceGroupInfo;
        public System.IntPtr PNext { get; set; }
        public uint DeviceIndexCount { get; set; }
        public uint? PDeviceIndices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindBufferMemoryDeviceGroupInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindBufferMemoryDeviceGroupInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceIndexCount = DeviceIndexCount;
            refpDeviceIndices?.Dispose();
            if (PDeviceIndices != null)
            {
                refpDeviceIndices = new StructReference(PDeviceIndices);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDeviceIndices?.Dispose();
        }

    }

    public partial class BindImageMemoryDeviceGroupInfo : DisposableObject
    {
        private StructReference refpDeviceIndices;

        private StructReference refpSplitInstanceBindRegions;

        public BindImageMemoryDeviceGroupInfo()
        {
        }

        public BindImageMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo _internal)
        {
            PNext = _internal.pNext;
            DeviceIndexCount = _internal.deviceIndexCount;
            if(_internal.pDeviceIndices != System.IntPtr.Zero)
            {
                PDeviceIndices = (uint?)_internal.pDeviceIndices;
                Marshal.FreeHGlobal(_internal.pDeviceIndices);
            }
            SplitInstanceBindRegionCount = _internal.splitInstanceBindRegionCount;
            PSplitInstanceBindRegions = new Rect2D(Marshal.PtrToStructure<VkRect2D>(_internal.pSplitInstanceBindRegions));
            Marshal.FreeHGlobal(_internal.pSplitInstanceBindRegions);
        }

        public StructureType SType => StructureType.BindImageMemoryDeviceGroupInfo;
        public System.IntPtr PNext { get; set; }
        public uint DeviceIndexCount { get; set; }
        public uint? PDeviceIndices { get; set; }
        public uint SplitInstanceBindRegionCount { get; set; }
        public Rect2D PSplitInstanceBindRegions { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceIndexCount = DeviceIndexCount;
            refpDeviceIndices?.Dispose();
            if (PDeviceIndices != null)
            {
                refpDeviceIndices = new StructReference(PDeviceIndices);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
            _internal.splitInstanceBindRegionCount = SplitInstanceBindRegionCount;
            refpSplitInstanceBindRegions?.Dispose();
            if (PSplitInstanceBindRegions != null)
            {
                var struct1 = PSplitInstanceBindRegions.ToInternal();
                refpSplitInstanceBindRegions = new StructReference(struct1);
                _internal.pSplitInstanceBindRegions = refpSplitInstanceBindRegions.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDeviceIndices?.Dispose();
            refpSplitInstanceBindRegions?.Dispose();
        }

    }

    public partial class PhysicalDeviceGroupProperties : DisposableObject
    {
        public PhysicalDeviceGroupProperties()
        {
        }

        public PhysicalDeviceGroupProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceGroupProperties _internal)
        {
            PNext = _internal.pNext;
            PhysicalDeviceCount = _internal.physicalDeviceCount;
            PhysicalDevices = new PhysicalDevice[32];
            for (int i = 0; i < 32; ++i)
            {
                PhysicalDevices[i] = new PhysicalDevice(_internal.physicalDevices[i]);
            }
            SubsetAllocation = _internal.subsetAllocation;
        }

        public StructureType SType => StructureType.PhysicalDeviceGroupProperties;
        public System.IntPtr PNext { get; set; }
        public uint PhysicalDeviceCount { get; set; }
        public PhysicalDevice[] PhysicalDevices { get; set; }
        public bool SubsetAllocation { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceGroupProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceGroupProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.physicalDeviceCount = PhysicalDeviceCount;
            if(PhysicalDevices != null)
            {
                if (PhysicalDevices.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(PhysicalDevices), "Array is out of bounds. Size should not be more than 32");

                _internal.physicalDevices = new AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T[32];
                for (int i = 0; i < PhysicalDevices.Length; ++i)
                {
                    _internal.physicalDevices[i] = (AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T)PhysicalDevices[i];
                }
            }
            _internal.subsetAllocation = SubsetAllocation;
            return _internal;
        }
    }

    public partial class DeviceGroupDeviceCreateInfo : DisposableObject
    {
        private StructReference refpPhysicalDevices;

        public DeviceGroupDeviceCreateInfo()
        {
        }

        public DeviceGroupDeviceCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupDeviceCreateInfo _internal)
        {
            PNext = _internal.pNext;
            PhysicalDeviceCount = _internal.physicalDeviceCount;
            PPhysicalDevices = new PhysicalDevice(Marshal.PtrToStructure<PhysicalDevice>(_internal.pPhysicalDevices));
            Marshal.FreeHGlobal(_internal.pPhysicalDevices);
        }

        public StructureType SType => StructureType.DeviceGroupDeviceCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint PhysicalDeviceCount { get; set; }
        public PhysicalDevice PPhysicalDevices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupDeviceCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupDeviceCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.physicalDeviceCount = PhysicalDeviceCount;
            refpPhysicalDevices?.Dispose();
            if (PPhysicalDevices != null)
            {
                AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T struct0 = PPhysicalDevices;
                refpPhysicalDevices = new StructReference(struct0);
                _internal.pPhysicalDevices = refpPhysicalDevices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpPhysicalDevices?.Dispose();
        }

    }

    public partial class BufferMemoryRequirementsInfo2 : DisposableObject
    {
        public BufferMemoryRequirementsInfo2()
        {
        }

        public BufferMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.VkBufferMemoryRequirementsInfo2 _internal)
        {
            PNext = _internal.pNext;
            Buffer = new Buffer(_internal.buffer);
        }

        public StructureType SType => StructureType.BufferMemoryRequirementsInfo2;
        public System.IntPtr PNext { get; set; }
        public Buffer Buffer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferMemoryRequirementsInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferMemoryRequirementsInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.buffer = Buffer;
            return _internal;
        }
    }

    public partial class ImageMemoryRequirementsInfo2 : DisposableObject
    {
        public ImageMemoryRequirementsInfo2()
        {
        }

        public ImageMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.VkImageMemoryRequirementsInfo2 _internal)
        {
            PNext = _internal.pNext;
            Image = new Image(_internal.image);
        }

        public StructureType SType => StructureType.ImageMemoryRequirementsInfo2;
        public System.IntPtr PNext { get; set; }
        public Image Image { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageMemoryRequirementsInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageMemoryRequirementsInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.image = Image;
            return _internal;
        }
    }

    public partial class ImageSparseMemoryRequirementsInfo2 : DisposableObject
    {
        public ImageSparseMemoryRequirementsInfo2()
        {
        }

        public ImageSparseMemoryRequirementsInfo2(AdamantiumVulkan.Core.Interop.VkImageSparseMemoryRequirementsInfo2 _internal)
        {
            PNext = _internal.pNext;
            Image = new Image(_internal.image);
        }

        public StructureType SType => StructureType.ImageSparseMemoryRequirementsInfo2;
        public System.IntPtr PNext { get; set; }
        public Image Image { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageSparseMemoryRequirementsInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageSparseMemoryRequirementsInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.image = Image;
            return _internal;
        }
    }

    public partial class MemoryRequirements2 : DisposableObject
    {
        public MemoryRequirements2()
        {
        }

        public MemoryRequirements2(AdamantiumVulkan.Core.Interop.VkMemoryRequirements2 _internal)
        {
            PNext = _internal.pNext;
            MemoryRequirements = new MemoryRequirements(_internal.memoryRequirements);
        }

        public StructureType SType => StructureType.MemoryRequirements2;
        public System.IntPtr PNext { get; set; }
        public MemoryRequirements MemoryRequirements { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryRequirements2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryRequirements2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (MemoryRequirements != null)
            {
                _internal.memoryRequirements = MemoryRequirements.ToInternal();
            }
            return _internal;
        }
    }

    public partial class SparseImageMemoryRequirements2 : DisposableObject
    {
        public SparseImageMemoryRequirements2()
        {
        }

        public SparseImageMemoryRequirements2(AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2 _internal)
        {
            PNext = _internal.pNext;
            MemoryRequirements = new SparseImageMemoryRequirements(_internal.memoryRequirements);
        }

        public StructureType SType => StructureType.SparseImageMemoryRequirements2;
        public System.IntPtr PNext { get; set; }
        public SparseImageMemoryRequirements MemoryRequirements { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (MemoryRequirements != null)
            {
                _internal.memoryRequirements = MemoryRequirements.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceFeatures2 : DisposableObject
    {
        public PhysicalDeviceFeatures2()
        {
        }

        public PhysicalDeviceFeatures2(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 _internal)
        {
            PNext = _internal.pNext;
            Features = new PhysicalDeviceFeatures(_internal.features);
        }

        public StructureType SType => StructureType.PhysicalDeviceFeatures2;
        public System.IntPtr PNext { get; set; }
        public PhysicalDeviceFeatures Features { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (Features != null)
            {
                _internal.features = Features.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceProperties2 : DisposableObject
    {
        public PhysicalDeviceProperties2()
        {
        }

        public PhysicalDeviceProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties2 _internal)
        {
            PNext = _internal.pNext;
            Properties = new PhysicalDeviceProperties(_internal.properties);
        }

        public StructureType SType => StructureType.PhysicalDeviceProperties2;
        public System.IntPtr PNext { get; set; }
        public PhysicalDeviceProperties Properties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (Properties != null)
            {
                _internal.properties = Properties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class FormatProperties2 : DisposableObject
    {
        public FormatProperties2()
        {
        }

        public FormatProperties2(AdamantiumVulkan.Core.Interop.VkFormatProperties2 _internal)
        {
            PNext = _internal.pNext;
            FormatProperties = new FormatProperties(_internal.formatProperties);
        }

        public StructureType SType => StructureType.FormatProperties2;
        public System.IntPtr PNext { get; set; }
        public FormatProperties FormatProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFormatProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFormatProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (FormatProperties != null)
            {
                _internal.formatProperties = FormatProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ImageFormatProperties2 : DisposableObject
    {
        public ImageFormatProperties2()
        {
        }

        public ImageFormatProperties2(AdamantiumVulkan.Core.Interop.VkImageFormatProperties2 _internal)
        {
            PNext = _internal.pNext;
            ImageFormatProperties = new ImageFormatProperties(_internal.imageFormatProperties);
        }

        public StructureType SType => StructureType.ImageFormatProperties2;
        public System.IntPtr PNext { get; set; }
        public ImageFormatProperties ImageFormatProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageFormatProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageFormatProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (ImageFormatProperties != null)
            {
                _internal.imageFormatProperties = ImageFormatProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceImageFormatInfo2 : DisposableObject
    {
        public PhysicalDeviceImageFormatInfo2()
        {
        }

        public PhysicalDeviceImageFormatInfo2(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageFormatInfo2 _internal)
        {
            PNext = _internal.pNext;
            Format = _internal.format;
            Type = _internal.type;
            Tiling = _internal.tiling;
            Usage = _internal.usage;
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.PhysicalDeviceImageFormatInfo2;
        public System.IntPtr PNext { get; set; }
        public Format Format { get; set; }
        public ImageType Type { get; set; }
        public ImageTiling Tiling { get; set; }
        public uint Usage { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageFormatInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageFormatInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.format = Format;
            _internal.type = Type;
            _internal.tiling = Tiling;
            _internal.usage = Usage;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class QueueFamilyProperties2 : DisposableObject
    {
        public QueueFamilyProperties2()
        {
        }

        public QueueFamilyProperties2(AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2 _internal)
        {
            PNext = _internal.pNext;
            QueueFamilyProperties = new QueueFamilyProperties(_internal.queueFamilyProperties);
        }

        public StructureType SType => StructureType.QueueFamilyProperties2;
        public System.IntPtr PNext { get; set; }
        public QueueFamilyProperties QueueFamilyProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (QueueFamilyProperties != null)
            {
                _internal.queueFamilyProperties = QueueFamilyProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceMemoryProperties2 : DisposableObject
    {
        public PhysicalDeviceMemoryProperties2()
        {
        }

        public PhysicalDeviceMemoryProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 _internal)
        {
            PNext = _internal.pNext;
            MemoryProperties = new PhysicalDeviceMemoryProperties(_internal.memoryProperties);
        }

        public StructureType SType => StructureType.PhysicalDeviceMemoryProperties2;
        public System.IntPtr PNext { get; set; }
        public PhysicalDeviceMemoryProperties MemoryProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (MemoryProperties != null)
            {
                _internal.memoryProperties = MemoryProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class SparseImageFormatProperties2 : DisposableObject
    {
        public SparseImageFormatProperties2()
        {
        }

        public SparseImageFormatProperties2(AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties2 _internal)
        {
            PNext = _internal.pNext;
            Properties = new SparseImageFormatProperties(_internal.properties);
        }

        public StructureType SType => StructureType.SparseImageFormatProperties2;
        public System.IntPtr PNext { get; set; }
        public SparseImageFormatProperties Properties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (Properties != null)
            {
                _internal.properties = Properties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceSparseImageFormatInfo2 : DisposableObject
    {
        public PhysicalDeviceSparseImageFormatInfo2()
        {
        }

        public PhysicalDeviceSparseImageFormatInfo2(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseImageFormatInfo2 _internal)
        {
            PNext = _internal.pNext;
            Format = _internal.format;
            Type = _internal.type;
            Samples = _internal.samples;
            Usage = _internal.usage;
            Tiling = _internal.tiling;
        }

        public StructureType SType => StructureType.PhysicalDeviceSparseImageFormatInfo2;
        public System.IntPtr PNext { get; set; }
        public Format Format { get; set; }
        public ImageType Type { get; set; }
        public SampleCountFlagBits Samples { get; set; }
        public uint Usage { get; set; }
        public ImageTiling Tiling { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseImageFormatInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseImageFormatInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.format = Format;
            _internal.type = Type;
            _internal.samples = Samples;
            _internal.usage = Usage;
            _internal.tiling = Tiling;
            return _internal;
        }
    }

    public partial class PhysicalDevicePointClippingProperties : DisposableObject
    {
        public PhysicalDevicePointClippingProperties()
        {
        }

        public PhysicalDevicePointClippingProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevicePointClippingProperties _internal)
        {
            PNext = _internal.pNext;
            PointClippingBehavior = _internal.pointClippingBehavior;
        }

        public StructureType SType => StructureType.PhysicalDevicePointClippingProperties;
        public System.IntPtr PNext { get; set; }
        public PointClippingBehavior PointClippingBehavior { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDevicePointClippingProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDevicePointClippingProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.pointClippingBehavior = PointClippingBehavior;
            return _internal;
        }
    }

    public partial class InputAttachmentAspectReference
    {
        public InputAttachmentAspectReference()
        {
        }

        public InputAttachmentAspectReference(AdamantiumVulkan.Core.Interop.VkInputAttachmentAspectReference _internal)
        {
            Subpass = _internal.subpass;
            InputAttachmentIndex = _internal.inputAttachmentIndex;
            AspectMask = _internal.aspectMask;
        }

        public uint Subpass { get; set; }
        public uint InputAttachmentIndex { get; set; }
        public uint AspectMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkInputAttachmentAspectReference ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkInputAttachmentAspectReference();
            _internal.subpass = Subpass;
            _internal.inputAttachmentIndex = InputAttachmentIndex;
            _internal.aspectMask = AspectMask;
            return _internal;
        }
    }

    public partial class RenderPassInputAttachmentAspectCreateInfo : DisposableObject
    {
        private StructReference refpAspectReferences;

        public RenderPassInputAttachmentAspectCreateInfo()
        {
        }

        public RenderPassInputAttachmentAspectCreateInfo(AdamantiumVulkan.Core.Interop.VkRenderPassInputAttachmentAspectCreateInfo _internal)
        {
            PNext = _internal.pNext;
            AspectReferenceCount = _internal.aspectReferenceCount;
            PAspectReferences = new InputAttachmentAspectReference(Marshal.PtrToStructure<VkInputAttachmentAspectReference>(_internal.pAspectReferences));
            Marshal.FreeHGlobal(_internal.pAspectReferences);
        }

        public StructureType SType => StructureType.RenderPassInputAttachmentAspectCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint AspectReferenceCount { get; set; }
        public InputAttachmentAspectReference PAspectReferences { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassInputAttachmentAspectCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassInputAttachmentAspectCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.aspectReferenceCount = AspectReferenceCount;
            refpAspectReferences?.Dispose();
            if (PAspectReferences != null)
            {
                var struct0 = PAspectReferences.ToInternal();
                refpAspectReferences = new StructReference(struct0);
                _internal.pAspectReferences = refpAspectReferences.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAspectReferences?.Dispose();
        }

    }

    public partial class ImageViewUsageCreateInfo : DisposableObject
    {
        public ImageViewUsageCreateInfo()
        {
        }

        public ImageViewUsageCreateInfo(AdamantiumVulkan.Core.Interop.VkImageViewUsageCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Usage = _internal.usage;
        }

        public StructureType SType => StructureType.ImageViewUsageCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Usage { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageViewUsageCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageViewUsageCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.usage = Usage;
            return _internal;
        }
    }

    public partial class PipelineTessellationDomainOriginStateCreateInfo : DisposableObject
    {
        public PipelineTessellationDomainOriginStateCreateInfo()
        {
        }

        public PipelineTessellationDomainOriginStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineTessellationDomainOriginStateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            DomainOrigin = _internal.domainOrigin;
        }

        public StructureType SType => StructureType.PipelineTessellationDomainOriginStateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public TessellationDomainOrigin DomainOrigin { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineTessellationDomainOriginStateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineTessellationDomainOriginStateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.domainOrigin = DomainOrigin;
            return _internal;
        }
    }

    public partial class RenderPassMultiviewCreateInfo : DisposableObject
    {
        private StructReference refpViewMasks;

        private StructReference refpViewOffsets;

        private StructReference refpCorrelationMasks;

        public RenderPassMultiviewCreateInfo()
        {
        }

        public RenderPassMultiviewCreateInfo(AdamantiumVulkan.Core.Interop.VkRenderPassMultiviewCreateInfo _internal)
        {
            PNext = _internal.pNext;
            SubpassCount = _internal.subpassCount;
            if(_internal.pViewMasks != System.IntPtr.Zero)
            {
                PViewMasks = (uint?)_internal.pViewMasks;
                Marshal.FreeHGlobal(_internal.pViewMasks);
            }
            DependencyCount = _internal.dependencyCount;
            if(_internal.pViewOffsets != System.IntPtr.Zero)
            {
                PViewOffsets = (int?)_internal.pViewOffsets;
                Marshal.FreeHGlobal(_internal.pViewOffsets);
            }
            CorrelationMaskCount = _internal.correlationMaskCount;
            if(_internal.pCorrelationMasks != System.IntPtr.Zero)
            {
                PCorrelationMasks = (uint?)_internal.pCorrelationMasks;
                Marshal.FreeHGlobal(_internal.pCorrelationMasks);
            }
        }

        public StructureType SType => StructureType.RenderPassMultiviewCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint SubpassCount { get; set; }
        public uint? PViewMasks { get; set; }
        public uint DependencyCount { get; set; }
        public int? PViewOffsets { get; set; }
        public uint CorrelationMaskCount { get; set; }
        public uint? PCorrelationMasks { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassMultiviewCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassMultiviewCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.subpassCount = SubpassCount;
            refpViewMasks?.Dispose();
            if (PViewMasks != null)
            {
                refpViewMasks = new StructReference(PViewMasks);
                _internal.pViewMasks = refpViewMasks.Handle;
            }
            _internal.dependencyCount = DependencyCount;
            refpViewOffsets?.Dispose();
            if (PViewOffsets != null)
            {
                refpViewOffsets = new StructReference(PViewOffsets);
                _internal.pViewOffsets = refpViewOffsets.Handle;
            }
            _internal.correlationMaskCount = CorrelationMaskCount;
            refpCorrelationMasks?.Dispose();
            if (PCorrelationMasks != null)
            {
                refpCorrelationMasks = new StructReference(PCorrelationMasks);
                _internal.pCorrelationMasks = refpCorrelationMasks.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpViewMasks?.Dispose();
            refpViewOffsets?.Dispose();
            refpCorrelationMasks?.Dispose();
        }

    }

    public partial class PhysicalDeviceMultiviewFeatures : DisposableObject
    {
        public PhysicalDeviceMultiviewFeatures()
        {
        }

        public PhysicalDeviceMultiviewFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewFeatures _internal)
        {
            PNext = _internal.pNext;
            Multiview = _internal.multiview;
            MultiviewGeometryShader = _internal.multiviewGeometryShader;
            MultiviewTessellationShader = _internal.multiviewTessellationShader;
        }

        public StructureType SType => StructureType.PhysicalDeviceMultiviewFeatures;
        public System.IntPtr PNext { get; set; }
        public bool Multiview { get; set; }
        public bool MultiviewGeometryShader { get; set; }
        public bool MultiviewTessellationShader { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.multiview = Multiview;
            _internal.multiviewGeometryShader = MultiviewGeometryShader;
            _internal.multiviewTessellationShader = MultiviewTessellationShader;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMultiviewProperties : DisposableObject
    {
        public PhysicalDeviceMultiviewProperties()
        {
        }

        public PhysicalDeviceMultiviewProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewProperties _internal)
        {
            PNext = _internal.pNext;
            MaxMultiviewViewCount = _internal.maxMultiviewViewCount;
            MaxMultiviewInstanceIndex = _internal.maxMultiviewInstanceIndex;
        }

        public StructureType SType => StructureType.PhysicalDeviceMultiviewProperties;
        public System.IntPtr PNext { get; set; }
        public uint MaxMultiviewViewCount { get; set; }
        public uint MaxMultiviewInstanceIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxMultiviewViewCount = MaxMultiviewViewCount;
            _internal.maxMultiviewInstanceIndex = MaxMultiviewInstanceIndex;
            return _internal;
        }
    }

    public partial class PhysicalDeviceVariablePointerFeatures : DisposableObject
    {
        public PhysicalDeviceVariablePointerFeatures()
        {
        }

        public PhysicalDeviceVariablePointerFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVariablePointerFeatures _internal)
        {
            PNext = _internal.pNext;
            VariablePointersStorageBuffer = _internal.variablePointersStorageBuffer;
            VariablePointers = _internal.variablePointers;
        }

        public StructureType SType => StructureType.PhysicalDeviceVariablePointerFeatures;
        public System.IntPtr PNext { get; set; }
        public bool VariablePointersStorageBuffer { get; set; }
        public bool VariablePointers { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVariablePointerFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVariablePointerFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.variablePointersStorageBuffer = VariablePointersStorageBuffer;
            _internal.variablePointers = VariablePointers;
            return _internal;
        }
    }

    public partial class PhysicalDeviceProtectedMemoryFeatures : DisposableObject
    {
        public PhysicalDeviceProtectedMemoryFeatures()
        {
        }

        public PhysicalDeviceProtectedMemoryFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryFeatures _internal)
        {
            PNext = _internal.pNext;
            ProtectedMemory = _internal.protectedMemory;
        }

        public StructureType SType => StructureType.PhysicalDeviceProtectedMemoryFeatures;
        public System.IntPtr PNext { get; set; }
        public bool ProtectedMemory { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.protectedMemory = ProtectedMemory;
            return _internal;
        }
    }

    public partial class PhysicalDeviceProtectedMemoryProperties : DisposableObject
    {
        public PhysicalDeviceProtectedMemoryProperties()
        {
        }

        public PhysicalDeviceProtectedMemoryProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryProperties _internal)
        {
            PNext = _internal.pNext;
            ProtectedNoFault = _internal.protectedNoFault;
        }

        public StructureType SType => StructureType.PhysicalDeviceProtectedMemoryProperties;
        public System.IntPtr PNext { get; set; }
        public bool ProtectedNoFault { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProtectedMemoryProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.protectedNoFault = ProtectedNoFault;
            return _internal;
        }
    }

    public partial class DeviceQueueInfo2 : DisposableObject
    {
        public DeviceQueueInfo2()
        {
        }

        public DeviceQueueInfo2(AdamantiumVulkan.Core.Interop.VkDeviceQueueInfo2 _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            QueueFamilyIndex = _internal.queueFamilyIndex;
            QueueIndex = _internal.queueIndex;
        }

        public StructureType SType => StructureType.DeviceQueueInfo2;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint QueueFamilyIndex { get; set; }
        public uint QueueIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceQueueInfo2 ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceQueueInfo2();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.queueFamilyIndex = QueueFamilyIndex;
            _internal.queueIndex = QueueIndex;
            return _internal;
        }
    }

    public partial class ProtectedSubmitInfo : DisposableObject
    {
        public ProtectedSubmitInfo()
        {
        }

        public ProtectedSubmitInfo(AdamantiumVulkan.Core.Interop.VkProtectedSubmitInfo _internal)
        {
            PNext = _internal.pNext;
            ProtectedSubmit = _internal.protectedSubmit;
        }

        public StructureType SType => StructureType.ProtectedSubmitInfo;
        public System.IntPtr PNext { get; set; }
        public bool ProtectedSubmit { get; set; }

        public AdamantiumVulkan.Core.Interop.VkProtectedSubmitInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkProtectedSubmitInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.protectedSubmit = ProtectedSubmit;
            return _internal;
        }
    }

    public partial class SamplerYcbcrConversionCreateInfo : DisposableObject
    {
        public SamplerYcbcrConversionCreateInfo()
        {
        }

        public SamplerYcbcrConversionCreateInfo(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Format = _internal.format;
            YcbcrModel = _internal.ycbcrModel;
            YcbcrRange = _internal.ycbcrRange;
            Components = new ComponentMapping(_internal.components);
            XChromaOffset = _internal.xChromaOffset;
            YChromaOffset = _internal.yChromaOffset;
            ChromaFilter = _internal.chromaFilter;
            ForceExplicitReconstruction = _internal.forceExplicitReconstruction;
        }

        public StructureType SType => StructureType.SamplerYcbcrConversionCreateInfo;
        public System.IntPtr PNext { get; set; }
        public Format Format { get; set; }
        public SamplerYcbcrModelConversion YcbcrModel { get; set; }
        public SamplerYcbcrRange YcbcrRange { get; set; }
        public ComponentMapping Components { get; set; }
        public ChromaLocation XChromaOffset { get; set; }
        public ChromaLocation YChromaOffset { get; set; }
        public Filter ChromaFilter { get; set; }
        public bool ForceExplicitReconstruction { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.format = Format;
            _internal.ycbcrModel = YcbcrModel;
            _internal.ycbcrRange = YcbcrRange;
            if (Components != null)
            {
                _internal.components = Components.ToInternal();
            }
            _internal.xChromaOffset = XChromaOffset;
            _internal.yChromaOffset = YChromaOffset;
            _internal.chromaFilter = ChromaFilter;
            _internal.forceExplicitReconstruction = ForceExplicitReconstruction;
            return _internal;
        }
    }

    public partial class SamplerYcbcrConversionInfo : DisposableObject
    {
        public SamplerYcbcrConversionInfo()
        {
        }

        public SamplerYcbcrConversionInfo(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionInfo _internal)
        {
            PNext = _internal.pNext;
            Conversion = new SamplerYcbcrConversion(_internal.conversion);
        }

        public StructureType SType => StructureType.SamplerYcbcrConversionInfo;
        public System.IntPtr PNext { get; set; }
        public SamplerYcbcrConversion Conversion { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.conversion = Conversion;
            return _internal;
        }
    }

    public partial class BindImagePlaneMemoryInfo : DisposableObject
    {
        public BindImagePlaneMemoryInfo()
        {
        }

        public BindImagePlaneMemoryInfo(AdamantiumVulkan.Core.Interop.VkBindImagePlaneMemoryInfo _internal)
        {
            PNext = _internal.pNext;
            PlaneAspect = _internal.planeAspect;
        }

        public StructureType SType => StructureType.BindImagePlaneMemoryInfo;
        public System.IntPtr PNext { get; set; }
        public ImageAspectFlagBits PlaneAspect { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindImagePlaneMemoryInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindImagePlaneMemoryInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.planeAspect = PlaneAspect;
            return _internal;
        }
    }

    public partial class ImagePlaneMemoryRequirementsInfo : DisposableObject
    {
        public ImagePlaneMemoryRequirementsInfo()
        {
        }

        public ImagePlaneMemoryRequirementsInfo(AdamantiumVulkan.Core.Interop.VkImagePlaneMemoryRequirementsInfo _internal)
        {
            PNext = _internal.pNext;
            PlaneAspect = _internal.planeAspect;
        }

        public StructureType SType => StructureType.ImagePlaneMemoryRequirementsInfo;
        public System.IntPtr PNext { get; set; }
        public ImageAspectFlagBits PlaneAspect { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImagePlaneMemoryRequirementsInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImagePlaneMemoryRequirementsInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.planeAspect = PlaneAspect;
            return _internal;
        }
    }

    public partial class PhysicalDeviceSamplerYcbcrConversionFeatures : DisposableObject
    {
        public PhysicalDeviceSamplerYcbcrConversionFeatures()
        {
        }

        public PhysicalDeviceSamplerYcbcrConversionFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerYcbcrConversionFeatures _internal)
        {
            PNext = _internal.pNext;
            SamplerYcbcrConversion = _internal.samplerYcbcrConversion;
        }

        public StructureType SType => StructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;
        public System.IntPtr PNext { get; set; }
        public bool SamplerYcbcrConversion { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerYcbcrConversionFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerYcbcrConversionFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.samplerYcbcrConversion = SamplerYcbcrConversion;
            return _internal;
        }
    }

    public partial class SamplerYcbcrConversionImageFormatProperties : DisposableObject
    {
        public SamplerYcbcrConversionImageFormatProperties()
        {
        }

        public SamplerYcbcrConversionImageFormatProperties(AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionImageFormatProperties _internal)
        {
            PNext = _internal.pNext;
            CombinedImageSamplerDescriptorCount = _internal.combinedImageSamplerDescriptorCount;
        }

        public StructureType SType => StructureType.SamplerYcbcrConversionImageFormatProperties;
        public System.IntPtr PNext { get; set; }
        public uint CombinedImageSamplerDescriptorCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionImageFormatProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionImageFormatProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.combinedImageSamplerDescriptorCount = CombinedImageSamplerDescriptorCount;
            return _internal;
        }
    }

    public partial class DescriptorUpdateTemplateEntry
    {
        public DescriptorUpdateTemplateEntry()
        {
        }

        public DescriptorUpdateTemplateEntry(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateEntry _internal)
        {
            DstBinding = _internal.dstBinding;
            DstArrayElement = _internal.dstArrayElement;
            DescriptorCount = _internal.descriptorCount;
            DescriptorType = _internal.descriptorType;
            Offset = _internal.offset;
            Stride = _internal.stride;
        }

        public uint DstBinding { get; set; }
        public uint DstArrayElement { get; set; }
        public uint DescriptorCount { get; set; }
        public DescriptorType DescriptorType { get; set; }
        public ulong Offset { get; set; }
        public ulong Stride { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateEntry ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateEntry();
            _internal.dstBinding = DstBinding;
            _internal.dstArrayElement = DstArrayElement;
            _internal.descriptorCount = DescriptorCount;
            _internal.descriptorType = DescriptorType;
            _internal.offset = Offset;
            _internal.stride = Stride;
            return _internal;
        }
    }

    public partial class DescriptorUpdateTemplateCreateInfo : DisposableObject
    {
        private StructReference refpDescriptorUpdateEntries;

        public DescriptorUpdateTemplateCreateInfo()
        {
        }

        public DescriptorUpdateTemplateCreateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateCreateInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DescriptorUpdateEntryCount = _internal.descriptorUpdateEntryCount;
            PDescriptorUpdateEntries = new DescriptorUpdateTemplateEntry(Marshal.PtrToStructure<VkDescriptorUpdateTemplateEntry>(_internal.pDescriptorUpdateEntries));
            Marshal.FreeHGlobal(_internal.pDescriptorUpdateEntries);
            TemplateType = _internal.templateType;
            DescriptorSetLayout = new DescriptorSetLayout(_internal.descriptorSetLayout);
            PipelineBindPoint = _internal.pipelineBindPoint;
            PipelineLayout = new PipelineLayout(_internal.pipelineLayout);
            Set = _internal.set;
        }

        public StructureType SType => StructureType.DescriptorUpdateTemplateCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint DescriptorUpdateEntryCount { get; set; }
        public DescriptorUpdateTemplateEntry PDescriptorUpdateEntries { get; set; }
        public DescriptorUpdateTemplateType TemplateType { get; set; }
        public DescriptorSetLayout DescriptorSetLayout { get; set; }
        public PipelineBindPoint PipelineBindPoint { get; set; }
        public PipelineLayout PipelineLayout { get; set; }
        public uint Set { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.descriptorUpdateEntryCount = DescriptorUpdateEntryCount;
            refpDescriptorUpdateEntries?.Dispose();
            if (PDescriptorUpdateEntries != null)
            {
                var struct0 = PDescriptorUpdateEntries.ToInternal();
                refpDescriptorUpdateEntries = new StructReference(struct0);
                _internal.pDescriptorUpdateEntries = refpDescriptorUpdateEntries.Handle;
            }
            _internal.templateType = TemplateType;
            _internal.descriptorSetLayout = DescriptorSetLayout;
            _internal.pipelineBindPoint = PipelineBindPoint;
            _internal.pipelineLayout = PipelineLayout;
            _internal.set = Set;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDescriptorUpdateEntries?.Dispose();
        }

    }

    public partial class ExternalMemoryProperties
    {
        public ExternalMemoryProperties()
        {
        }

        public ExternalMemoryProperties(AdamantiumVulkan.Core.Interop.VkExternalMemoryProperties _internal)
        {
            ExternalMemoryFeatures = _internal.externalMemoryFeatures;
            ExportFromImportedHandleTypes = _internal.exportFromImportedHandleTypes;
            CompatibleHandleTypes = _internal.compatibleHandleTypes;
        }

        public uint ExternalMemoryFeatures { get; set; }
        public uint ExportFromImportedHandleTypes { get; set; }
        public uint CompatibleHandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalMemoryProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalMemoryProperties();
            _internal.externalMemoryFeatures = ExternalMemoryFeatures;
            _internal.exportFromImportedHandleTypes = ExportFromImportedHandleTypes;
            _internal.compatibleHandleTypes = CompatibleHandleTypes;
            return _internal;
        }
    }

    public partial class PhysicalDeviceExternalImageFormatInfo : DisposableObject
    {
        public PhysicalDeviceExternalImageFormatInfo()
        {
        }

        public PhysicalDeviceExternalImageFormatInfo(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalImageFormatInfo _internal)
        {
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.PhysicalDeviceExternalImageFormatInfo;
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalImageFormatInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalImageFormatInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class ExternalImageFormatProperties : DisposableObject
    {
        public ExternalImageFormatProperties()
        {
        }

        public ExternalImageFormatProperties(AdamantiumVulkan.Core.Interop.VkExternalImageFormatProperties _internal)
        {
            PNext = _internal.pNext;
            ExternalMemoryProperties = new ExternalMemoryProperties(_internal.externalMemoryProperties);
        }

        public StructureType SType => StructureType.ExternalImageFormatProperties;
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryProperties ExternalMemoryProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalImageFormatProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalImageFormatProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (ExternalMemoryProperties != null)
            {
                _internal.externalMemoryProperties = ExternalMemoryProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceExternalBufferInfo : DisposableObject
    {
        public PhysicalDeviceExternalBufferInfo()
        {
        }

        public PhysicalDeviceExternalBufferInfo(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalBufferInfo _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Usage = _internal.usage;
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.PhysicalDeviceExternalBufferInfo;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint Usage { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalBufferInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalBufferInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.usage = Usage;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class ExternalBufferProperties : DisposableObject
    {
        public ExternalBufferProperties()
        {
        }

        public ExternalBufferProperties(AdamantiumVulkan.Core.Interop.VkExternalBufferProperties _internal)
        {
            PNext = _internal.pNext;
            ExternalMemoryProperties = new ExternalMemoryProperties(_internal.externalMemoryProperties);
        }

        public StructureType SType => StructureType.ExternalBufferProperties;
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryProperties ExternalMemoryProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalBufferProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalBufferProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (ExternalMemoryProperties != null)
            {
                _internal.externalMemoryProperties = ExternalMemoryProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceIDProperties : DisposableObject
    {
        public PhysicalDeviceIDProperties()
        {
        }

        public PhysicalDeviceIDProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties _internal)
        {
            PNext = _internal.pNext;
            var tmpArr0 = new byte[16];
            unsafe
            {
                for (int i = 0; i < 16; ++i)
                {
                    tmpArr0[i] = _internal.deviceUUID[i];
                }
            }
            DeviceUUID = System.Text.Encoding.ASCII.GetString(tmpArr0).Replace("\0", string.Empty);
            var tmpArr1 = new byte[16];
            unsafe
            {
                for (int i = 0; i < 16; ++i)
                {
                    tmpArr1[i] = _internal.driverUUID[i];
                }
            }
            DriverUUID = System.Text.Encoding.ASCII.GetString(tmpArr1).Replace("\0", string.Empty);
            var tmpArr2 = new byte[8];
            unsafe
            {
                for (int i = 0; i < 8; ++i)
                {
                    tmpArr2[i] = _internal.deviceLUID[i];
                }
            }
            DeviceLUID = System.Text.Encoding.ASCII.GetString(tmpArr2).Replace("\0", string.Empty);
            DeviceNodeMask = _internal.deviceNodeMask;
            DeviceLUIDValid = _internal.deviceLUIDValid;
        }

        public StructureType SType => StructureType.PhysicalDeviceIdProperties;
        public System.IntPtr PNext { get; set; }
        public string DeviceUUID { get; set; }
        public string DriverUUID { get; set; }
        public string DeviceLUID { get; set; }
        public uint DeviceNodeMask { get; set; }
        public bool DeviceLUIDValid { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if(DeviceUUID != null)
            {
                if (DeviceUUID.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray0 = System.Text.Encoding.ASCII.GetBytes(DeviceUUID);
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.deviceUUID[i] = inputArray0[i];
                        }
                    }
                }
            }
            if(DriverUUID != null)
            {
                if (DriverUUID.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverUUID), "Array is out of bounds. Size should not be more than 16");

                var inputArray1 = System.Text.Encoding.ASCII.GetBytes(DriverUUID);
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.driverUUID[i] = inputArray1[i];
                        }
                    }
                }
            }
            if(DeviceLUID != null)
            {
                if (DeviceLUID.Length > 8)
                    throw new System.ArgumentOutOfRangeException(nameof(DeviceLUID), "Array is out of bounds. Size should not be more than 8");

                var inputArray2 = System.Text.Encoding.ASCII.GetBytes(DeviceLUID);
                unsafe
                {
                    if (inputArray2 != null)
                    {
                        for (int i = 0; i < inputArray2.Length; ++i)
                        {
                            _internal.deviceLUID[i] = inputArray2[i];
                        }
                    }
                }
            }
            _internal.deviceNodeMask = DeviceNodeMask;
            _internal.deviceLUIDValid = DeviceLUIDValid;
            return _internal;
        }
    }

    public partial class ExternalMemoryImageCreateInfo : DisposableObject
    {
        public ExternalMemoryImageCreateInfo()
        {
        }

        public ExternalMemoryImageCreateInfo(AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfo _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExternalMemoryImageCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class ExternalMemoryBufferCreateInfo : DisposableObject
    {
        public ExternalMemoryBufferCreateInfo()
        {
        }

        public ExternalMemoryBufferCreateInfo(AdamantiumVulkan.Core.Interop.VkExternalMemoryBufferCreateInfo _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExternalMemoryBufferCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalMemoryBufferCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalMemoryBufferCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class ExportMemoryAllocateInfo : DisposableObject
    {
        public ExportMemoryAllocateInfo()
        {
        }

        public ExportMemoryAllocateInfo(AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfo _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExportMemoryAllocateInfo;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class PhysicalDeviceExternalFenceInfo : DisposableObject
    {
        public PhysicalDeviceExternalFenceInfo()
        {
        }

        public PhysicalDeviceExternalFenceInfo(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalFenceInfo _internal)
        {
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.PhysicalDeviceExternalFenceInfo;
        public System.IntPtr PNext { get; set; }
        public ExternalFenceHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalFenceInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalFenceInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class ExternalFenceProperties : DisposableObject
    {
        public ExternalFenceProperties()
        {
        }

        public ExternalFenceProperties(AdamantiumVulkan.Core.Interop.VkExternalFenceProperties _internal)
        {
            PNext = _internal.pNext;
            ExportFromImportedHandleTypes = _internal.exportFromImportedHandleTypes;
            CompatibleHandleTypes = _internal.compatibleHandleTypes;
            ExternalFenceFeatures = _internal.externalFenceFeatures;
        }

        public StructureType SType => StructureType.ExternalFenceProperties;
        public System.IntPtr PNext { get; set; }
        public uint ExportFromImportedHandleTypes { get; set; }
        public uint CompatibleHandleTypes { get; set; }
        public uint ExternalFenceFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalFenceProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalFenceProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.exportFromImportedHandleTypes = ExportFromImportedHandleTypes;
            _internal.compatibleHandleTypes = CompatibleHandleTypes;
            _internal.externalFenceFeatures = ExternalFenceFeatures;
            return _internal;
        }
    }

    public partial class ExportFenceCreateInfo : DisposableObject
    {
        public ExportFenceCreateInfo()
        {
        }

        public ExportFenceCreateInfo(AdamantiumVulkan.Core.Interop.VkExportFenceCreateInfo _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExportFenceCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExportFenceCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExportFenceCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class ExportSemaphoreCreateInfo : DisposableObject
    {
        public ExportSemaphoreCreateInfo()
        {
        }

        public ExportSemaphoreCreateInfo(AdamantiumVulkan.Core.Interop.VkExportSemaphoreCreateInfo _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExportSemaphoreCreateInfo;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExportSemaphoreCreateInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExportSemaphoreCreateInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class PhysicalDeviceExternalSemaphoreInfo : DisposableObject
    {
        public PhysicalDeviceExternalSemaphoreInfo()
        {
        }

        public PhysicalDeviceExternalSemaphoreInfo(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalSemaphoreInfo _internal)
        {
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.PhysicalDeviceExternalSemaphoreInfo;
        public System.IntPtr PNext { get; set; }
        public ExternalSemaphoreHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalSemaphoreInfo ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalSemaphoreInfo();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class ExternalSemaphoreProperties : DisposableObject
    {
        public ExternalSemaphoreProperties()
        {
        }

        public ExternalSemaphoreProperties(AdamantiumVulkan.Core.Interop.VkExternalSemaphoreProperties _internal)
        {
            PNext = _internal.pNext;
            ExportFromImportedHandleTypes = _internal.exportFromImportedHandleTypes;
            CompatibleHandleTypes = _internal.compatibleHandleTypes;
            ExternalSemaphoreFeatures = _internal.externalSemaphoreFeatures;
        }

        public StructureType SType => StructureType.ExternalSemaphoreProperties;
        public System.IntPtr PNext { get; set; }
        public uint ExportFromImportedHandleTypes { get; set; }
        public uint CompatibleHandleTypes { get; set; }
        public uint ExternalSemaphoreFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalSemaphoreProperties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalSemaphoreProperties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.exportFromImportedHandleTypes = ExportFromImportedHandleTypes;
            _internal.compatibleHandleTypes = CompatibleHandleTypes;
            _internal.externalSemaphoreFeatures = ExternalSemaphoreFeatures;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMaintenance3Properties : DisposableObject
    {
        public PhysicalDeviceMaintenance3Properties()
        {
        }

        public PhysicalDeviceMaintenance3Properties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMaintenance3Properties _internal)
        {
            PNext = _internal.pNext;
            MaxPerSetDescriptors = _internal.maxPerSetDescriptors;
            MaxMemoryAllocationSize = _internal.maxMemoryAllocationSize;
        }

        public StructureType SType => StructureType.PhysicalDeviceMaintenance3Properties;
        public System.IntPtr PNext { get; set; }
        public uint MaxPerSetDescriptors { get; set; }
        public ulong MaxMemoryAllocationSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMaintenance3Properties ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMaintenance3Properties();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxPerSetDescriptors = MaxPerSetDescriptors;
            _internal.maxMemoryAllocationSize = MaxMemoryAllocationSize;
            return _internal;
        }
    }

    public partial class DescriptorSetLayoutSupport : DisposableObject
    {
        public DescriptorSetLayoutSupport()
        {
        }

        public DescriptorSetLayoutSupport(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutSupport _internal)
        {
            PNext = _internal.pNext;
            Supported = _internal.supported;
        }

        public StructureType SType => StructureType.DescriptorSetLayoutSupport;
        public System.IntPtr PNext { get; set; }
        public bool Supported { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutSupport ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutSupport();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.supported = Supported;
            return _internal;
        }
    }

    public partial class PhysicalDeviceShaderDrawParameterFeatures : DisposableObject
    {
        public PhysicalDeviceShaderDrawParameterFeatures()
        {
        }

        public PhysicalDeviceShaderDrawParameterFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderDrawParameterFeatures _internal)
        {
            PNext = _internal.pNext;
            ShaderDrawParameters = _internal.shaderDrawParameters;
        }

        public StructureType SType => StructureType.PhysicalDeviceShaderDrawParameterFeatures;
        public System.IntPtr PNext { get; set; }
        public bool ShaderDrawParameters { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderDrawParameterFeatures ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderDrawParameterFeatures();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderDrawParameters = ShaderDrawParameters;
            return _internal;
        }
    }

    public partial class SurfaceCapabilitiesKHR
    {
        public SurfaceCapabilitiesKHR()
        {
        }

        public SurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkSurfaceCapabilitiesKHR _internal)
        {
            MinImageCount = _internal.minImageCount;
            MaxImageCount = _internal.maxImageCount;
            CurrentExtent = new Extent2D(_internal.currentExtent);
            MinImageExtent = new Extent2D(_internal.minImageExtent);
            MaxImageExtent = new Extent2D(_internal.maxImageExtent);
            MaxImageArrayLayers = _internal.maxImageArrayLayers;
            SupportedTransforms = _internal.supportedTransforms;
            CurrentTransform = _internal.currentTransform;
            SupportedCompositeAlpha = _internal.supportedCompositeAlpha;
            SupportedUsageFlags = _internal.supportedUsageFlags;
        }

        public uint MinImageCount { get; set; }
        public uint MaxImageCount { get; set; }
        public Extent2D CurrentExtent { get; set; }
        public Extent2D MinImageExtent { get; set; }
        public Extent2D MaxImageExtent { get; set; }
        public uint MaxImageArrayLayers { get; set; }
        public uint SupportedTransforms { get; set; }
        public SurfaceTransformFlagBitsKHR CurrentTransform { get; set; }
        public uint SupportedCompositeAlpha { get; set; }
        public uint SupportedUsageFlags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSurfaceCapabilitiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSurfaceCapabilitiesKHR();
            _internal.minImageCount = MinImageCount;
            _internal.maxImageCount = MaxImageCount;
            if (CurrentExtent != null)
            {
                _internal.currentExtent = CurrentExtent.ToInternal();
            }
            if (MinImageExtent != null)
            {
                _internal.minImageExtent = MinImageExtent.ToInternal();
            }
            if (MaxImageExtent != null)
            {
                _internal.maxImageExtent = MaxImageExtent.ToInternal();
            }
            _internal.maxImageArrayLayers = MaxImageArrayLayers;
            _internal.supportedTransforms = SupportedTransforms;
            _internal.currentTransform = CurrentTransform;
            _internal.supportedCompositeAlpha = SupportedCompositeAlpha;
            _internal.supportedUsageFlags = SupportedUsageFlags;
            return _internal;
        }
    }

    public partial class SurfaceFormatKHR
    {
        public SurfaceFormatKHR()
        {
        }

        public SurfaceFormatKHR(AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR _internal)
        {
            Format = _internal.format;
            ColorSpace = _internal.colorSpace;
        }

        public Format Format { get; set; }
        public ColorSpaceKHR ColorSpace { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR();
            _internal.format = Format;
            _internal.colorSpace = ColorSpace;
            return _internal;
        }
    }

    public partial class SwapchainCreateInfoKHR : DisposableObject
    {
        private GCHandleReference refpQueueFamilyIndices;

        public SwapchainCreateInfoKHR()
        {
        }

        public SwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkSwapchainCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Surface = new SurfaceKHR(_internal.surface);
            MinImageCount = _internal.minImageCount;
            ImageFormat = _internal.imageFormat;
            ImageColorSpace = _internal.imageColorSpace;
            ImageExtent = new Extent2D(_internal.imageExtent);
            ImageArrayLayers = _internal.imageArrayLayers;
            ImageUsage = _internal.imageUsage;
            ImageSharingMode = _internal.imageSharingMode;
            QueueFamilyIndexCount = _internal.queueFamilyIndexCount;
            PQueueFamilyIndices = new uint[_internal.queueFamilyIndexCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pQueueFamilyIndices, PQueueFamilyIndices);
            Marshal.FreeHGlobal(_internal.pQueueFamilyIndices);
            PreTransform = _internal.preTransform;
            CompositeAlpha = _internal.compositeAlpha;
            PresentMode = _internal.presentMode;
            Clipped = _internal.clipped;
            OldSwapchain = new SwapchainKHR(_internal.oldSwapchain);
        }

        public StructureType SType => StructureType.SwapchainCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public SurfaceKHR Surface { get; set; }
        public uint MinImageCount { get; set; }
        public Format ImageFormat { get; set; }
        public ColorSpaceKHR ImageColorSpace { get; set; }
        public Extent2D ImageExtent { get; set; }
        public uint ImageArrayLayers { get; set; }
        public uint ImageUsage { get; set; }
        public SharingMode ImageSharingMode { get; set; }
        public uint QueueFamilyIndexCount { get; set; }
        public uint[] PQueueFamilyIndices { get; set; }
        public SurfaceTransformFlagBitsKHR PreTransform { get; set; }
        public CompositeAlphaFlagBitsKHR CompositeAlpha { get; set; }
        public PresentModeKHR PresentMode { get; set; }
        public bool Clipped { get; set; }
        public SwapchainKHR OldSwapchain { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSwapchainCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSwapchainCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.surface = Surface;
            _internal.minImageCount = MinImageCount;
            _internal.imageFormat = ImageFormat;
            _internal.imageColorSpace = ImageColorSpace;
            if (ImageExtent != null)
            {
                _internal.imageExtent = ImageExtent.ToInternal();
            }
            _internal.imageArrayLayers = ImageArrayLayers;
            _internal.imageUsage = ImageUsage;
            _internal.imageSharingMode = ImageSharingMode;
            _internal.queueFamilyIndexCount = QueueFamilyIndexCount;
            refpQueueFamilyIndices?.Dispose();
            if (PQueueFamilyIndices != null)
            {
                var tmpArray0 = new uint[QueueFamilyIndexCount];
                for (int i = 0; i < PQueueFamilyIndices.Length; ++i)
                {
                    tmpArray0[i] = PQueueFamilyIndices[i];
                }
                refpQueueFamilyIndices = new GCHandleReference(tmpArray0);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
            _internal.preTransform = PreTransform;
            _internal.compositeAlpha = CompositeAlpha;
            _internal.presentMode = PresentMode;
            _internal.clipped = Clipped;
            _internal.oldSwapchain = OldSwapchain;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueueFamilyIndices?.Dispose();
        }

    }

    public partial class PresentInfoKHR : DisposableObject
    {
        private GCHandleReference refpWaitSemaphores;

        private GCHandleReference refpSwapchains;

        private GCHandleReference refpImageIndices;

        private GCHandleReference refpResults;

        public PresentInfoKHR()
        {
        }

        public PresentInfoKHR(AdamantiumVulkan.Core.Interop.VkPresentInfoKHR _internal)
        {
            PNext = _internal.pNext;
            WaitSemaphoreCount = _internal.waitSemaphoreCount;
            PWaitSemaphores = new Semaphore[_internal.waitSemaphoreCount];
            MarshalUtils.IntPtrToManagedArray<Semaphore>(_internal.pWaitSemaphores, PWaitSemaphores);
            Marshal.FreeHGlobal(_internal.pWaitSemaphores);
            SwapchainCount = _internal.swapchainCount;
            PSwapchains = new SwapchainKHR[_internal.swapchainCount];
            MarshalUtils.IntPtrToManagedArray<SwapchainKHR>(_internal.pSwapchains, PSwapchains);
            Marshal.FreeHGlobal(_internal.pSwapchains);
            PImageIndices = new uint[_internal.swapchainCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pImageIndices, PImageIndices);
            Marshal.FreeHGlobal(_internal.pImageIndices);
            var tmppResults = new int[_internal.swapchainCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pResults, tmppResults);
            Marshal.FreeHGlobal(_internal.pResults);
            PResults = new AdamantiumVulkan.Core.Result[_internal.swapchainCount];
            for (int i = 0; i < tmppResults.Length; ++i)
            {
                PResults[i] = (AdamantiumVulkan.Core.Result)tmppResults[i];
            }
        }

        public StructureType SType => StructureType.PresentInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint WaitSemaphoreCount { get; set; }
        public Semaphore[] PWaitSemaphores { get; set; }
        public uint SwapchainCount { get; set; }
        public SwapchainKHR[] PSwapchains { get; set; }
        public uint[] PImageIndices { get; set; }
        public Result[] PResults { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPresentInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPresentInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.waitSemaphoreCount = WaitSemaphoreCount;
            refpWaitSemaphores?.Dispose();
            if (PWaitSemaphores != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkSemaphore_T[WaitSemaphoreCount];
                for (int i = 0; i < PWaitSemaphores.Length; ++i)
                {
                    tmpArray0[i] = PWaitSemaphores[i];
                }
                refpWaitSemaphores = new GCHandleReference(tmpArray0);
                _internal.pWaitSemaphores = refpWaitSemaphores.Handle;
            }
            _internal.swapchainCount = SwapchainCount;
            refpSwapchains?.Dispose();
            if (PSwapchains != null)
            {
                var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T[SwapchainCount];
                for (int i = 0; i < PSwapchains.Length; ++i)
                {
                    tmpArray1[i] = PSwapchains[i];
                }
                refpSwapchains = new GCHandleReference(tmpArray1);
                _internal.pSwapchains = refpSwapchains.Handle;
            }
            refpImageIndices?.Dispose();
            if (PImageIndices != null)
            {
                var tmpArray2 = new uint[SwapchainCount];
                for (int i = 0; i < PImageIndices.Length; ++i)
                {
                    tmpArray2[i] = PImageIndices[i];
                }
                refpImageIndices = new GCHandleReference(tmpArray2);
                _internal.pImageIndices = refpImageIndices.Handle;
            }
            refpResults?.Dispose();
            if (PResults != null)
            {
                var tmpArray3 = new Result[SwapchainCount];
                for (int i = 0; i < PResults.Length; ++i)
                {
                    tmpArray3[i] = PResults[i];
                }
                refpResults = new GCHandleReference(tmpArray3);
                _internal.pResults = refpResults.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpWaitSemaphores?.Dispose();
            refpSwapchains?.Dispose();
            refpImageIndices?.Dispose();
            refpResults?.Dispose();
        }

    }

    public partial class ImageSwapchainCreateInfoKHR : DisposableObject
    {
        public ImageSwapchainCreateInfoKHR()
        {
        }

        public ImageSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkImageSwapchainCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Swapchain = new SwapchainKHR(_internal.swapchain);
        }

        public StructureType SType => StructureType.ImageSwapchainCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public SwapchainKHR Swapchain { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageSwapchainCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageSwapchainCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchain = Swapchain;
            return _internal;
        }
    }

    public partial class BindImageMemorySwapchainInfoKHR : DisposableObject
    {
        public BindImageMemorySwapchainInfoKHR()
        {
        }

        public BindImageMemorySwapchainInfoKHR(AdamantiumVulkan.Core.Interop.VkBindImageMemorySwapchainInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Swapchain = new SwapchainKHR(_internal.swapchain);
            ImageIndex = _internal.imageIndex;
        }

        public StructureType SType => StructureType.BindImageMemorySwapchainInfoKhr;
        public System.IntPtr PNext { get; set; }
        public SwapchainKHR Swapchain { get; set; }
        public uint ImageIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindImageMemorySwapchainInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindImageMemorySwapchainInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchain = Swapchain;
            _internal.imageIndex = ImageIndex;
            return _internal;
        }
    }

    public partial class AcquireNextImageInfoKHR : DisposableObject
    {
        public AcquireNextImageInfoKHR()
        {
        }

        public AcquireNextImageInfoKHR(AdamantiumVulkan.Core.Interop.VkAcquireNextImageInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Swapchain = new SwapchainKHR(_internal.swapchain);
            Timeout = _internal.timeout;
            Semaphore = new Semaphore(_internal.semaphore);
            Fence = new Fence(_internal.fence);
            DeviceMask = _internal.deviceMask;
        }

        public StructureType SType => StructureType.AcquireNextImageInfoKhr;
        public System.IntPtr PNext { get; set; }
        public SwapchainKHR Swapchain { get; set; }
        public ulong Timeout { get; set; }
        public Semaphore Semaphore { get; set; }
        public Fence Fence { get; set; }
        public uint DeviceMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAcquireNextImageInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAcquireNextImageInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchain = Swapchain;
            _internal.timeout = Timeout;
            _internal.semaphore = Semaphore;
            _internal.fence = Fence;
            _internal.deviceMask = DeviceMask;
            return _internal;
        }
    }

    public partial class DeviceGroupPresentCapabilitiesKHR : DisposableObject
    {
        public DeviceGroupPresentCapabilitiesKHR()
        {
        }

        public DeviceGroupPresentCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentCapabilitiesKHR _internal)
        {
            PNext = _internal.pNext;
            var tmpArr0 = new uint[32];
            unsafe
            {
                for (int i = 0; i < 32; ++i)
                {
                    tmpArr0[i] = _internal.presentMask[i];
                }
            }
            PresentMask = tmpArr0;
            Modes = _internal.modes;
        }

        public StructureType SType => StructureType.DeviceGroupPresentCapabilitiesKhr;
        public System.IntPtr PNext { get; set; }
        public uint[] PresentMask { get; set; }
        public uint Modes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentCapabilitiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentCapabilitiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if(PresentMask != null)
            {
                if (PresentMask.Length > 32)
                    throw new System.ArgumentOutOfRangeException(nameof(PresentMask), "Array is out of bounds. Size should not be more than 32");

                var inputArray0 = PresentMask;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.presentMask[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.modes = Modes;
            return _internal;
        }
    }

    public partial class DeviceGroupPresentInfoKHR : DisposableObject
    {
        private StructReference refpDeviceMasks;

        public DeviceGroupPresentInfoKHR()
        {
        }

        public DeviceGroupPresentInfoKHR(AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentInfoKHR _internal)
        {
            PNext = _internal.pNext;
            SwapchainCount = _internal.swapchainCount;
            if(_internal.pDeviceMasks != System.IntPtr.Zero)
            {
                PDeviceMasks = (uint?)_internal.pDeviceMasks;
                Marshal.FreeHGlobal(_internal.pDeviceMasks);
            }
            Mode = _internal.mode;
        }

        public StructureType SType => StructureType.DeviceGroupPresentInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint SwapchainCount { get; set; }
        public uint? PDeviceMasks { get; set; }
        public DeviceGroupPresentModeFlagBitsKHR Mode { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchainCount = SwapchainCount;
            refpDeviceMasks?.Dispose();
            if (PDeviceMasks != null)
            {
                refpDeviceMasks = new StructReference(PDeviceMasks);
                _internal.pDeviceMasks = refpDeviceMasks.Handle;
            }
            _internal.mode = Mode;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDeviceMasks?.Dispose();
        }

    }

    public partial class DeviceGroupSwapchainCreateInfoKHR : DisposableObject
    {
        public DeviceGroupSwapchainCreateInfoKHR()
        {
        }

        public DeviceGroupSwapchainCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkDeviceGroupSwapchainCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Modes = _internal.modes;
        }

        public StructureType SType => StructureType.DeviceGroupSwapchainCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint Modes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGroupSwapchainCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupSwapchainCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.modes = Modes;
            return _internal;
        }
    }

    public partial class DisplayPropertiesKHR : DisposableObject
    {
        private StringReference refdisplayName;

        public DisplayPropertiesKHR()
        {
        }

        public DisplayPropertiesKHR(AdamantiumVulkan.Core.Interop.VkDisplayPropertiesKHR _internal)
        {
            Display = new DisplayKHR(_internal.display);
            DisplayName = Marshal.PtrToStringAnsi(_internal.displayName);
            PhysicalDimensions = new Extent2D(_internal.physicalDimensions);
            PhysicalResolution = new Extent2D(_internal.physicalResolution);
            SupportedTransforms = _internal.supportedTransforms;
            PlaneReorderPossible = _internal.planeReorderPossible;
            PersistentContent = _internal.persistentContent;
        }

        public DisplayKHR Display { get; set; }
        public string DisplayName { get; set; }
        public Extent2D PhysicalDimensions { get; set; }
        public Extent2D PhysicalResolution { get; set; }
        public uint SupportedTransforms { get; set; }
        public bool PlaneReorderPossible { get; set; }
        public bool PersistentContent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPropertiesKHR();
            _internal.display = Display;
            refdisplayName?.Dispose();
            if (DisplayName != null)
            {
                refdisplayName = new StringReference(DisplayName, false);
                _internal.displayName = refdisplayName.Handle;
            }
            if (PhysicalDimensions != null)
            {
                _internal.physicalDimensions = PhysicalDimensions.ToInternal();
            }
            if (PhysicalResolution != null)
            {
                _internal.physicalResolution = PhysicalResolution.ToInternal();
            }
            _internal.supportedTransforms = SupportedTransforms;
            _internal.planeReorderPossible = PlaneReorderPossible;
            _internal.persistentContent = PersistentContent;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refdisplayName?.Dispose();
        }

    }

    public partial class DisplayModeParametersKHR
    {
        public DisplayModeParametersKHR()
        {
        }

        public DisplayModeParametersKHR(AdamantiumVulkan.Core.Interop.VkDisplayModeParametersKHR _internal)
        {
            VisibleRegion = new Extent2D(_internal.visibleRegion);
            RefreshRate = _internal.refreshRate;
        }

        public Extent2D VisibleRegion { get; set; }
        public uint RefreshRate { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayModeParametersKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayModeParametersKHR();
            if (VisibleRegion != null)
            {
                _internal.visibleRegion = VisibleRegion.ToInternal();
            }
            _internal.refreshRate = RefreshRate;
            return _internal;
        }
    }

    public partial class DisplayModePropertiesKHR
    {
        public DisplayModePropertiesKHR()
        {
        }

        public DisplayModePropertiesKHR(AdamantiumVulkan.Core.Interop.VkDisplayModePropertiesKHR _internal)
        {
            DisplayMode = new DisplayModeKHR(_internal.displayMode);
            Parameters = new DisplayModeParametersKHR(_internal.parameters);
        }

        public DisplayModeKHR DisplayMode { get; set; }
        public DisplayModeParametersKHR Parameters { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayModePropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayModePropertiesKHR();
            _internal.displayMode = DisplayMode;
            if (Parameters != null)
            {
                _internal.parameters = Parameters.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayModeCreateInfoKHR : DisposableObject
    {
        public DisplayModeCreateInfoKHR()
        {
        }

        public DisplayModeCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkDisplayModeCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Parameters = new DisplayModeParametersKHR(_internal.parameters);
        }

        public StructureType SType => StructureType.DisplayModeCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public DisplayModeParametersKHR Parameters { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayModeCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayModeCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            if (Parameters != null)
            {
                _internal.parameters = Parameters.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayPlaneCapabilitiesKHR
    {
        public DisplayPlaneCapabilitiesKHR()
        {
        }

        public DisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilitiesKHR _internal)
        {
            SupportedAlpha = _internal.supportedAlpha;
            MinSrcPosition = new Offset2D(_internal.minSrcPosition);
            MaxSrcPosition = new Offset2D(_internal.maxSrcPosition);
            MinSrcExtent = new Extent2D(_internal.minSrcExtent);
            MaxSrcExtent = new Extent2D(_internal.maxSrcExtent);
            MinDstPosition = new Offset2D(_internal.minDstPosition);
            MaxDstPosition = new Offset2D(_internal.maxDstPosition);
            MinDstExtent = new Extent2D(_internal.minDstExtent);
            MaxDstExtent = new Extent2D(_internal.maxDstExtent);
        }

        public uint SupportedAlpha { get; set; }
        public Offset2D MinSrcPosition { get; set; }
        public Offset2D MaxSrcPosition { get; set; }
        public Extent2D MinSrcExtent { get; set; }
        public Extent2D MaxSrcExtent { get; set; }
        public Offset2D MinDstPosition { get; set; }
        public Offset2D MaxDstPosition { get; set; }
        public Extent2D MinDstExtent { get; set; }
        public Extent2D MaxDstExtent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilitiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilitiesKHR();
            _internal.supportedAlpha = SupportedAlpha;
            if (MinSrcPosition != null)
            {
                _internal.minSrcPosition = MinSrcPosition.ToInternal();
            }
            if (MaxSrcPosition != null)
            {
                _internal.maxSrcPosition = MaxSrcPosition.ToInternal();
            }
            if (MinSrcExtent != null)
            {
                _internal.minSrcExtent = MinSrcExtent.ToInternal();
            }
            if (MaxSrcExtent != null)
            {
                _internal.maxSrcExtent = MaxSrcExtent.ToInternal();
            }
            if (MinDstPosition != null)
            {
                _internal.minDstPosition = MinDstPosition.ToInternal();
            }
            if (MaxDstPosition != null)
            {
                _internal.maxDstPosition = MaxDstPosition.ToInternal();
            }
            if (MinDstExtent != null)
            {
                _internal.minDstExtent = MinDstExtent.ToInternal();
            }
            if (MaxDstExtent != null)
            {
                _internal.maxDstExtent = MaxDstExtent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayPlanePropertiesKHR
    {
        public DisplayPlanePropertiesKHR()
        {
        }

        public DisplayPlanePropertiesKHR(AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR _internal)
        {
            CurrentDisplay = new DisplayKHR(_internal.currentDisplay);
            CurrentStackIndex = _internal.currentStackIndex;
        }

        public DisplayKHR CurrentDisplay { get; set; }
        public uint CurrentStackIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR();
            _internal.currentDisplay = CurrentDisplay;
            _internal.currentStackIndex = CurrentStackIndex;
            return _internal;
        }
    }

    public partial class DisplaySurfaceCreateInfoKHR : DisposableObject
    {
        public DisplaySurfaceCreateInfoKHR()
        {
        }

        public DisplaySurfaceCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkDisplaySurfaceCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DisplayMode = new DisplayModeKHR(_internal.displayMode);
            PlaneIndex = _internal.planeIndex;
            PlaneStackIndex = _internal.planeStackIndex;
            Transform = _internal.transform;
            GlobalAlpha = _internal.globalAlpha;
            AlphaMode = _internal.alphaMode;
            ImageExtent = new Extent2D(_internal.imageExtent);
        }

        public StructureType SType => StructureType.DisplaySurfaceCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public DisplayModeKHR DisplayMode { get; set; }
        public uint PlaneIndex { get; set; }
        public uint PlaneStackIndex { get; set; }
        public SurfaceTransformFlagBitsKHR Transform { get; set; }
        public float GlobalAlpha { get; set; }
        public DisplayPlaneAlphaFlagBitsKHR AlphaMode { get; set; }
        public Extent2D ImageExtent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplaySurfaceCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplaySurfaceCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.displayMode = DisplayMode;
            _internal.planeIndex = PlaneIndex;
            _internal.planeStackIndex = PlaneStackIndex;
            _internal.transform = Transform;
            _internal.globalAlpha = GlobalAlpha;
            _internal.alphaMode = AlphaMode;
            if (ImageExtent != null)
            {
                _internal.imageExtent = ImageExtent.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayPresentInfoKHR : DisposableObject
    {
        public DisplayPresentInfoKHR()
        {
        }

        public DisplayPresentInfoKHR(AdamantiumVulkan.Core.Interop.VkDisplayPresentInfoKHR _internal)
        {
            PNext = _internal.pNext;
            SrcRect = new Rect2D(_internal.srcRect);
            DstRect = new Rect2D(_internal.dstRect);
            Persistent = _internal.persistent;
        }

        public StructureType SType => StructureType.DisplayPresentInfoKhr;
        public System.IntPtr PNext { get; set; }
        public Rect2D SrcRect { get; set; }
        public Rect2D DstRect { get; set; }
        public bool Persistent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPresentInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPresentInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (SrcRect != null)
            {
                _internal.srcRect = SrcRect.ToInternal();
            }
            if (DstRect != null)
            {
                _internal.dstRect = DstRect.ToInternal();
            }
            _internal.persistent = Persistent;
            return _internal;
        }
    }

    public partial class ImportMemoryFdInfoKHR : DisposableObject
    {
        public ImportMemoryFdInfoKHR()
        {
        }

        public ImportMemoryFdInfoKHR(AdamantiumVulkan.Core.Interop.VkImportMemoryFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
            Fd = _internal.fd;
        }

        public StructureType SType => StructureType.ImportMemoryFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }
        public int Fd { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImportMemoryFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImportMemoryFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            _internal.fd = Fd;
            return _internal;
        }
    }

    public partial class MemoryFdPropertiesKHR : DisposableObject
    {
        public MemoryFdPropertiesKHR()
        {
        }

        public MemoryFdPropertiesKHR(AdamantiumVulkan.Core.Interop.VkMemoryFdPropertiesKHR _internal)
        {
            PNext = _internal.pNext;
            MemoryTypeBits = _internal.memoryTypeBits;
        }

        public StructureType SType => StructureType.MemoryFdPropertiesKhr;
        public System.IntPtr PNext { get; set; }
        public uint MemoryTypeBits { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryFdPropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryFdPropertiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.memoryTypeBits = MemoryTypeBits;
            return _internal;
        }
    }

    public partial class MemoryGetFdInfoKHR : DisposableObject
    {
        public MemoryGetFdInfoKHR()
        {
        }

        public MemoryGetFdInfoKHR(AdamantiumVulkan.Core.Interop.VkMemoryGetFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Memory = new DeviceMemory(_internal.memory);
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.MemoryGetFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public DeviceMemory Memory { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryGetFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryGetFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.memory = Memory;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class ImportSemaphoreFdInfoKHR : DisposableObject
    {
        public ImportSemaphoreFdInfoKHR()
        {
        }

        public ImportSemaphoreFdInfoKHR(AdamantiumVulkan.Core.Interop.VkImportSemaphoreFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Semaphore = new Semaphore(_internal.semaphore);
            Flags = _internal.flags;
            HandleType = _internal.handleType;
            Fd = _internal.fd;
        }

        public StructureType SType => StructureType.ImportSemaphoreFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public Semaphore Semaphore { get; set; }
        public uint Flags { get; set; }
        public ExternalSemaphoreHandleTypeFlagBits HandleType { get; set; }
        public int Fd { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImportSemaphoreFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImportSemaphoreFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.semaphore = Semaphore;
            _internal.flags = Flags;
            _internal.handleType = HandleType;
            _internal.fd = Fd;
            return _internal;
        }
    }

    public partial class SemaphoreGetFdInfoKHR : DisposableObject
    {
        public SemaphoreGetFdInfoKHR()
        {
        }

        public SemaphoreGetFdInfoKHR(AdamantiumVulkan.Core.Interop.VkSemaphoreGetFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Semaphore = new Semaphore(_internal.semaphore);
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.SemaphoreGetFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public Semaphore Semaphore { get; set; }
        public ExternalSemaphoreHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSemaphoreGetFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSemaphoreGetFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.semaphore = Semaphore;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class PhysicalDevicePushDescriptorPropertiesKHR : DisposableObject
    {
        public PhysicalDevicePushDescriptorPropertiesKHR()
        {
        }

        public PhysicalDevicePushDescriptorPropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevicePushDescriptorPropertiesKHR _internal)
        {
            SType = _internal.sType;
            PNext = _internal.pNext;
            MaxPushDescriptors = _internal.maxPushDescriptors;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint MaxPushDescriptors { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDevicePushDescriptorPropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDevicePushDescriptorPropertiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxPushDescriptors = MaxPushDescriptors;
            return _internal;
        }
    }

    public partial class PhysicalDeviceFloat16Int8FeaturesKHR : DisposableObject
    {
        public PhysicalDeviceFloat16Int8FeaturesKHR()
        {
        }

        public PhysicalDeviceFloat16Int8FeaturesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloat16Int8FeaturesKHR _internal)
        {
            PNext = _internal.pNext;
            ShaderFloat16 = _internal.shaderFloat16;
            ShaderInt8 = _internal.shaderInt8;
        }

        public StructureType SType => StructureType.PhysicalDeviceFloat16Int8FeaturesKhr;
        public System.IntPtr PNext { get; set; }
        public bool ShaderFloat16 { get; set; }
        public bool ShaderInt8 { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloat16Int8FeaturesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloat16Int8FeaturesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderFloat16 = ShaderFloat16;
            _internal.shaderInt8 = ShaderInt8;
            return _internal;
        }
    }

    public partial class RectLayerKHR
    {
        public RectLayerKHR()
        {
        }

        public RectLayerKHR(AdamantiumVulkan.Core.Interop.VkRectLayerKHR _internal)
        {
            Offset = new Offset2D(_internal.offset);
            Extent = new Extent2D(_internal.extent);
            Layer = _internal.layer;
        }

        public Offset2D Offset { get; set; }
        public Extent2D Extent { get; set; }
        public uint Layer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRectLayerKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRectLayerKHR();
            if (Offset != null)
            {
                _internal.offset = Offset.ToInternal();
            }
            if (Extent != null)
            {
                _internal.extent = Extent.ToInternal();
            }
            _internal.layer = Layer;
            return _internal;
        }
    }

    public partial class PresentRegionKHR : DisposableObject
    {
        private StructReference refpRectangles;

        public PresentRegionKHR()
        {
        }

        public PresentRegionKHR(AdamantiumVulkan.Core.Interop.VkPresentRegionKHR _internal)
        {
            RectangleCount = _internal.rectangleCount;
            PRectangles = new RectLayerKHR(Marshal.PtrToStructure<VkRectLayerKHR>(_internal.pRectangles));
            Marshal.FreeHGlobal(_internal.pRectangles);
        }

        public uint RectangleCount { get; set; }
        public RectLayerKHR PRectangles { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPresentRegionKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPresentRegionKHR();
            _internal.rectangleCount = RectangleCount;
            refpRectangles?.Dispose();
            if (PRectangles != null)
            {
                var struct0 = PRectangles.ToInternal();
                refpRectangles = new StructReference(struct0);
                _internal.pRectangles = refpRectangles.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpRectangles?.Dispose();
        }

    }

    public partial class PresentRegionsKHR : DisposableObject
    {
        private StructReference refpRegions;

        public PresentRegionsKHR()
        {
        }

        public PresentRegionsKHR(AdamantiumVulkan.Core.Interop.VkPresentRegionsKHR _internal)
        {
            PNext = _internal.pNext;
            SwapchainCount = _internal.swapchainCount;
            PRegions = new PresentRegionKHR(Marshal.PtrToStructure<VkPresentRegionKHR>(_internal.pRegions));
            Marshal.FreeHGlobal(_internal.pRegions);
        }

        public StructureType SType => StructureType.PresentRegionsKhr;
        public System.IntPtr PNext { get; set; }
        public uint SwapchainCount { get; set; }
        public PresentRegionKHR PRegions { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPresentRegionsKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPresentRegionsKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchainCount = SwapchainCount;
            refpRegions?.Dispose();
            if (PRegions != null)
            {
                var struct0 = PRegions.ToInternal();
                refpRegions = new StructReference(struct0);
                _internal.pRegions = refpRegions.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpRegions?.Dispose();
        }

    }

    public partial class AttachmentDescription2KHR : DisposableObject
    {
        public AttachmentDescription2KHR()
        {
        }

        public AttachmentDescription2KHR(AdamantiumVulkan.Core.Interop.VkAttachmentDescription2KHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Format = _internal.format;
            Samples = _internal.samples;
            LoadOp = _internal.loadOp;
            StoreOp = _internal.storeOp;
            StencilLoadOp = _internal.stencilLoadOp;
            StencilStoreOp = _internal.stencilStoreOp;
            InitialLayout = _internal.initialLayout;
            FinalLayout = _internal.finalLayout;
        }

        public StructureType SType => StructureType.AttachmentDescription2Khr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public Format Format { get; set; }
        public SampleCountFlagBits Samples { get; set; }
        public AttachmentLoadOp LoadOp { get; set; }
        public AttachmentStoreOp StoreOp { get; set; }
        public AttachmentLoadOp StencilLoadOp { get; set; }
        public AttachmentStoreOp StencilStoreOp { get; set; }
        public ImageLayout InitialLayout { get; set; }
        public ImageLayout FinalLayout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAttachmentDescription2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAttachmentDescription2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.format = Format;
            _internal.samples = Samples;
            _internal.loadOp = LoadOp;
            _internal.storeOp = StoreOp;
            _internal.stencilLoadOp = StencilLoadOp;
            _internal.stencilStoreOp = StencilStoreOp;
            _internal.initialLayout = InitialLayout;
            _internal.finalLayout = FinalLayout;
            return _internal;
        }
    }

    public partial class AttachmentReference2KHR : DisposableObject
    {
        public AttachmentReference2KHR()
        {
        }

        public AttachmentReference2KHR(AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR _internal)
        {
            PNext = _internal.pNext;
            Attachment = _internal.attachment;
            Layout = _internal.layout;
            AspectMask = _internal.aspectMask;
        }

        public StructureType SType => StructureType.AttachmentReference2Khr;
        public System.IntPtr PNext { get; set; }
        public uint Attachment { get; set; }
        public ImageLayout Layout { get; set; }
        public uint AspectMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.attachment = Attachment;
            _internal.layout = Layout;
            _internal.aspectMask = AspectMask;
            return _internal;
        }
    }

    public partial class SubpassDescription2KHR : DisposableObject
    {
        private GCHandleReference refpInputAttachments;

        private GCHandleReference refpColorAttachments;

        private GCHandleReference refpResolveAttachments;

        private StructReference refpDepthStencilAttachment;

        private GCHandleReference refpPreserveAttachments;

        public SubpassDescription2KHR()
        {
        }

        public SubpassDescription2KHR(AdamantiumVulkan.Core.Interop.VkSubpassDescription2KHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PipelineBindPoint = _internal.pipelineBindPoint;
            ViewMask = _internal.viewMask;
            InputAttachmentCount = _internal.inputAttachmentCount;
            PInputAttachments = new AttachmentReference2KHR[_internal.inputAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference2KHR>(_internal.pInputAttachments, PInputAttachments);
            Marshal.FreeHGlobal(_internal.pInputAttachments);
            ColorAttachmentCount = _internal.colorAttachmentCount;
            PColorAttachments = new AttachmentReference2KHR[_internal.colorAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference2KHR>(_internal.pColorAttachments, PColorAttachments);
            Marshal.FreeHGlobal(_internal.pColorAttachments);
            PResolveAttachments = new AttachmentReference2KHR[_internal.colorAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<AttachmentReference2KHR>(_internal.pResolveAttachments, PResolveAttachments);
            Marshal.FreeHGlobal(_internal.pResolveAttachments);
            PDepthStencilAttachment = new AttachmentReference2KHR(Marshal.PtrToStructure<VkAttachmentReference2KHR>(_internal.pDepthStencilAttachment));
            Marshal.FreeHGlobal(_internal.pDepthStencilAttachment);
            PreserveAttachmentCount = _internal.preserveAttachmentCount;
            PPreserveAttachments = new uint[_internal.preserveAttachmentCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pPreserveAttachments, PPreserveAttachments);
            Marshal.FreeHGlobal(_internal.pPreserveAttachments);
        }

        public StructureType SType => StructureType.SubpassDescription2Khr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public PipelineBindPoint PipelineBindPoint { get; set; }
        public uint ViewMask { get; set; }
        public uint InputAttachmentCount { get; set; }
        public AttachmentReference2KHR[] PInputAttachments { get; set; }
        public uint ColorAttachmentCount { get; set; }
        public AttachmentReference2KHR[] PColorAttachments { get; set; }
        public AttachmentReference2KHR[] PResolveAttachments { get; set; }
        public AttachmentReference2KHR PDepthStencilAttachment { get; set; }
        public uint PreserveAttachmentCount { get; set; }
        public uint[] PPreserveAttachments { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassDescription2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDescription2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.pipelineBindPoint = PipelineBindPoint;
            _internal.viewMask = ViewMask;
            _internal.inputAttachmentCount = InputAttachmentCount;
            refpInputAttachments?.Dispose();
            if (PInputAttachments != null)
            {
                var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR[InputAttachmentCount];
                for (int i = 0; i < PInputAttachments.Length; ++i)
                {
                    tmpArray0[i] = PInputAttachments[i].ToInternal();
                }
                refpInputAttachments = new GCHandleReference(tmpArray0);
                _internal.pInputAttachments = refpInputAttachments.Handle;
            }
            _internal.colorAttachmentCount = ColorAttachmentCount;
            refpColorAttachments?.Dispose();
            if (PColorAttachments != null)
            {
                var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR[ColorAttachmentCount];
                for (int i = 0; i < PColorAttachments.Length; ++i)
                {
                    tmpArray1[i] = PColorAttachments[i].ToInternal();
                }
                refpColorAttachments = new GCHandleReference(tmpArray1);
                _internal.pColorAttachments = refpColorAttachments.Handle;
            }
            refpResolveAttachments?.Dispose();
            if (PResolveAttachments != null)
            {
                var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference2KHR[ColorAttachmentCount];
                for (int i = 0; i < PResolveAttachments.Length; ++i)
                {
                    tmpArray2[i] = PResolveAttachments[i].ToInternal();
                }
                refpResolveAttachments = new GCHandleReference(tmpArray2);
                _internal.pResolveAttachments = refpResolveAttachments.Handle;
            }
            refpDepthStencilAttachment?.Dispose();
            if (PDepthStencilAttachment != null)
            {
                var struct0 = PDepthStencilAttachment.ToInternal();
                refpDepthStencilAttachment = new StructReference(struct0);
                _internal.pDepthStencilAttachment = refpDepthStencilAttachment.Handle;
            }
            _internal.preserveAttachmentCount = PreserveAttachmentCount;
            refpPreserveAttachments?.Dispose();
            if (PPreserveAttachments != null)
            {
                var tmpArray3 = new uint[PreserveAttachmentCount];
                for (int i = 0; i < PPreserveAttachments.Length; ++i)
                {
                    tmpArray3[i] = PPreserveAttachments[i];
                }
                refpPreserveAttachments = new GCHandleReference(tmpArray3);
                _internal.pPreserveAttachments = refpPreserveAttachments.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpInputAttachments?.Dispose();
            refpColorAttachments?.Dispose();
            refpResolveAttachments?.Dispose();
            refpDepthStencilAttachment?.Dispose();
            refpPreserveAttachments?.Dispose();
        }

    }

    public partial class SubpassDependency2KHR : DisposableObject
    {
        public SubpassDependency2KHR()
        {
        }

        public SubpassDependency2KHR(AdamantiumVulkan.Core.Interop.VkSubpassDependency2KHR _internal)
        {
            PNext = _internal.pNext;
            SrcSubpass = _internal.srcSubpass;
            DstSubpass = _internal.dstSubpass;
            SrcStageMask = _internal.srcStageMask;
            DstStageMask = _internal.dstStageMask;
            SrcAccessMask = _internal.srcAccessMask;
            DstAccessMask = _internal.dstAccessMask;
            DependencyFlags = _internal.dependencyFlags;
            ViewOffset = _internal.viewOffset;
        }

        public StructureType SType => StructureType.SubpassDependency2Khr;
        public System.IntPtr PNext { get; set; }
        public uint SrcSubpass { get; set; }
        public uint DstSubpass { get; set; }
        public uint SrcStageMask { get; set; }
        public uint DstStageMask { get; set; }
        public uint SrcAccessMask { get; set; }
        public uint DstAccessMask { get; set; }
        public uint DependencyFlags { get; set; }
        public int ViewOffset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassDependency2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDependency2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcSubpass = SrcSubpass;
            _internal.dstSubpass = DstSubpass;
            _internal.srcStageMask = SrcStageMask;
            _internal.dstStageMask = DstStageMask;
            _internal.srcAccessMask = SrcAccessMask;
            _internal.dstAccessMask = DstAccessMask;
            _internal.dependencyFlags = DependencyFlags;
            _internal.viewOffset = ViewOffset;
            return _internal;
        }
    }

    public partial class RenderPassCreateInfo2KHR : DisposableObject
    {
        private StructReference refpAttachments;

        private StructReference refpSubpasses;

        private StructReference refpDependencies;

        private StructReference refpCorrelatedViewMasks;

        public RenderPassCreateInfo2KHR()
        {
        }

        public RenderPassCreateInfo2KHR(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2KHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            AttachmentCount = _internal.attachmentCount;
            PAttachments = new AttachmentDescription2KHR(Marshal.PtrToStructure<VkAttachmentDescription2KHR>(_internal.pAttachments));
            Marshal.FreeHGlobal(_internal.pAttachments);
            SubpassCount = _internal.subpassCount;
            PSubpasses = new SubpassDescription2KHR(Marshal.PtrToStructure<VkSubpassDescription2KHR>(_internal.pSubpasses));
            Marshal.FreeHGlobal(_internal.pSubpasses);
            DependencyCount = _internal.dependencyCount;
            PDependencies = new SubpassDependency2KHR(Marshal.PtrToStructure<VkSubpassDependency2KHR>(_internal.pDependencies));
            Marshal.FreeHGlobal(_internal.pDependencies);
            CorrelatedViewMaskCount = _internal.correlatedViewMaskCount;
            if(_internal.pCorrelatedViewMasks != System.IntPtr.Zero)
            {
                PCorrelatedViewMasks = (uint?)_internal.pCorrelatedViewMasks;
                Marshal.FreeHGlobal(_internal.pCorrelatedViewMasks);
            }
        }

        public StructureType SType => StructureType.RenderPassCreateInfo2Khr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint AttachmentCount { get; set; }
        public AttachmentDescription2KHR PAttachments { get; set; }
        public uint SubpassCount { get; set; }
        public SubpassDescription2KHR PSubpasses { get; set; }
        public uint DependencyCount { get; set; }
        public SubpassDependency2KHR PDependencies { get; set; }
        public uint CorrelatedViewMaskCount { get; set; }
        public uint? PCorrelatedViewMasks { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.attachmentCount = AttachmentCount;
            refpAttachments?.Dispose();
            if (PAttachments != null)
            {
                var struct0 = PAttachments.ToInternal();
                refpAttachments = new StructReference(struct0);
                _internal.pAttachments = refpAttachments.Handle;
            }
            _internal.subpassCount = SubpassCount;
            refpSubpasses?.Dispose();
            if (PSubpasses != null)
            {
                var struct1 = PSubpasses.ToInternal();
                refpSubpasses = new StructReference(struct1);
                _internal.pSubpasses = refpSubpasses.Handle;
            }
            _internal.dependencyCount = DependencyCount;
            refpDependencies?.Dispose();
            if (PDependencies != null)
            {
                var struct2 = PDependencies.ToInternal();
                refpDependencies = new StructReference(struct2);
                _internal.pDependencies = refpDependencies.Handle;
            }
            _internal.correlatedViewMaskCount = CorrelatedViewMaskCount;
            refpCorrelatedViewMasks?.Dispose();
            if (PCorrelatedViewMasks != null)
            {
                refpCorrelatedViewMasks = new StructReference(PCorrelatedViewMasks);
                _internal.pCorrelatedViewMasks = refpCorrelatedViewMasks.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttachments?.Dispose();
            refpSubpasses?.Dispose();
            refpDependencies?.Dispose();
            refpCorrelatedViewMasks?.Dispose();
        }

    }

    public partial class SubpassBeginInfoKHR : DisposableObject
    {
        public SubpassBeginInfoKHR()
        {
        }

        public SubpassBeginInfoKHR(AdamantiumVulkan.Core.Interop.VkSubpassBeginInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Contents = _internal.contents;
        }

        public StructureType SType => StructureType.SubpassBeginInfoKhr;
        public System.IntPtr PNext { get; set; }
        public SubpassContents Contents { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassBeginInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassBeginInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.contents = Contents;
            return _internal;
        }
    }

    public partial class SubpassEndInfoKHR : DisposableObject
    {
        public SubpassEndInfoKHR()
        {
        }

        public SubpassEndInfoKHR(AdamantiumVulkan.Core.Interop.VkSubpassEndInfoKHR _internal)
        {
            PNext = _internal.pNext;
        }

        public StructureType SType => StructureType.SubpassEndInfoKhr;
        public System.IntPtr PNext { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassEndInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassEndInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            return _internal;
        }
    }

    public partial class SharedPresentSurfaceCapabilitiesKHR : DisposableObject
    {
        public SharedPresentSurfaceCapabilitiesKHR()
        {
        }

        public SharedPresentSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkSharedPresentSurfaceCapabilitiesKHR _internal)
        {
            PNext = _internal.pNext;
            SharedPresentSupportedUsageFlags = _internal.sharedPresentSupportedUsageFlags;
        }

        public StructureType SType => StructureType.SharedPresentSurfaceCapabilitiesKhr;
        public System.IntPtr PNext { get; set; }
        public uint SharedPresentSupportedUsageFlags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSharedPresentSurfaceCapabilitiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSharedPresentSurfaceCapabilitiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.sharedPresentSupportedUsageFlags = SharedPresentSupportedUsageFlags;
            return _internal;
        }
    }

    public partial class ImportFenceFdInfoKHR : DisposableObject
    {
        public ImportFenceFdInfoKHR()
        {
        }

        public ImportFenceFdInfoKHR(AdamantiumVulkan.Core.Interop.VkImportFenceFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Fence = new Fence(_internal.fence);
            Flags = _internal.flags;
            HandleType = _internal.handleType;
            Fd = _internal.fd;
        }

        public StructureType SType => StructureType.ImportFenceFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public Fence Fence { get; set; }
        public uint Flags { get; set; }
        public ExternalFenceHandleTypeFlagBits HandleType { get; set; }
        public int Fd { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImportFenceFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImportFenceFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.fence = Fence;
            _internal.flags = Flags;
            _internal.handleType = HandleType;
            _internal.fd = Fd;
            return _internal;
        }
    }

    public partial class FenceGetFdInfoKHR : DisposableObject
    {
        public FenceGetFdInfoKHR()
        {
        }

        public FenceGetFdInfoKHR(AdamantiumVulkan.Core.Interop.VkFenceGetFdInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Fence = new Fence(_internal.fence);
            HandleType = _internal.handleType;
        }

        public StructureType SType => StructureType.FenceGetFdInfoKhr;
        public System.IntPtr PNext { get; set; }
        public Fence Fence { get; set; }
        public ExternalFenceHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFenceGetFdInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFenceGetFdInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.fence = Fence;
            _internal.handleType = HandleType;
            return _internal;
        }
    }

    public partial class PhysicalDeviceSurfaceInfo2KHR : DisposableObject
    {
        public PhysicalDeviceSurfaceInfo2KHR()
        {
        }

        public PhysicalDeviceSurfaceInfo2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSurfaceInfo2KHR _internal)
        {
            PNext = _internal.pNext;
            Surface = new SurfaceKHR(_internal.surface);
        }

        public StructureType SType => StructureType.PhysicalDeviceSurfaceInfo2Khr;
        public System.IntPtr PNext { get; set; }
        public SurfaceKHR Surface { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSurfaceInfo2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSurfaceInfo2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.surface = Surface;
            return _internal;
        }
    }

    public partial class SurfaceCapabilities2KHR : DisposableObject
    {
        public SurfaceCapabilities2KHR()
        {
        }

        public SurfaceCapabilities2KHR(AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2KHR _internal)
        {
            PNext = _internal.pNext;
            SurfaceCapabilities = new SurfaceCapabilitiesKHR(_internal.surfaceCapabilities);
        }

        public StructureType SType => StructureType.SurfaceCapabilities2Khr;
        public System.IntPtr PNext { get; set; }
        public SurfaceCapabilitiesKHR SurfaceCapabilities { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (SurfaceCapabilities != null)
            {
                _internal.surfaceCapabilities = SurfaceCapabilities.ToInternal();
            }
            return _internal;
        }
    }

    public partial class SurfaceFormat2KHR : DisposableObject
    {
        public SurfaceFormat2KHR()
        {
        }

        public SurfaceFormat2KHR(AdamantiumVulkan.Core.Interop.VkSurfaceFormat2KHR _internal)
        {
            PNext = _internal.pNext;
            SurfaceFormat = new SurfaceFormatKHR(_internal.surfaceFormat);
        }

        public StructureType SType => StructureType.SurfaceFormat2Khr;
        public System.IntPtr PNext { get; set; }
        public SurfaceFormatKHR SurfaceFormat { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSurfaceFormat2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSurfaceFormat2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (SurfaceFormat != null)
            {
                _internal.surfaceFormat = SurfaceFormat.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayProperties2KHR : DisposableObject
    {
        public DisplayProperties2KHR()
        {
        }

        public DisplayProperties2KHR(AdamantiumVulkan.Core.Interop.VkDisplayProperties2KHR _internal)
        {
            PNext = _internal.pNext;
            DisplayProperties = new DisplayPropertiesKHR(_internal.displayProperties);
        }

        public StructureType SType => StructureType.DisplayProperties2Khr;
        public System.IntPtr PNext { get; set; }
        public DisplayPropertiesKHR DisplayProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayProperties2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayProperties2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (DisplayProperties != null)
            {
                _internal.displayProperties = DisplayProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayPlaneProperties2KHR : DisposableObject
    {
        public DisplayPlaneProperties2KHR()
        {
        }

        public DisplayPlaneProperties2KHR(AdamantiumVulkan.Core.Interop.VkDisplayPlaneProperties2KHR _internal)
        {
            PNext = _internal.pNext;
            DisplayPlaneProperties = new DisplayPlanePropertiesKHR(_internal.displayPlaneProperties);
        }

        public StructureType SType => StructureType.DisplayPlaneProperties2Khr;
        public System.IntPtr PNext { get; set; }
        public DisplayPlanePropertiesKHR DisplayPlaneProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPlaneProperties2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPlaneProperties2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (DisplayPlaneProperties != null)
            {
                _internal.displayPlaneProperties = DisplayPlaneProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayModeProperties2KHR : DisposableObject
    {
        public DisplayModeProperties2KHR()
        {
        }

        public DisplayModeProperties2KHR(AdamantiumVulkan.Core.Interop.VkDisplayModeProperties2KHR _internal)
        {
            PNext = _internal.pNext;
            DisplayModeProperties = new DisplayModePropertiesKHR(_internal.displayModeProperties);
        }

        public StructureType SType => StructureType.DisplayModeProperties2Khr;
        public System.IntPtr PNext { get; set; }
        public DisplayModePropertiesKHR DisplayModeProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayModeProperties2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayModeProperties2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (DisplayModeProperties != null)
            {
                _internal.displayModeProperties = DisplayModeProperties.ToInternal();
            }
            return _internal;
        }
    }

    public partial class DisplayPlaneInfo2KHR : DisposableObject
    {
        public DisplayPlaneInfo2KHR()
        {
        }

        public DisplayPlaneInfo2KHR(AdamantiumVulkan.Core.Interop.VkDisplayPlaneInfo2KHR _internal)
        {
            PNext = _internal.pNext;
            Mode = new DisplayModeKHR(_internal.mode);
            PlaneIndex = _internal.planeIndex;
        }

        public StructureType SType => StructureType.DisplayPlaneInfo2Khr;
        public System.IntPtr PNext { get; set; }
        public DisplayModeKHR Mode { get; set; }
        public uint PlaneIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPlaneInfo2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPlaneInfo2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.mode = Mode;
            _internal.planeIndex = PlaneIndex;
            return _internal;
        }
    }

    public partial class DisplayPlaneCapabilities2KHR : DisposableObject
    {
        public DisplayPlaneCapabilities2KHR()
        {
        }

        public DisplayPlaneCapabilities2KHR(AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilities2KHR _internal)
        {
            PNext = _internal.pNext;
            Capabilities = new DisplayPlaneCapabilitiesKHR(_internal.capabilities);
        }

        public StructureType SType => StructureType.DisplayPlaneCapabilities2Khr;
        public System.IntPtr PNext { get; set; }
        public DisplayPlaneCapabilitiesKHR Capabilities { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilities2KHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilities2KHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (Capabilities != null)
            {
                _internal.capabilities = Capabilities.ToInternal();
            }
            return _internal;
        }
    }

    public partial class ImageFormatListCreateInfoKHR : DisposableObject
    {
        private GCHandleReference refpViewFormats;

        public ImageFormatListCreateInfoKHR()
        {
        }

        public ImageFormatListCreateInfoKHR(AdamantiumVulkan.Core.Interop.VkImageFormatListCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            ViewFormatCount = _internal.viewFormatCount;
            var tmppViewFormats = new int[_internal.viewFormatCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pViewFormats, tmppViewFormats);
            Marshal.FreeHGlobal(_internal.pViewFormats);
            PViewFormats = new AdamantiumVulkan.Core.Format[_internal.viewFormatCount];
            for (int i = 0; i < tmppViewFormats.Length; ++i)
            {
                PViewFormats[i] = (AdamantiumVulkan.Core.Format)tmppViewFormats[i];
            }
        }

        public StructureType SType => StructureType.ImageFormatListCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint ViewFormatCount { get; set; }
        public Format[] PViewFormats { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageFormatListCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageFormatListCreateInfoKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.viewFormatCount = ViewFormatCount;
            refpViewFormats?.Dispose();
            if (PViewFormats != null)
            {
                var tmpArray0 = new Format[ViewFormatCount];
                for (int i = 0; i < PViewFormats.Length; ++i)
                {
                    tmpArray0[i] = PViewFormats[i];
                }
                refpViewFormats = new GCHandleReference(tmpArray0);
                _internal.pViewFormats = refpViewFormats.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpViewFormats?.Dispose();
        }

    }

    public partial class PhysicalDevice8BitStorageFeaturesKHR : DisposableObject
    {
        public PhysicalDevice8BitStorageFeaturesKHR()
        {
        }

        public PhysicalDevice8BitStorageFeaturesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice8BitStorageFeaturesKHR _internal)
        {
            PNext = _internal.pNext;
            StorageBuffer8BitAccess = _internal.storageBuffer8BitAccess;
            UniformAndStorageBuffer8BitAccess = _internal.uniformAndStorageBuffer8BitAccess;
            StoragePushConstant8 = _internal.storagePushConstant8;
        }

        public StructureType SType => StructureType.PhysicalDevice8bitStorageFeaturesKhr;
        public System.IntPtr PNext { get; set; }
        public bool StorageBuffer8BitAccess { get; set; }
        public bool UniformAndStorageBuffer8BitAccess { get; set; }
        public bool StoragePushConstant8 { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDevice8BitStorageFeaturesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDevice8BitStorageFeaturesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.storageBuffer8BitAccess = StorageBuffer8BitAccess;
            _internal.uniformAndStorageBuffer8BitAccess = UniformAndStorageBuffer8BitAccess;
            _internal.storagePushConstant8 = StoragePushConstant8;
            return _internal;
        }
    }

    public partial class PhysicalDeviceShaderAtomicInt64FeaturesKHR : DisposableObject
    {
        public PhysicalDeviceShaderAtomicInt64FeaturesKHR()
        {
        }

        public PhysicalDeviceShaderAtomicInt64FeaturesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR _internal)
        {
            PNext = _internal.pNext;
            ShaderBufferInt64Atomics = _internal.shaderBufferInt64Atomics;
            ShaderSharedInt64Atomics = _internal.shaderSharedInt64Atomics;
        }

        public StructureType SType => StructureType.PhysicalDeviceShaderAtomicInt64FeaturesKhr;
        public System.IntPtr PNext { get; set; }
        public bool ShaderBufferInt64Atomics { get; set; }
        public bool ShaderSharedInt64Atomics { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderBufferInt64Atomics = ShaderBufferInt64Atomics;
            _internal.shaderSharedInt64Atomics = ShaderSharedInt64Atomics;
            return _internal;
        }
    }

    public partial class ConformanceVersionKHR
    {
        public ConformanceVersionKHR()
        {
        }

        public ConformanceVersionKHR(AdamantiumVulkan.Core.Interop.VkConformanceVersionKHR _internal)
        {
            Major = _internal.major;
            Minor = _internal.minor;
            Subminor = _internal.subminor;
            Patch = _internal.patch;
        }

        public byte Major { get; set; }
        public byte Minor { get; set; }
        public byte Subminor { get; set; }
        public byte Patch { get; set; }

        public AdamantiumVulkan.Core.Interop.VkConformanceVersionKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkConformanceVersionKHR();
            _internal.major = Major;
            _internal.minor = Minor;
            _internal.subminor = Subminor;
            _internal.patch = Patch;
            return _internal;
        }
    }

    public partial class PhysicalDeviceDriverPropertiesKHR : DisposableObject
    {
        public PhysicalDeviceDriverPropertiesKHR()
        {
        }

        public PhysicalDeviceDriverPropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDriverPropertiesKHR _internal)
        {
            PNext = _internal.pNext;
            DriverID = _internal.driverID;
            var tmpArr0 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr0[i] = (byte)_internal.driverName[i];
                }
            }
            DriverName = System.Text.Encoding.ASCII.GetString(tmpArr0).Replace("\0", string.Empty);
            var tmpArr1 = new byte[256];
            unsafe
            {
                for (int i = 0; i < 256; ++i)
                {
                    tmpArr1[i] = (byte)_internal.driverInfo[i];
                }
            }
            DriverInfo = System.Text.Encoding.ASCII.GetString(tmpArr1).Replace("\0", string.Empty);
            ConformanceVersion = new ConformanceVersionKHR(_internal.conformanceVersion);
        }

        public StructureType SType => StructureType.PhysicalDeviceDriverPropertiesKhr;
        public System.IntPtr PNext { get; set; }
        public DriverIdKHR DriverID { get; set; }
        public string DriverName { get; set; }
        public string DriverInfo { get; set; }
        public ConformanceVersionKHR ConformanceVersion { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDriverPropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDriverPropertiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.driverID = DriverID;
            if(DriverName != null)
            {
                if (DriverName.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverName), "Array is out of bounds. Size should not be more than 256");

                var inputArray0 = System.Text.Encoding.ASCII.GetBytes(DriverName);
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.driverName[i] = (sbyte)inputArray0[i];
                        }
                    }
                }
            }
            if(DriverInfo != null)
            {
                if (DriverInfo.Length > 256)
                    throw new System.ArgumentOutOfRangeException(nameof(DriverInfo), "Array is out of bounds. Size should not be more than 256");

                var inputArray1 = System.Text.Encoding.ASCII.GetBytes(DriverInfo);
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.driverInfo[i] = (sbyte)inputArray1[i];
                        }
                    }
                }
            }
            if (ConformanceVersion != null)
            {
                _internal.conformanceVersion = ConformanceVersion.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceFloatControlsPropertiesKHR : DisposableObject
    {
        public PhysicalDeviceFloatControlsPropertiesKHR()
        {
        }

        public PhysicalDeviceFloatControlsPropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloatControlsPropertiesKHR _internal)
        {
            PNext = _internal.pNext;
            SeparateDenormSettings = _internal.separateDenormSettings;
            SeparateRoundingModeSettings = _internal.separateRoundingModeSettings;
            ShaderSignedZeroInfNanPreserveFloat16 = _internal.shaderSignedZeroInfNanPreserveFloat16;
            ShaderSignedZeroInfNanPreserveFloat32 = _internal.shaderSignedZeroInfNanPreserveFloat32;
            ShaderSignedZeroInfNanPreserveFloat64 = _internal.shaderSignedZeroInfNanPreserveFloat64;
            ShaderDenormPreserveFloat16 = _internal.shaderDenormPreserveFloat16;
            ShaderDenormPreserveFloat32 = _internal.shaderDenormPreserveFloat32;
            ShaderDenormPreserveFloat64 = _internal.shaderDenormPreserveFloat64;
            ShaderDenormFlushToZeroFloat16 = _internal.shaderDenormFlushToZeroFloat16;
            ShaderDenormFlushToZeroFloat32 = _internal.shaderDenormFlushToZeroFloat32;
            ShaderDenormFlushToZeroFloat64 = _internal.shaderDenormFlushToZeroFloat64;
            ShaderRoundingModeRTEFloat16 = _internal.shaderRoundingModeRTEFloat16;
            ShaderRoundingModeRTEFloat32 = _internal.shaderRoundingModeRTEFloat32;
            ShaderRoundingModeRTEFloat64 = _internal.shaderRoundingModeRTEFloat64;
            ShaderRoundingModeRTZFloat16 = _internal.shaderRoundingModeRTZFloat16;
            ShaderRoundingModeRTZFloat32 = _internal.shaderRoundingModeRTZFloat32;
            ShaderRoundingModeRTZFloat64 = _internal.shaderRoundingModeRTZFloat64;
        }

        public StructureType SType => StructureType.PhysicalDeviceFloatControlsPropertiesKhr;
        public System.IntPtr PNext { get; set; }
        public bool SeparateDenormSettings { get; set; }
        public bool SeparateRoundingModeSettings { get; set; }
        public bool ShaderSignedZeroInfNanPreserveFloat16 { get; set; }
        public bool ShaderSignedZeroInfNanPreserveFloat32 { get; set; }
        public bool ShaderSignedZeroInfNanPreserveFloat64 { get; set; }
        public bool ShaderDenormPreserveFloat16 { get; set; }
        public bool ShaderDenormPreserveFloat32 { get; set; }
        public bool ShaderDenormPreserveFloat64 { get; set; }
        public bool ShaderDenormFlushToZeroFloat16 { get; set; }
        public bool ShaderDenormFlushToZeroFloat32 { get; set; }
        public bool ShaderDenormFlushToZeroFloat64 { get; set; }
        public bool ShaderRoundingModeRTEFloat16 { get; set; }
        public bool ShaderRoundingModeRTEFloat32 { get; set; }
        public bool ShaderRoundingModeRTEFloat64 { get; set; }
        public bool ShaderRoundingModeRTZFloat16 { get; set; }
        public bool ShaderRoundingModeRTZFloat32 { get; set; }
        public bool ShaderRoundingModeRTZFloat64 { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloatControlsPropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFloatControlsPropertiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.separateDenormSettings = SeparateDenormSettings;
            _internal.separateRoundingModeSettings = SeparateRoundingModeSettings;
            _internal.shaderSignedZeroInfNanPreserveFloat16 = ShaderSignedZeroInfNanPreserveFloat16;
            _internal.shaderSignedZeroInfNanPreserveFloat32 = ShaderSignedZeroInfNanPreserveFloat32;
            _internal.shaderSignedZeroInfNanPreserveFloat64 = ShaderSignedZeroInfNanPreserveFloat64;
            _internal.shaderDenormPreserveFloat16 = ShaderDenormPreserveFloat16;
            _internal.shaderDenormPreserveFloat32 = ShaderDenormPreserveFloat32;
            _internal.shaderDenormPreserveFloat64 = ShaderDenormPreserveFloat64;
            _internal.shaderDenormFlushToZeroFloat16 = ShaderDenormFlushToZeroFloat16;
            _internal.shaderDenormFlushToZeroFloat32 = ShaderDenormFlushToZeroFloat32;
            _internal.shaderDenormFlushToZeroFloat64 = ShaderDenormFlushToZeroFloat64;
            _internal.shaderRoundingModeRTEFloat16 = ShaderRoundingModeRTEFloat16;
            _internal.shaderRoundingModeRTEFloat32 = ShaderRoundingModeRTEFloat32;
            _internal.shaderRoundingModeRTEFloat64 = ShaderRoundingModeRTEFloat64;
            _internal.shaderRoundingModeRTZFloat16 = ShaderRoundingModeRTZFloat16;
            _internal.shaderRoundingModeRTZFloat32 = ShaderRoundingModeRTZFloat32;
            _internal.shaderRoundingModeRTZFloat64 = ShaderRoundingModeRTZFloat64;
            return _internal;
        }
    }

    public partial class SubpassDescriptionDepthStencilResolveKHR : DisposableObject
    {
        private StructReference refpDepthStencilResolveAttachment;

        public SubpassDescriptionDepthStencilResolveKHR()
        {
        }

        public SubpassDescriptionDepthStencilResolveKHR(AdamantiumVulkan.Core.Interop.VkSubpassDescriptionDepthStencilResolveKHR _internal)
        {
            PNext = _internal.pNext;
            DepthResolveMode = _internal.depthResolveMode;
            StencilResolveMode = _internal.stencilResolveMode;
            PDepthStencilResolveAttachment = new AttachmentReference2KHR(Marshal.PtrToStructure<VkAttachmentReference2KHR>(_internal.pDepthStencilResolveAttachment));
            Marshal.FreeHGlobal(_internal.pDepthStencilResolveAttachment);
        }

        public StructureType SType => StructureType.SubpassDescriptionDepthStencilResolveKhr;
        public System.IntPtr PNext { get; set; }
        public ResolveModeFlagBitsKHR DepthResolveMode { get; set; }
        public ResolveModeFlagBitsKHR StencilResolveMode { get; set; }
        public AttachmentReference2KHR PDepthStencilResolveAttachment { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassDescriptionDepthStencilResolveKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDescriptionDepthStencilResolveKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.depthResolveMode = DepthResolveMode;
            _internal.stencilResolveMode = StencilResolveMode;
            refpDepthStencilResolveAttachment?.Dispose();
            if (PDepthStencilResolveAttachment != null)
            {
                var struct0 = PDepthStencilResolveAttachment.ToInternal();
                refpDepthStencilResolveAttachment = new StructReference(struct0);
                _internal.pDepthStencilResolveAttachment = refpDepthStencilResolveAttachment.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDepthStencilResolveAttachment?.Dispose();
        }

    }

    public partial class PhysicalDeviceDepthStencilResolvePropertiesKHR : DisposableObject
    {
        public PhysicalDeviceDepthStencilResolvePropertiesKHR()
        {
        }

        public PhysicalDeviceDepthStencilResolvePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthStencilResolvePropertiesKHR _internal)
        {
            PNext = _internal.pNext;
            SupportedDepthResolveModes = _internal.supportedDepthResolveModes;
            SupportedStencilResolveModes = _internal.supportedStencilResolveModes;
            IndependentResolveNone = _internal.independentResolveNone;
            IndependentResolve = _internal.independentResolve;
        }

        public StructureType SType => StructureType.PhysicalDeviceDepthStencilResolvePropertiesKhr;
        public System.IntPtr PNext { get; set; }
        public uint SupportedDepthResolveModes { get; set; }
        public uint SupportedStencilResolveModes { get; set; }
        public bool IndependentResolveNone { get; set; }
        public bool IndependentResolve { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthStencilResolvePropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthStencilResolvePropertiesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.supportedDepthResolveModes = SupportedDepthResolveModes;
            _internal.supportedStencilResolveModes = SupportedStencilResolveModes;
            _internal.independentResolveNone = IndependentResolveNone;
            _internal.independentResolve = IndependentResolve;
            return _internal;
        }
    }

    public partial class PhysicalDeviceVulkanMemoryModelFeaturesKHR : DisposableObject
    {
        public PhysicalDeviceVulkanMemoryModelFeaturesKHR()
        {
        }

        public PhysicalDeviceVulkanMemoryModelFeaturesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR _internal)
        {
            PNext = _internal.pNext;
            VulkanMemoryModel = _internal.vulkanMemoryModel;
            VulkanMemoryModelDeviceScope = _internal.vulkanMemoryModelDeviceScope;
            VulkanMemoryModelAvailabilityVisibilityChains = _internal.vulkanMemoryModelAvailabilityVisibilityChains;
        }

        public StructureType SType => StructureType.PhysicalDeviceVulkanMemoryModelFeaturesKhr;
        public System.IntPtr PNext { get; set; }
        public bool VulkanMemoryModel { get; set; }
        public bool VulkanMemoryModelDeviceScope { get; set; }
        public bool VulkanMemoryModelAvailabilityVisibilityChains { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.vulkanMemoryModel = VulkanMemoryModel;
            _internal.vulkanMemoryModelDeviceScope = VulkanMemoryModelDeviceScope;
            _internal.vulkanMemoryModelAvailabilityVisibilityChains = VulkanMemoryModelAvailabilityVisibilityChains;
            return _internal;
        }
    }

    public partial class DebugReportCallbackCreateInfoEXT : DisposableObject
    {
        public DebugReportCallbackCreateInfoEXT()
        {
        }

        public DebugReportCallbackCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugReportCallbackCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PfnCallback = _internal.pfnCallback;
            PUserData = _internal.pUserData;
        }

        public StructureType SType => StructureType.DebugReportCallbackCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public PFN_vkDebugReportCallbackEXT PfnCallback { get; set; }
        public System.IntPtr PUserData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugReportCallbackCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugReportCallbackCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.pfnCallback = PfnCallback;
            _internal.pUserData = PUserData;
            return _internal;
        }
    }

    public partial class PipelineRasterizationStateRasterizationOrderAMD : DisposableObject
    {
        public PipelineRasterizationStateRasterizationOrderAMD()
        {
        }

        public PipelineRasterizationStateRasterizationOrderAMD(AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateRasterizationOrderAMD _internal)
        {
            PNext = _internal.pNext;
            RasterizationOrder = _internal.rasterizationOrder;
        }

        public StructureType SType => StructureType.PipelineRasterizationStateRasterizationOrderAmd;
        public System.IntPtr PNext { get; set; }
        public RasterizationOrderAMD RasterizationOrder { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateRasterizationOrderAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateRasterizationOrderAMD();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.rasterizationOrder = RasterizationOrder;
            return _internal;
        }
    }

    public partial class DebugMarkerObjectNameInfoEXT : DisposableObject
    {
        private StringReference refpObjectName;

        public DebugMarkerObjectNameInfoEXT()
        {
        }

        public DebugMarkerObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectNameInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ObjectType = _internal.objectType;
            Object = _internal.@object;
            PObjectName = Marshal.PtrToStringAnsi(_internal.pObjectName);
        }

        public StructureType SType => StructureType.DebugMarkerObjectNameInfoExt;
        public System.IntPtr PNext { get; set; }
        public DebugReportObjectTypeEXT ObjectType { get; set; }
        public ulong Object { get; set; }
        public string PObjectName { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectNameInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectNameInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectType = ObjectType;
            _internal.@object = Object;
            refpObjectName?.Dispose();
            if (PObjectName != null)
            {
                refpObjectName = new StringReference(PObjectName, false);
                _internal.pObjectName = refpObjectName.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpObjectName?.Dispose();
        }

    }

    public partial class DebugMarkerObjectTagInfoEXT : DisposableObject
    {
        public DebugMarkerObjectTagInfoEXT()
        {
        }

        public DebugMarkerObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectTagInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ObjectType = _internal.objectType;
            Object = _internal.@object;
            TagName = _internal.tagName;
            TagSize = _internal.tagSize;
            PTag = _internal.pTag;
        }

        public StructureType SType => StructureType.DebugMarkerObjectTagInfoExt;
        public System.IntPtr PNext { get; set; }
        public DebugReportObjectTypeEXT ObjectType { get; set; }
        public ulong Object { get; set; }
        public ulong TagName { get; set; }
        public ulong TagSize { get; set; }
        public System.IntPtr PTag { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectTagInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectTagInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectType = ObjectType;
            _internal.@object = Object;
            _internal.tagName = TagName;
            _internal.tagSize = TagSize;
            _internal.pTag = PTag;
            return _internal;
        }
    }

    public partial class DebugMarkerMarkerInfoEXT : DisposableObject
    {
        private StringReference refpMarkerName;

        public DebugMarkerMarkerInfoEXT()
        {
        }

        public DebugMarkerMarkerInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugMarkerMarkerInfoEXT _internal)
        {
            PNext = _internal.pNext;
            PMarkerName = Marshal.PtrToStringAnsi(_internal.pMarkerName);
            var tmpArr0 = new float[4];
            unsafe
            {
                for (int i = 0; i < 4; ++i)
                {
                    tmpArr0[i] = _internal.color[i];
                }
            }
            Color = tmpArr0;
        }

        public StructureType SType => StructureType.DebugMarkerMarkerInfoExt;
        public System.IntPtr PNext { get; set; }
        public string PMarkerName { get; set; }
        public float[] Color { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugMarkerMarkerInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugMarkerMarkerInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            refpMarkerName?.Dispose();
            if (PMarkerName != null)
            {
                refpMarkerName = new StringReference(PMarkerName, false);
                _internal.pMarkerName = refpMarkerName.Handle;
            }
            if(Color != null)
            {
                if (Color.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Color), "Array is out of bounds. Size should not be more than 4");

                var inputArray0 = Color;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.color[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpMarkerName?.Dispose();
        }

    }

    public partial class DedicatedAllocationImageCreateInfoNV : DisposableObject
    {
        public DedicatedAllocationImageCreateInfoNV()
        {
        }

        public DedicatedAllocationImageCreateInfoNV(AdamantiumVulkan.Core.Interop.VkDedicatedAllocationImageCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            DedicatedAllocation = _internal.dedicatedAllocation;
        }

        public StructureType SType => StructureType.DedicatedAllocationImageCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public bool DedicatedAllocation { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDedicatedAllocationImageCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDedicatedAllocationImageCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.dedicatedAllocation = DedicatedAllocation;
            return _internal;
        }
    }

    public partial class DedicatedAllocationBufferCreateInfoNV : DisposableObject
    {
        public DedicatedAllocationBufferCreateInfoNV()
        {
        }

        public DedicatedAllocationBufferCreateInfoNV(AdamantiumVulkan.Core.Interop.VkDedicatedAllocationBufferCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            DedicatedAllocation = _internal.dedicatedAllocation;
        }

        public StructureType SType => StructureType.DedicatedAllocationBufferCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public bool DedicatedAllocation { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDedicatedAllocationBufferCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDedicatedAllocationBufferCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.dedicatedAllocation = DedicatedAllocation;
            return _internal;
        }
    }

    public partial class DedicatedAllocationMemoryAllocateInfoNV : DisposableObject
    {
        public DedicatedAllocationMemoryAllocateInfoNV()
        {
        }

        public DedicatedAllocationMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.VkDedicatedAllocationMemoryAllocateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Image = new Image(_internal.image);
            Buffer = new Buffer(_internal.buffer);
        }

        public StructureType SType => StructureType.DedicatedAllocationMemoryAllocateInfoNv;
        public System.IntPtr PNext { get; set; }
        public Image Image { get; set; }
        public Buffer Buffer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDedicatedAllocationMemoryAllocateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDedicatedAllocationMemoryAllocateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.image = Image;
            _internal.buffer = Buffer;
            return _internal;
        }
    }

    public partial class PhysicalDeviceTransformFeedbackFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceTransformFeedbackFeaturesEXT()
        {
        }

        public PhysicalDeviceTransformFeedbackFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            TransformFeedback = _internal.transformFeedback;
            GeometryStreams = _internal.geometryStreams;
        }

        public StructureType SType => StructureType.PhysicalDeviceTransformFeedbackFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool TransformFeedback { get; set; }
        public bool GeometryStreams { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.transformFeedback = TransformFeedback;
            _internal.geometryStreams = GeometryStreams;
            return _internal;
        }
    }

    public partial class PhysicalDeviceTransformFeedbackPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceTransformFeedbackPropertiesEXT()
        {
        }

        public PhysicalDeviceTransformFeedbackPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxTransformFeedbackStreams = _internal.maxTransformFeedbackStreams;
            MaxTransformFeedbackBuffers = _internal.maxTransformFeedbackBuffers;
            MaxTransformFeedbackBufferSize = _internal.maxTransformFeedbackBufferSize;
            MaxTransformFeedbackStreamDataSize = _internal.maxTransformFeedbackStreamDataSize;
            MaxTransformFeedbackBufferDataSize = _internal.maxTransformFeedbackBufferDataSize;
            MaxTransformFeedbackBufferDataStride = _internal.maxTransformFeedbackBufferDataStride;
            TransformFeedbackQueries = _internal.transformFeedbackQueries;
            TransformFeedbackStreamsLinesTriangles = _internal.transformFeedbackStreamsLinesTriangles;
            TransformFeedbackRasterizationStreamSelect = _internal.transformFeedbackRasterizationStreamSelect;
            TransformFeedbackDraw = _internal.transformFeedbackDraw;
        }

        public StructureType SType => StructureType.PhysicalDeviceTransformFeedbackPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxTransformFeedbackStreams { get; set; }
        public uint MaxTransformFeedbackBuffers { get; set; }
        public ulong MaxTransformFeedbackBufferSize { get; set; }
        public uint MaxTransformFeedbackStreamDataSize { get; set; }
        public uint MaxTransformFeedbackBufferDataSize { get; set; }
        public uint MaxTransformFeedbackBufferDataStride { get; set; }
        public bool TransformFeedbackQueries { get; set; }
        public bool TransformFeedbackStreamsLinesTriangles { get; set; }
        public bool TransformFeedbackRasterizationStreamSelect { get; set; }
        public bool TransformFeedbackDraw { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceTransformFeedbackPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxTransformFeedbackStreams = MaxTransformFeedbackStreams;
            _internal.maxTransformFeedbackBuffers = MaxTransformFeedbackBuffers;
            _internal.maxTransformFeedbackBufferSize = MaxTransformFeedbackBufferSize;
            _internal.maxTransformFeedbackStreamDataSize = MaxTransformFeedbackStreamDataSize;
            _internal.maxTransformFeedbackBufferDataSize = MaxTransformFeedbackBufferDataSize;
            _internal.maxTransformFeedbackBufferDataStride = MaxTransformFeedbackBufferDataStride;
            _internal.transformFeedbackQueries = TransformFeedbackQueries;
            _internal.transformFeedbackStreamsLinesTriangles = TransformFeedbackStreamsLinesTriangles;
            _internal.transformFeedbackRasterizationStreamSelect = TransformFeedbackRasterizationStreamSelect;
            _internal.transformFeedbackDraw = TransformFeedbackDraw;
            return _internal;
        }
    }

    public partial class PipelineRasterizationStateStreamCreateInfoEXT : DisposableObject
    {
        public PipelineRasterizationStateStreamCreateInfoEXT()
        {
        }

        public PipelineRasterizationStateStreamCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateStreamCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            RasterizationStream = _internal.rasterizationStream;
        }

        public StructureType SType => StructureType.PipelineRasterizationStateStreamCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint RasterizationStream { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateStreamCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRasterizationStateStreamCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.rasterizationStream = RasterizationStream;
            return _internal;
        }
    }

    public partial class TextureLODGatherFormatPropertiesAMD : DisposableObject
    {
        public TextureLODGatherFormatPropertiesAMD()
        {
        }

        public TextureLODGatherFormatPropertiesAMD(AdamantiumVulkan.Core.Interop.VkTextureLODGatherFormatPropertiesAMD _internal)
        {
            PNext = _internal.pNext;
            SupportsTextureGatherLODBiasAMD = _internal.supportsTextureGatherLODBiasAMD;
        }

        public StructureType SType => StructureType.TextureLodGatherFormatPropertiesAmd;
        public System.IntPtr PNext { get; set; }
        public bool SupportsTextureGatherLODBiasAMD { get; set; }

        public AdamantiumVulkan.Core.Interop.VkTextureLODGatherFormatPropertiesAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkTextureLODGatherFormatPropertiesAMD();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.supportsTextureGatherLODBiasAMD = SupportsTextureGatherLODBiasAMD;
            return _internal;
        }
    }

    public partial class ShaderResourceUsageAMD
    {
        public ShaderResourceUsageAMD()
        {
        }

        public ShaderResourceUsageAMD(AdamantiumVulkan.Core.Interop.VkShaderResourceUsageAMD _internal)
        {
            NumUsedVgprs = _internal.numUsedVgprs;
            NumUsedSgprs = _internal.numUsedSgprs;
            LdsSizePerLocalWorkGroup = _internal.ldsSizePerLocalWorkGroup;
            LdsUsageSizeInBytes = _internal.ldsUsageSizeInBytes;
            ScratchMemUsageInBytes = _internal.scratchMemUsageInBytes;
        }

        public uint NumUsedVgprs { get; set; }
        public uint NumUsedSgprs { get; set; }
        public uint LdsSizePerLocalWorkGroup { get; set; }
        public ulong LdsUsageSizeInBytes { get; set; }
        public ulong ScratchMemUsageInBytes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkShaderResourceUsageAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkShaderResourceUsageAMD();
            _internal.numUsedVgprs = NumUsedVgprs;
            _internal.numUsedSgprs = NumUsedSgprs;
            _internal.ldsSizePerLocalWorkGroup = LdsSizePerLocalWorkGroup;
            _internal.ldsUsageSizeInBytes = LdsUsageSizeInBytes;
            _internal.scratchMemUsageInBytes = ScratchMemUsageInBytes;
            return _internal;
        }
    }

    public partial class ShaderStatisticsInfoAMD
    {
        public ShaderStatisticsInfoAMD()
        {
        }

        public ShaderStatisticsInfoAMD(AdamantiumVulkan.Core.Interop.VkShaderStatisticsInfoAMD _internal)
        {
            ShaderStageMask = _internal.shaderStageMask;
            ResourceUsage = new ShaderResourceUsageAMD(_internal.resourceUsage);
            NumPhysicalVgprs = _internal.numPhysicalVgprs;
            NumPhysicalSgprs = _internal.numPhysicalSgprs;
            NumAvailableVgprs = _internal.numAvailableVgprs;
            NumAvailableSgprs = _internal.numAvailableSgprs;
            var tmpArr0 = new uint[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr0[i] = _internal.computeWorkGroupSize[i];
                }
            }
            ComputeWorkGroupSize = tmpArr0;
        }

        public uint ShaderStageMask { get; set; }
        public ShaderResourceUsageAMD ResourceUsage { get; set; }
        public uint NumPhysicalVgprs { get; set; }
        public uint NumPhysicalSgprs { get; set; }
        public uint NumAvailableVgprs { get; set; }
        public uint NumAvailableSgprs { get; set; }
        public uint[] ComputeWorkGroupSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkShaderStatisticsInfoAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkShaderStatisticsInfoAMD();
            _internal.shaderStageMask = ShaderStageMask;
            if (ResourceUsage != null)
            {
                _internal.resourceUsage = ResourceUsage.ToInternal();
            }
            _internal.numPhysicalVgprs = NumPhysicalVgprs;
            _internal.numPhysicalSgprs = NumPhysicalSgprs;
            _internal.numAvailableVgprs = NumAvailableVgprs;
            _internal.numAvailableSgprs = NumAvailableSgprs;
            if(ComputeWorkGroupSize != null)
            {
                if (ComputeWorkGroupSize.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(ComputeWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                var inputArray0 = ComputeWorkGroupSize;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.computeWorkGroupSize[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceCornerSampledImageFeaturesNV : DisposableObject
    {
        public PhysicalDeviceCornerSampledImageFeaturesNV()
        {
        }

        public PhysicalDeviceCornerSampledImageFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCornerSampledImageFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            CornerSampledImage = _internal.cornerSampledImage;
        }

        public StructureType SType => StructureType.PhysicalDeviceCornerSampledImageFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool CornerSampledImage { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCornerSampledImageFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCornerSampledImageFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.cornerSampledImage = CornerSampledImage;
            return _internal;
        }
    }

    public partial class ExternalImageFormatPropertiesNV
    {
        public ExternalImageFormatPropertiesNV()
        {
        }

        public ExternalImageFormatPropertiesNV(AdamantiumVulkan.Core.Interop.VkExternalImageFormatPropertiesNV _internal)
        {
            ImageFormatProperties = new ImageFormatProperties(_internal.imageFormatProperties);
            ExternalMemoryFeatures = _internal.externalMemoryFeatures;
            ExportFromImportedHandleTypes = _internal.exportFromImportedHandleTypes;
            CompatibleHandleTypes = _internal.compatibleHandleTypes;
        }

        public ImageFormatProperties ImageFormatProperties { get; set; }
        public uint ExternalMemoryFeatures { get; set; }
        public uint ExportFromImportedHandleTypes { get; set; }
        public uint CompatibleHandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalImageFormatPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalImageFormatPropertiesNV();
            if (ImageFormatProperties != null)
            {
                _internal.imageFormatProperties = ImageFormatProperties.ToInternal();
            }
            _internal.externalMemoryFeatures = ExternalMemoryFeatures;
            _internal.exportFromImportedHandleTypes = ExportFromImportedHandleTypes;
            _internal.compatibleHandleTypes = CompatibleHandleTypes;
            return _internal;
        }
    }

    public partial class ExternalMemoryImageCreateInfoNV : DisposableObject
    {
        public ExternalMemoryImageCreateInfoNV()
        {
        }

        public ExternalMemoryImageCreateInfoNV(AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExternalMemoryImageCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExternalMemoryImageCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class ExportMemoryAllocateInfoNV : DisposableObject
    {
        public ExportMemoryAllocateInfoNV()
        {
        }

        public ExportMemoryAllocateInfoNV(AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfoNV _internal)
        {
            PNext = _internal.pNext;
            HandleTypes = _internal.handleTypes;
        }

        public StructureType SType => StructureType.ExportMemoryAllocateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint HandleTypes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkExportMemoryAllocateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleTypes = HandleTypes;
            return _internal;
        }
    }

    public partial class ValidationFlagsEXT : DisposableObject
    {
        private GCHandleReference refpDisabledValidationChecks;

        public ValidationFlagsEXT()
        {
        }

        public ValidationFlagsEXT(AdamantiumVulkan.Core.Interop.VkValidationFlagsEXT _internal)
        {
            PNext = _internal.pNext;
            DisabledValidationCheckCount = _internal.disabledValidationCheckCount;
            var tmppDisabledValidationChecks = new int[_internal.disabledValidationCheckCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pDisabledValidationChecks, tmppDisabledValidationChecks);
            Marshal.FreeHGlobal(_internal.pDisabledValidationChecks);
            PDisabledValidationChecks = new AdamantiumVulkan.Core.ValidationCheckEXT[_internal.disabledValidationCheckCount];
            for (int i = 0; i < tmppDisabledValidationChecks.Length; ++i)
            {
                PDisabledValidationChecks[i] = (AdamantiumVulkan.Core.ValidationCheckEXT)tmppDisabledValidationChecks[i];
            }
        }

        public StructureType SType => StructureType.ValidationFlagsExt;
        public System.IntPtr PNext { get; set; }
        public uint DisabledValidationCheckCount { get; set; }
        public ValidationCheckEXT[] PDisabledValidationChecks { get; set; }

        public AdamantiumVulkan.Core.Interop.VkValidationFlagsEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkValidationFlagsEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.disabledValidationCheckCount = DisabledValidationCheckCount;
            refpDisabledValidationChecks?.Dispose();
            if (PDisabledValidationChecks != null)
            {
                var tmpArray0 = new ValidationCheckEXT[DisabledValidationCheckCount];
                for (int i = 0; i < PDisabledValidationChecks.Length; ++i)
                {
                    tmpArray0[i] = PDisabledValidationChecks[i];
                }
                refpDisabledValidationChecks = new GCHandleReference(tmpArray0);
                _internal.pDisabledValidationChecks = refpDisabledValidationChecks.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDisabledValidationChecks?.Dispose();
        }

    }

    public partial class ImageViewASTCDecodeModeEXT : DisposableObject
    {
        public ImageViewASTCDecodeModeEXT()
        {
        }

        public ImageViewASTCDecodeModeEXT(AdamantiumVulkan.Core.Interop.VkImageViewASTCDecodeModeEXT _internal)
        {
            PNext = _internal.pNext;
            DecodeMode = _internal.decodeMode;
        }

        public StructureType SType => StructureType.ImageViewAstcDecodeModeExt;
        public System.IntPtr PNext { get; set; }
        public Format DecodeMode { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageViewASTCDecodeModeEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageViewASTCDecodeModeEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.decodeMode = DecodeMode;
            return _internal;
        }
    }

    public partial class PhysicalDeviceASTCDecodeFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceASTCDecodeFeaturesEXT()
        {
        }

        public PhysicalDeviceASTCDecodeFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceASTCDecodeFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            DecodeModeSharedExponent = _internal.decodeModeSharedExponent;
        }

        public StructureType SType => StructureType.PhysicalDeviceAstcDecodeFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool DecodeModeSharedExponent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceASTCDecodeFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceASTCDecodeFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.decodeModeSharedExponent = DecodeModeSharedExponent;
            return _internal;
        }
    }

    public partial class ConditionalRenderingBeginInfoEXT : DisposableObject
    {
        public ConditionalRenderingBeginInfoEXT()
        {
        }

        public ConditionalRenderingBeginInfoEXT(AdamantiumVulkan.Core.Interop.VkConditionalRenderingBeginInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Buffer = new Buffer(_internal.buffer);
            Offset = _internal.offset;
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.ConditionalRenderingBeginInfoExt;
        public System.IntPtr PNext { get; set; }
        public Buffer Buffer { get; set; }
        public ulong Offset { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkConditionalRenderingBeginInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkConditionalRenderingBeginInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.buffer = Buffer;
            _internal.offset = Offset;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class PhysicalDeviceConditionalRenderingFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceConditionalRenderingFeaturesEXT()
        {
        }

        public PhysicalDeviceConditionalRenderingFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConditionalRenderingFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            ConditionalRendering = _internal.conditionalRendering;
            InheritedConditionalRendering = _internal.inheritedConditionalRendering;
        }

        public StructureType SType => StructureType.PhysicalDeviceConditionalRenderingFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool ConditionalRendering { get; set; }
        public bool InheritedConditionalRendering { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConditionalRenderingFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConditionalRenderingFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.conditionalRendering = ConditionalRendering;
            _internal.inheritedConditionalRendering = InheritedConditionalRendering;
            return _internal;
        }
    }

    public partial class CommandBufferInheritanceConditionalRenderingInfoEXT : DisposableObject
    {
        public CommandBufferInheritanceConditionalRenderingInfoEXT()
        {
        }

        public CommandBufferInheritanceConditionalRenderingInfoEXT(AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceConditionalRenderingInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ConditionalRenderingEnable = _internal.conditionalRenderingEnable;
        }

        public StructureType SType => StructureType.CommandBufferInheritanceConditionalRenderingInfoExt;
        public System.IntPtr PNext { get; set; }
        public bool ConditionalRenderingEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceConditionalRenderingInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceConditionalRenderingInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.conditionalRenderingEnable = ConditionalRenderingEnable;
            return _internal;
        }
    }

    public partial class DeviceGeneratedCommandsFeaturesNVX : DisposableObject
    {
        public DeviceGeneratedCommandsFeaturesNVX()
        {
        }

        public DeviceGeneratedCommandsFeaturesNVX(AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsFeaturesNVX _internal)
        {
            PNext = _internal.pNext;
            ComputeBindingPointSupport = _internal.computeBindingPointSupport;
        }

        public StructureType SType => StructureType.DeviceGeneratedCommandsFeaturesNvx;
        public System.IntPtr PNext { get; set; }
        public bool ComputeBindingPointSupport { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsFeaturesNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsFeaturesNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.computeBindingPointSupport = ComputeBindingPointSupport;
            return _internal;
        }
    }

    public partial class DeviceGeneratedCommandsLimitsNVX : DisposableObject
    {
        public DeviceGeneratedCommandsLimitsNVX()
        {
        }

        public DeviceGeneratedCommandsLimitsNVX(AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsLimitsNVX _internal)
        {
            PNext = _internal.pNext;
            MaxIndirectCommandsLayoutTokenCount = _internal.maxIndirectCommandsLayoutTokenCount;
            MaxObjectEntryCounts = _internal.maxObjectEntryCounts;
            MinSequenceCountBufferOffsetAlignment = _internal.minSequenceCountBufferOffsetAlignment;
            MinSequenceIndexBufferOffsetAlignment = _internal.minSequenceIndexBufferOffsetAlignment;
            MinCommandsTokenBufferOffsetAlignment = _internal.minCommandsTokenBufferOffsetAlignment;
        }

        public StructureType SType => StructureType.DeviceGeneratedCommandsLimitsNvx;
        public System.IntPtr PNext { get; set; }
        public uint MaxIndirectCommandsLayoutTokenCount { get; set; }
        public uint MaxObjectEntryCounts { get; set; }
        public uint MinSequenceCountBufferOffsetAlignment { get; set; }
        public uint MinSequenceIndexBufferOffsetAlignment { get; set; }
        public uint MinCommandsTokenBufferOffsetAlignment { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsLimitsNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGeneratedCommandsLimitsNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxIndirectCommandsLayoutTokenCount = MaxIndirectCommandsLayoutTokenCount;
            _internal.maxObjectEntryCounts = MaxObjectEntryCounts;
            _internal.minSequenceCountBufferOffsetAlignment = MinSequenceCountBufferOffsetAlignment;
            _internal.minSequenceIndexBufferOffsetAlignment = MinSequenceIndexBufferOffsetAlignment;
            _internal.minCommandsTokenBufferOffsetAlignment = MinCommandsTokenBufferOffsetAlignment;
            return _internal;
        }
    }

    public partial class IndirectCommandsTokenNVX
    {
        public IndirectCommandsTokenNVX()
        {
        }

        public IndirectCommandsTokenNVX(AdamantiumVulkan.Core.Interop.VkIndirectCommandsTokenNVX _internal)
        {
            TokenType = _internal.tokenType;
            Buffer = new Buffer(_internal.buffer);
            Offset = _internal.offset;
        }

        public IndirectCommandsTokenTypeNVX TokenType { get; set; }
        public Buffer Buffer { get; set; }
        public ulong Offset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkIndirectCommandsTokenNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkIndirectCommandsTokenNVX();
            _internal.tokenType = TokenType;
            _internal.buffer = Buffer;
            _internal.offset = Offset;
            return _internal;
        }
    }

    public partial class IndirectCommandsLayoutTokenNVX
    {
        public IndirectCommandsLayoutTokenNVX()
        {
        }

        public IndirectCommandsLayoutTokenNVX(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNVX _internal)
        {
            TokenType = _internal.tokenType;
            BindingUnit = _internal.bindingUnit;
            DynamicCount = _internal.dynamicCount;
            Divisor = _internal.divisor;
        }

        public IndirectCommandsTokenTypeNVX TokenType { get; set; }
        public uint BindingUnit { get; set; }
        public uint DynamicCount { get; set; }
        public uint Divisor { get; set; }

        public AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNVX();
            _internal.tokenType = TokenType;
            _internal.bindingUnit = BindingUnit;
            _internal.dynamicCount = DynamicCount;
            _internal.divisor = Divisor;
            return _internal;
        }
    }

    public partial class IndirectCommandsLayoutCreateInfoNVX : DisposableObject
    {
        private StructReference refpTokens;

        public IndirectCommandsLayoutCreateInfoNVX()
        {
        }

        public IndirectCommandsLayoutCreateInfoNVX(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoNVX _internal)
        {
            PNext = _internal.pNext;
            PipelineBindPoint = _internal.pipelineBindPoint;
            Flags = _internal.flags;
            TokenCount = _internal.tokenCount;
            PTokens = new IndirectCommandsLayoutTokenNVX(Marshal.PtrToStructure<VkIndirectCommandsLayoutTokenNVX>(_internal.pTokens));
            Marshal.FreeHGlobal(_internal.pTokens);
        }

        public StructureType SType => StructureType.IndirectCommandsLayoutCreateInfoNvx;
        public System.IntPtr PNext { get; set; }
        public PipelineBindPoint PipelineBindPoint { get; set; }
        public uint Flags { get; set; }
        public uint TokenCount { get; set; }
        public IndirectCommandsLayoutTokenNVX PTokens { get; set; }

        public AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.pipelineBindPoint = PipelineBindPoint;
            _internal.flags = Flags;
            _internal.tokenCount = TokenCount;
            refpTokens?.Dispose();
            if (PTokens != null)
            {
                var struct0 = PTokens.ToInternal();
                refpTokens = new StructReference(struct0);
                _internal.pTokens = refpTokens.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpTokens?.Dispose();
        }

    }

    public partial class CmdProcessCommandsInfoNVX : DisposableObject
    {
        private StructReference refpIndirectCommandsTokens;

        public CmdProcessCommandsInfoNVX()
        {
        }

        public CmdProcessCommandsInfoNVX(AdamantiumVulkan.Core.Interop.VkCmdProcessCommandsInfoNVX _internal)
        {
            PNext = _internal.pNext;
            ObjectTable = new ObjectTableNVX(_internal.objectTable);
            IndirectCommandsLayout = new IndirectCommandsLayoutNVX(_internal.indirectCommandsLayout);
            IndirectCommandsTokenCount = _internal.indirectCommandsTokenCount;
            PIndirectCommandsTokens = new IndirectCommandsTokenNVX(Marshal.PtrToStructure<VkIndirectCommandsTokenNVX>(_internal.pIndirectCommandsTokens));
            Marshal.FreeHGlobal(_internal.pIndirectCommandsTokens);
            MaxSequencesCount = _internal.maxSequencesCount;
            TargetCommandBuffer = new CommandBuffer(_internal.targetCommandBuffer);
            SequencesCountBuffer = new Buffer(_internal.sequencesCountBuffer);
            SequencesCountOffset = _internal.sequencesCountOffset;
            SequencesIndexBuffer = new Buffer(_internal.sequencesIndexBuffer);
            SequencesIndexOffset = _internal.sequencesIndexOffset;
        }

        public StructureType SType => StructureType.CmdProcessCommandsInfoNvx;
        public System.IntPtr PNext { get; set; }
        public ObjectTableNVX ObjectTable { get; set; }
        public IndirectCommandsLayoutNVX IndirectCommandsLayout { get; set; }
        public uint IndirectCommandsTokenCount { get; set; }
        public IndirectCommandsTokenNVX PIndirectCommandsTokens { get; set; }
        public uint MaxSequencesCount { get; set; }
        public CommandBuffer TargetCommandBuffer { get; set; }
        public Buffer SequencesCountBuffer { get; set; }
        public ulong SequencesCountOffset { get; set; }
        public Buffer SequencesIndexBuffer { get; set; }
        public ulong SequencesIndexOffset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCmdProcessCommandsInfoNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCmdProcessCommandsInfoNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectTable = ObjectTable;
            _internal.indirectCommandsLayout = IndirectCommandsLayout;
            _internal.indirectCommandsTokenCount = IndirectCommandsTokenCount;
            refpIndirectCommandsTokens?.Dispose();
            if (PIndirectCommandsTokens != null)
            {
                var struct0 = PIndirectCommandsTokens.ToInternal();
                refpIndirectCommandsTokens = new StructReference(struct0);
                _internal.pIndirectCommandsTokens = refpIndirectCommandsTokens.Handle;
            }
            _internal.maxSequencesCount = MaxSequencesCount;
            _internal.targetCommandBuffer = TargetCommandBuffer;
            _internal.sequencesCountBuffer = SequencesCountBuffer;
            _internal.sequencesCountOffset = SequencesCountOffset;
            _internal.sequencesIndexBuffer = SequencesIndexBuffer;
            _internal.sequencesIndexOffset = SequencesIndexOffset;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpIndirectCommandsTokens?.Dispose();
        }

    }

    public partial class CmdReserveSpaceForCommandsInfoNVX : DisposableObject
    {
        public CmdReserveSpaceForCommandsInfoNVX()
        {
        }

        public CmdReserveSpaceForCommandsInfoNVX(AdamantiumVulkan.Core.Interop.VkCmdReserveSpaceForCommandsInfoNVX _internal)
        {
            PNext = _internal.pNext;
            ObjectTable = new ObjectTableNVX(_internal.objectTable);
            IndirectCommandsLayout = new IndirectCommandsLayoutNVX(_internal.indirectCommandsLayout);
            MaxSequencesCount = _internal.maxSequencesCount;
        }

        public StructureType SType => StructureType.CmdReserveSpaceForCommandsInfoNvx;
        public System.IntPtr PNext { get; set; }
        public ObjectTableNVX ObjectTable { get; set; }
        public IndirectCommandsLayoutNVX IndirectCommandsLayout { get; set; }
        public uint MaxSequencesCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCmdReserveSpaceForCommandsInfoNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCmdReserveSpaceForCommandsInfoNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectTable = ObjectTable;
            _internal.indirectCommandsLayout = IndirectCommandsLayout;
            _internal.maxSequencesCount = MaxSequencesCount;
            return _internal;
        }
    }

    public partial class ObjectTableCreateInfoNVX : DisposableObject
    {
        private GCHandleReference refpObjectEntryTypes;

        private GCHandleReference refpObjectEntryCounts;

        private GCHandleReference refpObjectEntryUsageFlags;

        public ObjectTableCreateInfoNVX()
        {
        }

        public ObjectTableCreateInfoNVX(AdamantiumVulkan.Core.Interop.VkObjectTableCreateInfoNVX _internal)
        {
            PNext = _internal.pNext;
            ObjectCount = _internal.objectCount;
            var tmppObjectEntryTypes = new int[_internal.objectCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pObjectEntryTypes, tmppObjectEntryTypes);
            Marshal.FreeHGlobal(_internal.pObjectEntryTypes);
            PObjectEntryTypes = new AdamantiumVulkan.Core.ObjectEntryTypeNVX[_internal.objectCount];
            for (int i = 0; i < tmppObjectEntryTypes.Length; ++i)
            {
                PObjectEntryTypes[i] = (AdamantiumVulkan.Core.ObjectEntryTypeNVX)tmppObjectEntryTypes[i];
            }
            PObjectEntryCounts = new uint[_internal.objectCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pObjectEntryCounts, PObjectEntryCounts);
            Marshal.FreeHGlobal(_internal.pObjectEntryCounts);
            PObjectEntryUsageFlags = new uint[_internal.objectCount];
            MarshalUtils.IntPtrToManagedArray<uint>(_internal.pObjectEntryUsageFlags, PObjectEntryUsageFlags);
            Marshal.FreeHGlobal(_internal.pObjectEntryUsageFlags);
            MaxUniformBuffersPerDescriptor = _internal.maxUniformBuffersPerDescriptor;
            MaxStorageBuffersPerDescriptor = _internal.maxStorageBuffersPerDescriptor;
            MaxStorageImagesPerDescriptor = _internal.maxStorageImagesPerDescriptor;
            MaxSampledImagesPerDescriptor = _internal.maxSampledImagesPerDescriptor;
            MaxPipelineLayouts = _internal.maxPipelineLayouts;
        }

        public StructureType SType => StructureType.ObjectTableCreateInfoNvx;
        public System.IntPtr PNext { get; set; }
        public uint ObjectCount { get; set; }
        public ObjectEntryTypeNVX[] PObjectEntryTypes { get; set; }
        public uint[] PObjectEntryCounts { get; set; }
        public uint[] PObjectEntryUsageFlags { get; set; }
        public uint MaxUniformBuffersPerDescriptor { get; set; }
        public uint MaxStorageBuffersPerDescriptor { get; set; }
        public uint MaxStorageImagesPerDescriptor { get; set; }
        public uint MaxSampledImagesPerDescriptor { get; set; }
        public uint MaxPipelineLayouts { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTableCreateInfoNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTableCreateInfoNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectCount = ObjectCount;
            refpObjectEntryTypes?.Dispose();
            if (PObjectEntryTypes != null)
            {
                var tmpArray0 = new ObjectEntryTypeNVX[ObjectCount];
                for (int i = 0; i < PObjectEntryTypes.Length; ++i)
                {
                    tmpArray0[i] = PObjectEntryTypes[i];
                }
                refpObjectEntryTypes = new GCHandleReference(tmpArray0);
                _internal.pObjectEntryTypes = refpObjectEntryTypes.Handle;
            }
            refpObjectEntryCounts?.Dispose();
            if (PObjectEntryCounts != null)
            {
                var tmpArray1 = new uint[ObjectCount];
                for (int i = 0; i < PObjectEntryCounts.Length; ++i)
                {
                    tmpArray1[i] = PObjectEntryCounts[i];
                }
                refpObjectEntryCounts = new GCHandleReference(tmpArray1);
                _internal.pObjectEntryCounts = refpObjectEntryCounts.Handle;
            }
            refpObjectEntryUsageFlags?.Dispose();
            if (PObjectEntryUsageFlags != null)
            {
                var tmpArray2 = new uint[ObjectCount];
                for (int i = 0; i < PObjectEntryUsageFlags.Length; ++i)
                {
                    tmpArray2[i] = PObjectEntryUsageFlags[i];
                }
                refpObjectEntryUsageFlags = new GCHandleReference(tmpArray2);
                _internal.pObjectEntryUsageFlags = refpObjectEntryUsageFlags.Handle;
            }
            _internal.maxUniformBuffersPerDescriptor = MaxUniformBuffersPerDescriptor;
            _internal.maxStorageBuffersPerDescriptor = MaxStorageBuffersPerDescriptor;
            _internal.maxStorageImagesPerDescriptor = MaxStorageImagesPerDescriptor;
            _internal.maxSampledImagesPerDescriptor = MaxSampledImagesPerDescriptor;
            _internal.maxPipelineLayouts = MaxPipelineLayouts;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpObjectEntryTypes?.Dispose();
            refpObjectEntryCounts?.Dispose();
            refpObjectEntryUsageFlags?.Dispose();
        }

    }

    public partial class ObjectTableEntryNVX
    {
        public ObjectTableEntryNVX()
        {
        }

        public ObjectTableEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTableEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTableEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTableEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class ObjectTablePipelineEntryNVX
    {
        public ObjectTablePipelineEntryNVX()
        {
        }

        public ObjectTablePipelineEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTablePipelineEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
            Pipeline = new Pipeline(_internal.pipeline);
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }
        public Pipeline Pipeline { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTablePipelineEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTablePipelineEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.pipeline = Pipeline;
            return _internal;
        }
    }

    public partial class ObjectTableDescriptorSetEntryNVX
    {
        public ObjectTableDescriptorSetEntryNVX()
        {
        }

        public ObjectTableDescriptorSetEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTableDescriptorSetEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
            PipelineLayout = new PipelineLayout(_internal.pipelineLayout);
            DescriptorSet = new DescriptorSet(_internal.descriptorSet);
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }
        public PipelineLayout PipelineLayout { get; set; }
        public DescriptorSet DescriptorSet { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTableDescriptorSetEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTableDescriptorSetEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.pipelineLayout = PipelineLayout;
            _internal.descriptorSet = DescriptorSet;
            return _internal;
        }
    }

    public partial class ObjectTableVertexBufferEntryNVX
    {
        public ObjectTableVertexBufferEntryNVX()
        {
        }

        public ObjectTableVertexBufferEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTableVertexBufferEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
            Buffer = new Buffer(_internal.buffer);
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }
        public Buffer Buffer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTableVertexBufferEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTableVertexBufferEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.buffer = Buffer;
            return _internal;
        }
    }

    public partial class ObjectTableIndexBufferEntryNVX
    {
        public ObjectTableIndexBufferEntryNVX()
        {
        }

        public ObjectTableIndexBufferEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTableIndexBufferEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
            Buffer = new Buffer(_internal.buffer);
            IndexType = _internal.indexType;
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }
        public Buffer Buffer { get; set; }
        public IndexType IndexType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTableIndexBufferEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTableIndexBufferEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.buffer = Buffer;
            _internal.indexType = IndexType;
            return _internal;
        }
    }

    public partial class ObjectTablePushConstantEntryNVX
    {
        public ObjectTablePushConstantEntryNVX()
        {
        }

        public ObjectTablePushConstantEntryNVX(AdamantiumVulkan.Core.Interop.VkObjectTablePushConstantEntryNVX _internal)
        {
            Type = _internal.type;
            Flags = _internal.flags;
            PipelineLayout = new PipelineLayout(_internal.pipelineLayout);
            StageFlags = _internal.stageFlags;
        }

        public ObjectEntryTypeNVX Type { get; set; }
        public uint Flags { get; set; }
        public PipelineLayout PipelineLayout { get; set; }
        public uint StageFlags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkObjectTablePushConstantEntryNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkObjectTablePushConstantEntryNVX();
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.pipelineLayout = PipelineLayout;
            _internal.stageFlags = StageFlags;
            return _internal;
        }
    }

    public partial class ViewportWScalingNV
    {
        public ViewportWScalingNV()
        {
        }

        public ViewportWScalingNV(AdamantiumVulkan.Core.Interop.VkViewportWScalingNV _internal)
        {
            Xcoeff = _internal.xcoeff;
            Ycoeff = _internal.ycoeff;
        }

        public float Xcoeff { get; set; }
        public float Ycoeff { get; set; }

        public AdamantiumVulkan.Core.Interop.VkViewportWScalingNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkViewportWScalingNV();
            _internal.xcoeff = Xcoeff;
            _internal.ycoeff = Ycoeff;
            return _internal;
        }
    }

    public partial class PipelineViewportWScalingStateCreateInfoNV : DisposableObject
    {
        private StructReference refpViewportWScalings;

        public PipelineViewportWScalingStateCreateInfoNV()
        {
        }

        public PipelineViewportWScalingStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineViewportWScalingStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            ViewportWScalingEnable = _internal.viewportWScalingEnable;
            ViewportCount = _internal.viewportCount;
            PViewportWScalings = new ViewportWScalingNV(Marshal.PtrToStructure<VkViewportWScalingNV>(_internal.pViewportWScalings));
            Marshal.FreeHGlobal(_internal.pViewportWScalings);
        }

        public StructureType SType => StructureType.PipelineViewportWScalingStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public bool ViewportWScalingEnable { get; set; }
        public uint ViewportCount { get; set; }
        public ViewportWScalingNV PViewportWScalings { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportWScalingStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportWScalingStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.viewportWScalingEnable = ViewportWScalingEnable;
            _internal.viewportCount = ViewportCount;
            refpViewportWScalings?.Dispose();
            if (PViewportWScalings != null)
            {
                var struct0 = PViewportWScalings.ToInternal();
                refpViewportWScalings = new StructReference(struct0);
                _internal.pViewportWScalings = refpViewportWScalings.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpViewportWScalings?.Dispose();
        }

    }

    public partial class SurfaceCapabilities2EXT : DisposableObject
    {
        public SurfaceCapabilities2EXT()
        {
        }

        public SurfaceCapabilities2EXT(AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2EXT _internal)
        {
            PNext = _internal.pNext;
            MinImageCount = _internal.minImageCount;
            MaxImageCount = _internal.maxImageCount;
            CurrentExtent = new Extent2D(_internal.currentExtent);
            MinImageExtent = new Extent2D(_internal.minImageExtent);
            MaxImageExtent = new Extent2D(_internal.maxImageExtent);
            MaxImageArrayLayers = _internal.maxImageArrayLayers;
            SupportedTransforms = _internal.supportedTransforms;
            CurrentTransform = _internal.currentTransform;
            SupportedCompositeAlpha = _internal.supportedCompositeAlpha;
            SupportedUsageFlags = _internal.supportedUsageFlags;
            SupportedSurfaceCounters = _internal.supportedSurfaceCounters;
        }

        public StructureType SType => StructureType.SurfaceCapabilities2Ext;
        public System.IntPtr PNext { get; set; }
        public uint MinImageCount { get; set; }
        public uint MaxImageCount { get; set; }
        public Extent2D CurrentExtent { get; set; }
        public Extent2D MinImageExtent { get; set; }
        public Extent2D MaxImageExtent { get; set; }
        public uint MaxImageArrayLayers { get; set; }
        public uint SupportedTransforms { get; set; }
        public SurfaceTransformFlagBitsKHR CurrentTransform { get; set; }
        public uint SupportedCompositeAlpha { get; set; }
        public uint SupportedUsageFlags { get; set; }
        public uint SupportedSurfaceCounters { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2EXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2EXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.minImageCount = MinImageCount;
            _internal.maxImageCount = MaxImageCount;
            if (CurrentExtent != null)
            {
                _internal.currentExtent = CurrentExtent.ToInternal();
            }
            if (MinImageExtent != null)
            {
                _internal.minImageExtent = MinImageExtent.ToInternal();
            }
            if (MaxImageExtent != null)
            {
                _internal.maxImageExtent = MaxImageExtent.ToInternal();
            }
            _internal.maxImageArrayLayers = MaxImageArrayLayers;
            _internal.supportedTransforms = SupportedTransforms;
            _internal.currentTransform = CurrentTransform;
            _internal.supportedCompositeAlpha = SupportedCompositeAlpha;
            _internal.supportedUsageFlags = SupportedUsageFlags;
            _internal.supportedSurfaceCounters = SupportedSurfaceCounters;
            return _internal;
        }
    }

    public partial class DisplayPowerInfoEXT : DisposableObject
    {
        public DisplayPowerInfoEXT()
        {
        }

        public DisplayPowerInfoEXT(AdamantiumVulkan.Core.Interop.VkDisplayPowerInfoEXT _internal)
        {
            PNext = _internal.pNext;
            PowerState = _internal.powerState;
        }

        public StructureType SType => StructureType.DisplayPowerInfoExt;
        public System.IntPtr PNext { get; set; }
        public DisplayPowerStateEXT PowerState { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayPowerInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayPowerInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.powerState = PowerState;
            return _internal;
        }
    }

    public partial class DeviceEventInfoEXT : DisposableObject
    {
        public DeviceEventInfoEXT()
        {
        }

        public DeviceEventInfoEXT(AdamantiumVulkan.Core.Interop.VkDeviceEventInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DeviceEvent = _internal.deviceEvent;
        }

        public StructureType SType => StructureType.DeviceEventInfoExt;
        public System.IntPtr PNext { get; set; }
        public DeviceEventTypeEXT DeviceEvent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceEventInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceEventInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceEvent = DeviceEvent;
            return _internal;
        }
    }

    public partial class DisplayEventInfoEXT : DisposableObject
    {
        public DisplayEventInfoEXT()
        {
        }

        public DisplayEventInfoEXT(AdamantiumVulkan.Core.Interop.VkDisplayEventInfoEXT _internal)
        {
            SType = _internal.sType;
            PNext = _internal.pNext;
            DisplayEvent = _internal.displayEvent;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public DisplayEventTypeEXT DisplayEvent { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDisplayEventInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDisplayEventInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.displayEvent = DisplayEvent;
            return _internal;
        }
    }

    public partial class SwapchainCounterCreateInfoEXT : DisposableObject
    {
        public SwapchainCounterCreateInfoEXT()
        {
        }

        public SwapchainCounterCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkSwapchainCounterCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            SurfaceCounters = _internal.surfaceCounters;
        }

        public StructureType SType => StructureType.SwapchainCounterCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint SurfaceCounters { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSwapchainCounterCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSwapchainCounterCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.surfaceCounters = SurfaceCounters;
            return _internal;
        }
    }

    public partial class RefreshCycleDurationGOOGLE
    {
        public RefreshCycleDurationGOOGLE()
        {
        }

        public RefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.Interop.VkRefreshCycleDurationGOOGLE _internal)
        {
            RefreshDuration = _internal.refreshDuration;
        }

        public ulong RefreshDuration { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRefreshCycleDurationGOOGLE ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRefreshCycleDurationGOOGLE();
            _internal.refreshDuration = RefreshDuration;
            return _internal;
        }
    }

    public partial class PastPresentationTimingGOOGLE
    {
        public PastPresentationTimingGOOGLE()
        {
        }

        public PastPresentationTimingGOOGLE(AdamantiumVulkan.Core.Interop.VkPastPresentationTimingGOOGLE _internal)
        {
            PresentID = _internal.presentID;
            DesiredPresentTime = _internal.desiredPresentTime;
            ActualPresentTime = _internal.actualPresentTime;
            EarliestPresentTime = _internal.earliestPresentTime;
            PresentMargin = _internal.presentMargin;
        }

        public uint PresentID { get; set; }
        public ulong DesiredPresentTime { get; set; }
        public ulong ActualPresentTime { get; set; }
        public ulong EarliestPresentTime { get; set; }
        public ulong PresentMargin { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPastPresentationTimingGOOGLE ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPastPresentationTimingGOOGLE();
            _internal.presentID = PresentID;
            _internal.desiredPresentTime = DesiredPresentTime;
            _internal.actualPresentTime = ActualPresentTime;
            _internal.earliestPresentTime = EarliestPresentTime;
            _internal.presentMargin = PresentMargin;
            return _internal;
        }
    }

    public partial class PresentTimeGOOGLE
    {
        public PresentTimeGOOGLE()
        {
        }

        public PresentTimeGOOGLE(AdamantiumVulkan.Core.Interop.VkPresentTimeGOOGLE _internal)
        {
            PresentID = _internal.presentID;
            DesiredPresentTime = _internal.desiredPresentTime;
        }

        public uint PresentID { get; set; }
        public ulong DesiredPresentTime { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPresentTimeGOOGLE ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPresentTimeGOOGLE();
            _internal.presentID = PresentID;
            _internal.desiredPresentTime = DesiredPresentTime;
            return _internal;
        }
    }

    public partial class PresentTimesInfoGOOGLE : DisposableObject
    {
        private StructReference refpTimes;

        public PresentTimesInfoGOOGLE()
        {
        }

        public PresentTimesInfoGOOGLE(AdamantiumVulkan.Core.Interop.VkPresentTimesInfoGOOGLE _internal)
        {
            PNext = _internal.pNext;
            SwapchainCount = _internal.swapchainCount;
            PTimes = new PresentTimeGOOGLE(Marshal.PtrToStructure<VkPresentTimeGOOGLE>(_internal.pTimes));
            Marshal.FreeHGlobal(_internal.pTimes);
        }

        public StructureType SType => StructureType.PresentTimesInfoGoogle;
        public System.IntPtr PNext { get; set; }
        public uint SwapchainCount { get; set; }
        public PresentTimeGOOGLE PTimes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPresentTimesInfoGOOGLE ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPresentTimesInfoGOOGLE();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.swapchainCount = SwapchainCount;
            refpTimes?.Dispose();
            if (PTimes != null)
            {
                var struct0 = PTimes.ToInternal();
                refpTimes = new StructReference(struct0);
                _internal.pTimes = refpTimes.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpTimes?.Dispose();
        }

    }

    public partial class PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX : DisposableObject
    {
        public PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX()
        {
        }

        public PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX _internal)
        {
            PNext = _internal.pNext;
            PerViewPositionAllComponents = _internal.perViewPositionAllComponents;
        }

        public StructureType SType => StructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNvx;
        public System.IntPtr PNext { get; set; }
        public bool PerViewPositionAllComponents { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.perViewPositionAllComponents = PerViewPositionAllComponents;
            return _internal;
        }
    }

    public partial class ViewportSwizzleNV
    {
        public ViewportSwizzleNV()
        {
        }

        public ViewportSwizzleNV(AdamantiumVulkan.Core.Interop.VkViewportSwizzleNV _internal)
        {
            X = _internal.x;
            Y = _internal.y;
            Z = _internal.z;
            W = _internal.w;
        }

        public ViewportCoordinateSwizzleNV X { get; set; }
        public ViewportCoordinateSwizzleNV Y { get; set; }
        public ViewportCoordinateSwizzleNV Z { get; set; }
        public ViewportCoordinateSwizzleNV W { get; set; }

        public AdamantiumVulkan.Core.Interop.VkViewportSwizzleNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkViewportSwizzleNV();
            _internal.x = X;
            _internal.y = Y;
            _internal.z = Z;
            _internal.w = W;
            return _internal;
        }
    }

    public partial class PipelineViewportSwizzleStateCreateInfoNV : DisposableObject
    {
        private StructReference refpViewportSwizzles;

        public PipelineViewportSwizzleStateCreateInfoNV()
        {
        }

        public PipelineViewportSwizzleStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineViewportSwizzleStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            ViewportCount = _internal.viewportCount;
            PViewportSwizzles = new ViewportSwizzleNV(Marshal.PtrToStructure<VkViewportSwizzleNV>(_internal.pViewportSwizzles));
            Marshal.FreeHGlobal(_internal.pViewportSwizzles);
        }

        public StructureType SType => StructureType.PipelineViewportSwizzleStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint ViewportCount { get; set; }
        public ViewportSwizzleNV PViewportSwizzles { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportSwizzleStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportSwizzleStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.viewportCount = ViewportCount;
            refpViewportSwizzles?.Dispose();
            if (PViewportSwizzles != null)
            {
                var struct0 = PViewportSwizzles.ToInternal();
                refpViewportSwizzles = new StructReference(struct0);
                _internal.pViewportSwizzles = refpViewportSwizzles.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpViewportSwizzles?.Dispose();
        }

    }

    public partial class PhysicalDeviceDiscardRectanglePropertiesEXT : DisposableObject
    {
        public PhysicalDeviceDiscardRectanglePropertiesEXT()
        {
        }

        public PhysicalDeviceDiscardRectanglePropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDiscardRectanglePropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxDiscardRectangles = _internal.maxDiscardRectangles;
        }

        public StructureType SType => StructureType.PhysicalDeviceDiscardRectanglePropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxDiscardRectangles { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDiscardRectanglePropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDiscardRectanglePropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxDiscardRectangles = MaxDiscardRectangles;
            return _internal;
        }
    }

    public partial class PipelineDiscardRectangleStateCreateInfoEXT : DisposableObject
    {
        private StructReference refpDiscardRectangles;

        public PipelineDiscardRectangleStateCreateInfoEXT()
        {
        }

        public PipelineDiscardRectangleStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineDiscardRectangleStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DiscardRectangleMode = _internal.discardRectangleMode;
            DiscardRectangleCount = _internal.discardRectangleCount;
            PDiscardRectangles = new Rect2D(Marshal.PtrToStructure<VkRect2D>(_internal.pDiscardRectangles));
            Marshal.FreeHGlobal(_internal.pDiscardRectangles);
        }

        public StructureType SType => StructureType.PipelineDiscardRectangleStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public DiscardRectangleModeEXT DiscardRectangleMode { get; set; }
        public uint DiscardRectangleCount { get; set; }
        public Rect2D PDiscardRectangles { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineDiscardRectangleStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineDiscardRectangleStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.discardRectangleMode = DiscardRectangleMode;
            _internal.discardRectangleCount = DiscardRectangleCount;
            refpDiscardRectangles?.Dispose();
            if (PDiscardRectangles != null)
            {
                var struct0 = PDiscardRectangles.ToInternal();
                refpDiscardRectangles = new StructReference(struct0);
                _internal.pDiscardRectangles = refpDiscardRectangles.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDiscardRectangles?.Dispose();
        }

    }

    public partial class PhysicalDeviceConservativeRasterizationPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceConservativeRasterizationPropertiesEXT()
        {
        }

        public PhysicalDeviceConservativeRasterizationPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConservativeRasterizationPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            PrimitiveOverestimationSize = _internal.primitiveOverestimationSize;
            MaxExtraPrimitiveOverestimationSize = _internal.maxExtraPrimitiveOverestimationSize;
            ExtraPrimitiveOverestimationSizeGranularity = _internal.extraPrimitiveOverestimationSizeGranularity;
            PrimitiveUnderestimation = _internal.primitiveUnderestimation;
            ConservativePointAndLineRasterization = _internal.conservativePointAndLineRasterization;
            DegenerateTrianglesRasterized = _internal.degenerateTrianglesRasterized;
            DegenerateLinesRasterized = _internal.degenerateLinesRasterized;
            FullyCoveredFragmentShaderInputVariable = _internal.fullyCoveredFragmentShaderInputVariable;
            ConservativeRasterizationPostDepthCoverage = _internal.conservativeRasterizationPostDepthCoverage;
        }

        public StructureType SType => StructureType.PhysicalDeviceConservativeRasterizationPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public float PrimitiveOverestimationSize { get; set; }
        public float MaxExtraPrimitiveOverestimationSize { get; set; }
        public float ExtraPrimitiveOverestimationSizeGranularity { get; set; }
        public bool PrimitiveUnderestimation { get; set; }
        public bool ConservativePointAndLineRasterization { get; set; }
        public bool DegenerateTrianglesRasterized { get; set; }
        public bool DegenerateLinesRasterized { get; set; }
        public bool FullyCoveredFragmentShaderInputVariable { get; set; }
        public bool ConservativeRasterizationPostDepthCoverage { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConservativeRasterizationPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceConservativeRasterizationPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.primitiveOverestimationSize = PrimitiveOverestimationSize;
            _internal.maxExtraPrimitiveOverestimationSize = MaxExtraPrimitiveOverestimationSize;
            _internal.extraPrimitiveOverestimationSizeGranularity = ExtraPrimitiveOverestimationSizeGranularity;
            _internal.primitiveUnderestimation = PrimitiveUnderestimation;
            _internal.conservativePointAndLineRasterization = ConservativePointAndLineRasterization;
            _internal.degenerateTrianglesRasterized = DegenerateTrianglesRasterized;
            _internal.degenerateLinesRasterized = DegenerateLinesRasterized;
            _internal.fullyCoveredFragmentShaderInputVariable = FullyCoveredFragmentShaderInputVariable;
            _internal.conservativeRasterizationPostDepthCoverage = ConservativeRasterizationPostDepthCoverage;
            return _internal;
        }
    }

    public partial class PipelineRasterizationConservativeStateCreateInfoEXT : DisposableObject
    {
        public PipelineRasterizationConservativeStateCreateInfoEXT()
        {
        }

        public PipelineRasterizationConservativeStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineRasterizationConservativeStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            ConservativeRasterizationMode = _internal.conservativeRasterizationMode;
            ExtraPrimitiveOverestimationSize = _internal.extraPrimitiveOverestimationSize;
        }

        public StructureType SType => StructureType.PipelineRasterizationConservativeStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ConservativeRasterizationModeEXT ConservativeRasterizationMode { get; set; }
        public float ExtraPrimitiveOverestimationSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRasterizationConservativeStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRasterizationConservativeStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.conservativeRasterizationMode = ConservativeRasterizationMode;
            _internal.extraPrimitiveOverestimationSize = ExtraPrimitiveOverestimationSize;
            return _internal;
        }
    }

    public partial class PhysicalDeviceDepthClipEnableFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceDepthClipEnableFeaturesEXT()
        {
        }

        public PhysicalDeviceDepthClipEnableFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthClipEnableFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            DepthClipEnable = _internal.depthClipEnable;
        }

        public StructureType SType => StructureType.PhysicalDeviceDepthClipEnableFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool DepthClipEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthClipEnableFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDepthClipEnableFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.depthClipEnable = DepthClipEnable;
            return _internal;
        }
    }

    public partial class PipelineRasterizationDepthClipStateCreateInfoEXT : DisposableObject
    {
        public PipelineRasterizationDepthClipStateCreateInfoEXT()
        {
        }

        public PipelineRasterizationDepthClipStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineRasterizationDepthClipStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            DepthClipEnable = _internal.depthClipEnable;
        }

        public StructureType SType => StructureType.PipelineRasterizationDepthClipStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public bool DepthClipEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRasterizationDepthClipStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRasterizationDepthClipStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.depthClipEnable = DepthClipEnable;
            return _internal;
        }
    }

    public partial class XYColorEXT
    {
        public XYColorEXT()
        {
        }

        public XYColorEXT(AdamantiumVulkan.Core.Interop.VkXYColorEXT _internal)
        {
            X = _internal.x;
            Y = _internal.y;
        }

        public float X { get; set; }
        public float Y { get; set; }

        public AdamantiumVulkan.Core.Interop.VkXYColorEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkXYColorEXT();
            _internal.x = X;
            _internal.y = Y;
            return _internal;
        }
    }

    public partial class HdrMetadataEXT : DisposableObject
    {
        public HdrMetadataEXT()
        {
        }

        public HdrMetadataEXT(AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT _internal)
        {
            PNext = _internal.pNext;
            DisplayPrimaryRed = new XYColorEXT(_internal.displayPrimaryRed);
            DisplayPrimaryGreen = new XYColorEXT(_internal.displayPrimaryGreen);
            DisplayPrimaryBlue = new XYColorEXT(_internal.displayPrimaryBlue);
            WhitePoint = new XYColorEXT(_internal.whitePoint);
            MaxLuminance = _internal.maxLuminance;
            MinLuminance = _internal.minLuminance;
            MaxContentLightLevel = _internal.maxContentLightLevel;
            MaxFrameAverageLightLevel = _internal.maxFrameAverageLightLevel;
        }

        public StructureType SType => StructureType.HdrMetadataExt;
        public System.IntPtr PNext { get; set; }
        public XYColorEXT DisplayPrimaryRed { get; set; }
        public XYColorEXT DisplayPrimaryGreen { get; set; }
        public XYColorEXT DisplayPrimaryBlue { get; set; }
        public XYColorEXT WhitePoint { get; set; }
        public float MaxLuminance { get; set; }
        public float MinLuminance { get; set; }
        public float MaxContentLightLevel { get; set; }
        public float MaxFrameAverageLightLevel { get; set; }

        public AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (DisplayPrimaryRed != null)
            {
                _internal.displayPrimaryRed = DisplayPrimaryRed.ToInternal();
            }
            if (DisplayPrimaryGreen != null)
            {
                _internal.displayPrimaryGreen = DisplayPrimaryGreen.ToInternal();
            }
            if (DisplayPrimaryBlue != null)
            {
                _internal.displayPrimaryBlue = DisplayPrimaryBlue.ToInternal();
            }
            if (WhitePoint != null)
            {
                _internal.whitePoint = WhitePoint.ToInternal();
            }
            _internal.maxLuminance = MaxLuminance;
            _internal.minLuminance = MinLuminance;
            _internal.maxContentLightLevel = MaxContentLightLevel;
            _internal.maxFrameAverageLightLevel = MaxFrameAverageLightLevel;
            return _internal;
        }
    }

    public partial class DebugUtilsObjectNameInfoEXT : DisposableObject
    {
        private StringReference refpObjectName;

        public DebugUtilsObjectNameInfoEXT()
        {
        }

        public DebugUtilsObjectNameInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectNameInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ObjectType = _internal.objectType;
            ObjectHandle = _internal.objectHandle;
            PObjectName = Marshal.PtrToStringAnsi(_internal.pObjectName);
        }

        public StructureType SType => StructureType.DebugUtilsObjectNameInfoExt;
        public System.IntPtr PNext { get; set; }
        public ObjectType ObjectType { get; set; }
        public ulong ObjectHandle { get; set; }
        public string PObjectName { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectNameInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectNameInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectType = ObjectType;
            _internal.objectHandle = ObjectHandle;
            refpObjectName?.Dispose();
            if (PObjectName != null)
            {
                refpObjectName = new StringReference(PObjectName, false);
                _internal.pObjectName = refpObjectName.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpObjectName?.Dispose();
        }

    }

    public partial class DebugUtilsObjectTagInfoEXT : DisposableObject
    {
        public DebugUtilsObjectTagInfoEXT()
        {
        }

        public DebugUtilsObjectTagInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectTagInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ObjectType = _internal.objectType;
            ObjectHandle = _internal.objectHandle;
            TagName = _internal.tagName;
            TagSize = _internal.tagSize;
            PTag = _internal.pTag;
        }

        public StructureType SType => StructureType.DebugUtilsObjectTagInfoExt;
        public System.IntPtr PNext { get; set; }
        public ObjectType ObjectType { get; set; }
        public ulong ObjectHandle { get; set; }
        public ulong TagName { get; set; }
        public ulong TagSize { get; set; }
        public System.IntPtr PTag { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectTagInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectTagInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.objectType = ObjectType;
            _internal.objectHandle = ObjectHandle;
            _internal.tagName = TagName;
            _internal.tagSize = TagSize;
            _internal.pTag = PTag;
            return _internal;
        }
    }

    public partial class DebugUtilsLabelEXT : DisposableObject
    {
        private StringReference refpLabelName;

        public DebugUtilsLabelEXT()
        {
        }

        public DebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT _internal)
        {
            PNext = _internal.pNext;
            PLabelName = Marshal.PtrToStringAnsi(_internal.pLabelName);
            var tmpArr0 = new float[4];
            unsafe
            {
                for (int i = 0; i < 4; ++i)
                {
                    tmpArr0[i] = _internal.color[i];
                }
            }
            Color = tmpArr0;
        }

        public StructureType SType => StructureType.DebugUtilsLabelExt;
        public System.IntPtr PNext { get; set; }
        public string PLabelName { get; set; }
        public float[] Color { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            refpLabelName?.Dispose();
            if (PLabelName != null)
            {
                refpLabelName = new StringReference(PLabelName, false);
                _internal.pLabelName = refpLabelName.Handle;
            }
            if(Color != null)
            {
                if (Color.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Color), "Array is out of bounds. Size should not be more than 4");

                var inputArray0 = Color;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.color[i] = inputArray0[i];
                        }
                    }
                }
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpLabelName?.Dispose();
        }

    }

    public partial class DebugUtilsMessengerCallbackDataEXT : DisposableObject
    {
        private StringReference refpMessageIdName;

        private StringReference refpMessage;

        private StructReference refpQueueLabels;

        private StructReference refpCmdBufLabels;

        private StructReference refpObjects;

        public DebugUtilsMessengerCallbackDataEXT()
        {
        }

        public DebugUtilsMessengerCallbackDataEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCallbackDataEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            PMessageIdName = Marshal.PtrToStringAnsi(_internal.pMessageIdName);
            MessageIdNumber = _internal.messageIdNumber;
            PMessage = Marshal.PtrToStringAnsi(_internal.pMessage);
            QueueLabelCount = _internal.queueLabelCount;
            PQueueLabels = new DebugUtilsLabelEXT(Marshal.PtrToStructure<VkDebugUtilsLabelEXT>(_internal.pQueueLabels));
            Marshal.FreeHGlobal(_internal.pQueueLabels);
            CmdBufLabelCount = _internal.cmdBufLabelCount;
            PCmdBufLabels = new DebugUtilsLabelEXT(Marshal.PtrToStructure<VkDebugUtilsLabelEXT>(_internal.pCmdBufLabels));
            Marshal.FreeHGlobal(_internal.pCmdBufLabels);
            ObjectCount = _internal.objectCount;
            PObjects = new DebugUtilsObjectNameInfoEXT(Marshal.PtrToStructure<VkDebugUtilsObjectNameInfoEXT>(_internal.pObjects));
            Marshal.FreeHGlobal(_internal.pObjects);
        }

        public StructureType SType => StructureType.DebugUtilsMessengerCallbackDataExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public string PMessageIdName { get; set; }
        public int MessageIdNumber { get; set; }
        public string PMessage { get; set; }
        public uint QueueLabelCount { get; set; }
        public DebugUtilsLabelEXT PQueueLabels { get; set; }
        public uint CmdBufLabelCount { get; set; }
        public DebugUtilsLabelEXT PCmdBufLabels { get; set; }
        public uint ObjectCount { get; set; }
        public DebugUtilsObjectNameInfoEXT PObjects { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCallbackDataEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCallbackDataEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            refpMessageIdName?.Dispose();
            if (PMessageIdName != null)
            {
                refpMessageIdName = new StringReference(PMessageIdName, false);
                _internal.pMessageIdName = refpMessageIdName.Handle;
            }
            _internal.messageIdNumber = MessageIdNumber;
            refpMessage?.Dispose();
            if (PMessage != null)
            {
                refpMessage = new StringReference(PMessage, false);
                _internal.pMessage = refpMessage.Handle;
            }
            _internal.queueLabelCount = QueueLabelCount;
            refpQueueLabels?.Dispose();
            if (PQueueLabels != null)
            {
                var struct0 = PQueueLabels.ToInternal();
                refpQueueLabels = new StructReference(struct0);
                _internal.pQueueLabels = refpQueueLabels.Handle;
            }
            _internal.cmdBufLabelCount = CmdBufLabelCount;
            refpCmdBufLabels?.Dispose();
            if (PCmdBufLabels != null)
            {
                var struct1 = PCmdBufLabels.ToInternal();
                refpCmdBufLabels = new StructReference(struct1);
                _internal.pCmdBufLabels = refpCmdBufLabels.Handle;
            }
            _internal.objectCount = ObjectCount;
            refpObjects?.Dispose();
            if (PObjects != null)
            {
                var struct2 = PObjects.ToInternal();
                refpObjects = new StructReference(struct2);
                _internal.pObjects = refpObjects.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpMessageIdName?.Dispose();
            refpMessage?.Dispose();
            refpQueueLabels?.Dispose();
            refpCmdBufLabels?.Dispose();
            refpObjects?.Dispose();
        }

    }

    public partial class DebugUtilsMessengerCreateInfoEXT : DisposableObject
    {
        public DebugUtilsMessengerCreateInfoEXT()
        {
        }

        public DebugUtilsMessengerCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            MessageSeverity = _internal.messageSeverity;
            MessageType = _internal.messageType;
            PfnUserCallback = _internal.pfnUserCallback;
            PUserData = _internal.pUserData;
        }

        public StructureType SType => StructureType.DebugUtilsMessengerCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint MessageSeverity { get; set; }
        public uint MessageType { get; set; }
        public PFN_vkDebugUtilsMessengerCallbackEXT PfnUserCallback { get; set; }
        public System.IntPtr PUserData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.messageSeverity = MessageSeverity;
            _internal.messageType = MessageType;
            _internal.pfnUserCallback = PfnUserCallback;
            _internal.pUserData = PUserData;
            return _internal;
        }
    }

    public partial class SamplerReductionModeCreateInfoEXT : DisposableObject
    {
        public SamplerReductionModeCreateInfoEXT()
        {
        }

        public SamplerReductionModeCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkSamplerReductionModeCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ReductionMode = _internal.reductionMode;
        }

        public StructureType SType => StructureType.SamplerReductionModeCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public SamplerReductionModeEXT ReductionMode { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSamplerReductionModeCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSamplerReductionModeCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.reductionMode = ReductionMode;
            return _internal;
        }
    }

    public partial class PhysicalDeviceSamplerFilterMinmaxPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceSamplerFilterMinmaxPropertiesEXT()
        {
        }

        public PhysicalDeviceSamplerFilterMinmaxPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            FilterMinmaxSingleComponentFormats = _internal.filterMinmaxSingleComponentFormats;
            FilterMinmaxImageComponentMapping = _internal.filterMinmaxImageComponentMapping;
        }

        public StructureType SType => StructureType.PhysicalDeviceSamplerFilterMinmaxPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public bool FilterMinmaxSingleComponentFormats { get; set; }
        public bool FilterMinmaxImageComponentMapping { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.filterMinmaxSingleComponentFormats = FilterMinmaxSingleComponentFormats;
            _internal.filterMinmaxImageComponentMapping = FilterMinmaxImageComponentMapping;
            return _internal;
        }
    }

    public partial class PhysicalDeviceInlineUniformBlockFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceInlineUniformBlockFeaturesEXT()
        {
        }

        public PhysicalDeviceInlineUniformBlockFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            InlineUniformBlock = _internal.inlineUniformBlock;
            DescriptorBindingInlineUniformBlockUpdateAfterBind = _internal.descriptorBindingInlineUniformBlockUpdateAfterBind;
        }

        public StructureType SType => StructureType.PhysicalDeviceInlineUniformBlockFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool InlineUniformBlock { get; set; }
        public bool DescriptorBindingInlineUniformBlockUpdateAfterBind { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.inlineUniformBlock = InlineUniformBlock;
            _internal.descriptorBindingInlineUniformBlockUpdateAfterBind = DescriptorBindingInlineUniformBlockUpdateAfterBind;
            return _internal;
        }
    }

    public partial class PhysicalDeviceInlineUniformBlockPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceInlineUniformBlockPropertiesEXT()
        {
        }

        public PhysicalDeviceInlineUniformBlockPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxInlineUniformBlockSize = _internal.maxInlineUniformBlockSize;
            MaxPerStageDescriptorInlineUniformBlocks = _internal.maxPerStageDescriptorInlineUniformBlocks;
            MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = _internal.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            MaxDescriptorSetInlineUniformBlocks = _internal.maxDescriptorSetInlineUniformBlocks;
            MaxDescriptorSetUpdateAfterBindInlineUniformBlocks = _internal.maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        }

        public StructureType SType => StructureType.PhysicalDeviceInlineUniformBlockPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxInlineUniformBlockSize { get; set; }
        public uint MaxPerStageDescriptorInlineUniformBlocks { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks { get; set; }
        public uint MaxDescriptorSetInlineUniformBlocks { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceInlineUniformBlockPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxInlineUniformBlockSize = MaxInlineUniformBlockSize;
            _internal.maxPerStageDescriptorInlineUniformBlocks = MaxPerStageDescriptorInlineUniformBlocks;
            _internal.maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks = MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
            _internal.maxDescriptorSetInlineUniformBlocks = MaxDescriptorSetInlineUniformBlocks;
            _internal.maxDescriptorSetUpdateAfterBindInlineUniformBlocks = MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;
            return _internal;
        }
    }

    public partial class WriteDescriptorSetInlineUniformBlockEXT : DisposableObject
    {
        public WriteDescriptorSetInlineUniformBlockEXT()
        {
        }

        public WriteDescriptorSetInlineUniformBlockEXT(AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetInlineUniformBlockEXT _internal)
        {
            PNext = _internal.pNext;
            DataSize = _internal.dataSize;
            PData = _internal.pData;
        }

        public StructureType SType => StructureType.WriteDescriptorSetInlineUniformBlockExt;
        public System.IntPtr PNext { get; set; }
        public uint DataSize { get; set; }
        public System.IntPtr PData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetInlineUniformBlockEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetInlineUniformBlockEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.dataSize = DataSize;
            _internal.pData = PData;
            return _internal;
        }
    }

    public partial class DescriptorPoolInlineUniformBlockCreateInfoEXT : DisposableObject
    {
        public DescriptorPoolInlineUniformBlockCreateInfoEXT()
        {
        }

        public DescriptorPoolInlineUniformBlockCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkDescriptorPoolInlineUniformBlockCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            MaxInlineUniformBlockBindings = _internal.maxInlineUniformBlockBindings;
        }

        public StructureType SType => StructureType.DescriptorPoolInlineUniformBlockCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxInlineUniformBlockBindings { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorPoolInlineUniformBlockCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorPoolInlineUniformBlockCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxInlineUniformBlockBindings = MaxInlineUniformBlockBindings;
            return _internal;
        }
    }

    public partial class SampleLocationEXT
    {
        public SampleLocationEXT()
        {
        }

        public SampleLocationEXT(AdamantiumVulkan.Core.Interop.VkSampleLocationEXT _internal)
        {
            X = _internal.x;
            Y = _internal.y;
        }

        public float X { get; set; }
        public float Y { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSampleLocationEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSampleLocationEXT();
            _internal.x = X;
            _internal.y = Y;
            return _internal;
        }
    }

    public partial class SampleLocationsInfoEXT : DisposableObject
    {
        private StructReference refpSampleLocations;

        public SampleLocationsInfoEXT()
        {
        }

        public SampleLocationsInfoEXT(AdamantiumVulkan.Core.Interop.VkSampleLocationsInfoEXT _internal)
        {
            PNext = _internal.pNext;
            SampleLocationsPerPixel = _internal.sampleLocationsPerPixel;
            SampleLocationGridSize = new Extent2D(_internal.sampleLocationGridSize);
            SampleLocationsCount = _internal.sampleLocationsCount;
            PSampleLocations = new SampleLocationEXT(Marshal.PtrToStructure<VkSampleLocationEXT>(_internal.pSampleLocations));
            Marshal.FreeHGlobal(_internal.pSampleLocations);
        }

        public StructureType SType => StructureType.SampleLocationsInfoExt;
        public System.IntPtr PNext { get; set; }
        public SampleCountFlagBits SampleLocationsPerPixel { get; set; }
        public Extent2D SampleLocationGridSize { get; set; }
        public uint SampleLocationsCount { get; set; }
        public SampleLocationEXT PSampleLocations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSampleLocationsInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSampleLocationsInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.sampleLocationsPerPixel = SampleLocationsPerPixel;
            if (SampleLocationGridSize != null)
            {
                _internal.sampleLocationGridSize = SampleLocationGridSize.ToInternal();
            }
            _internal.sampleLocationsCount = SampleLocationsCount;
            refpSampleLocations?.Dispose();
            if (PSampleLocations != null)
            {
                var struct0 = PSampleLocations.ToInternal();
                refpSampleLocations = new StructReference(struct0);
                _internal.pSampleLocations = refpSampleLocations.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSampleLocations?.Dispose();
        }

    }

    public partial class AttachmentSampleLocationsEXT
    {
        public AttachmentSampleLocationsEXT()
        {
        }

        public AttachmentSampleLocationsEXT(AdamantiumVulkan.Core.Interop.VkAttachmentSampleLocationsEXT _internal)
        {
            AttachmentIndex = _internal.attachmentIndex;
            SampleLocationsInfo = new SampleLocationsInfoEXT(_internal.sampleLocationsInfo);
        }

        public uint AttachmentIndex { get; set; }
        public SampleLocationsInfoEXT SampleLocationsInfo { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAttachmentSampleLocationsEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAttachmentSampleLocationsEXT();
            _internal.attachmentIndex = AttachmentIndex;
            if (SampleLocationsInfo != null)
            {
                _internal.sampleLocationsInfo = SampleLocationsInfo.ToInternal();
            }
            return _internal;
        }
    }

    public partial class SubpassSampleLocationsEXT
    {
        public SubpassSampleLocationsEXT()
        {
        }

        public SubpassSampleLocationsEXT(AdamantiumVulkan.Core.Interop.VkSubpassSampleLocationsEXT _internal)
        {
            SubpassIndex = _internal.subpassIndex;
            SampleLocationsInfo = new SampleLocationsInfoEXT(_internal.sampleLocationsInfo);
        }

        public uint SubpassIndex { get; set; }
        public SampleLocationsInfoEXT SampleLocationsInfo { get; set; }

        public AdamantiumVulkan.Core.Interop.VkSubpassSampleLocationsEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassSampleLocationsEXT();
            _internal.subpassIndex = SubpassIndex;
            if (SampleLocationsInfo != null)
            {
                _internal.sampleLocationsInfo = SampleLocationsInfo.ToInternal();
            }
            return _internal;
        }
    }

    public partial class RenderPassSampleLocationsBeginInfoEXT : DisposableObject
    {
        private StructReference refpAttachmentInitialSampleLocations;

        private StructReference refpPostSubpassSampleLocations;

        public RenderPassSampleLocationsBeginInfoEXT()
        {
        }

        public RenderPassSampleLocationsBeginInfoEXT(AdamantiumVulkan.Core.Interop.VkRenderPassSampleLocationsBeginInfoEXT _internal)
        {
            PNext = _internal.pNext;
            AttachmentInitialSampleLocationsCount = _internal.attachmentInitialSampleLocationsCount;
            PAttachmentInitialSampleLocations = new AttachmentSampleLocationsEXT(Marshal.PtrToStructure<VkAttachmentSampleLocationsEXT>(_internal.pAttachmentInitialSampleLocations));
            Marshal.FreeHGlobal(_internal.pAttachmentInitialSampleLocations);
            PostSubpassSampleLocationsCount = _internal.postSubpassSampleLocationsCount;
            PPostSubpassSampleLocations = new SubpassSampleLocationsEXT(Marshal.PtrToStructure<VkSubpassSampleLocationsEXT>(_internal.pPostSubpassSampleLocations));
            Marshal.FreeHGlobal(_internal.pPostSubpassSampleLocations);
        }

        public StructureType SType => StructureType.RenderPassSampleLocationsBeginInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint AttachmentInitialSampleLocationsCount { get; set; }
        public AttachmentSampleLocationsEXT PAttachmentInitialSampleLocations { get; set; }
        public uint PostSubpassSampleLocationsCount { get; set; }
        public SubpassSampleLocationsEXT PPostSubpassSampleLocations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassSampleLocationsBeginInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassSampleLocationsBeginInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.attachmentInitialSampleLocationsCount = AttachmentInitialSampleLocationsCount;
            refpAttachmentInitialSampleLocations?.Dispose();
            if (PAttachmentInitialSampleLocations != null)
            {
                var struct0 = PAttachmentInitialSampleLocations.ToInternal();
                refpAttachmentInitialSampleLocations = new StructReference(struct0);
                _internal.pAttachmentInitialSampleLocations = refpAttachmentInitialSampleLocations.Handle;
            }
            _internal.postSubpassSampleLocationsCount = PostSubpassSampleLocationsCount;
            refpPostSubpassSampleLocations?.Dispose();
            if (PPostSubpassSampleLocations != null)
            {
                var struct1 = PPostSubpassSampleLocations.ToInternal();
                refpPostSubpassSampleLocations = new StructReference(struct1);
                _internal.pPostSubpassSampleLocations = refpPostSubpassSampleLocations.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttachmentInitialSampleLocations?.Dispose();
            refpPostSubpassSampleLocations?.Dispose();
        }

    }

    public partial class PipelineSampleLocationsStateCreateInfoEXT : DisposableObject
    {
        public PipelineSampleLocationsStateCreateInfoEXT()
        {
        }

        public PipelineSampleLocationsStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineSampleLocationsStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            SampleLocationsEnable = _internal.sampleLocationsEnable;
            SampleLocationsInfo = new SampleLocationsInfoEXT(_internal.sampleLocationsInfo);
        }

        public StructureType SType => StructureType.PipelineSampleLocationsStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public bool SampleLocationsEnable { get; set; }
        public SampleLocationsInfoEXT SampleLocationsInfo { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineSampleLocationsStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineSampleLocationsStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.sampleLocationsEnable = SampleLocationsEnable;
            if (SampleLocationsInfo != null)
            {
                _internal.sampleLocationsInfo = SampleLocationsInfo.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceSampleLocationsPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceSampleLocationsPropertiesEXT()
        {
        }

        public PhysicalDeviceSampleLocationsPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            SampleLocationSampleCounts = _internal.sampleLocationSampleCounts;
            MaxSampleLocationGridSize = new Extent2D(_internal.maxSampleLocationGridSize);
            var tmpArr0 = new float[2];
            unsafe
            {
                for (int i = 0; i < 2; ++i)
                {
                    tmpArr0[i] = _internal.sampleLocationCoordinateRange[i];
                }
            }
            SampleLocationCoordinateRange = tmpArr0;
            SampleLocationSubPixelBits = _internal.sampleLocationSubPixelBits;
            VariableSampleLocations = _internal.variableSampleLocations;
        }

        public StructureType SType => StructureType.PhysicalDeviceSampleLocationsPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint SampleLocationSampleCounts { get; set; }
        public Extent2D MaxSampleLocationGridSize { get; set; }
        public float[] SampleLocationCoordinateRange { get; set; }
        public uint SampleLocationSubPixelBits { get; set; }
        public bool VariableSampleLocations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.sampleLocationSampleCounts = SampleLocationSampleCounts;
            if (MaxSampleLocationGridSize != null)
            {
                _internal.maxSampleLocationGridSize = MaxSampleLocationGridSize.ToInternal();
            }
            if(SampleLocationCoordinateRange != null)
            {
                if (SampleLocationCoordinateRange.Length > 2)
                    throw new System.ArgumentOutOfRangeException(nameof(SampleLocationCoordinateRange), "Array is out of bounds. Size should not be more than 2");

                var inputArray0 = SampleLocationCoordinateRange;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.sampleLocationCoordinateRange[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.sampleLocationSubPixelBits = SampleLocationSubPixelBits;
            _internal.variableSampleLocations = VariableSampleLocations;
            return _internal;
        }
    }

    public partial class MultisamplePropertiesEXT : DisposableObject
    {
        public MultisamplePropertiesEXT()
        {
        }

        public MultisamplePropertiesEXT(AdamantiumVulkan.Core.Interop.VkMultisamplePropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxSampleLocationGridSize = new Extent2D(_internal.maxSampleLocationGridSize);
        }

        public StructureType SType => StructureType.MultisamplePropertiesExt;
        public System.IntPtr PNext { get; set; }
        public Extent2D MaxSampleLocationGridSize { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMultisamplePropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMultisamplePropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (MaxSampleLocationGridSize != null)
            {
                _internal.maxSampleLocationGridSize = MaxSampleLocationGridSize.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceBlendOperationAdvancedFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceBlendOperationAdvancedFeaturesEXT()
        {
        }

        public PhysicalDeviceBlendOperationAdvancedFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            AdvancedBlendCoherentOperations = _internal.advancedBlendCoherentOperations;
        }

        public StructureType SType => StructureType.PhysicalDeviceBlendOperationAdvancedFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool AdvancedBlendCoherentOperations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.advancedBlendCoherentOperations = AdvancedBlendCoherentOperations;
            return _internal;
        }
    }

    public partial class PhysicalDeviceBlendOperationAdvancedPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceBlendOperationAdvancedPropertiesEXT()
        {
        }

        public PhysicalDeviceBlendOperationAdvancedPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            AdvancedBlendMaxColorAttachments = _internal.advancedBlendMaxColorAttachments;
            AdvancedBlendIndependentBlend = _internal.advancedBlendIndependentBlend;
            AdvancedBlendNonPremultipliedSrcColor = _internal.advancedBlendNonPremultipliedSrcColor;
            AdvancedBlendNonPremultipliedDstColor = _internal.advancedBlendNonPremultipliedDstColor;
            AdvancedBlendCorrelatedOverlap = _internal.advancedBlendCorrelatedOverlap;
            AdvancedBlendAllOperations = _internal.advancedBlendAllOperations;
        }

        public StructureType SType => StructureType.PhysicalDeviceBlendOperationAdvancedPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint AdvancedBlendMaxColorAttachments { get; set; }
        public bool AdvancedBlendIndependentBlend { get; set; }
        public bool AdvancedBlendNonPremultipliedSrcColor { get; set; }
        public bool AdvancedBlendNonPremultipliedDstColor { get; set; }
        public bool AdvancedBlendCorrelatedOverlap { get; set; }
        public bool AdvancedBlendAllOperations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.advancedBlendMaxColorAttachments = AdvancedBlendMaxColorAttachments;
            _internal.advancedBlendIndependentBlend = AdvancedBlendIndependentBlend;
            _internal.advancedBlendNonPremultipliedSrcColor = AdvancedBlendNonPremultipliedSrcColor;
            _internal.advancedBlendNonPremultipliedDstColor = AdvancedBlendNonPremultipliedDstColor;
            _internal.advancedBlendCorrelatedOverlap = AdvancedBlendCorrelatedOverlap;
            _internal.advancedBlendAllOperations = AdvancedBlendAllOperations;
            return _internal;
        }
    }

    public partial class PipelineColorBlendAdvancedStateCreateInfoEXT : DisposableObject
    {
        public PipelineColorBlendAdvancedStateCreateInfoEXT()
        {
        }

        public PipelineColorBlendAdvancedStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAdvancedStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            SrcPremultiplied = _internal.srcPremultiplied;
            DstPremultiplied = _internal.dstPremultiplied;
            BlendOverlap = _internal.blendOverlap;
        }

        public StructureType SType => StructureType.PipelineColorBlendAdvancedStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public bool SrcPremultiplied { get; set; }
        public bool DstPremultiplied { get; set; }
        public BlendOverlapEXT BlendOverlap { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAdvancedStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAdvancedStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.srcPremultiplied = SrcPremultiplied;
            _internal.dstPremultiplied = DstPremultiplied;
            _internal.blendOverlap = BlendOverlap;
            return _internal;
        }
    }

    public partial class PipelineCoverageToColorStateCreateInfoNV : DisposableObject
    {
        public PipelineCoverageToColorStateCreateInfoNV()
        {
        }

        public PipelineCoverageToColorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineCoverageToColorStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            CoverageToColorEnable = _internal.coverageToColorEnable;
            CoverageToColorLocation = _internal.coverageToColorLocation;
        }

        public StructureType SType => StructureType.PipelineCoverageToColorStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public bool CoverageToColorEnable { get; set; }
        public uint CoverageToColorLocation { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineCoverageToColorStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineCoverageToColorStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.coverageToColorEnable = CoverageToColorEnable;
            _internal.coverageToColorLocation = CoverageToColorLocation;
            return _internal;
        }
    }

    public partial class PipelineCoverageModulationStateCreateInfoNV : DisposableObject
    {
        private StructReference refpCoverageModulationTable;

        public PipelineCoverageModulationStateCreateInfoNV()
        {
        }

        public PipelineCoverageModulationStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            CoverageModulationMode = _internal.coverageModulationMode;
            CoverageModulationTableEnable = _internal.coverageModulationTableEnable;
            CoverageModulationTableCount = _internal.coverageModulationTableCount;
            if(_internal.pCoverageModulationTable != System.IntPtr.Zero)
            {
                PCoverageModulationTable = (float?)_internal.pCoverageModulationTable;
                Marshal.FreeHGlobal(_internal.pCoverageModulationTable);
            }
        }

        public StructureType SType => StructureType.PipelineCoverageModulationStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public CoverageModulationModeNV CoverageModulationMode { get; set; }
        public bool CoverageModulationTableEnable { get; set; }
        public uint CoverageModulationTableCount { get; set; }
        public float? PCoverageModulationTable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.coverageModulationMode = CoverageModulationMode;
            _internal.coverageModulationTableEnable = CoverageModulationTableEnable;
            _internal.coverageModulationTableCount = CoverageModulationTableCount;
            refpCoverageModulationTable?.Dispose();
            if (PCoverageModulationTable != null)
            {
                refpCoverageModulationTable = new StructReference(PCoverageModulationTable);
                _internal.pCoverageModulationTable = refpCoverageModulationTable.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpCoverageModulationTable?.Dispose();
        }

    }

    public partial class DrmFormatModifierPropertiesEXT
    {
        public DrmFormatModifierPropertiesEXT()
        {
        }

        public DrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesEXT _internal)
        {
            DrmFormatModifier = _internal.drmFormatModifier;
            DrmFormatModifierPlaneCount = _internal.drmFormatModifierPlaneCount;
            DrmFormatModifierTilingFeatures = _internal.drmFormatModifierTilingFeatures;
        }

        public ulong DrmFormatModifier { get; set; }
        public uint DrmFormatModifierPlaneCount { get; set; }
        public uint DrmFormatModifierTilingFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesEXT();
            _internal.drmFormatModifier = DrmFormatModifier;
            _internal.drmFormatModifierPlaneCount = DrmFormatModifierPlaneCount;
            _internal.drmFormatModifierTilingFeatures = DrmFormatModifierTilingFeatures;
            return _internal;
        }
    }

    public partial class DrmFormatModifierPropertiesListEXT : DisposableObject
    {
        private StructReference refpDrmFormatModifierProperties;

        public DrmFormatModifierPropertiesListEXT()
        {
        }

        public DrmFormatModifierPropertiesListEXT(AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesListEXT _internal)
        {
            PNext = _internal.pNext;
            DrmFormatModifierCount = _internal.drmFormatModifierCount;
            PDrmFormatModifierProperties = new DrmFormatModifierPropertiesEXT(Marshal.PtrToStructure<VkDrmFormatModifierPropertiesEXT>(_internal.pDrmFormatModifierProperties));
            Marshal.FreeHGlobal(_internal.pDrmFormatModifierProperties);
        }

        public StructureType SType => StructureType.DrmFormatModifierPropertiesListExt;
        public System.IntPtr PNext { get; set; }
        public uint DrmFormatModifierCount { get; set; }
        public DrmFormatModifierPropertiesEXT PDrmFormatModifierProperties { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesListEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDrmFormatModifierPropertiesListEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.drmFormatModifierCount = DrmFormatModifierCount;
            refpDrmFormatModifierProperties?.Dispose();
            if (PDrmFormatModifierProperties != null)
            {
                var struct0 = PDrmFormatModifierProperties.ToInternal();
                refpDrmFormatModifierProperties = new StructReference(struct0);
                _internal.pDrmFormatModifierProperties = refpDrmFormatModifierProperties.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDrmFormatModifierProperties?.Dispose();
        }

    }

    public partial class PhysicalDeviceImageDrmFormatModifierInfoEXT : DisposableObject
    {
        private StructReference refpQueueFamilyIndices;

        public PhysicalDeviceImageDrmFormatModifierInfoEXT()
        {
        }

        public PhysicalDeviceImageDrmFormatModifierInfoEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageDrmFormatModifierInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DrmFormatModifier = _internal.drmFormatModifier;
            SharingMode = _internal.sharingMode;
            QueueFamilyIndexCount = _internal.queueFamilyIndexCount;
            if(_internal.pQueueFamilyIndices != System.IntPtr.Zero)
            {
                PQueueFamilyIndices = (uint?)_internal.pQueueFamilyIndices;
                Marshal.FreeHGlobal(_internal.pQueueFamilyIndices);
            }
        }

        public StructureType SType => StructureType.PhysicalDeviceImageDrmFormatModifierInfoExt;
        public System.IntPtr PNext { get; set; }
        public ulong DrmFormatModifier { get; set; }
        public SharingMode SharingMode { get; set; }
        public uint QueueFamilyIndexCount { get; set; }
        public uint? PQueueFamilyIndices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageDrmFormatModifierInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageDrmFormatModifierInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.drmFormatModifier = DrmFormatModifier;
            _internal.sharingMode = SharingMode;
            _internal.queueFamilyIndexCount = QueueFamilyIndexCount;
            refpQueueFamilyIndices?.Dispose();
            if (PQueueFamilyIndices != null)
            {
                refpQueueFamilyIndices = new StructReference(PQueueFamilyIndices);
                _internal.pQueueFamilyIndices = refpQueueFamilyIndices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpQueueFamilyIndices?.Dispose();
        }

    }

    public partial class ImageDrmFormatModifierListCreateInfoEXT : DisposableObject
    {
        private StructReference refpDrmFormatModifiers;

        public ImageDrmFormatModifierListCreateInfoEXT()
        {
        }

        public ImageDrmFormatModifierListCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierListCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DrmFormatModifierCount = _internal.drmFormatModifierCount;
            if(_internal.pDrmFormatModifiers != System.IntPtr.Zero)
            {
                PDrmFormatModifiers = (ulong?)_internal.pDrmFormatModifiers;
                Marshal.FreeHGlobal(_internal.pDrmFormatModifiers);
            }
        }

        public StructureType SType => StructureType.ImageDrmFormatModifierListCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint DrmFormatModifierCount { get; set; }
        public ulong? PDrmFormatModifiers { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierListCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierListCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.drmFormatModifierCount = DrmFormatModifierCount;
            refpDrmFormatModifiers?.Dispose();
            if (PDrmFormatModifiers != null)
            {
                refpDrmFormatModifiers = new StructReference(PDrmFormatModifiers);
                _internal.pDrmFormatModifiers = refpDrmFormatModifiers.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDrmFormatModifiers?.Dispose();
        }

    }

    public partial class ImageDrmFormatModifierExplicitCreateInfoEXT : DisposableObject
    {
        private StructReference refpPlaneLayouts;

        public ImageDrmFormatModifierExplicitCreateInfoEXT()
        {
        }

        public ImageDrmFormatModifierExplicitCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierExplicitCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DrmFormatModifier = _internal.drmFormatModifier;
            DrmFormatModifierPlaneCount = _internal.drmFormatModifierPlaneCount;
            PPlaneLayouts = new SubresourceLayout(Marshal.PtrToStructure<VkSubresourceLayout>(_internal.pPlaneLayouts));
            Marshal.FreeHGlobal(_internal.pPlaneLayouts);
        }

        public StructureType SType => StructureType.ImageDrmFormatModifierExplicitCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public ulong DrmFormatModifier { get; set; }
        public uint DrmFormatModifierPlaneCount { get; set; }
        public SubresourceLayout PPlaneLayouts { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierExplicitCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierExplicitCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.drmFormatModifier = DrmFormatModifier;
            _internal.drmFormatModifierPlaneCount = DrmFormatModifierPlaneCount;
            refpPlaneLayouts?.Dispose();
            if (PPlaneLayouts != null)
            {
                var struct0 = PPlaneLayouts.ToInternal();
                refpPlaneLayouts = new StructReference(struct0);
                _internal.pPlaneLayouts = refpPlaneLayouts.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpPlaneLayouts?.Dispose();
        }

    }

    public partial class ImageDrmFormatModifierPropertiesEXT : DisposableObject
    {
        public ImageDrmFormatModifierPropertiesEXT()
        {
        }

        public ImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            DrmFormatModifier = _internal.drmFormatModifier;
        }

        public StructureType SType => StructureType.ImageDrmFormatModifierPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public ulong DrmFormatModifier { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.drmFormatModifier = DrmFormatModifier;
            return _internal;
        }
    }

    public partial class ValidationCacheCreateInfoEXT : DisposableObject
    {
        public ValidationCacheCreateInfoEXT()
        {
        }

        public ValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkValidationCacheCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            InitialDataSize = _internal.initialDataSize;
            PInitialData = _internal.pInitialData;
        }

        public StructureType SType => StructureType.ValidationCacheCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public ulong InitialDataSize { get; set; }
        public System.IntPtr PInitialData { get; set; }

        public AdamantiumVulkan.Core.Interop.VkValidationCacheCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkValidationCacheCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.initialDataSize = InitialDataSize;
            _internal.pInitialData = PInitialData;
            return _internal;
        }
    }

    public partial class ShaderModuleValidationCacheCreateInfoEXT : DisposableObject
    {
        public ShaderModuleValidationCacheCreateInfoEXT()
        {
        }

        public ShaderModuleValidationCacheCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkShaderModuleValidationCacheCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ValidationCache = new ValidationCacheEXT(_internal.validationCache);
        }

        public StructureType SType => StructureType.ShaderModuleValidationCacheCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public ValidationCacheEXT ValidationCache { get; set; }

        public AdamantiumVulkan.Core.Interop.VkShaderModuleValidationCacheCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkShaderModuleValidationCacheCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.validationCache = ValidationCache;
            return _internal;
        }
    }

    public partial class DescriptorSetLayoutBindingFlagsCreateInfoEXT : DisposableObject
    {
        private StructReference refpBindingFlags;

        public DescriptorSetLayoutBindingFlagsCreateInfoEXT()
        {
        }

        public DescriptorSetLayoutBindingFlagsCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            BindingCount = _internal.bindingCount;
            if(_internal.pBindingFlags != System.IntPtr.Zero)
            {
                PBindingFlags = (uint?)_internal.pBindingFlags;
                Marshal.FreeHGlobal(_internal.pBindingFlags);
            }
        }

        public StructureType SType => StructureType.DescriptorSetLayoutBindingFlagsCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint BindingCount { get; set; }
        public uint? PBindingFlags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.bindingCount = BindingCount;
            refpBindingFlags?.Dispose();
            if (PBindingFlags != null)
            {
                refpBindingFlags = new StructReference(PBindingFlags);
                _internal.pBindingFlags = refpBindingFlags.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpBindingFlags?.Dispose();
        }

    }

    public partial class PhysicalDeviceDescriptorIndexingFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceDescriptorIndexingFeaturesEXT()
        {
        }

        public PhysicalDeviceDescriptorIndexingFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            ShaderInputAttachmentArrayDynamicIndexing = _internal.shaderInputAttachmentArrayDynamicIndexing;
            ShaderUniformTexelBufferArrayDynamicIndexing = _internal.shaderUniformTexelBufferArrayDynamicIndexing;
            ShaderStorageTexelBufferArrayDynamicIndexing = _internal.shaderStorageTexelBufferArrayDynamicIndexing;
            ShaderUniformBufferArrayNonUniformIndexing = _internal.shaderUniformBufferArrayNonUniformIndexing;
            ShaderSampledImageArrayNonUniformIndexing = _internal.shaderSampledImageArrayNonUniformIndexing;
            ShaderStorageBufferArrayNonUniformIndexing = _internal.shaderStorageBufferArrayNonUniformIndexing;
            ShaderStorageImageArrayNonUniformIndexing = _internal.shaderStorageImageArrayNonUniformIndexing;
            ShaderInputAttachmentArrayNonUniformIndexing = _internal.shaderInputAttachmentArrayNonUniformIndexing;
            ShaderUniformTexelBufferArrayNonUniformIndexing = _internal.shaderUniformTexelBufferArrayNonUniformIndexing;
            ShaderStorageTexelBufferArrayNonUniformIndexing = _internal.shaderStorageTexelBufferArrayNonUniformIndexing;
            DescriptorBindingUniformBufferUpdateAfterBind = _internal.descriptorBindingUniformBufferUpdateAfterBind;
            DescriptorBindingSampledImageUpdateAfterBind = _internal.descriptorBindingSampledImageUpdateAfterBind;
            DescriptorBindingStorageImageUpdateAfterBind = _internal.descriptorBindingStorageImageUpdateAfterBind;
            DescriptorBindingStorageBufferUpdateAfterBind = _internal.descriptorBindingStorageBufferUpdateAfterBind;
            DescriptorBindingUniformTexelBufferUpdateAfterBind = _internal.descriptorBindingUniformTexelBufferUpdateAfterBind;
            DescriptorBindingStorageTexelBufferUpdateAfterBind = _internal.descriptorBindingStorageTexelBufferUpdateAfterBind;
            DescriptorBindingUpdateUnusedWhilePending = _internal.descriptorBindingUpdateUnusedWhilePending;
            DescriptorBindingPartiallyBound = _internal.descriptorBindingPartiallyBound;
            DescriptorBindingVariableDescriptorCount = _internal.descriptorBindingVariableDescriptorCount;
            RuntimeDescriptorArray = _internal.runtimeDescriptorArray;
        }

        public StructureType SType => StructureType.PhysicalDeviceDescriptorIndexingFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool ShaderInputAttachmentArrayDynamicIndexing { get; set; }
        public bool ShaderUniformTexelBufferArrayDynamicIndexing { get; set; }
        public bool ShaderStorageTexelBufferArrayDynamicIndexing { get; set; }
        public bool ShaderUniformBufferArrayNonUniformIndexing { get; set; }
        public bool ShaderSampledImageArrayNonUniformIndexing { get; set; }
        public bool ShaderStorageBufferArrayNonUniformIndexing { get; set; }
        public bool ShaderStorageImageArrayNonUniformIndexing { get; set; }
        public bool ShaderInputAttachmentArrayNonUniformIndexing { get; set; }
        public bool ShaderUniformTexelBufferArrayNonUniformIndexing { get; set; }
        public bool ShaderStorageTexelBufferArrayNonUniformIndexing { get; set; }
        public bool DescriptorBindingUniformBufferUpdateAfterBind { get; set; }
        public bool DescriptorBindingSampledImageUpdateAfterBind { get; set; }
        public bool DescriptorBindingStorageImageUpdateAfterBind { get; set; }
        public bool DescriptorBindingStorageBufferUpdateAfterBind { get; set; }
        public bool DescriptorBindingUniformTexelBufferUpdateAfterBind { get; set; }
        public bool DescriptorBindingStorageTexelBufferUpdateAfterBind { get; set; }
        public bool DescriptorBindingUpdateUnusedWhilePending { get; set; }
        public bool DescriptorBindingPartiallyBound { get; set; }
        public bool DescriptorBindingVariableDescriptorCount { get; set; }
        public bool RuntimeDescriptorArray { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderInputAttachmentArrayDynamicIndexing = ShaderInputAttachmentArrayDynamicIndexing;
            _internal.shaderUniformTexelBufferArrayDynamicIndexing = ShaderUniformTexelBufferArrayDynamicIndexing;
            _internal.shaderStorageTexelBufferArrayDynamicIndexing = ShaderStorageTexelBufferArrayDynamicIndexing;
            _internal.shaderUniformBufferArrayNonUniformIndexing = ShaderUniformBufferArrayNonUniformIndexing;
            _internal.shaderSampledImageArrayNonUniformIndexing = ShaderSampledImageArrayNonUniformIndexing;
            _internal.shaderStorageBufferArrayNonUniformIndexing = ShaderStorageBufferArrayNonUniformIndexing;
            _internal.shaderStorageImageArrayNonUniformIndexing = ShaderStorageImageArrayNonUniformIndexing;
            _internal.shaderInputAttachmentArrayNonUniformIndexing = ShaderInputAttachmentArrayNonUniformIndexing;
            _internal.shaderUniformTexelBufferArrayNonUniformIndexing = ShaderUniformTexelBufferArrayNonUniformIndexing;
            _internal.shaderStorageTexelBufferArrayNonUniformIndexing = ShaderStorageTexelBufferArrayNonUniformIndexing;
            _internal.descriptorBindingUniformBufferUpdateAfterBind = DescriptorBindingUniformBufferUpdateAfterBind;
            _internal.descriptorBindingSampledImageUpdateAfterBind = DescriptorBindingSampledImageUpdateAfterBind;
            _internal.descriptorBindingStorageImageUpdateAfterBind = DescriptorBindingStorageImageUpdateAfterBind;
            _internal.descriptorBindingStorageBufferUpdateAfterBind = DescriptorBindingStorageBufferUpdateAfterBind;
            _internal.descriptorBindingUniformTexelBufferUpdateAfterBind = DescriptorBindingUniformTexelBufferUpdateAfterBind;
            _internal.descriptorBindingStorageTexelBufferUpdateAfterBind = DescriptorBindingStorageTexelBufferUpdateAfterBind;
            _internal.descriptorBindingUpdateUnusedWhilePending = DescriptorBindingUpdateUnusedWhilePending;
            _internal.descriptorBindingPartiallyBound = DescriptorBindingPartiallyBound;
            _internal.descriptorBindingVariableDescriptorCount = DescriptorBindingVariableDescriptorCount;
            _internal.runtimeDescriptorArray = RuntimeDescriptorArray;
            return _internal;
        }
    }

    public partial class PhysicalDeviceDescriptorIndexingPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceDescriptorIndexingPropertiesEXT()
        {
        }

        public PhysicalDeviceDescriptorIndexingPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxUpdateAfterBindDescriptorsInAllPools = _internal.maxUpdateAfterBindDescriptorsInAllPools;
            ShaderUniformBufferArrayNonUniformIndexingNative = _internal.shaderUniformBufferArrayNonUniformIndexingNative;
            ShaderSampledImageArrayNonUniformIndexingNative = _internal.shaderSampledImageArrayNonUniformIndexingNative;
            ShaderStorageBufferArrayNonUniformIndexingNative = _internal.shaderStorageBufferArrayNonUniformIndexingNative;
            ShaderStorageImageArrayNonUniformIndexingNative = _internal.shaderStorageImageArrayNonUniformIndexingNative;
            ShaderInputAttachmentArrayNonUniformIndexingNative = _internal.shaderInputAttachmentArrayNonUniformIndexingNative;
            RobustBufferAccessUpdateAfterBind = _internal.robustBufferAccessUpdateAfterBind;
            QuadDivergentImplicitLod = _internal.quadDivergentImplicitLod;
            MaxPerStageDescriptorUpdateAfterBindSamplers = _internal.maxPerStageDescriptorUpdateAfterBindSamplers;
            MaxPerStageDescriptorUpdateAfterBindUniformBuffers = _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
            MaxPerStageDescriptorUpdateAfterBindStorageBuffers = _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
            MaxPerStageDescriptorUpdateAfterBindSampledImages = _internal.maxPerStageDescriptorUpdateAfterBindSampledImages;
            MaxPerStageDescriptorUpdateAfterBindStorageImages = _internal.maxPerStageDescriptorUpdateAfterBindStorageImages;
            MaxPerStageDescriptorUpdateAfterBindInputAttachments = _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments;
            MaxPerStageUpdateAfterBindResources = _internal.maxPerStageUpdateAfterBindResources;
            MaxDescriptorSetUpdateAfterBindSamplers = _internal.maxDescriptorSetUpdateAfterBindSamplers;
            MaxDescriptorSetUpdateAfterBindUniformBuffers = _internal.maxDescriptorSetUpdateAfterBindUniformBuffers;
            MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic = _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            MaxDescriptorSetUpdateAfterBindStorageBuffers = _internal.maxDescriptorSetUpdateAfterBindStorageBuffers;
            MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic = _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            MaxDescriptorSetUpdateAfterBindSampledImages = _internal.maxDescriptorSetUpdateAfterBindSampledImages;
            MaxDescriptorSetUpdateAfterBindStorageImages = _internal.maxDescriptorSetUpdateAfterBindStorageImages;
            MaxDescriptorSetUpdateAfterBindInputAttachments = _internal.maxDescriptorSetUpdateAfterBindInputAttachments;
        }

        public StructureType SType => StructureType.PhysicalDeviceDescriptorIndexingPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxUpdateAfterBindDescriptorsInAllPools { get; set; }
        public bool ShaderUniformBufferArrayNonUniformIndexingNative { get; set; }
        public bool ShaderSampledImageArrayNonUniformIndexingNative { get; set; }
        public bool ShaderStorageBufferArrayNonUniformIndexingNative { get; set; }
        public bool ShaderStorageImageArrayNonUniformIndexingNative { get; set; }
        public bool ShaderInputAttachmentArrayNonUniformIndexingNative { get; set; }
        public bool RobustBufferAccessUpdateAfterBind { get; set; }
        public bool QuadDivergentImplicitLod { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindSamplers { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindSampledImages { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindStorageImages { get; set; }
        public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments { get; set; }
        public uint MaxPerStageUpdateAfterBindResources { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindSamplers { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffers { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffers { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindSampledImages { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindStorageImages { get; set; }
        public uint MaxDescriptorSetUpdateAfterBindInputAttachments { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxUpdateAfterBindDescriptorsInAllPools = MaxUpdateAfterBindDescriptorsInAllPools;
            _internal.shaderUniformBufferArrayNonUniformIndexingNative = ShaderUniformBufferArrayNonUniformIndexingNative;
            _internal.shaderSampledImageArrayNonUniformIndexingNative = ShaderSampledImageArrayNonUniformIndexingNative;
            _internal.shaderStorageBufferArrayNonUniformIndexingNative = ShaderStorageBufferArrayNonUniformIndexingNative;
            _internal.shaderStorageImageArrayNonUniformIndexingNative = ShaderStorageImageArrayNonUniformIndexingNative;
            _internal.shaderInputAttachmentArrayNonUniformIndexingNative = ShaderInputAttachmentArrayNonUniformIndexingNative;
            _internal.robustBufferAccessUpdateAfterBind = RobustBufferAccessUpdateAfterBind;
            _internal.quadDivergentImplicitLod = QuadDivergentImplicitLod;
            _internal.maxPerStageDescriptorUpdateAfterBindSamplers = MaxPerStageDescriptorUpdateAfterBindSamplers;
            _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers = MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
            _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers = MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
            _internal.maxPerStageDescriptorUpdateAfterBindSampledImages = MaxPerStageDescriptorUpdateAfterBindSampledImages;
            _internal.maxPerStageDescriptorUpdateAfterBindStorageImages = MaxPerStageDescriptorUpdateAfterBindStorageImages;
            _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments = MaxPerStageDescriptorUpdateAfterBindInputAttachments;
            _internal.maxPerStageUpdateAfterBindResources = MaxPerStageUpdateAfterBindResources;
            _internal.maxDescriptorSetUpdateAfterBindSamplers = MaxDescriptorSetUpdateAfterBindSamplers;
            _internal.maxDescriptorSetUpdateAfterBindUniformBuffers = MaxDescriptorSetUpdateAfterBindUniformBuffers;
            _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
            _internal.maxDescriptorSetUpdateAfterBindStorageBuffers = MaxDescriptorSetUpdateAfterBindStorageBuffers;
            _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
            _internal.maxDescriptorSetUpdateAfterBindSampledImages = MaxDescriptorSetUpdateAfterBindSampledImages;
            _internal.maxDescriptorSetUpdateAfterBindStorageImages = MaxDescriptorSetUpdateAfterBindStorageImages;
            _internal.maxDescriptorSetUpdateAfterBindInputAttachments = MaxDescriptorSetUpdateAfterBindInputAttachments;
            return _internal;
        }
    }

    public partial class DescriptorSetVariableDescriptorCountAllocateInfoEXT : DisposableObject
    {
        private StructReference refpDescriptorCounts;

        public DescriptorSetVariableDescriptorCountAllocateInfoEXT()
        {
        }

        public DescriptorSetVariableDescriptorCountAllocateInfoEXT(AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DescriptorSetCount = _internal.descriptorSetCount;
            if(_internal.pDescriptorCounts != System.IntPtr.Zero)
            {
                PDescriptorCounts = (uint?)_internal.pDescriptorCounts;
                Marshal.FreeHGlobal(_internal.pDescriptorCounts);
            }
        }

        public StructureType SType => StructureType.DescriptorSetVariableDescriptorCountAllocateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint DescriptorSetCount { get; set; }
        public uint? PDescriptorCounts { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.descriptorSetCount = DescriptorSetCount;
            refpDescriptorCounts?.Dispose();
            if (PDescriptorCounts != null)
            {
                refpDescriptorCounts = new StructReference(PDescriptorCounts);
                _internal.pDescriptorCounts = refpDescriptorCounts.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDescriptorCounts?.Dispose();
        }

    }

    public partial class DescriptorSetVariableDescriptorCountLayoutSupportEXT : DisposableObject
    {
        public DescriptorSetVariableDescriptorCountLayoutSupportEXT()
        {
        }

        public DescriptorSetVariableDescriptorCountLayoutSupportEXT(AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT _internal)
        {
            PNext = _internal.pNext;
            MaxVariableDescriptorCount = _internal.maxVariableDescriptorCount;
        }

        public StructureType SType => StructureType.DescriptorSetVariableDescriptorCountLayoutSupportExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxVariableDescriptorCount { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxVariableDescriptorCount = MaxVariableDescriptorCount;
            return _internal;
        }
    }

    public partial class ShadingRatePaletteNV : DisposableObject
    {
        private GCHandleReference refpShadingRatePaletteEntries;

        public ShadingRatePaletteNV()
        {
        }

        public ShadingRatePaletteNV(AdamantiumVulkan.Core.Interop.VkShadingRatePaletteNV _internal)
        {
            ShadingRatePaletteEntryCount = _internal.shadingRatePaletteEntryCount;
            var tmppShadingRatePaletteEntries = new int[_internal.shadingRatePaletteEntryCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pShadingRatePaletteEntries, tmppShadingRatePaletteEntries);
            Marshal.FreeHGlobal(_internal.pShadingRatePaletteEntries);
            PShadingRatePaletteEntries = new AdamantiumVulkan.Core.ShadingRatePaletteEntryNV[_internal.shadingRatePaletteEntryCount];
            for (int i = 0; i < tmppShadingRatePaletteEntries.Length; ++i)
            {
                PShadingRatePaletteEntries[i] = (AdamantiumVulkan.Core.ShadingRatePaletteEntryNV)tmppShadingRatePaletteEntries[i];
            }
        }

        public uint ShadingRatePaletteEntryCount { get; set; }
        public ShadingRatePaletteEntryNV[] PShadingRatePaletteEntries { get; set; }

        public AdamantiumVulkan.Core.Interop.VkShadingRatePaletteNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkShadingRatePaletteNV();
            _internal.shadingRatePaletteEntryCount = ShadingRatePaletteEntryCount;
            refpShadingRatePaletteEntries?.Dispose();
            if (PShadingRatePaletteEntries != null)
            {
                var tmpArray0 = new ShadingRatePaletteEntryNV[ShadingRatePaletteEntryCount];
                for (int i = 0; i < PShadingRatePaletteEntries.Length; ++i)
                {
                    tmpArray0[i] = PShadingRatePaletteEntries[i];
                }
                refpShadingRatePaletteEntries = new GCHandleReference(tmpArray0);
                _internal.pShadingRatePaletteEntries = refpShadingRatePaletteEntries.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpShadingRatePaletteEntries?.Dispose();
        }

    }

    public partial class PipelineViewportShadingRateImageStateCreateInfoNV : DisposableObject
    {
        private StructReference refpShadingRatePalettes;

        public PipelineViewportShadingRateImageStateCreateInfoNV()
        {
        }

        public PipelineViewportShadingRateImageStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineViewportShadingRateImageStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            ShadingRateImageEnable = _internal.shadingRateImageEnable;
            ViewportCount = _internal.viewportCount;
            PShadingRatePalettes = new ShadingRatePaletteNV(Marshal.PtrToStructure<VkShadingRatePaletteNV>(_internal.pShadingRatePalettes));
            Marshal.FreeHGlobal(_internal.pShadingRatePalettes);
        }

        public StructureType SType => StructureType.PipelineViewportShadingRateImageStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public bool ShadingRateImageEnable { get; set; }
        public uint ViewportCount { get; set; }
        public ShadingRatePaletteNV PShadingRatePalettes { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportShadingRateImageStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportShadingRateImageStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shadingRateImageEnable = ShadingRateImageEnable;
            _internal.viewportCount = ViewportCount;
            refpShadingRatePalettes?.Dispose();
            if (PShadingRatePalettes != null)
            {
                var struct0 = PShadingRatePalettes.ToInternal();
                refpShadingRatePalettes = new StructReference(struct0);
                _internal.pShadingRatePalettes = refpShadingRatePalettes.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpShadingRatePalettes?.Dispose();
        }

    }

    public partial class PhysicalDeviceShadingRateImageFeaturesNV : DisposableObject
    {
        public PhysicalDeviceShadingRateImageFeaturesNV()
        {
        }

        public PhysicalDeviceShadingRateImageFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImageFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            ShadingRateImage = _internal.shadingRateImage;
            ShadingRateCoarseSampleOrder = _internal.shadingRateCoarseSampleOrder;
        }

        public StructureType SType => StructureType.PhysicalDeviceShadingRateImageFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool ShadingRateImage { get; set; }
        public bool ShadingRateCoarseSampleOrder { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImageFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImageFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shadingRateImage = ShadingRateImage;
            _internal.shadingRateCoarseSampleOrder = ShadingRateCoarseSampleOrder;
            return _internal;
        }
    }

    public partial class PhysicalDeviceShadingRateImagePropertiesNV : DisposableObject
    {
        public PhysicalDeviceShadingRateImagePropertiesNV()
        {
        }

        public PhysicalDeviceShadingRateImagePropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImagePropertiesNV _internal)
        {
            PNext = _internal.pNext;
            ShadingRateTexelSize = new Extent2D(_internal.shadingRateTexelSize);
            ShadingRatePaletteSize = _internal.shadingRatePaletteSize;
            ShadingRateMaxCoarseSamples = _internal.shadingRateMaxCoarseSamples;
        }

        public StructureType SType => StructureType.PhysicalDeviceShadingRateImagePropertiesNv;
        public System.IntPtr PNext { get; set; }
        public Extent2D ShadingRateTexelSize { get; set; }
        public uint ShadingRatePaletteSize { get; set; }
        public uint ShadingRateMaxCoarseSamples { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImagePropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShadingRateImagePropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (ShadingRateTexelSize != null)
            {
                _internal.shadingRateTexelSize = ShadingRateTexelSize.ToInternal();
            }
            _internal.shadingRatePaletteSize = ShadingRatePaletteSize;
            _internal.shadingRateMaxCoarseSamples = ShadingRateMaxCoarseSamples;
            return _internal;
        }
    }

    public partial class CoarseSampleLocationNV
    {
        public CoarseSampleLocationNV()
        {
        }

        public CoarseSampleLocationNV(AdamantiumVulkan.Core.Interop.VkCoarseSampleLocationNV _internal)
        {
            PixelX = _internal.pixelX;
            PixelY = _internal.pixelY;
            Sample = _internal.sample;
        }

        public uint PixelX { get; set; }
        public uint PixelY { get; set; }
        public uint Sample { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCoarseSampleLocationNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCoarseSampleLocationNV();
            _internal.pixelX = PixelX;
            _internal.pixelY = PixelY;
            _internal.sample = Sample;
            return _internal;
        }
    }

    public partial class CoarseSampleOrderCustomNV : DisposableObject
    {
        private StructReference refpSampleLocations;

        public CoarseSampleOrderCustomNV()
        {
        }

        public CoarseSampleOrderCustomNV(AdamantiumVulkan.Core.Interop.VkCoarseSampleOrderCustomNV _internal)
        {
            ShadingRate = _internal.shadingRate;
            SampleCount = _internal.sampleCount;
            SampleLocationCount = _internal.sampleLocationCount;
            PSampleLocations = new CoarseSampleLocationNV(Marshal.PtrToStructure<VkCoarseSampleLocationNV>(_internal.pSampleLocations));
            Marshal.FreeHGlobal(_internal.pSampleLocations);
        }

        public ShadingRatePaletteEntryNV ShadingRate { get; set; }
        public uint SampleCount { get; set; }
        public uint SampleLocationCount { get; set; }
        public CoarseSampleLocationNV PSampleLocations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCoarseSampleOrderCustomNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCoarseSampleOrderCustomNV();
            _internal.shadingRate = ShadingRate;
            _internal.sampleCount = SampleCount;
            _internal.sampleLocationCount = SampleLocationCount;
            refpSampleLocations?.Dispose();
            if (PSampleLocations != null)
            {
                var struct0 = PSampleLocations.ToInternal();
                refpSampleLocations = new StructReference(struct0);
                _internal.pSampleLocations = refpSampleLocations.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpSampleLocations?.Dispose();
        }

    }

    public partial class PipelineViewportCoarseSampleOrderStateCreateInfoNV : DisposableObject
    {
        private StructReference refpCustomSampleOrders;

        public PipelineViewportCoarseSampleOrderStateCreateInfoNV()
        {
        }

        public PipelineViewportCoarseSampleOrderStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            SampleOrderType = _internal.sampleOrderType;
            CustomSampleOrderCount = _internal.customSampleOrderCount;
            PCustomSampleOrders = new CoarseSampleOrderCustomNV(Marshal.PtrToStructure<VkCoarseSampleOrderCustomNV>(_internal.pCustomSampleOrders));
            Marshal.FreeHGlobal(_internal.pCustomSampleOrders);
        }

        public StructureType SType => StructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public CoarseSampleOrderTypeNV SampleOrderType { get; set; }
        public uint CustomSampleOrderCount { get; set; }
        public CoarseSampleOrderCustomNV PCustomSampleOrders { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.sampleOrderType = SampleOrderType;
            _internal.customSampleOrderCount = CustomSampleOrderCount;
            refpCustomSampleOrders?.Dispose();
            if (PCustomSampleOrders != null)
            {
                var struct0 = PCustomSampleOrders.ToInternal();
                refpCustomSampleOrders = new StructReference(struct0);
                _internal.pCustomSampleOrders = refpCustomSampleOrders.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpCustomSampleOrders?.Dispose();
        }

    }

    public partial class RayTracingShaderGroupCreateInfoNV : DisposableObject
    {
        public RayTracingShaderGroupCreateInfoNV()
        {
        }

        public RayTracingShaderGroupCreateInfoNV(AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Type = _internal.type;
            GeneralShader = _internal.generalShader;
            ClosestHitShader = _internal.closestHitShader;
            AnyHitShader = _internal.anyHitShader;
            IntersectionShader = _internal.intersectionShader;
        }

        public StructureType SType => StructureType.RayTracingShaderGroupCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public RayTracingShaderGroupTypeNV Type { get; set; }
        public uint GeneralShader { get; set; }
        public uint ClosestHitShader { get; set; }
        public uint AnyHitShader { get; set; }
        public uint IntersectionShader { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.type = Type;
            _internal.generalShader = GeneralShader;
            _internal.closestHitShader = ClosestHitShader;
            _internal.anyHitShader = AnyHitShader;
            _internal.intersectionShader = IntersectionShader;
            return _internal;
        }
    }

    public partial class RayTracingPipelineCreateInfoNV : DisposableObject
    {
        private StructReference refpStages;

        private StructReference refpGroups;

        public RayTracingPipelineCreateInfoNV()
        {
        }

        public RayTracingPipelineCreateInfoNV(AdamantiumVulkan.Core.Interop.VkRayTracingPipelineCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            StageCount = _internal.stageCount;
            PStages = new PipelineShaderStageCreateInfo(Marshal.PtrToStructure<VkPipelineShaderStageCreateInfo>(_internal.pStages));
            Marshal.FreeHGlobal(_internal.pStages);
            GroupCount = _internal.groupCount;
            PGroups = new RayTracingShaderGroupCreateInfoNV(Marshal.PtrToStructure<VkRayTracingShaderGroupCreateInfoNV>(_internal.pGroups));
            Marshal.FreeHGlobal(_internal.pGroups);
            MaxRecursionDepth = _internal.maxRecursionDepth;
            Layout = new PipelineLayout(_internal.layout);
            BasePipelineHandle = new Pipeline(_internal.basePipelineHandle);
            BasePipelineIndex = _internal.basePipelineIndex;
        }

        public StructureType SType => StructureType.RayTracingPipelineCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public uint StageCount { get; set; }
        public PipelineShaderStageCreateInfo PStages { get; set; }
        public uint GroupCount { get; set; }
        public RayTracingShaderGroupCreateInfoNV PGroups { get; set; }
        public uint MaxRecursionDepth { get; set; }
        public PipelineLayout Layout { get; set; }
        public Pipeline BasePipelineHandle { get; set; }
        public int BasePipelineIndex { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRayTracingPipelineCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRayTracingPipelineCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.stageCount = StageCount;
            refpStages?.Dispose();
            if (PStages != null)
            {
                var struct0 = PStages.ToInternal();
                refpStages = new StructReference(struct0);
                _internal.pStages = refpStages.Handle;
            }
            _internal.groupCount = GroupCount;
            refpGroups?.Dispose();
            if (PGroups != null)
            {
                var struct1 = PGroups.ToInternal();
                refpGroups = new StructReference(struct1);
                _internal.pGroups = refpGroups.Handle;
            }
            _internal.maxRecursionDepth = MaxRecursionDepth;
            _internal.layout = Layout;
            _internal.basePipelineHandle = BasePipelineHandle;
            _internal.basePipelineIndex = BasePipelineIndex;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpStages?.Dispose();
            refpGroups?.Dispose();
        }

    }

    public partial class GeometryTrianglesNV : DisposableObject
    {
        public GeometryTrianglesNV()
        {
        }

        public GeometryTrianglesNV(AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV _internal)
        {
            PNext = _internal.pNext;
            VertexData = new Buffer(_internal.vertexData);
            VertexOffset = _internal.vertexOffset;
            VertexCount = _internal.vertexCount;
            VertexStride = _internal.vertexStride;
            VertexFormat = _internal.vertexFormat;
            IndexData = new Buffer(_internal.indexData);
            IndexOffset = _internal.indexOffset;
            IndexCount = _internal.indexCount;
            IndexType = _internal.indexType;
            TransformData = new Buffer(_internal.transformData);
            TransformOffset = _internal.transformOffset;
        }

        public StructureType SType => StructureType.GeometryTrianglesNv;
        public System.IntPtr PNext { get; set; }
        public Buffer VertexData { get; set; }
        public ulong VertexOffset { get; set; }
        public uint VertexCount { get; set; }
        public ulong VertexStride { get; set; }
        public Format VertexFormat { get; set; }
        public Buffer IndexData { get; set; }
        public ulong IndexOffset { get; set; }
        public uint IndexCount { get; set; }
        public IndexType IndexType { get; set; }
        public Buffer TransformData { get; set; }
        public ulong TransformOffset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.vertexData = VertexData;
            _internal.vertexOffset = VertexOffset;
            _internal.vertexCount = VertexCount;
            _internal.vertexStride = VertexStride;
            _internal.vertexFormat = VertexFormat;
            _internal.indexData = IndexData;
            _internal.indexOffset = IndexOffset;
            _internal.indexCount = IndexCount;
            _internal.indexType = IndexType;
            _internal.transformData = TransformData;
            _internal.transformOffset = TransformOffset;
            return _internal;
        }
    }

    public partial class GeometryAABBNV : DisposableObject
    {
        public GeometryAABBNV()
        {
        }

        public GeometryAABBNV(AdamantiumVulkan.Core.Interop.VkGeometryAABBNV _internal)
        {
            PNext = _internal.pNext;
            AabbData = new Buffer(_internal.aabbData);
            NumAABBs = _internal.numAABBs;
            Stride = _internal.stride;
            Offset = _internal.offset;
        }

        public StructureType SType => StructureType.GeometryAabbNv;
        public System.IntPtr PNext { get; set; }
        public Buffer AabbData { get; set; }
        public uint NumAABBs { get; set; }
        public uint Stride { get; set; }
        public ulong Offset { get; set; }

        public AdamantiumVulkan.Core.Interop.VkGeometryAABBNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkGeometryAABBNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.aabbData = AabbData;
            _internal.numAABBs = NumAABBs;
            _internal.stride = Stride;
            _internal.offset = Offset;
            return _internal;
        }
    }

    public partial class GeometryDataNV
    {
        public GeometryDataNV()
        {
        }

        public GeometryDataNV(AdamantiumVulkan.Core.Interop.VkGeometryDataNV _internal)
        {
            Triangles = new GeometryTrianglesNV(_internal.triangles);
            Aabbs = new GeometryAABBNV(_internal.aabbs);
        }

        public GeometryTrianglesNV Triangles { get; set; }
        public GeometryAABBNV Aabbs { get; set; }

        public AdamantiumVulkan.Core.Interop.VkGeometryDataNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkGeometryDataNV();
            if (Triangles != null)
            {
                _internal.triangles = Triangles.ToInternal();
            }
            if (Aabbs != null)
            {
                _internal.aabbs = Aabbs.ToInternal();
            }
            return _internal;
        }
    }

    public partial class GeometryNV : DisposableObject
    {
        public GeometryNV()
        {
        }

        public GeometryNV(AdamantiumVulkan.Core.Interop.VkGeometryNV _internal)
        {
            PNext = _internal.pNext;
            GeometryType = _internal.geometryType;
            Geometry = new GeometryDataNV(_internal.geometry);
            Flags = _internal.flags;
        }

        public StructureType SType => StructureType.GeometryNv;
        public System.IntPtr PNext { get; set; }
        public GeometryTypeNV GeometryType { get; set; }
        public GeometryDataNV Geometry { get; set; }
        public uint Flags { get; set; }

        public AdamantiumVulkan.Core.Interop.VkGeometryNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkGeometryNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.geometryType = GeometryType;
            if (Geometry != null)
            {
                _internal.geometry = Geometry.ToInternal();
            }
            _internal.flags = Flags;
            return _internal;
        }
    }

    public partial class AccelerationStructureInfoNV : DisposableObject
    {
        private StructReference refpGeometries;

        public AccelerationStructureInfoNV()
        {
        }

        public AccelerationStructureInfoNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureInfoNV _internal)
        {
            PNext = _internal.pNext;
            Type = _internal.type;
            Flags = _internal.flags;
            InstanceCount = _internal.instanceCount;
            GeometryCount = _internal.geometryCount;
            PGeometries = new GeometryNV(Marshal.PtrToStructure<VkGeometryNV>(_internal.pGeometries));
            Marshal.FreeHGlobal(_internal.pGeometries);
        }

        public StructureType SType => StructureType.AccelerationStructureInfoNv;
        public System.IntPtr PNext { get; set; }
        public AccelerationStructureTypeNV Type { get; set; }
        public uint Flags { get; set; }
        public uint InstanceCount { get; set; }
        public uint GeometryCount { get; set; }
        public GeometryNV PGeometries { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAccelerationStructureInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAccelerationStructureInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.type = Type;
            _internal.flags = Flags;
            _internal.instanceCount = InstanceCount;
            _internal.geometryCount = GeometryCount;
            refpGeometries?.Dispose();
            if (PGeometries != null)
            {
                var struct0 = PGeometries.ToInternal();
                refpGeometries = new StructReference(struct0);
                _internal.pGeometries = refpGeometries.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpGeometries?.Dispose();
        }

    }

    public partial class AccelerationStructureCreateInfoNV : DisposableObject
    {
        public AccelerationStructureCreateInfoNV()
        {
        }

        public AccelerationStructureCreateInfoNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            CompactedSize = _internal.compactedSize;
            Info = new AccelerationStructureInfoNV(_internal.info);
        }

        public StructureType SType => StructureType.AccelerationStructureCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public ulong CompactedSize { get; set; }
        public AccelerationStructureInfoNV Info { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAccelerationStructureCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAccelerationStructureCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.compactedSize = CompactedSize;
            if (Info != null)
            {
                _internal.info = Info.ToInternal();
            }
            return _internal;
        }
    }

    public partial class BindAccelerationStructureMemoryInfoNV : DisposableObject
    {
        private StructReference refpDeviceIndices;

        public BindAccelerationStructureMemoryInfoNV()
        {
        }

        public BindAccelerationStructureMemoryInfoNV(AdamantiumVulkan.Core.Interop.VkBindAccelerationStructureMemoryInfoNV _internal)
        {
            PNext = _internal.pNext;
            AccelerationStructure = new AccelerationStructureNV(_internal.accelerationStructure);
            Memory = new DeviceMemory(_internal.memory);
            MemoryOffset = _internal.memoryOffset;
            DeviceIndexCount = _internal.deviceIndexCount;
            if(_internal.pDeviceIndices != System.IntPtr.Zero)
            {
                PDeviceIndices = (uint?)_internal.pDeviceIndices;
                Marshal.FreeHGlobal(_internal.pDeviceIndices);
            }
        }

        public StructureType SType => StructureType.BindAccelerationStructureMemoryInfoNv;
        public System.IntPtr PNext { get; set; }
        public AccelerationStructureNV AccelerationStructure { get; set; }
        public DeviceMemory Memory { get; set; }
        public ulong MemoryOffset { get; set; }
        public uint DeviceIndexCount { get; set; }
        public uint? PDeviceIndices { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBindAccelerationStructureMemoryInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBindAccelerationStructureMemoryInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.accelerationStructure = AccelerationStructure;
            _internal.memory = Memory;
            _internal.memoryOffset = MemoryOffset;
            _internal.deviceIndexCount = DeviceIndexCount;
            refpDeviceIndices?.Dispose();
            if (PDeviceIndices != null)
            {
                refpDeviceIndices = new StructReference(PDeviceIndices);
                _internal.pDeviceIndices = refpDeviceIndices.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpDeviceIndices?.Dispose();
        }

    }

    public partial class WriteDescriptorSetAccelerationStructureNV : DisposableObject
    {
        private StructReference refpAccelerationStructures;

        public WriteDescriptorSetAccelerationStructureNV()
        {
        }

        public WriteDescriptorSetAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetAccelerationStructureNV _internal)
        {
            PNext = _internal.pNext;
            AccelerationStructureCount = _internal.accelerationStructureCount;
            PAccelerationStructures = new AccelerationStructureNV(Marshal.PtrToStructure<AccelerationStructureNV>(_internal.pAccelerationStructures));
            Marshal.FreeHGlobal(_internal.pAccelerationStructures);
        }

        public StructureType SType => StructureType.WriteDescriptorSetAccelerationStructureNv;
        public System.IntPtr PNext { get; set; }
        public uint AccelerationStructureCount { get; set; }
        public AccelerationStructureNV PAccelerationStructures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetAccelerationStructureNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetAccelerationStructureNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.accelerationStructureCount = AccelerationStructureCount;
            refpAccelerationStructures?.Dispose();
            if (PAccelerationStructures != null)
            {
                AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T struct0 = PAccelerationStructures;
                refpAccelerationStructures = new StructReference(struct0);
                _internal.pAccelerationStructures = refpAccelerationStructures.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAccelerationStructures?.Dispose();
        }

    }

    public partial class AccelerationStructureMemoryRequirementsInfoNV : DisposableObject
    {
        public AccelerationStructureMemoryRequirementsInfoNV()
        {
        }

        public AccelerationStructureMemoryRequirementsInfoNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureMemoryRequirementsInfoNV _internal)
        {
            PNext = _internal.pNext;
            Type = _internal.type;
            AccelerationStructure = new AccelerationStructureNV(_internal.accelerationStructure);
        }

        public StructureType SType => StructureType.AccelerationStructureMemoryRequirementsInfoNv;
        public System.IntPtr PNext { get; set; }
        public AccelerationStructureMemoryRequirementsTypeNV Type { get; set; }
        public AccelerationStructureNV AccelerationStructure { get; set; }

        public AdamantiumVulkan.Core.Interop.VkAccelerationStructureMemoryRequirementsInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkAccelerationStructureMemoryRequirementsInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.type = Type;
            _internal.accelerationStructure = AccelerationStructure;
            return _internal;
        }
    }

    public partial class PhysicalDeviceRayTracingPropertiesNV : DisposableObject
    {
        public PhysicalDeviceRayTracingPropertiesNV()
        {
        }

        public PhysicalDeviceRayTracingPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRayTracingPropertiesNV _internal)
        {
            PNext = _internal.pNext;
            ShaderGroupHandleSize = _internal.shaderGroupHandleSize;
            MaxRecursionDepth = _internal.maxRecursionDepth;
            MaxShaderGroupStride = _internal.maxShaderGroupStride;
            ShaderGroupBaseAlignment = _internal.shaderGroupBaseAlignment;
            MaxGeometryCount = _internal.maxGeometryCount;
            MaxInstanceCount = _internal.maxInstanceCount;
            MaxTriangleCount = _internal.maxTriangleCount;
            MaxDescriptorSetAccelerationStructures = _internal.maxDescriptorSetAccelerationStructures;
        }

        public StructureType SType => StructureType.PhysicalDeviceRayTracingPropertiesNv;
        public System.IntPtr PNext { get; set; }
        public uint ShaderGroupHandleSize { get; set; }
        public uint MaxRecursionDepth { get; set; }
        public uint MaxShaderGroupStride { get; set; }
        public uint ShaderGroupBaseAlignment { get; set; }
        public ulong MaxGeometryCount { get; set; }
        public ulong MaxInstanceCount { get; set; }
        public ulong MaxTriangleCount { get; set; }
        public uint MaxDescriptorSetAccelerationStructures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRayTracingPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRayTracingPropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderGroupHandleSize = ShaderGroupHandleSize;
            _internal.maxRecursionDepth = MaxRecursionDepth;
            _internal.maxShaderGroupStride = MaxShaderGroupStride;
            _internal.shaderGroupBaseAlignment = ShaderGroupBaseAlignment;
            _internal.maxGeometryCount = MaxGeometryCount;
            _internal.maxInstanceCount = MaxInstanceCount;
            _internal.maxTriangleCount = MaxTriangleCount;
            _internal.maxDescriptorSetAccelerationStructures = MaxDescriptorSetAccelerationStructures;
            return _internal;
        }
    }

    public partial class PhysicalDeviceRepresentativeFragmentTestFeaturesNV : DisposableObject
    {
        public PhysicalDeviceRepresentativeFragmentTestFeaturesNV()
        {
        }

        public PhysicalDeviceRepresentativeFragmentTestFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            RepresentativeFragmentTest = _internal.representativeFragmentTest;
        }

        public StructureType SType => StructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool RepresentativeFragmentTest { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.representativeFragmentTest = RepresentativeFragmentTest;
            return _internal;
        }
    }

    public partial class PipelineRepresentativeFragmentTestStateCreateInfoNV : DisposableObject
    {
        public PipelineRepresentativeFragmentTestStateCreateInfoNV()
        {
        }

        public PipelineRepresentativeFragmentTestStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineRepresentativeFragmentTestStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            RepresentativeFragmentTestEnable = _internal.representativeFragmentTestEnable;
        }

        public StructureType SType => StructureType.PipelineRepresentativeFragmentTestStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public bool RepresentativeFragmentTestEnable { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineRepresentativeFragmentTestStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineRepresentativeFragmentTestStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.representativeFragmentTestEnable = RepresentativeFragmentTestEnable;
            return _internal;
        }
    }

    public partial class PhysicalDeviceImageViewImageFormatInfoEXT : DisposableObject
    {
        public PhysicalDeviceImageViewImageFormatInfoEXT()
        {
        }

        public PhysicalDeviceImageViewImageFormatInfoEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageViewImageFormatInfoEXT _internal)
        {
            PNext = _internal.pNext;
            ImageViewType = _internal.imageViewType;
        }

        public StructureType SType => StructureType.PhysicalDeviceImageViewImageFormatInfoExt;
        public System.IntPtr PNext { get; set; }
        public ImageViewType ImageViewType { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageViewImageFormatInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageViewImageFormatInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.imageViewType = ImageViewType;
            return _internal;
        }
    }

    public partial class FilterCubicImageViewImageFormatPropertiesEXT : DisposableObject
    {
        public FilterCubicImageViewImageFormatPropertiesEXT()
        {
        }

        public FilterCubicImageViewImageFormatPropertiesEXT(AdamantiumVulkan.Core.Interop.VkFilterCubicImageViewImageFormatPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            FilterCubic = _internal.filterCubic;
            FilterCubicMinmax = _internal.filterCubicMinmax;
        }

        public StructureType SType => StructureType.FilterCubicImageViewImageFormatPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public bool FilterCubic { get; set; }
        public bool FilterCubicMinmax { get; set; }

        public AdamantiumVulkan.Core.Interop.VkFilterCubicImageViewImageFormatPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkFilterCubicImageViewImageFormatPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.filterCubic = FilterCubic;
            _internal.filterCubicMinmax = FilterCubicMinmax;
            return _internal;
        }
    }

    public partial class DeviceQueueGlobalPriorityCreateInfoEXT : DisposableObject
    {
        public DeviceQueueGlobalPriorityCreateInfoEXT()
        {
        }

        public DeviceQueueGlobalPriorityCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkDeviceQueueGlobalPriorityCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            GlobalPriority = _internal.globalPriority;
        }

        public StructureType SType => StructureType.DeviceQueueGlobalPriorityCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public QueueGlobalPriorityEXT GlobalPriority { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceQueueGlobalPriorityCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceQueueGlobalPriorityCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.globalPriority = GlobalPriority;
            return _internal;
        }
    }

    public partial class ImportMemoryHostPointerInfoEXT : DisposableObject
    {
        public ImportMemoryHostPointerInfoEXT()
        {
        }

        public ImportMemoryHostPointerInfoEXT(AdamantiumVulkan.Core.Interop.VkImportMemoryHostPointerInfoEXT _internal)
        {
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
            PHostPointer = _internal.pHostPointer;
        }

        public StructureType SType => StructureType.ImportMemoryHostPointerInfoExt;
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }
        public System.IntPtr PHostPointer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImportMemoryHostPointerInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImportMemoryHostPointerInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            _internal.pHostPointer = PHostPointer;
            return _internal;
        }
    }

    public partial class MemoryHostPointerPropertiesEXT : DisposableObject
    {
        public MemoryHostPointerPropertiesEXT()
        {
        }

        public MemoryHostPointerPropertiesEXT(AdamantiumVulkan.Core.Interop.VkMemoryHostPointerPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MemoryTypeBits = _internal.memoryTypeBits;
        }

        public StructureType SType => StructureType.MemoryHostPointerPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MemoryTypeBits { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryHostPointerPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryHostPointerPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.memoryTypeBits = MemoryTypeBits;
            return _internal;
        }
    }

    public partial class PhysicalDeviceExternalMemoryHostPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceExternalMemoryHostPropertiesEXT()
        {
        }

        public PhysicalDeviceExternalMemoryHostPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalMemoryHostPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MinImportedHostPointerAlignment = _internal.minImportedHostPointerAlignment;
        }

        public StructureType SType => StructureType.PhysicalDeviceExternalMemoryHostPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public ulong MinImportedHostPointerAlignment { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalMemoryHostPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalMemoryHostPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.minImportedHostPointerAlignment = MinImportedHostPointerAlignment;
            return _internal;
        }
    }

    public partial class CalibratedTimestampInfoEXT : DisposableObject
    {
        public CalibratedTimestampInfoEXT()
        {
        }

        public CalibratedTimestampInfoEXT(AdamantiumVulkan.Core.Interop.VkCalibratedTimestampInfoEXT _internal)
        {
            PNext = _internal.pNext;
            TimeDomain = _internal.timeDomain;
        }

        public StructureType SType => StructureType.CalibratedTimestampInfoExt;
        public System.IntPtr PNext { get; set; }
        public TimeDomainEXT TimeDomain { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCalibratedTimestampInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCalibratedTimestampInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.timeDomain = TimeDomain;
            return _internal;
        }
    }

    public partial class PhysicalDeviceShaderCorePropertiesAMD : DisposableObject
    {
        public PhysicalDeviceShaderCorePropertiesAMD()
        {
        }

        public PhysicalDeviceShaderCorePropertiesAMD(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD _internal)
        {
            PNext = _internal.pNext;
            ShaderEngineCount = _internal.shaderEngineCount;
            ShaderArraysPerEngineCount = _internal.shaderArraysPerEngineCount;
            ComputeUnitsPerShaderArray = _internal.computeUnitsPerShaderArray;
            SimdPerComputeUnit = _internal.simdPerComputeUnit;
            WavefrontsPerSimd = _internal.wavefrontsPerSimd;
            WavefrontSize = _internal.wavefrontSize;
            SgprsPerSimd = _internal.sgprsPerSimd;
            MinSgprAllocation = _internal.minSgprAllocation;
            MaxSgprAllocation = _internal.maxSgprAllocation;
            SgprAllocationGranularity = _internal.sgprAllocationGranularity;
            VgprsPerSimd = _internal.vgprsPerSimd;
            MinVgprAllocation = _internal.minVgprAllocation;
            MaxVgprAllocation = _internal.maxVgprAllocation;
            VgprAllocationGranularity = _internal.vgprAllocationGranularity;
        }

        public StructureType SType => StructureType.PhysicalDeviceShaderCorePropertiesAmd;
        public System.IntPtr PNext { get; set; }
        public uint ShaderEngineCount { get; set; }
        public uint ShaderArraysPerEngineCount { get; set; }
        public uint ComputeUnitsPerShaderArray { get; set; }
        public uint SimdPerComputeUnit { get; set; }
        public uint WavefrontsPerSimd { get; set; }
        public uint WavefrontSize { get; set; }
        public uint SgprsPerSimd { get; set; }
        public uint MinSgprAllocation { get; set; }
        public uint MaxSgprAllocation { get; set; }
        public uint SgprAllocationGranularity { get; set; }
        public uint VgprsPerSimd { get; set; }
        public uint MinVgprAllocation { get; set; }
        public uint MaxVgprAllocation { get; set; }
        public uint VgprAllocationGranularity { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.shaderEngineCount = ShaderEngineCount;
            _internal.shaderArraysPerEngineCount = ShaderArraysPerEngineCount;
            _internal.computeUnitsPerShaderArray = ComputeUnitsPerShaderArray;
            _internal.simdPerComputeUnit = SimdPerComputeUnit;
            _internal.wavefrontsPerSimd = WavefrontsPerSimd;
            _internal.wavefrontSize = WavefrontSize;
            _internal.sgprsPerSimd = SgprsPerSimd;
            _internal.minSgprAllocation = MinSgprAllocation;
            _internal.maxSgprAllocation = MaxSgprAllocation;
            _internal.sgprAllocationGranularity = SgprAllocationGranularity;
            _internal.vgprsPerSimd = VgprsPerSimd;
            _internal.minVgprAllocation = MinVgprAllocation;
            _internal.maxVgprAllocation = MaxVgprAllocation;
            _internal.vgprAllocationGranularity = VgprAllocationGranularity;
            return _internal;
        }
    }

    public partial class DeviceMemoryOverallocationCreateInfoAMD : DisposableObject
    {
        public DeviceMemoryOverallocationCreateInfoAMD()
        {
        }

        public DeviceMemoryOverallocationCreateInfoAMD(AdamantiumVulkan.Core.Interop.VkDeviceMemoryOverallocationCreateInfoAMD _internal)
        {
            PNext = _internal.pNext;
            OverallocationBehavior = _internal.overallocationBehavior;
        }

        public StructureType SType => StructureType.DeviceMemoryOverallocationCreateInfoAmd;
        public System.IntPtr PNext { get; set; }
        public MemoryOverallocationBehaviorAMD OverallocationBehavior { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDeviceMemoryOverallocationCreateInfoAMD ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceMemoryOverallocationCreateInfoAMD();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.overallocationBehavior = OverallocationBehavior;
            return _internal;
        }
    }

    public partial class PhysicalDeviceVertexAttributeDivisorPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceVertexAttributeDivisorPropertiesEXT()
        {
        }

        public PhysicalDeviceVertexAttributeDivisorPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MaxVertexAttribDivisor = _internal.maxVertexAttribDivisor;
        }

        public StructureType SType => StructureType.PhysicalDeviceVertexAttributeDivisorPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint MaxVertexAttribDivisor { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxVertexAttribDivisor = MaxVertexAttribDivisor;
            return _internal;
        }
    }

    public partial class VertexInputBindingDivisorDescriptionEXT
    {
        public VertexInputBindingDivisorDescriptionEXT()
        {
        }

        public VertexInputBindingDivisorDescriptionEXT(AdamantiumVulkan.Core.Interop.VkVertexInputBindingDivisorDescriptionEXT _internal)
        {
            Binding = _internal.binding;
            Divisor = _internal.divisor;
        }

        public uint Binding { get; set; }
        public uint Divisor { get; set; }

        public AdamantiumVulkan.Core.Interop.VkVertexInputBindingDivisorDescriptionEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkVertexInputBindingDivisorDescriptionEXT();
            _internal.binding = Binding;
            _internal.divisor = Divisor;
            return _internal;
        }
    }

    public partial class PipelineVertexInputDivisorStateCreateInfoEXT : DisposableObject
    {
        private StructReference refpVertexBindingDivisors;

        public PipelineVertexInputDivisorStateCreateInfoEXT()
        {
        }

        public PipelineVertexInputDivisorStateCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineVertexInputDivisorStateCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            VertexBindingDivisorCount = _internal.vertexBindingDivisorCount;
            PVertexBindingDivisors = new VertexInputBindingDivisorDescriptionEXT(Marshal.PtrToStructure<VkVertexInputBindingDivisorDescriptionEXT>(_internal.pVertexBindingDivisors));
            Marshal.FreeHGlobal(_internal.pVertexBindingDivisors);
        }

        public StructureType SType => StructureType.PipelineVertexInputDivisorStateCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint VertexBindingDivisorCount { get; set; }
        public VertexInputBindingDivisorDescriptionEXT PVertexBindingDivisors { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineVertexInputDivisorStateCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineVertexInputDivisorStateCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.vertexBindingDivisorCount = VertexBindingDivisorCount;
            refpVertexBindingDivisors?.Dispose();
            if (PVertexBindingDivisors != null)
            {
                var struct0 = PVertexBindingDivisors.ToInternal();
                refpVertexBindingDivisors = new StructReference(struct0);
                _internal.pVertexBindingDivisors = refpVertexBindingDivisors.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpVertexBindingDivisors?.Dispose();
        }

    }

    public partial class PhysicalDeviceVertexAttributeDivisorFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceVertexAttributeDivisorFeaturesEXT()
        {
        }

        public PhysicalDeviceVertexAttributeDivisorFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            VertexAttributeInstanceRateDivisor = _internal.vertexAttributeInstanceRateDivisor;
            VertexAttributeInstanceRateZeroDivisor = _internal.vertexAttributeInstanceRateZeroDivisor;
        }

        public StructureType SType => StructureType.PhysicalDeviceVertexAttributeDivisorFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool VertexAttributeInstanceRateDivisor { get; set; }
        public bool VertexAttributeInstanceRateZeroDivisor { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.vertexAttributeInstanceRateDivisor = VertexAttributeInstanceRateDivisor;
            _internal.vertexAttributeInstanceRateZeroDivisor = VertexAttributeInstanceRateZeroDivisor;
            return _internal;
        }
    }

    public partial class PhysicalDeviceComputeShaderDerivativesFeaturesNV : DisposableObject
    {
        public PhysicalDeviceComputeShaderDerivativesFeaturesNV()
        {
        }

        public PhysicalDeviceComputeShaderDerivativesFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            ComputeDerivativeGroupQuads = _internal.computeDerivativeGroupQuads;
            ComputeDerivativeGroupLinear = _internal.computeDerivativeGroupLinear;
        }

        public StructureType SType => StructureType.PhysicalDeviceComputeShaderDerivativesFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool ComputeDerivativeGroupQuads { get; set; }
        public bool ComputeDerivativeGroupLinear { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.computeDerivativeGroupQuads = ComputeDerivativeGroupQuads;
            _internal.computeDerivativeGroupLinear = ComputeDerivativeGroupLinear;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMeshShaderFeaturesNV : DisposableObject
    {
        public PhysicalDeviceMeshShaderFeaturesNV()
        {
        }

        public PhysicalDeviceMeshShaderFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            TaskShader = _internal.taskShader;
            MeshShader = _internal.meshShader;
        }

        public StructureType SType => StructureType.PhysicalDeviceMeshShaderFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool TaskShader { get; set; }
        public bool MeshShader { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.taskShader = TaskShader;
            _internal.meshShader = MeshShader;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMeshShaderPropertiesNV : DisposableObject
    {
        public PhysicalDeviceMeshShaderPropertiesNV()
        {
        }

        public PhysicalDeviceMeshShaderPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV _internal)
        {
            PNext = _internal.pNext;
            MaxDrawMeshTasksCount = _internal.maxDrawMeshTasksCount;
            MaxTaskWorkGroupInvocations = _internal.maxTaskWorkGroupInvocations;
            var tmpArr0 = new uint[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr0[i] = _internal.maxTaskWorkGroupSize[i];
                }
            }
            MaxTaskWorkGroupSize = tmpArr0;
            MaxTaskTotalMemorySize = _internal.maxTaskTotalMemorySize;
            MaxTaskOutputCount = _internal.maxTaskOutputCount;
            MaxMeshWorkGroupInvocations = _internal.maxMeshWorkGroupInvocations;
            var tmpArr1 = new uint[3];
            unsafe
            {
                for (int i = 0; i < 3; ++i)
                {
                    tmpArr1[i] = _internal.maxMeshWorkGroupSize[i];
                }
            }
            MaxMeshWorkGroupSize = tmpArr1;
            MaxMeshTotalMemorySize = _internal.maxMeshTotalMemorySize;
            MaxMeshOutputVertices = _internal.maxMeshOutputVertices;
            MaxMeshOutputPrimitives = _internal.maxMeshOutputPrimitives;
            MaxMeshMultiviewViewCount = _internal.maxMeshMultiviewViewCount;
            MeshOutputPerVertexGranularity = _internal.meshOutputPerVertexGranularity;
            MeshOutputPerPrimitiveGranularity = _internal.meshOutputPerPrimitiveGranularity;
        }

        public StructureType SType => StructureType.PhysicalDeviceMeshShaderPropertiesNv;
        public System.IntPtr PNext { get; set; }
        public uint MaxDrawMeshTasksCount { get; set; }
        public uint MaxTaskWorkGroupInvocations { get; set; }
        public uint[] MaxTaskWorkGroupSize { get; set; }
        public uint MaxTaskTotalMemorySize { get; set; }
        public uint MaxTaskOutputCount { get; set; }
        public uint MaxMeshWorkGroupInvocations { get; set; }
        public uint[] MaxMeshWorkGroupSize { get; set; }
        public uint MaxMeshTotalMemorySize { get; set; }
        public uint MaxMeshOutputVertices { get; set; }
        public uint MaxMeshOutputPrimitives { get; set; }
        public uint MaxMeshMultiviewViewCount { get; set; }
        public uint MeshOutputPerVertexGranularity { get; set; }
        public uint MeshOutputPerPrimitiveGranularity { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.maxDrawMeshTasksCount = MaxDrawMeshTasksCount;
            _internal.maxTaskWorkGroupInvocations = MaxTaskWorkGroupInvocations;
            if(MaxTaskWorkGroupSize != null)
            {
                if (MaxTaskWorkGroupSize.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxTaskWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                var inputArray0 = MaxTaskWorkGroupSize;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.maxTaskWorkGroupSize[i] = inputArray0[i];
                        }
                    }
                }
            }
            _internal.maxTaskTotalMemorySize = MaxTaskTotalMemorySize;
            _internal.maxTaskOutputCount = MaxTaskOutputCount;
            _internal.maxMeshWorkGroupInvocations = MaxMeshWorkGroupInvocations;
            if(MaxMeshWorkGroupSize != null)
            {
                if (MaxMeshWorkGroupSize.Length > 3)
                    throw new System.ArgumentOutOfRangeException(nameof(MaxMeshWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

                var inputArray1 = MaxMeshWorkGroupSize;
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.maxMeshWorkGroupSize[i] = inputArray1[i];
                        }
                    }
                }
            }
            _internal.maxMeshTotalMemorySize = MaxMeshTotalMemorySize;
            _internal.maxMeshOutputVertices = MaxMeshOutputVertices;
            _internal.maxMeshOutputPrimitives = MaxMeshOutputPrimitives;
            _internal.maxMeshMultiviewViewCount = MaxMeshMultiviewViewCount;
            _internal.meshOutputPerVertexGranularity = MeshOutputPerVertexGranularity;
            _internal.meshOutputPerPrimitiveGranularity = MeshOutputPerPrimitiveGranularity;
            return _internal;
        }
    }

    public partial class DrawMeshTasksIndirectCommandNV
    {
        public DrawMeshTasksIndirectCommandNV()
        {
        }

        public DrawMeshTasksIndirectCommandNV(AdamantiumVulkan.Core.Interop.VkDrawMeshTasksIndirectCommandNV _internal)
        {
            TaskCount = _internal.taskCount;
            FirstTask = _internal.firstTask;
        }

        public uint TaskCount { get; set; }
        public uint FirstTask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkDrawMeshTasksIndirectCommandNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkDrawMeshTasksIndirectCommandNV();
            _internal.taskCount = TaskCount;
            _internal.firstTask = FirstTask;
            return _internal;
        }
    }

    public partial class PhysicalDeviceFragmentShaderBarycentricFeaturesNV : DisposableObject
    {
        public PhysicalDeviceFragmentShaderBarycentricFeaturesNV()
        {
        }

        public PhysicalDeviceFragmentShaderBarycentricFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            FragmentShaderBarycentric = _internal.fragmentShaderBarycentric;
        }

        public StructureType SType => StructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool FragmentShaderBarycentric { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.fragmentShaderBarycentric = FragmentShaderBarycentric;
            return _internal;
        }
    }

    public partial class PhysicalDeviceShaderImageFootprintFeaturesNV : DisposableObject
    {
        public PhysicalDeviceShaderImageFootprintFeaturesNV()
        {
        }

        public PhysicalDeviceShaderImageFootprintFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderImageFootprintFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            ImageFootprint = _internal.imageFootprint;
        }

        public StructureType SType => StructureType.PhysicalDeviceShaderImageFootprintFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool ImageFootprint { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderImageFootprintFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderImageFootprintFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.imageFootprint = ImageFootprint;
            return _internal;
        }
    }

    public partial class PipelineViewportExclusiveScissorStateCreateInfoNV : DisposableObject
    {
        private StructReference refpExclusiveScissors;

        public PipelineViewportExclusiveScissorStateCreateInfoNV()
        {
        }

        public PipelineViewportExclusiveScissorStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineViewportExclusiveScissorStateCreateInfoNV _internal)
        {
            PNext = _internal.pNext;
            ExclusiveScissorCount = _internal.exclusiveScissorCount;
            PExclusiveScissors = new Rect2D(Marshal.PtrToStructure<VkRect2D>(_internal.pExclusiveScissors));
            Marshal.FreeHGlobal(_internal.pExclusiveScissors);
        }

        public StructureType SType => StructureType.PipelineViewportExclusiveScissorStateCreateInfoNv;
        public System.IntPtr PNext { get; set; }
        public uint ExclusiveScissorCount { get; set; }
        public Rect2D PExclusiveScissors { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPipelineViewportExclusiveScissorStateCreateInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportExclusiveScissorStateCreateInfoNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.exclusiveScissorCount = ExclusiveScissorCount;
            refpExclusiveScissors?.Dispose();
            if (PExclusiveScissors != null)
            {
                var struct0 = PExclusiveScissors.ToInternal();
                refpExclusiveScissors = new StructReference(struct0);
                _internal.pExclusiveScissors = refpExclusiveScissors.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpExclusiveScissors?.Dispose();
        }

    }

    public partial class PhysicalDeviceExclusiveScissorFeaturesNV : DisposableObject
    {
        public PhysicalDeviceExclusiveScissorFeaturesNV()
        {
        }

        public PhysicalDeviceExclusiveScissorFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExclusiveScissorFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            ExclusiveScissor = _internal.exclusiveScissor;
        }

        public StructureType SType => StructureType.PhysicalDeviceExclusiveScissorFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool ExclusiveScissor { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExclusiveScissorFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExclusiveScissorFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.exclusiveScissor = ExclusiveScissor;
            return _internal;
        }
    }

    public partial class QueueFamilyCheckpointPropertiesNV : DisposableObject
    {
        public QueueFamilyCheckpointPropertiesNV()
        {
        }

        public QueueFamilyCheckpointPropertiesNV(AdamantiumVulkan.Core.Interop.VkQueueFamilyCheckpointPropertiesNV _internal)
        {
            PNext = _internal.pNext;
            CheckpointExecutionStageMask = _internal.checkpointExecutionStageMask;
        }

        public StructureType SType => StructureType.QueueFamilyCheckpointPropertiesNv;
        public System.IntPtr PNext { get; set; }
        public uint CheckpointExecutionStageMask { get; set; }

        public AdamantiumVulkan.Core.Interop.VkQueueFamilyCheckpointPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkQueueFamilyCheckpointPropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.checkpointExecutionStageMask = CheckpointExecutionStageMask;
            return _internal;
        }
    }

    public partial class CheckpointDataNV : DisposableObject
    {
        public CheckpointDataNV()
        {
        }

        public CheckpointDataNV(AdamantiumVulkan.Core.Interop.VkCheckpointDataNV _internal)
        {
            PNext = _internal.pNext;
            Stage = _internal.stage;
            PCheckpointMarker = _internal.pCheckpointMarker;
        }

        public StructureType SType => StructureType.CheckpointDataNv;
        public System.IntPtr PNext { get; set; }
        public PipelineStageFlagBits Stage { get; set; }
        public System.IntPtr PCheckpointMarker { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCheckpointDataNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCheckpointDataNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.stage = Stage;
            _internal.pCheckpointMarker = PCheckpointMarker;
            return _internal;
        }
    }

    public partial class PhysicalDevicePCIBusInfoPropertiesEXT : DisposableObject
    {
        public PhysicalDevicePCIBusInfoPropertiesEXT()
        {
        }

        public PhysicalDevicePCIBusInfoPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevicePCIBusInfoPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            PciDomain = _internal.pciDomain;
            PciBus = _internal.pciBus;
            PciDevice = _internal.pciDevice;
            PciFunction = _internal.pciFunction;
        }

        public StructureType SType => StructureType.PhysicalDevicePciBusInfoPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public uint PciDomain { get; set; }
        public uint PciBus { get; set; }
        public uint PciDevice { get; set; }
        public uint PciFunction { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDevicePCIBusInfoPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDevicePCIBusInfoPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.pciDomain = PciDomain;
            _internal.pciBus = PciBus;
            _internal.pciDevice = PciDevice;
            _internal.pciFunction = PciFunction;
            return _internal;
        }
    }

    public partial class PhysicalDeviceFragmentDensityMapFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceFragmentDensityMapFeaturesEXT()
        {
        }

        public PhysicalDeviceFragmentDensityMapFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            FragmentDensityMap = _internal.fragmentDensityMap;
            FragmentDensityMapDynamic = _internal.fragmentDensityMapDynamic;
            FragmentDensityMapNonSubsampledImages = _internal.fragmentDensityMapNonSubsampledImages;
        }

        public StructureType SType => StructureType.PhysicalDeviceFragmentDensityMapFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool FragmentDensityMap { get; set; }
        public bool FragmentDensityMapDynamic { get; set; }
        public bool FragmentDensityMapNonSubsampledImages { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.fragmentDensityMap = FragmentDensityMap;
            _internal.fragmentDensityMapDynamic = FragmentDensityMapDynamic;
            _internal.fragmentDensityMapNonSubsampledImages = FragmentDensityMapNonSubsampledImages;
            return _internal;
        }
    }

    public partial class PhysicalDeviceFragmentDensityMapPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceFragmentDensityMapPropertiesEXT()
        {
        }

        public PhysicalDeviceFragmentDensityMapPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            MinFragmentDensityTexelSize = new Extent2D(_internal.minFragmentDensityTexelSize);
            MaxFragmentDensityTexelSize = new Extent2D(_internal.maxFragmentDensityTexelSize);
            FragmentDensityInvocations = _internal.fragmentDensityInvocations;
        }

        public StructureType SType => StructureType.PhysicalDeviceFragmentDensityMapPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public Extent2D MinFragmentDensityTexelSize { get; set; }
        public Extent2D MaxFragmentDensityTexelSize { get; set; }
        public bool FragmentDensityInvocations { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentDensityMapPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (MinFragmentDensityTexelSize != null)
            {
                _internal.minFragmentDensityTexelSize = MinFragmentDensityTexelSize.ToInternal();
            }
            if (MaxFragmentDensityTexelSize != null)
            {
                _internal.maxFragmentDensityTexelSize = MaxFragmentDensityTexelSize.ToInternal();
            }
            _internal.fragmentDensityInvocations = FragmentDensityInvocations;
            return _internal;
        }
    }

    public partial class RenderPassFragmentDensityMapCreateInfoEXT : DisposableObject
    {
        public RenderPassFragmentDensityMapCreateInfoEXT()
        {
        }

        public RenderPassFragmentDensityMapCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkRenderPassFragmentDensityMapCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            FragmentDensityMapAttachment = new AttachmentReference(_internal.fragmentDensityMapAttachment);
        }

        public StructureType SType => StructureType.RenderPassFragmentDensityMapCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public AttachmentReference FragmentDensityMapAttachment { get; set; }

        public AdamantiumVulkan.Core.Interop.VkRenderPassFragmentDensityMapCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassFragmentDensityMapCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if (FragmentDensityMapAttachment != null)
            {
                _internal.fragmentDensityMapAttachment = FragmentDensityMapAttachment.ToInternal();
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceScalarBlockLayoutFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceScalarBlockLayoutFeaturesEXT()
        {
        }

        public PhysicalDeviceScalarBlockLayoutFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            ScalarBlockLayout = _internal.scalarBlockLayout;
        }

        public StructureType SType => StructureType.PhysicalDeviceScalarBlockLayoutFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool ScalarBlockLayout { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.scalarBlockLayout = ScalarBlockLayout;
            return _internal;
        }
    }

    public partial class PhysicalDeviceMemoryBudgetPropertiesEXT : DisposableObject
    {
        public PhysicalDeviceMemoryBudgetPropertiesEXT()
        {
        }

        public PhysicalDeviceMemoryBudgetPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryBudgetPropertiesEXT _internal)
        {
            PNext = _internal.pNext;
            var tmpArr0 = new ulong[16];
            unsafe
            {
                for (int i = 0; i < 16; ++i)
                {
                    tmpArr0[i] = _internal.heapBudget[i];
                }
            }
            HeapBudget = tmpArr0;
            var tmpArr1 = new ulong[16];
            unsafe
            {
                for (int i = 0; i < 16; ++i)
                {
                    tmpArr1[i] = _internal.heapUsage[i];
                }
            }
            HeapUsage = tmpArr1;
        }

        public StructureType SType => StructureType.PhysicalDeviceMemoryBudgetPropertiesExt;
        public System.IntPtr PNext { get; set; }
        public ulong[] HeapBudget { get; set; }
        public ulong[] HeapUsage { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryBudgetPropertiesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryBudgetPropertiesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            if(HeapBudget != null)
            {
                if (HeapBudget.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(HeapBudget), "Array is out of bounds. Size should not be more than 16");

                var inputArray0 = HeapBudget;
                unsafe
                {
                    if (inputArray0 != null)
                    {
                        for (int i = 0; i < inputArray0.Length; ++i)
                        {
                            _internal.heapBudget[i] = inputArray0[i];
                        }
                    }
                }
            }
            if(HeapUsage != null)
            {
                if (HeapUsage.Length > 16)
                    throw new System.ArgumentOutOfRangeException(nameof(HeapUsage), "Array is out of bounds. Size should not be more than 16");

                var inputArray1 = HeapUsage;
                unsafe
                {
                    if (inputArray1 != null)
                    {
                        for (int i = 0; i < inputArray1.Length; ++i)
                        {
                            _internal.heapUsage[i] = inputArray1[i];
                        }
                    }
                }
            }
            return _internal;
        }
    }

    public partial class PhysicalDeviceMemoryPriorityFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceMemoryPriorityFeaturesEXT()
        {
        }

        public PhysicalDeviceMemoryPriorityFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryPriorityFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            MemoryPriority = _internal.memoryPriority;
        }

        public StructureType SType => StructureType.PhysicalDeviceMemoryPriorityFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool MemoryPriority { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryPriorityFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryPriorityFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.memoryPriority = MemoryPriority;
            return _internal;
        }
    }

    public partial class MemoryPriorityAllocateInfoEXT : DisposableObject
    {
        public MemoryPriorityAllocateInfoEXT()
        {
        }

        public MemoryPriorityAllocateInfoEXT(AdamantiumVulkan.Core.Interop.VkMemoryPriorityAllocateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Priority = _internal.priority;
        }

        public StructureType SType => StructureType.MemoryPriorityAllocateInfoExt;
        public System.IntPtr PNext { get; set; }
        public float Priority { get; set; }

        public AdamantiumVulkan.Core.Interop.VkMemoryPriorityAllocateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryPriorityAllocateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.priority = Priority;
            return _internal;
        }
    }

    public partial class PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV : DisposableObject
    {
        public PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV()
        {
        }

        public PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            DedicatedAllocationImageAliasing = _internal.dedicatedAllocationImageAliasing;
        }

        public StructureType SType => StructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool DedicatedAllocationImageAliasing { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.dedicatedAllocationImageAliasing = DedicatedAllocationImageAliasing;
            return _internal;
        }
    }

    public partial class PhysicalDeviceBufferAddressFeaturesEXT : DisposableObject
    {
        public PhysicalDeviceBufferAddressFeaturesEXT()
        {
        }

        public PhysicalDeviceBufferAddressFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBufferAddressFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            BufferDeviceAddress = _internal.bufferDeviceAddress;
            BufferDeviceAddressCaptureReplay = _internal.bufferDeviceAddressCaptureReplay;
            BufferDeviceAddressMultiDevice = _internal.bufferDeviceAddressMultiDevice;
        }

        public StructureType SType => StructureType.PhysicalDeviceBufferAddressFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public bool BufferDeviceAddress { get; set; }
        public bool BufferDeviceAddressCaptureReplay { get; set; }
        public bool BufferDeviceAddressMultiDevice { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBufferAddressFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceBufferAddressFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.bufferDeviceAddress = BufferDeviceAddress;
            _internal.bufferDeviceAddressCaptureReplay = BufferDeviceAddressCaptureReplay;
            _internal.bufferDeviceAddressMultiDevice = BufferDeviceAddressMultiDevice;
            return _internal;
        }
    }

    public partial class BufferDeviceAddressInfoEXT : DisposableObject
    {
        public BufferDeviceAddressInfoEXT()
        {
        }

        public BufferDeviceAddressInfoEXT(AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfoEXT _internal)
        {
            PNext = _internal.pNext;
            Buffer = new Buffer(_internal.buffer);
        }

        public StructureType SType => StructureType.BufferDeviceAddressInfoExt;
        public System.IntPtr PNext { get; set; }
        public Buffer Buffer { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.buffer = Buffer;
            return _internal;
        }
    }

    public partial class BufferDeviceAddressCreateInfoEXT : DisposableObject
    {
        public BufferDeviceAddressCreateInfoEXT()
        {
        }

        public BufferDeviceAddressCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            DeviceAddress = _internal.deviceAddress;
        }

        public StructureType SType => StructureType.BufferDeviceAddressCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public ulong DeviceAddress { get; set; }

        public AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.deviceAddress = DeviceAddress;
            return _internal;
        }
    }

    public partial class ImageStencilUsageCreateInfoEXT : DisposableObject
    {
        public ImageStencilUsageCreateInfoEXT()
        {
        }

        public ImageStencilUsageCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkImageStencilUsageCreateInfoEXT _internal)
        {
            PNext = _internal.pNext;
            StencilUsage = _internal.stencilUsage;
        }

        public StructureType SType => StructureType.ImageStencilUsageCreateInfoExt;
        public System.IntPtr PNext { get; set; }
        public uint StencilUsage { get; set; }

        public AdamantiumVulkan.Core.Interop.VkImageStencilUsageCreateInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkImageStencilUsageCreateInfoEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.stencilUsage = StencilUsage;
            return _internal;
        }
    }

    public partial class ValidationFeaturesEXT : DisposableObject
    {
        private GCHandleReference refpEnabledValidationFeatures;

        private GCHandleReference refpDisabledValidationFeatures;

        public ValidationFeaturesEXT()
        {
        }

        public ValidationFeaturesEXT(AdamantiumVulkan.Core.Interop.VkValidationFeaturesEXT _internal)
        {
            PNext = _internal.pNext;
            EnabledValidationFeatureCount = _internal.enabledValidationFeatureCount;
            var tmppEnabledValidationFeatures = new int[_internal.enabledValidationFeatureCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pEnabledValidationFeatures, tmppEnabledValidationFeatures);
            Marshal.FreeHGlobal(_internal.pEnabledValidationFeatures);
            PEnabledValidationFeatures = new AdamantiumVulkan.Core.ValidationFeatureEnableEXT[_internal.enabledValidationFeatureCount];
            for (int i = 0; i < tmppEnabledValidationFeatures.Length; ++i)
            {
                PEnabledValidationFeatures[i] = (AdamantiumVulkan.Core.ValidationFeatureEnableEXT)tmppEnabledValidationFeatures[i];
            }
            DisabledValidationFeatureCount = _internal.disabledValidationFeatureCount;
            var tmppDisabledValidationFeatures = new int[_internal.disabledValidationFeatureCount];
            MarshalUtils.IntPtrToManagedArray<int>(_internal.pDisabledValidationFeatures, tmppDisabledValidationFeatures);
            Marshal.FreeHGlobal(_internal.pDisabledValidationFeatures);
            PDisabledValidationFeatures = new AdamantiumVulkan.Core.ValidationFeatureDisableEXT[_internal.disabledValidationFeatureCount];
            for (int i = 0; i < tmppDisabledValidationFeatures.Length; ++i)
            {
                PDisabledValidationFeatures[i] = (AdamantiumVulkan.Core.ValidationFeatureDisableEXT)tmppDisabledValidationFeatures[i];
            }
        }

        public StructureType SType => StructureType.ValidationFeaturesExt;
        public System.IntPtr PNext { get; set; }
        public uint EnabledValidationFeatureCount { get; set; }
        public ValidationFeatureEnableEXT[] PEnabledValidationFeatures { get; set; }
        public uint DisabledValidationFeatureCount { get; set; }
        public ValidationFeatureDisableEXT[] PDisabledValidationFeatures { get; set; }

        public AdamantiumVulkan.Core.Interop.VkValidationFeaturesEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkValidationFeaturesEXT();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.enabledValidationFeatureCount = EnabledValidationFeatureCount;
            refpEnabledValidationFeatures?.Dispose();
            if (PEnabledValidationFeatures != null)
            {
                var tmpArray0 = new ValidationFeatureEnableEXT[EnabledValidationFeatureCount];
                for (int i = 0; i < PEnabledValidationFeatures.Length; ++i)
                {
                    tmpArray0[i] = PEnabledValidationFeatures[i];
                }
                refpEnabledValidationFeatures = new GCHandleReference(tmpArray0);
                _internal.pEnabledValidationFeatures = refpEnabledValidationFeatures.Handle;
            }
            _internal.disabledValidationFeatureCount = DisabledValidationFeatureCount;
            refpDisabledValidationFeatures?.Dispose();
            if (PDisabledValidationFeatures != null)
            {
                var tmpArray1 = new ValidationFeatureDisableEXT[DisabledValidationFeatureCount];
                for (int i = 0; i < PDisabledValidationFeatures.Length; ++i)
                {
                    tmpArray1[i] = PDisabledValidationFeatures[i];
                }
                refpDisabledValidationFeatures = new GCHandleReference(tmpArray1);
                _internal.pDisabledValidationFeatures = refpDisabledValidationFeatures.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpEnabledValidationFeatures?.Dispose();
            refpDisabledValidationFeatures?.Dispose();
        }

    }

    public partial class CooperativeMatrixPropertiesNV : DisposableObject
    {
        public CooperativeMatrixPropertiesNV()
        {
        }

        public CooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.VkCooperativeMatrixPropertiesNV _internal)
        {
            PNext = _internal.pNext;
            MSize = _internal.MSize;
            NSize = _internal.NSize;
            KSize = _internal.KSize;
            AType = _internal.AType;
            BType = _internal.BType;
            CType = _internal.CType;
            DType = _internal.DType;
            Scope = _internal.scope;
        }

        public StructureType SType => StructureType.CooperativeMatrixPropertiesNv;
        public System.IntPtr PNext { get; set; }
        public uint MSize { get; set; }
        public uint NSize { get; set; }
        public uint KSize { get; set; }
        public ComponentTypeNV AType { get; set; }
        public ComponentTypeNV BType { get; set; }
        public ComponentTypeNV CType { get; set; }
        public ComponentTypeNV DType { get; set; }
        public ScopeNV Scope { get; set; }

        public AdamantiumVulkan.Core.Interop.VkCooperativeMatrixPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkCooperativeMatrixPropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.MSize = MSize;
            _internal.NSize = NSize;
            _internal.KSize = KSize;
            _internal.AType = AType;
            _internal.BType = BType;
            _internal.CType = CType;
            _internal.DType = DType;
            _internal.scope = Scope;
            return _internal;
        }
    }

    public partial class PhysicalDeviceCooperativeMatrixFeaturesNV : DisposableObject
    {
        public PhysicalDeviceCooperativeMatrixFeaturesNV()
        {
        }

        public PhysicalDeviceCooperativeMatrixFeaturesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixFeaturesNV _internal)
        {
            PNext = _internal.pNext;
            CooperativeMatrix = _internal.cooperativeMatrix;
            CooperativeMatrixRobustBufferAccess = _internal.cooperativeMatrixRobustBufferAccess;
        }

        public StructureType SType => StructureType.PhysicalDeviceCooperativeMatrixFeaturesNv;
        public System.IntPtr PNext { get; set; }
        public bool CooperativeMatrix { get; set; }
        public bool CooperativeMatrixRobustBufferAccess { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixFeaturesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixFeaturesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.cooperativeMatrix = CooperativeMatrix;
            _internal.cooperativeMatrixRobustBufferAccess = CooperativeMatrixRobustBufferAccess;
            return _internal;
        }
    }

    public partial class PhysicalDeviceCooperativeMatrixPropertiesNV : DisposableObject
    {
        public PhysicalDeviceCooperativeMatrixPropertiesNV()
        {
        }

        public PhysicalDeviceCooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixPropertiesNV _internal)
        {
            PNext = _internal.pNext;
            CooperativeMatrixSupportedStages = _internal.cooperativeMatrixSupportedStages;
        }

        public StructureType SType => StructureType.PhysicalDeviceCooperativeMatrixPropertiesNv;
        public System.IntPtr PNext { get; set; }
        public uint CooperativeMatrixSupportedStages { get; set; }

        public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixPropertiesNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceCooperativeMatrixPropertiesNV();
            _internal.sType = SType;
            _internal.pNext = PNext;
            _internal.cooperativeMatrixSupportedStages = CooperativeMatrixSupportedStages;
            return _internal;
        }
    }


}
