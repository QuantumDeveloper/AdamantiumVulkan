// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDevice
{
    internal VkPhysicalDevice_T __Instance;
    public PhysicalDevice()
    {
    }

    public PhysicalDevice(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T __Instance)
    {
        this.__Instance = __Instance;
    }

    public void* NativePointer => __Instance.pointer;

    public Result AcquireDrmDisplayEXT(int drmFd, AdamantiumVulkan.Core.DisplayKHR display)
    {
        var arg2 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireDrmDisplayEXT(this, drmFd, arg2);
    }

    public Result CreateDevice(in DeviceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Device pDevice)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDevice_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDevice(this, arg1, arg2, out arg3);
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pDevice = new Device(arg3);
        return result;
    }

    public Result CreateDisplayModeKHR(AdamantiumVulkan.Core.DisplayKHR display, in DisplayModeCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DisplayModeKHR pMode)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        var arg2 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg3 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDisplayModeKHR_T arg4;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDisplayModeKHR(this, arg1, arg2, arg3, out arg4);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg3);
        pMode = new DisplayModeKHR(arg4);
        return result;
    }

    public Result EnumerateDeviceExtensionProperties(string pLayerName, ref uint pPropertyCount, ExtensionProperties[] pProperties)
    {
        var arg1 = (sbyte*)NativeUtils.PointerToString(pLayerName, false);
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkExtensionProperties>(pPropertyCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceExtensionProperties(this, arg1, arg2, arg3);
        NativeUtils.Free(arg1);
        pPropertyCount = *arg2;
        NativeUtils.Free(arg2);
        if (!ReferenceEquals(pProperties, null))
        {
            for (var i = 0U; i < pPropertyCount; ++i)
            {
                pProperties[i] = new ExtensionProperties(arg3[i]);
            }
        }
        NativeUtils.Free(arg3);
        return result;
    }

    public Result EnumerateDeviceLayerProperties(ref uint pPropertyCount, LayerProperties[] pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkLayerProperties>(pPropertyCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceLayerProperties(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pProperties, null))
        {
            for (var i = 0U; i < pPropertyCount; ++i)
            {
                pProperties[i] = new LayerProperties(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result EnumerateDeviceLayerProperties(ref uint pPropertyCount, LayerProperties pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumerateDeviceLayerProperties(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pProperties = new AdamantiumVulkan.Core.LayerProperties(*arg2);
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result EnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(uint queueFamilyIndex, ref uint pCounterCount, PerformanceCounterKHR pCounters, PerformanceCounterDescriptionKHR pCounterDescriptions)
    {
        var arg2 = NativeUtils.StructOrEnumToPointer(pCounterCount);
        var arg3 = ReferenceEquals(pCounters, null) ? null : NativeUtils.StructOrEnumToPointer(pCounters.ToNative());
        var arg4 = ReferenceEquals(pCounterDescriptions, null) ? null : NativeUtils.StructOrEnumToPointer(pCounterDescriptions.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(this, queueFamilyIndex, arg2, arg3, arg4);
        pCounterCount = *arg2;
        NativeUtils.Free(arg2);
        pCounters?.Dispose();
        NativeUtils.Free(arg3);
        pCounterDescriptions?.Dispose();
        NativeUtils.Free(arg4);
        return result;
    }

    public Result GetDisplayModeProperties2KHR(AdamantiumVulkan.Core.DisplayKHR display, ref uint pPropertyCount, DisplayModeProperties2KHR pProperties)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayModeProperties2KHR(this, arg1, arg2, arg3);
        pPropertyCount = *arg2;
        NativeUtils.Free(arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetDisplayModePropertiesKHR(AdamantiumVulkan.Core.DisplayKHR display, ref uint pPropertyCount, DisplayModePropertiesKHR pProperties)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayModePropertiesKHR(this, arg1, arg2, arg3);
        pPropertyCount = *arg2;
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetDisplayPlaneCapabilities2KHR(in DisplayPlaneInfo2KHR pDisplayPlaneInfo, DisplayPlaneCapabilities2KHR pCapabilities)
    {
        var arg1 = ReferenceEquals(pDisplayPlaneInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDisplayPlaneInfo.ToNative());
        var arg2 = ReferenceEquals(pCapabilities, null) ? null : NativeUtils.StructOrEnumToPointer(pCapabilities.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneCapabilities2KHR(this, arg1, arg2);
        pDisplayPlaneInfo?.Dispose();
        NativeUtils.Free(arg1);
        pCapabilities?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetDisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.DisplayModeKHR mode, uint planeIndex, DisplayPlaneCapabilitiesKHR pCapabilities)
    {
        var arg1 = ReferenceEquals(mode, null) ? new VkDisplayModeKHR_T() : (VkDisplayModeKHR_T)mode;
        var arg3 = ReferenceEquals(pCapabilities, null) ? null : NativeUtils.StructOrEnumToPointer(pCapabilities.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneCapabilitiesKHR(this, arg1, planeIndex, arg3);
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetDisplayPlaneSupportedDisplaysKHR(uint planeIndex, ref uint pDisplayCount, out AdamantiumVulkan.Core.DisplayKHR[] pDisplays)
    {
        var arg2 = NativeUtils.StructOrEnumToPointer(pDisplayCount);
        VkDisplayKHR_T* arg3 = NativeUtils.GetPointerToManagedArray<VkDisplayKHR_T>(pDisplayCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDisplayPlaneSupportedDisplaysKHR(this, planeIndex, arg2, arg3);
        pDisplayCount = *arg2;
        NativeUtils.Free(arg2);
        pDisplays = new AdamantiumVulkan.Core.DisplayKHR[pDisplayCount];
        for (var i = 0U; i < pDisplayCount; ++i)
        {
            pDisplays[i] = arg3[i];
        }
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetDrmDisplayEXT(int drmFd, uint connectorId, out AdamantiumVulkan.Core.DisplayKHR display)
    {
        VkDisplayKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDrmDisplayEXT(this, drmFd, connectorId, out arg3);
        display = new DisplayKHR(arg3);
        return result;
    }

    public Result GetPhysicalDeviceCalibrateableTimeDomainsEXT(ref uint pTimeDomainCount, ref TimeDomainEXT pTimeDomains)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pTimeDomainCount);
        var arg2 = NativeUtils.StructOrEnumToPointer(pTimeDomains);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(this, arg1, arg2);
        pTimeDomainCount = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pTimeDomains = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceCooperativeMatrixPropertiesNV(ref uint pPropertyCount, CooperativeMatrixPropertiesNV pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceDisplayPlaneProperties2KHR(ref uint pPropertyCount, DisplayPlaneProperties2KHR pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPlaneProperties2KHR(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceDisplayPlanePropertiesKHR(ref uint pPropertyCount, out DisplayPlanePropertiesKHR[] pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR* arg2 = null;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        var _pProperties = NativeUtils.PointerToManagedArray(arg2, (long)pPropertyCount);
        pProperties = new AdamantiumVulkan.Core.DisplayPlanePropertiesKHR[pPropertyCount];
        for (var i = 0U; i< pPropertyCount; ++i)
        {
            pProperties[i] = new AdamantiumVulkan.Core.DisplayPlanePropertiesKHR(_pProperties[i]);
        }
        return result;
    }

    public Result GetPhysicalDeviceDisplayProperties2KHR(ref uint pPropertyCount, DisplayProperties2KHR pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayProperties2KHR(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceDisplayPropertiesKHR(ref uint pPropertyCount, DisplayPropertiesKHR pProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceDisplayPropertiesKHR(this, arg1, arg2);
        pPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetPhysicalDeviceExternalBufferProperties(in PhysicalDeviceExternalBufferInfo pExternalBufferInfo, ExternalBufferProperties pExternalBufferProperties)
    {
        var arg1 = ReferenceEquals(pExternalBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalBufferInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalBufferProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalBufferProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalBufferProperties(this, arg1, arg2);
        pExternalBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalBufferProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceExternalBufferPropertiesKHR(in PhysicalDeviceExternalBufferInfo pExternalBufferInfo, ExternalBufferProperties pExternalBufferProperties)
    {
        var arg1 = ReferenceEquals(pExternalBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalBufferInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalBufferProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalBufferProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalBufferPropertiesKHR(this, arg1, arg2);
        pExternalBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalBufferProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceExternalFenceProperties(in PhysicalDeviceExternalFenceInfo pExternalFenceInfo, ExternalFenceProperties pExternalFenceProperties)
    {
        var arg1 = ReferenceEquals(pExternalFenceInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalFenceInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalFenceProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalFenceProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalFenceProperties(this, arg1, arg2);
        pExternalFenceInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalFenceProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceExternalFencePropertiesKHR(in PhysicalDeviceExternalFenceInfo pExternalFenceInfo, ExternalFenceProperties pExternalFenceProperties)
    {
        var arg1 = ReferenceEquals(pExternalFenceInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalFenceInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalFenceProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalFenceProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalFencePropertiesKHR(this, arg1, arg2);
        pExternalFenceInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalFenceProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetPhysicalDeviceExternalImageFormatPropertiesNV(Format format, ImageType type, ImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, ExternalImageFormatPropertiesNV pExternalImageFormatProperties)
    {
        var arg7 = ReferenceEquals(pExternalImageFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalImageFormatProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalImageFormatPropertiesNV(this, format, type, tiling, usage, flags, externalHandleType, arg7);
        NativeUtils.Free(arg7);
        return result;
    }

    public void GetPhysicalDeviceExternalSemaphoreProperties(in PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ExternalSemaphoreProperties pExternalSemaphoreProperties)
    {
        var arg1 = ReferenceEquals(pExternalSemaphoreInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalSemaphoreInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalSemaphoreProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalSemaphoreProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalSemaphoreProperties(this, arg1, arg2);
        pExternalSemaphoreInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalSemaphoreProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceExternalSemaphorePropertiesKHR(in PhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo, ExternalSemaphoreProperties pExternalSemaphoreProperties)
    {
        var arg1 = ReferenceEquals(pExternalSemaphoreInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalSemaphoreInfo.ToNative());
        var arg2 = ReferenceEquals(pExternalSemaphoreProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pExternalSemaphoreProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(this, arg1, arg2);
        pExternalSemaphoreInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExternalSemaphoreProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceFeatures(out PhysicalDeviceFeatures pFeatures)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures(this, out arg1);
        pFeatures = new PhysicalDeviceFeatures(arg1);
    }

    public void GetPhysicalDeviceFeatures2(out PhysicalDeviceFeatures2 pFeatures)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures2(this, out arg1);
        pFeatures = new PhysicalDeviceFeatures2(arg1);
    }

    public void GetPhysicalDeviceFeatures2KHR(out PhysicalDeviceFeatures2 pFeatures)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFeatures2KHR(this, out arg1);
        pFeatures = new PhysicalDeviceFeatures2(arg1);
    }

    public void GetPhysicalDeviceFormatProperties(Format format, FormatProperties pFormatProperties)
    {
        var arg2 = ReferenceEquals(pFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pFormatProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties(this, format, arg2);
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceFormatProperties2(Format format, FormatProperties2 pFormatProperties)
    {
        var arg2 = ReferenceEquals(pFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pFormatProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties2(this, format, arg2);
        pFormatProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceFormatProperties2KHR(Format format, FormatProperties2 pFormatProperties)
    {
        var arg2 = ReferenceEquals(pFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pFormatProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFormatProperties2KHR(this, format, arg2);
        pFormatProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetPhysicalDeviceFragmentShadingRatesKHR(ref uint pFragmentShadingRateCount, PhysicalDeviceFragmentShadingRateKHR pFragmentShadingRates)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pFragmentShadingRateCount);
        var arg2 = ReferenceEquals(pFragmentShadingRates, null) ? null : NativeUtils.StructOrEnumToPointer(pFragmentShadingRates.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceFragmentShadingRatesKHR(this, arg1, arg2);
        pFragmentShadingRateCount = *arg1;
        NativeUtils.Free(arg1);
        pFragmentShadingRates?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceImageFormatProperties(Format format, ImageType type, ImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, ImageFormatProperties pImageFormatProperties)
    {
        var arg6 = ReferenceEquals(pImageFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties(this, format, type, tiling, usage, flags, arg6);
        NativeUtils.Free(arg6);
        return result;
    }

    public Result GetPhysicalDeviceImageFormatProperties2(in PhysicalDeviceImageFormatInfo2 pImageFormatInfo, ImageFormatProperties2 pImageFormatProperties)
    {
        var arg1 = ReferenceEquals(pImageFormatInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatInfo.ToNative());
        var arg2 = ReferenceEquals(pImageFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties2(this, arg1, arg2);
        pImageFormatInfo?.Dispose();
        NativeUtils.Free(arg1);
        pImageFormatProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceImageFormatProperties2KHR(in PhysicalDeviceImageFormatInfo2 pImageFormatInfo, ImageFormatProperties2 pImageFormatProperties)
    {
        var arg1 = ReferenceEquals(pImageFormatInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatInfo.ToNative());
        var arg2 = ReferenceEquals(pImageFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceImageFormatProperties2KHR(this, arg1, arg2);
        pImageFormatInfo?.Dispose();
        NativeUtils.Free(arg1);
        pImageFormatProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetPhysicalDeviceMemoryProperties(out PhysicalDeviceMemoryProperties pMemoryProperties)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties(this, out arg1);
        pMemoryProperties = new PhysicalDeviceMemoryProperties(arg1);
    }

    public void GetPhysicalDeviceMemoryProperties2(out PhysicalDeviceMemoryProperties2 pMemoryProperties)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties2(this, out arg1);
        pMemoryProperties = new PhysicalDeviceMemoryProperties2(arg1);
    }

    public void GetPhysicalDeviceMemoryProperties2KHR(out PhysicalDeviceMemoryProperties2 pMemoryProperties)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMemoryProperties2KHR(this, out arg1);
        pMemoryProperties = new PhysicalDeviceMemoryProperties2(arg1);
    }

    public void GetPhysicalDeviceMultisamplePropertiesEXT(SampleCountFlagBits samples, MultisamplePropertiesEXT pMultisampleProperties)
    {
        var arg2 = ReferenceEquals(pMultisampleProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pMultisampleProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceMultisamplePropertiesEXT(this, samples, arg2);
        pMultisampleProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetPhysicalDeviceOpticalFlowImageFormatsNV(in OpticalFlowImageFormatInfoNV pOpticalFlowImageFormatInfo, ref uint pFormatCount, OpticalFlowImageFormatPropertiesNV pImageFormatProperties)
    {
        var arg1 = ReferenceEquals(pOpticalFlowImageFormatInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pOpticalFlowImageFormatInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pFormatCount);
        var arg3 = ReferenceEquals(pImageFormatProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pImageFormatProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceOpticalFlowImageFormatsNV(this, arg1, arg2, arg3);
        pOpticalFlowImageFormatInfo?.Dispose();
        NativeUtils.Free(arg1);
        pFormatCount = *arg2;
        NativeUtils.Free(arg2);
        pImageFormatProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPhysicalDevicePresentRectanglesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pRectCount, Rect2D pRects)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = NativeUtils.StructOrEnumToPointer(pRectCount);
        var arg3 = ReferenceEquals(pRects, null) ? null : NativeUtils.StructOrEnumToPointer(pRects.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDevicePresentRectanglesKHR(this, arg1, arg2, arg3);
        pRectCount = *arg2;
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
        return result;
    }

    public void GetPhysicalDeviceProperties(out PhysicalDeviceProperties pProperties)
    {
        AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties arg1;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties(this, out arg1);
        pProperties = new PhysicalDeviceProperties(arg1);
    }

    public void GetPhysicalDeviceProperties2(PhysicalDeviceProperties2 pProperties)
    {
        var arg1 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties2(this, arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void GetPhysicalDeviceProperties2KHR(PhysicalDeviceProperties2 pProperties)
    {
        var arg1 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceProperties2KHR(this, arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void GetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(in QueryPoolPerformanceCreateInfoKHR pPerformanceQueryCreateInfo, ref uint pNumPasses)
    {
        var arg1 = ReferenceEquals(pPerformanceQueryCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pPerformanceQueryCreateInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pNumPasses);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(this, arg1, arg2);
        pPerformanceQueryCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pNumPasses = *arg2;
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceQueueFamilyProperties(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties[] pQueueFamilyProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pQueueFamilyPropertyCount);
        var arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties>(pQueueFamilyProperties.Length);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties(this, arg1, arg2);
        pQueueFamilyPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pQueueFamilyProperties, null))
        {
            for (var i = 0U; i < pQueueFamilyProperties.Length; ++i)
            {
                pQueueFamilyProperties[i] = new QueueFamilyProperties(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceQueueFamilyProperties2(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties2[] pQueueFamilyProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pQueueFamilyPropertyCount);
        var arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2>(pQueueFamilyProperties.Length);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2(this, arg1, arg2);
        pQueueFamilyPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pQueueFamilyProperties, null))
        {
            for (var i = 0U; i < pQueueFamilyProperties.Length; ++i)
            {
                pQueueFamilyProperties[i] = new QueueFamilyProperties2(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceQueueFamilyProperties2(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties2 pQueueFamilyProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pQueueFamilyPropertyCount);
        var arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pQueueFamilyProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2(this, arg1, arg2);
        pQueueFamilyPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pQueueFamilyProperties?.Dispose();
        if (arg2 is not null)
        {
            pQueueFamilyProperties = new AdamantiumVulkan.Core.QueueFamilyProperties2(*arg2);
        }
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceQueueFamilyProperties2KHR(ref uint pQueueFamilyPropertyCount, QueueFamilyProperties2 pQueueFamilyProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pQueueFamilyPropertyCount);
        var arg2 = ReferenceEquals(pQueueFamilyProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pQueueFamilyProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceQueueFamilyProperties2KHR(this, arg1, arg2);
        pQueueFamilyPropertyCount = *arg1;
        NativeUtils.Free(arg1);
        pQueueFamilyProperties?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetPhysicalDeviceSparseImageFormatProperties(Format format, ImageType type, SampleCountFlagBits samples, VkImageUsageFlags usage, ImageTiling tiling, ref uint pPropertyCount, SparseImageFormatProperties pProperties)
    {
        var arg6 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg7 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties(this, format, type, samples, usage, tiling, arg6, arg7);
        pPropertyCount = *arg6;
        NativeUtils.Free(arg6);
        NativeUtils.Free(arg7);
    }

    public void GetPhysicalDeviceSparseImageFormatProperties2(in PhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, SparseImageFormatProperties2 pProperties)
    {
        var arg1 = ReferenceEquals(pFormatInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pFormatInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties2(this, arg1, arg2, arg3);
        pFormatInfo?.Dispose();
        NativeUtils.Free(arg1);
        pPropertyCount = *arg2;
        NativeUtils.Free(arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetPhysicalDeviceSparseImageFormatProperties2KHR(in PhysicalDeviceSparseImageFormatInfo2 pFormatInfo, ref uint pPropertyCount, SparseImageFormatProperties2 pProperties)
    {
        var arg1 = ReferenceEquals(pFormatInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pFormatInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertyCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSparseImageFormatProperties2KHR(this, arg1, arg2, arg3);
        pFormatInfo?.Dispose();
        NativeUtils.Free(arg1);
        pPropertyCount = *arg2;
        NativeUtils.Free(arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg3);
    }

    public Result GetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(ref uint pCombinationCount, FramebufferMixedSamplesCombinationNV pCombinations)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pCombinationCount);
        var arg2 = ReferenceEquals(pCombinations, null) ? null : NativeUtils.StructOrEnumToPointer(pCombinations.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(this, arg1, arg2);
        pCombinationCount = *arg1;
        NativeUtils.Free(arg1);
        pCombinations?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceCapabilities2EXT(AdamantiumVulkan.Core.SurfaceKHR surface, SurfaceCapabilities2EXT pSurfaceCapabilities)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = ReferenceEquals(pSurfaceCapabilities, null) ? null : NativeUtils.StructOrEnumToPointer(pSurfaceCapabilities.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilities2EXT(this, arg1, arg2);
        pSurfaceCapabilities?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceCapabilities2KHR(in PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, SurfaceCapabilities2KHR pSurfaceCapabilities)
    {
        var arg1 = ReferenceEquals(pSurfaceInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSurfaceInfo.ToNative());
        var arg2 = ReferenceEquals(pSurfaceCapabilities, null) ? null : NativeUtils.StructOrEnumToPointer(pSurfaceCapabilities.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilities2KHR(this, arg1, arg2);
        pSurfaceInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSurfaceCapabilities?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, out SurfaceCapabilitiesKHR pSurfaceCapabilities)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        AdamantiumVulkan.Core.Interop.VkSurfaceCapabilitiesKHR arg2;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(this, arg1, out arg2);
        pSurfaceCapabilities = new SurfaceCapabilitiesKHR(arg2);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceFormats2KHR(in PhysicalDeviceSurfaceInfo2KHR pSurfaceInfo, ref uint pSurfaceFormatCount, SurfaceFormat2KHR pSurfaceFormats)
    {
        var arg1 = ReferenceEquals(pSurfaceInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSurfaceInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pSurfaceFormatCount);
        var arg3 = ReferenceEquals(pSurfaceFormats, null) ? null : NativeUtils.StructOrEnumToPointer(pSurfaceFormats.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceFormats2KHR(this, arg1, arg2, arg3);
        pSurfaceInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSurfaceFormatCount = *arg2;
        NativeUtils.Free(arg2);
        pSurfaceFormats?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceFormatsKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pSurfaceFormatCount, SurfaceFormatKHR[] pSurfaceFormats)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = NativeUtils.StructOrEnumToPointer(pSurfaceFormatCount);
        var arg3 = ReferenceEquals(pSurfaceFormats, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR>(pSurfaceFormats.Length);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceFormatsKHR(this, arg1, arg2, arg3);
        pSurfaceFormatCount = *arg2;
        NativeUtils.Free(arg2);
        if (!ReferenceEquals(pSurfaceFormats, null))
        {
            for (var i = 0U; i < pSurfaceFormats.Length; ++i)
            {
                pSurfaceFormats[i] = new SurfaceFormatKHR(arg3[i]);
            }
        }
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPhysicalDeviceSurfacePresentModesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref uint pPresentModeCount, PresentModeKHR[] pPresentModes)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = NativeUtils.StructOrEnumToPointer(pPresentModeCount);
        var arg3 = NativeUtils.ManagedArrayToPointer(pPresentModes);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfacePresentModesKHR(this, arg1, arg2, arg3);
        pPresentModeCount = *arg2;
        NativeUtils.Free(arg2);
        NativeUtils.WritePointerToManagedArray(arg3, pPresentModes);
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPhysicalDeviceSurfaceSupportKHR(uint queueFamilyIndex, AdamantiumVulkan.Core.SurfaceKHR surface, out VkBool32 pSupported)
    {
        var arg2 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceSurfaceSupportKHR(this, queueFamilyIndex, arg2, out pSupported);
    }

    public Result GetPhysicalDeviceToolProperties(ref uint pToolCount, PhysicalDeviceToolProperties pToolProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pToolCount);
        var arg2 = ReferenceEquals(pToolProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pToolProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceToolProperties(this, arg1, arg2);
        pToolCount = *arg1;
        NativeUtils.Free(arg1);
        pToolProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPhysicalDeviceToolPropertiesEXT(ref uint pToolCount, PhysicalDeviceToolProperties pToolProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pToolCount);
        var arg2 = ReferenceEquals(pToolProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pToolProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPhysicalDeviceToolPropertiesEXT(this, arg1, arg2);
        pToolCount = *arg1;
        NativeUtils.Free(arg1);
        pToolProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result ReleaseDisplayEXT(AdamantiumVulkan.Core.DisplayKHR display)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleaseDisplayEXT(this, arg1);
    }

    public ref readonly VkPhysicalDevice_T GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T(PhysicalDevice p)
    {
        return p?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T();
    }

    public static implicit operator PhysicalDevice(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T p)
    {
        return new PhysicalDevice(p);
    }

}



