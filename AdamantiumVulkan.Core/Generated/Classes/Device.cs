// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

// File: C:\VulkanSDK\1.4.304.0\Include\vulkan/vulkan_core.h Line: 107 Column: 1
public unsafe partial class Device
{
    internal VkDevice_T __Instance;
    public Device()
    {
    }

    public Device(AdamantiumVulkan.Core.Interop.VkDevice_T __Instance)
    {
        this.__Instance = __Instance;
    }

    public void* NativePointer => __Instance.pointer;

    public Result AcquireNextImage2KHR(in AcquireNextImageInfoKHR pAcquireInfo, ref uint pImageIndex)
    {
        var arg1 = ReferenceEquals(pAcquireInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAcquireInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pImageIndex);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireNextImage2KHR(this, arg1, arg2);
        pAcquireInfo?.Dispose();
        NativeUtils.Free(arg1);
        pImageIndex = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result AcquireNextImageKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ulong timeout, AdamantiumVulkan.Core.Semaphore semaphore, AdamantiumVulkan.Core.Fence fence, ref uint pImageIndex)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg3 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
        var arg4 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var arg5 = NativeUtils.StructOrEnumToPointer(pImageIndex);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireNextImageKHR(this, arg1, timeout, arg3, arg4, arg5);
        pImageIndex = *arg5;
        NativeUtils.Free(arg5);
        return result;
    }

    public Result AcquirePerformanceConfigurationINTEL(in PerformanceConfigurationAcquireInfoINTEL pAcquireInfo, out AdamantiumVulkan.Core.PerformanceConfigurationINTEL pConfiguration)
    {
        var arg1 = ReferenceEquals(pAcquireInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAcquireInfo.ToNative());
        VkPerformanceConfigurationINTEL_T arg2;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquirePerformanceConfigurationINTEL(this, arg1, out arg2);
        pAcquireInfo?.Dispose();
        NativeUtils.Free(arg1);
        pConfiguration = new PerformanceConfigurationINTEL(arg2);
        return result;
    }

    public Result AcquireProfilingLockKHR(in AcquireProfilingLockInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAcquireProfilingLockKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result AllocateCommandBuffers(in CommandBufferAllocateInfo pAllocateInfo, AdamantiumVulkan.Core.CommandBuffer[] pCommandBuffers)
    {
        var arg1 = ReferenceEquals(pAllocateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocateInfo.ToNative());
        var arg2 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkCommandBuffer_T>(pCommandBuffers.Length);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateCommandBuffers(this, arg1, arg2);
        pAllocateInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pCommandBuffers, null))
        {
            for (var i = 0U; i < pCommandBuffers.Length; ++i)
            {
                pCommandBuffers[i] = new CommandBuffer(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result AllocateCommandBuffers(in CommandBufferAllocateInfo pAllocateInfo, ref AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
    {
        var arg1 = ReferenceEquals(pAllocateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocateInfo.ToNative());
        var arg2 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkCommandBuffer_T)pCommandBuffers);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateCommandBuffers(this, arg1, arg2);
        pAllocateInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pCommandBuffers = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result AllocateDescriptorSets(in DescriptorSetAllocateInfo pAllocateInfo, AdamantiumVulkan.Core.DescriptorSet[] pDescriptorSets)
    {
        var arg1 = ReferenceEquals(pAllocateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocateInfo.ToNative());
        var arg2 = ReferenceEquals(pDescriptorSets, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkDescriptorSet_T>(pDescriptorSets.Length);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateDescriptorSets(this, arg1, arg2);
        pAllocateInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pDescriptorSets, null))
        {
            for (var i = 0U; i < pDescriptorSets.Length; ++i)
            {
                pDescriptorSets[i] = new DescriptorSet(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result AllocateDescriptorSets(in DescriptorSetAllocateInfo pAllocateInfo, ref AdamantiumVulkan.Core.DescriptorSet pDescriptorSets)
    {
        var arg1 = ReferenceEquals(pAllocateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocateInfo.ToNative());
        var arg2 = ReferenceEquals(pDescriptorSets, null) ? null : NativeUtils.StructOrEnumToPointer((VkDescriptorSet_T)pDescriptorSets);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateDescriptorSets(this, arg1, arg2);
        pAllocateInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pDescriptorSets = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public Result AllocateMemory(in MemoryAllocateInfo pAllocateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DeviceMemory pMemory)
    {
        var arg1 = ReferenceEquals(pAllocateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDeviceMemory_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkAllocateMemory(this, arg1, arg2, out arg3);
        pAllocateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pMemory = new DeviceMemory(arg3);
        return result;
    }

    public void AntiLagUpdateAMD(in AntiLagDataAMD pData)
    {
        var arg1 = ReferenceEquals(pData, null) ? null : NativeUtils.StructOrEnumToPointer(pData.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkAntiLagUpdateAMD(this, arg1);
        pData?.Dispose();
        NativeUtils.Free(arg1);
    }

    public Result BindAccelerationStructureMemoryNV(uint bindInfoCount, in BindAccelerationStructureMemoryInfoNV pBindInfos)
    {
        var arg2 = ReferenceEquals(pBindInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindAccelerationStructureMemoryNV(this, bindInfoCount, arg2);
        pBindInfos?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result BindBufferMemory(AdamantiumVulkan.Core.Buffer buffer, AdamantiumVulkan.Core.DeviceMemory memory, VkDeviceSize memoryOffset)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg2 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory(this, arg1, arg2, memoryOffset);
    }

    public Result BindBufferMemory2(uint bindInfoCount, in BindBufferMemoryInfo pBindInfos)
    {
        var arg2 = ReferenceEquals(pBindInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory2(this, bindInfoCount, arg2);
        pBindInfos?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result BindBufferMemory2KHR(uint bindInfoCount, in BindBufferMemoryInfo pBindInfos)
    {
        var arg2 = ReferenceEquals(pBindInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindBufferMemory2KHR(this, bindInfoCount, arg2);
        pBindInfos?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result BindImageMemory(AdamantiumVulkan.Core.Image image, AdamantiumVulkan.Core.DeviceMemory memory, VkDeviceSize memoryOffset)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory(this, arg1, arg2, memoryOffset);
    }

    public Result BindImageMemory2(uint bindInfoCount, in BindImageMemoryInfo pBindInfos)
    {
        var arg2 = ReferenceEquals(pBindInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory2(this, bindInfoCount, arg2);
        pBindInfos?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result BindImageMemory2KHR(uint bindInfoCount, in BindImageMemoryInfo pBindInfos)
    {
        var arg2 = ReferenceEquals(pBindInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindImageMemory2KHR(this, bindInfoCount, arg2);
        pBindInfos?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result BindOpticalFlowSessionImageNV(AdamantiumVulkan.Core.OpticalFlowSessionNV session, OpticalFlowSessionBindingPointNV bindingPoint, AdamantiumVulkan.Core.ImageView view, ImageLayout layout)
    {
        var arg1 = ReferenceEquals(session, null) ? new VkOpticalFlowSessionNV_T() : (VkOpticalFlowSessionNV_T)session;
        var arg3 = ReferenceEquals(view, null) ? new VkImageView_T() : (VkImageView_T)view;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindOpticalFlowSessionImageNV(this, arg1, bindingPoint, arg3, layout);
    }

    public Result BindVideoSessionMemoryKHR(AdamantiumVulkan.Core.VideoSessionKHR videoSession, uint bindSessionMemoryInfoCount, in BindVideoSessionMemoryInfoKHR pBindSessionMemoryInfos)
    {
        var arg1 = ReferenceEquals(videoSession, null) ? new VkVideoSessionKHR_T() : (VkVideoSessionKHR_T)videoSession;
        var arg3 = ReferenceEquals(pBindSessionMemoryInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindSessionMemoryInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBindVideoSessionMemoryKHR(this, arg1, bindSessionMemoryInfoCount, arg3);
        pBindSessionMemoryInfos?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result BuildAccelerationStructuresKHR(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, uint infoCount, in AccelerationStructureBuildGeometryInfoKHR pInfos, in AccelerationStructureBuildRangeInfoKHR ppBuildRangeInfos)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg3 = ReferenceEquals(pInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pInfos.ToNative());
        var arg4 = ReferenceEquals(ppBuildRangeInfos, null) ? null : (AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildRangeInfoKHR**)NativeUtils.StructOrEnumToPointer(ppBuildRangeInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBuildAccelerationStructuresKHR(this, arg1, infoCount, arg3, arg4);
        pInfos?.Dispose();
        NativeUtils.Free(arg3);
        ppBuildRangeInfos?.Dispose();
        NativeUtils.Free(arg4);
        return result;
    }

    public Result BuildMicromapsEXT(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, uint infoCount, in MicromapBuildInfoEXT pInfos)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg3 = ReferenceEquals(pInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pInfos.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBuildMicromapsEXT(this, arg1, infoCount, arg3);
        pInfos?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result CompileDeferredNV(AdamantiumVulkan.Core.Pipeline pipeline, uint shader)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkCompileDeferredNV(this, arg1, shader);
    }

    public Result CopyAccelerationStructureKHR(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyAccelerationStructureInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyAccelerationStructureKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CopyAccelerationStructureToMemoryKHR(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyAccelerationStructureToMemoryInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyAccelerationStructureToMemoryKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CopyImageToImage(in CopyImageToImageInfo pCopyImageToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToImageInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyImageToImage(this, arg1);
        pCopyImageToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyImageToImageEXT(in CopyImageToImageInfo pCopyImageToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToImageInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyImageToImageEXT(this, arg1);
        pCopyImageToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyImageToMemory(in CopyImageToMemoryInfo pCopyImageToMemoryInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToMemoryInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToMemoryInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyImageToMemory(this, arg1);
        pCopyImageToMemoryInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyImageToMemoryEXT(in CopyImageToMemoryInfo pCopyImageToMemoryInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToMemoryInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToMemoryInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyImageToMemoryEXT(this, arg1);
        pCopyImageToMemoryInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyMemoryToAccelerationStructureKHR(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyMemoryToAccelerationStructureInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMemoryToAccelerationStructureKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CopyMemoryToImage(in CopyMemoryToImageInfo pCopyMemoryToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyMemoryToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyMemoryToImageInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMemoryToImage(this, arg1);
        pCopyMemoryToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyMemoryToImageEXT(in CopyMemoryToImageInfo pCopyMemoryToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyMemoryToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyMemoryToImageInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMemoryToImageEXT(this, arg1);
        pCopyMemoryToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result CopyMemoryToMicromapEXT(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyMemoryToMicromapInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMemoryToMicromapEXT(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CopyMicromapEXT(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyMicromapInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMicromapEXT(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CopyMicromapToMemoryEXT(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, in CopyMicromapToMemoryInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCopyMicromapToMemoryEXT(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result CreateAccelerationStructureKHR(in AccelerationStructureCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.AccelerationStructureKHR pAccelerationStructure)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkAccelerationStructureKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateAccelerationStructureKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pAccelerationStructure = new AccelerationStructureKHR(arg3);
        return result;
    }

    public Result CreateAccelerationStructureNV(in AccelerationStructureCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.AccelerationStructureNV pAccelerationStructure)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkAccelerationStructureNV_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateAccelerationStructureNV(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pAccelerationStructure = new AccelerationStructureNV(arg3);
        return result;
    }

    public Result CreateBuffer(in BufferCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Buffer pBuffer)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkBuffer_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateBuffer(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pBuffer = new Buffer(arg3);
        return result;
    }

    public Result CreateBufferView(in BufferViewCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.BufferView pView)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkBufferView_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateBufferView(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pView = new BufferView(arg3);
        return result;
    }

    public Result CreateCommandPool(in CommandPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CommandPool pCommandPool)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkCommandPool_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCommandPool(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pCommandPool = new CommandPool(arg3);
        return result;
    }

    public Result CreateComputePipelines(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in ComputePipelineCreateInfo pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline[] pPipelines)
    {
        var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg3 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg4 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipeline_T* arg5 = NativeUtils.GetPointerToManagedArray<VkPipeline_T>(createInfoCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateComputePipelines(this, arg1, createInfoCount, arg3, arg4, arg5);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg3);
        pAllocator?.Dispose();
        NativeUtils.Free(arg4);
        pPipelines = new AdamantiumVulkan.Core.Pipeline[createInfoCount];
        for (var i = 0U; i < createInfoCount; ++i)
        {
            pPipelines[i] = arg5[i];
        }
        NativeUtils.Free(arg5);
        return result;
    }

    public Result CreateCudaFunctionNV(in CudaFunctionCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CudaFunctionNV pFunction)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkCudaFunctionNV_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCudaFunctionNV(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pFunction = new CudaFunctionNV(arg3);
        return result;
    }

    public Result CreateCudaModuleNV(in CudaModuleCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CudaModuleNV pModule)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkCudaModuleNV_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCudaModuleNV(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pModule = new CudaModuleNV(arg3);
        return result;
    }

    public Result CreateCuFunctionNVX(in CuFunctionCreateInfoNVX pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CuFunctionNVX pFunction)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkCuFunctionNVX_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCuFunctionNVX(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pFunction = new CuFunctionNVX(arg3);
        return result;
    }

    public Result CreateCuModuleNVX(in CuModuleCreateInfoNVX pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.CuModuleNVX pModule)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkCuModuleNVX_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateCuModuleNVX(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pModule = new CuModuleNVX(arg3);
        return result;
    }

    public Result CreateDeferredOperationKHR(in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DeferredOperationKHR pDeferredOperation)
    {
        var arg1 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDeferredOperationKHR_T arg2;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDeferredOperationKHR(this, arg1, out arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg1);
        pDeferredOperation = new DeferredOperationKHR(arg2);
        return result;
    }

    public Result CreateDescriptorPool(in DescriptorPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorPool pDescriptorPool)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDescriptorPool_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorPool(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pDescriptorPool = new DescriptorPool(arg3);
        return result;
    }

    public Result CreateDescriptorSetLayout(in DescriptorSetLayoutCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorSetLayout pSetLayout)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDescriptorSetLayout_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorSetLayout(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSetLayout = new DescriptorSetLayout(arg3);
        return result;
    }

    public Result CreateDescriptorUpdateTemplate(in DescriptorUpdateTemplateCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDescriptorUpdateTemplate_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorUpdateTemplate(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pDescriptorUpdateTemplate = new DescriptorUpdateTemplate(arg3);
        return result;
    }

    public Result CreateDescriptorUpdateTemplateKHR(in DescriptorUpdateTemplateCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DescriptorUpdateTemplate pDescriptorUpdateTemplate)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDescriptorUpdateTemplate_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDescriptorUpdateTemplateKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pDescriptorUpdateTemplate = new DescriptorUpdateTemplate(arg3);
        return result;
    }

    public Result CreateEvent(in EventCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Event pEvent)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkEvent_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateEvent(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pEvent = new Event(arg3);
        return result;
    }

    public Result CreateFence(in FenceCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkFence_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateFence(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pFence = new Fence(arg3);
        return result;
    }

    public Result CreateFramebuffer(in FramebufferCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Framebuffer pFramebuffer)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkFramebuffer_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateFramebuffer(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pFramebuffer = new Framebuffer(arg3);
        return result;
    }

    public Result CreateGraphicsPipelines(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in GraphicsPipelineCreateInfo pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline[] pPipelines)
    {
        var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg3 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg4 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipeline_T* arg5 = NativeUtils.GetPointerToManagedArray<VkPipeline_T>(createInfoCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateGraphicsPipelines(this, arg1, createInfoCount, arg3, arg4, arg5);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg3);
        pAllocator?.Dispose();
        NativeUtils.Free(arg4);
        pPipelines = new AdamantiumVulkan.Core.Pipeline[createInfoCount];
        for (var i = 0U; i < createInfoCount; ++i)
        {
            pPipelines[i] = arg5[i];
        }
        NativeUtils.Free(arg5);
        return result;
    }

    public Result CreateImage(in ImageCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Image pImage)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkImage_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateImage(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pImage = new Image(arg3);
        return result;
    }

    public Result CreateImageView(in ImageViewCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ImageView pView)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkImageView_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateImageView(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pView = new ImageView(arg3);
        return result;
    }

    public Result CreateIndirectCommandsLayoutEXT(in IndirectCommandsLayoutCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.IndirectCommandsLayoutEXT pIndirectCommandsLayout)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkIndirectCommandsLayoutEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateIndirectCommandsLayoutEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pIndirectCommandsLayout = new IndirectCommandsLayoutEXT(arg3);
        return result;
    }

    public Result CreateIndirectCommandsLayoutNV(in IndirectCommandsLayoutCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.IndirectCommandsLayoutNV pIndirectCommandsLayout)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkIndirectCommandsLayoutNV_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateIndirectCommandsLayoutNV(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pIndirectCommandsLayout = new IndirectCommandsLayoutNV(arg3);
        return result;
    }

    public Result CreateIndirectExecutionSetEXT(in IndirectExecutionSetCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.IndirectExecutionSetEXT pIndirectExecutionSet)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkIndirectExecutionSetEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateIndirectExecutionSetEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pIndirectExecutionSet = new IndirectExecutionSetEXT(arg3);
        return result;
    }

    public Result CreateMicromapEXT(in MicromapCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.MicromapEXT pMicromap)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkMicromapEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateMicromapEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pMicromap = new MicromapEXT(arg3);
        return result;
    }

    public Result CreateOpticalFlowSessionNV(in OpticalFlowSessionCreateInfoNV pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.OpticalFlowSessionNV pSession)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkOpticalFlowSessionNV_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateOpticalFlowSessionNV(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSession = new OpticalFlowSessionNV(arg3);
        return result;
    }

    public Result CreatePipelineBinariesKHR(in PipelineBinaryCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, PipelineBinaryHandlesInfoKHR pBinaries)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        var arg3 = ReferenceEquals(pBinaries, null) ? null : NativeUtils.StructOrEnumToPointer(pBinaries.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePipelineBinariesKHR(this, arg1, arg2, arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pBinaries?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result CreatePipelineCache(in PipelineCacheCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PipelineCache pPipelineCache)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipelineCache_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePipelineCache(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pPipelineCache = new PipelineCache(arg3);
        return result;
    }

    public Result CreatePipelineLayout(in PipelineLayoutCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PipelineLayout pPipelineLayout)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipelineLayout_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePipelineLayout(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pPipelineLayout = new PipelineLayout(arg3);
        return result;
    }

    public Result CreatePrivateDataSlot(in PrivateDataSlotCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PrivateDataSlot pPrivateDataSlot)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPrivateDataSlot_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePrivateDataSlot(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pPrivateDataSlot = new PrivateDataSlot(arg3);
        return result;
    }

    public Result CreatePrivateDataSlotEXT(in PrivateDataSlotCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.PrivateDataSlot pPrivateDataSlot)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPrivateDataSlot_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreatePrivateDataSlotEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pPrivateDataSlot = new PrivateDataSlot(arg3);
        return result;
    }

    public Result CreateQueryPool(in QueryPoolCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.QueryPool pQueryPool)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkQueryPool_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateQueryPool(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pQueryPool = new QueryPool(arg3);
        return result;
    }

    public Result CreateRayTracingPipelinesKHR(AdamantiumVulkan.Core.DeferredOperationKHR deferredOperation, AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in RayTracingPipelineCreateInfoKHR pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline pPipelines)
    {
        var arg1 = ReferenceEquals(deferredOperation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)deferredOperation;
        var arg2 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg4 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg5 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipeline_T arg6;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRayTracingPipelinesKHR(this, arg1, arg2, createInfoCount, arg4, arg5, out arg6);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg4);
        pAllocator?.Dispose();
        NativeUtils.Free(arg5);
        pPipelines = new Pipeline(arg6);
        return result;
    }

    public Result CreateRayTracingPipelinesNV(AdamantiumVulkan.Core.PipelineCache pipelineCache, uint createInfoCount, in RayTracingPipelineCreateInfoNV pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Pipeline pPipelines)
    {
        var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg3 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg4 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkPipeline_T arg5;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRayTracingPipelinesNV(this, arg1, createInfoCount, arg3, arg4, out arg5);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg3);
        pAllocator?.Dispose();
        NativeUtils.Free(arg4);
        pPipelines = new Pipeline(arg5);
        return result;
    }

    public Result CreateRenderPass(in RenderPassCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.RenderPass pRenderPass)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkRenderPass_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRenderPass(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pRenderPass = new RenderPass(arg3);
        return result;
    }

    public Result CreateRenderPass2(in RenderPassCreateInfo2 pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.RenderPass pRenderPass)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkRenderPass_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRenderPass2(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pRenderPass = new RenderPass(arg3);
        return result;
    }

    public Result CreateRenderPass2KHR(in RenderPassCreateInfo2 pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.RenderPass pRenderPass)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkRenderPass_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateRenderPass2KHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pRenderPass = new RenderPass(arg3);
        return result;
    }

    public Result CreateSampler(in SamplerCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Sampler pSampler)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSampler_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSampler(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSampler = new Sampler(arg3);
        return result;
    }

    public Result CreateSamplerYcbcrConversion(in SamplerYcbcrConversionCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SamplerYcbcrConversion pYcbcrConversion)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSamplerYcbcrConversion_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSamplerYcbcrConversion(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pYcbcrConversion = new SamplerYcbcrConversion(arg3);
        return result;
    }

    public Result CreateSamplerYcbcrConversionKHR(in SamplerYcbcrConversionCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SamplerYcbcrConversion pYcbcrConversion)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSamplerYcbcrConversion_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSamplerYcbcrConversionKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pYcbcrConversion = new SamplerYcbcrConversion(arg3);
        return result;
    }

    public Result CreateSemaphore(in SemaphoreCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Semaphore pSemaphore)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSemaphore_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSemaphore(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSemaphore = new Semaphore(arg3);
        return result;
    }

    public Result CreateShaderModule(in ShaderModuleCreateInfo pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ShaderModule pShaderModule)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkShaderModule_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateShaderModule(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pShaderModule = new ShaderModule(arg3);
        return result;
    }

    public Result CreateShadersEXT(uint createInfoCount, in ShaderCreateInfoEXT[] pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ShaderEXT[] pShaders)
    {
        var arg2 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkShaderCreateInfoEXT>(createInfoCount);
        if (!ReferenceEquals(pCreateInfos, null))
        {
            for (var i = 0U; i < createInfoCount; ++i)
            {
                arg2[i] = pCreateInfos[i].ToNative();
            }
        }
        var arg3 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkShaderEXT_T* arg4 = NativeUtils.GetPointerToManagedArray<VkShaderEXT_T>(createInfoCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateShadersEXT(this, createInfoCount, arg2, arg3, arg4);
        if (!ReferenceEquals(pCreateInfos, null))
        {
            for (var i = 0U; i < createInfoCount; ++i)
            {
                pCreateInfos[i]?.Dispose();
            }
        }
        pAllocator?.Dispose();
        NativeUtils.Free(arg3);
        pShaders = new AdamantiumVulkan.Core.ShaderEXT[createInfoCount];
        for (var i = 0U; i < createInfoCount; ++i)
        {
            pShaders[i] = arg4[i];
        }
        NativeUtils.Free(arg4);
        return result;
    }

    public Result CreateShadersEXT(uint createInfoCount, in ShaderCreateInfoEXT pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ShaderEXT[] pShaders)
    {
        var arg2 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg3 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkShaderEXT_T* arg4 = NativeUtils.GetPointerToManagedArray<VkShaderEXT_T>(createInfoCount);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateShadersEXT(this, createInfoCount, arg2, arg3, arg4);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg3);
        pShaders = new AdamantiumVulkan.Core.ShaderEXT[createInfoCount];
        for (var i = 0U; i < createInfoCount; ++i)
        {
            pShaders[i] = arg4[i];
        }
        NativeUtils.Free(arg4);
        return result;
    }

    public Result CreateSharedSwapchainsKHR(uint swapchainCount, in SwapchainCreateInfoKHR pCreateInfos, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SwapchainKHR pSwapchains)
    {
        var arg2 = ReferenceEquals(pCreateInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfos.ToNative());
        var arg3 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSwapchainKHR_T arg4;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSharedSwapchainsKHR(this, swapchainCount, arg2, arg3, out arg4);
        pCreateInfos?.Dispose();
        NativeUtils.Free(arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg3);
        pSwapchains = new SwapchainKHR(arg4);
        return result;
    }

    public Result CreateSwapchainKHR(in SwapchainCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SwapchainKHR pSwapchain)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSwapchainKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateSwapchainKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSwapchain = new SwapchainKHR(arg3);
        return result;
    }

    public Result CreateValidationCacheEXT(in ValidationCacheCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.ValidationCacheEXT pValidationCache)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkValidationCacheEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateValidationCacheEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pValidationCache = new ValidationCacheEXT(arg3);
        return result;
    }

    public Result CreateVideoSessionKHR(in VideoSessionCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.VideoSessionKHR pVideoSession)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkVideoSessionKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateVideoSessionKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pVideoSession = new VideoSessionKHR(arg3);
        return result;
    }

    public Result CreateVideoSessionParametersKHR(in VideoSessionParametersCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.VideoSessionParametersKHR pVideoSessionParameters)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkVideoSessionParametersKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateVideoSessionParametersKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pVideoSessionParameters = new VideoSessionParametersKHR(arg3);
        return result;
    }

    public Result DebugMarkerSetObjectNameEXT(in DebugMarkerObjectNameInfoEXT pNameInfo)
    {
        var arg1 = ReferenceEquals(pNameInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pNameInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugMarkerSetObjectNameEXT(this, arg1);
        pNameInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result DebugMarkerSetObjectTagEXT(in DebugMarkerObjectTagInfoEXT pTagInfo)
    {
        var arg1 = ReferenceEquals(pTagInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pTagInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugMarkerSetObjectTagEXT(this, arg1);
        pTagInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result DeferredOperationJoinKHR(AdamantiumVulkan.Core.DeferredOperationKHR operation)
    {
        var arg1 = ReferenceEquals(operation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)operation;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkDeferredOperationJoinKHR(this, arg1);
    }

    public void DestroyAccelerationStructureKHR(AdamantiumVulkan.Core.AccelerationStructureKHR accelerationStructure, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(accelerationStructure, null) ? new VkAccelerationStructureKHR_T() : (VkAccelerationStructureKHR_T)accelerationStructure;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyAccelerationStructureKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyAccelerationStructureNV(AdamantiumVulkan.Core.AccelerationStructureNV accelerationStructure, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(accelerationStructure, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)accelerationStructure;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyAccelerationStructureNV(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyBuffer(AdamantiumVulkan.Core.Buffer buffer, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyBuffer(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyBufferView(AdamantiumVulkan.Core.BufferView bufferView, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(bufferView, null) ? new VkBufferView_T() : (VkBufferView_T)bufferView;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyBufferView(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCommandPool(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyCudaFunctionNV(AdamantiumVulkan.Core.CudaFunctionNV function, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(function, null) ? new VkCudaFunctionNV_T() : (VkCudaFunctionNV_T)function;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCudaFunctionNV(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyCudaModuleNV(AdamantiumVulkan.Core.CudaModuleNV module, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(module, null) ? new VkCudaModuleNV_T() : (VkCudaModuleNV_T)module;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCudaModuleNV(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyCuFunctionNVX(AdamantiumVulkan.Core.CuFunctionNVX function, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(function, null) ? new VkCuFunctionNVX_T() : (VkCuFunctionNVX_T)function;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCuFunctionNVX(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyCuModuleNVX(AdamantiumVulkan.Core.CuModuleNVX module, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(module, null) ? new VkCuModuleNVX_T() : (VkCuModuleNVX_T)module;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyCuModuleNVX(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDeferredOperationKHR(AdamantiumVulkan.Core.DeferredOperationKHR operation, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(operation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)operation;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDeferredOperationKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDescriptorPool(AdamantiumVulkan.Core.DescriptorPool descriptorPool, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorPool(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDescriptorSetLayout(AdamantiumVulkan.Core.DescriptorSetLayout descriptorSetLayout, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(descriptorSetLayout, null) ? new VkDescriptorSetLayout_T() : (VkDescriptorSetLayout_T)descriptorSetLayout;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorSetLayout(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDescriptorUpdateTemplate(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorUpdateTemplate(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDescriptorUpdateTemplateKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDevice(in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDevice(this, arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void DestroyEvent(AdamantiumVulkan.Core.Event @event, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyEvent(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyFence(AdamantiumVulkan.Core.Fence fence, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyFence(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyFramebuffer(AdamantiumVulkan.Core.Framebuffer framebuffer, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(framebuffer, null) ? new VkFramebuffer_T() : (VkFramebuffer_T)framebuffer;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyFramebuffer(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyImage(AdamantiumVulkan.Core.Image image, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyImage(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyImageView(AdamantiumVulkan.Core.ImageView imageView, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyImageView(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyIndirectCommandsLayoutEXT(AdamantiumVulkan.Core.IndirectCommandsLayoutEXT indirectCommandsLayout, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(indirectCommandsLayout, null) ? new VkIndirectCommandsLayoutEXT_T() : (VkIndirectCommandsLayoutEXT_T)indirectCommandsLayout;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyIndirectCommandsLayoutEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyIndirectCommandsLayoutNV(AdamantiumVulkan.Core.IndirectCommandsLayoutNV indirectCommandsLayout, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(indirectCommandsLayout, null) ? new VkIndirectCommandsLayoutNV_T() : (VkIndirectCommandsLayoutNV_T)indirectCommandsLayout;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyIndirectCommandsLayoutNV(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyIndirectExecutionSetEXT(AdamantiumVulkan.Core.IndirectExecutionSetEXT indirectExecutionSet, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(indirectExecutionSet, null) ? new VkIndirectExecutionSetEXT_T() : (VkIndirectExecutionSetEXT_T)indirectExecutionSet;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyIndirectExecutionSetEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyMicromapEXT(AdamantiumVulkan.Core.MicromapEXT micromap, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(micromap, null) ? new VkMicromapEXT_T() : (VkMicromapEXT_T)micromap;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyMicromapEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyOpticalFlowSessionNV(AdamantiumVulkan.Core.OpticalFlowSessionNV session, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(session, null) ? new VkOpticalFlowSessionNV_T() : (VkOpticalFlowSessionNV_T)session;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyOpticalFlowSessionNV(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPipeline(AdamantiumVulkan.Core.Pipeline pipeline, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipeline(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPipelineBinaryKHR(AdamantiumVulkan.Core.PipelineBinaryKHR pipelineBinary, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(pipelineBinary, null) ? new VkPipelineBinaryKHR_T() : (VkPipelineBinaryKHR_T)pipelineBinary;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipelineBinaryKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPipelineCache(AdamantiumVulkan.Core.PipelineCache pipelineCache, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipelineCache(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPipelineLayout(AdamantiumVulkan.Core.PipelineLayout pipelineLayout, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(pipelineLayout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)pipelineLayout;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPipelineLayout(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPrivateDataSlot(AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPrivateDataSlot(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyPrivateDataSlotEXT(AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyPrivateDataSlotEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyQueryPool(AdamantiumVulkan.Core.QueryPool queryPool, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyQueryPool(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyRenderPass(AdamantiumVulkan.Core.RenderPass renderPass, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(renderPass, null) ? new VkRenderPass_T() : (VkRenderPass_T)renderPass;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyRenderPass(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroySampler(AdamantiumVulkan.Core.Sampler sampler, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(sampler, null) ? new VkSampler_T() : (VkSampler_T)sampler;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySampler(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroySamplerYcbcrConversion(AdamantiumVulkan.Core.SamplerYcbcrConversion ycbcrConversion, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(ycbcrConversion, null) ? new VkSamplerYcbcrConversion_T() : (VkSamplerYcbcrConversion_T)ycbcrConversion;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySamplerYcbcrConversion(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroySamplerYcbcrConversionKHR(AdamantiumVulkan.Core.SamplerYcbcrConversion ycbcrConversion, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(ycbcrConversion, null) ? new VkSamplerYcbcrConversion_T() : (VkSamplerYcbcrConversion_T)ycbcrConversion;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySamplerYcbcrConversionKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroySemaphore(AdamantiumVulkan.Core.Semaphore semaphore, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySemaphore(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyShaderEXT(AdamantiumVulkan.Core.ShaderEXT shader, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(shader, null) ? new VkShaderEXT_T() : (VkShaderEXT_T)shader;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyShaderEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyShaderModule(AdamantiumVulkan.Core.ShaderModule shaderModule, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(shaderModule, null) ? new VkShaderModule_T() : (VkShaderModule_T)shaderModule;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyShaderModule(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroySwapchainKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySwapchainKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyValidationCacheEXT(AdamantiumVulkan.Core.ValidationCacheEXT validationCache, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(validationCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)validationCache;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyValidationCacheEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyVideoSessionKHR(AdamantiumVulkan.Core.VideoSessionKHR videoSession, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(videoSession, null) ? new VkVideoSessionKHR_T() : (VkVideoSessionKHR_T)videoSession;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyVideoSessionKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyVideoSessionParametersKHR(AdamantiumVulkan.Core.VideoSessionParametersKHR videoSessionParameters, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(videoSessionParameters, null) ? new VkVideoSessionParametersKHR_T() : (VkVideoSessionParametersKHR_T)videoSessionParameters;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyVideoSessionParametersKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result DeviceWaitIdle()
    {
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkDeviceWaitIdle(this);
    }

    public Result DisplayPowerControlEXT(AdamantiumVulkan.Core.DisplayKHR display, in DisplayPowerInfoEXT pDisplayPowerInfo)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        var arg2 = ReferenceEquals(pDisplayPowerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDisplayPowerInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkDisplayPowerControlEXT(this, arg1, arg2);
        pDisplayPowerInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result FlushMappedMemoryRanges(uint memoryRangeCount, in MappedMemoryRange pMemoryRanges)
    {
        var arg2 = ReferenceEquals(pMemoryRanges, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRanges.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkFlushMappedMemoryRanges(this, memoryRangeCount, arg2);
        pMemoryRanges?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void FreeCommandBuffers(AdamantiumVulkan.Core.CommandPool commandPool, uint commandBufferCount, params AdamantiumVulkan.Core.CommandBuffer[] pCommandBuffers)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
         var arg3 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkCommandBuffer_T>(pCommandBuffers.Length);
        if (!ReferenceEquals(pCommandBuffers, null))
        {
            for (var i = 0U; i < pCommandBuffers.Length; ++i)
            {
                arg3[i] = pCommandBuffers[i];
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeCommandBuffers(this, arg1, commandBufferCount, arg3);
    }

    public void FreeCommandBuffers(AdamantiumVulkan.Core.CommandPool commandPool, uint commandBufferCount, AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
        var arg3 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkCommandBuffer_T)pCommandBuffers);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeCommandBuffers(this, arg1, commandBufferCount, arg3);
        NativeUtils.Free(arg3);
    }

    public Result FreeDescriptorSets(AdamantiumVulkan.Core.DescriptorPool descriptorPool, uint descriptorSetCount, in AdamantiumVulkan.Core.DescriptorSet pDescriptorSets)
    {
        var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
        var arg3 = ReferenceEquals(pDescriptorSets, null) ? null : NativeUtils.StructOrEnumToPointer((VkDescriptorSet_T)pDescriptorSets);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeDescriptorSets(this, arg1, descriptorSetCount, arg3);
        NativeUtils.Free(arg3);
        return result;
    }

    public void FreeMemory(AdamantiumVulkan.Core.DeviceMemory memory, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkFreeMemory(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetAccelerationStructureBuildSizesKHR(AccelerationStructureBuildTypeKHR buildType, in AccelerationStructureBuildGeometryInfoKHR pBuildInfo, in uint pMaxPrimitiveCounts, AccelerationStructureBuildSizesInfoKHR pSizeInfo)
    {
        var arg2 = ReferenceEquals(pBuildInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBuildInfo.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(pMaxPrimitiveCounts);
        var arg4 = ReferenceEquals(pSizeInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSizeInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureBuildSizesKHR(this, buildType, arg2, arg3, arg4);
        pBuildInfo?.Dispose();
        NativeUtils.Free(arg2);
        pSizeInfo?.Dispose();
        NativeUtils.Free(arg4);
    }

    public VkDeviceAddress GetAccelerationStructureDeviceAddressKHR(in AccelerationStructureDeviceAddressInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureDeviceAddressKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetAccelerationStructureHandleNV(AdamantiumVulkan.Core.AccelerationStructureNV accelerationStructure, ulong dataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(accelerationStructure, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)accelerationStructure;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureHandleNV(this, arg1, dataSize, pData);
    }

    public void GetAccelerationStructureMemoryRequirementsNV(in AccelerationStructureMemoryRequirementsInfoNV pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureMemoryRequirementsNV(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetAccelerationStructureOpaqueCaptureDescriptorDataEXT(in AccelerationStructureCaptureDescriptorDataInfoEXT pInfo, ref void* pData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(this, arg1, pData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public VkDeviceAddress GetBufferDeviceAddress(in BufferDeviceAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferDeviceAddress(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public VkDeviceAddress GetBufferDeviceAddressEXT(in BufferDeviceAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferDeviceAddressEXT(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public VkDeviceAddress GetBufferDeviceAddressKHR(in BufferDeviceAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferDeviceAddressKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetBufferMemoryRequirements(AdamantiumVulkan.Core.Buffer buffer, out MemoryRequirements pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VkMemoryRequirements arg2;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements(this, arg1, out arg2);
        pMemoryRequirements = new MemoryRequirements(arg2);
    }

    public void GetBufferMemoryRequirements2(in BufferMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements2(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetBufferMemoryRequirements2KHR(in BufferMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferMemoryRequirements2KHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public ulong GetBufferOpaqueCaptureAddress(in BufferDeviceAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferOpaqueCaptureAddress(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public ulong GetBufferOpaqueCaptureAddressKHR(in BufferDeviceAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferOpaqueCaptureAddressKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetBufferOpaqueCaptureDescriptorDataEXT(in BufferCaptureDescriptorDataInfoEXT pInfo, ref void* pData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetBufferOpaqueCaptureDescriptorDataEXT(this, arg1, pData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetCalibratedTimestampsEXT(uint timestampCount, in CalibratedTimestampInfoKHR pTimestampInfos, ref ulong pTimestamps, ref ulong pMaxDeviation)
    {
        var arg2 = ReferenceEquals(pTimestampInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pTimestampInfos.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(pTimestamps);
        var arg4 = NativeUtils.StructOrEnumToPointer(pMaxDeviation);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetCalibratedTimestampsEXT(this, timestampCount, arg2, arg3, arg4);
        pTimestampInfos?.Dispose();
        NativeUtils.Free(arg2);
        pTimestamps = *arg3;
        NativeUtils.Free(arg3);
        pMaxDeviation = *arg4;
        NativeUtils.Free(arg4);
        return result;
    }

    public Result GetCalibratedTimestampsKHR(uint timestampCount, in CalibratedTimestampInfoKHR pTimestampInfos, ref ulong pTimestamps, ref ulong pMaxDeviation)
    {
        var arg2 = ReferenceEquals(pTimestampInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pTimestampInfos.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(pTimestamps);
        var arg4 = NativeUtils.StructOrEnumToPointer(pMaxDeviation);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetCalibratedTimestampsKHR(this, timestampCount, arg2, arg3, arg4);
        pTimestampInfos?.Dispose();
        NativeUtils.Free(arg2);
        pTimestamps = *arg3;
        NativeUtils.Free(arg3);
        pMaxDeviation = *arg4;
        NativeUtils.Free(arg4);
        return result;
    }

    public Result GetCudaModuleCacheNV(AdamantiumVulkan.Core.CudaModuleNV module, ref ulong pCacheSize, ref void* pCacheData)
    {
        var arg1 = ReferenceEquals(module, null) ? new VkCudaModuleNV_T() : (VkCudaModuleNV_T)module;
        var arg2 = NativeUtils.StructOrEnumToPointer(pCacheSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetCudaModuleCacheNV(this, arg1, arg2, pCacheData);
        pCacheSize = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public uint GetDeferredOperationMaxConcurrencyKHR(AdamantiumVulkan.Core.DeferredOperationKHR operation)
    {
        var arg1 = ReferenceEquals(operation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)operation;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeferredOperationMaxConcurrencyKHR(this, arg1);
    }

    public Result GetDeferredOperationResultKHR(AdamantiumVulkan.Core.DeferredOperationKHR operation)
    {
        var arg1 = ReferenceEquals(operation, null) ? new VkDeferredOperationKHR_T() : (VkDeferredOperationKHR_T)operation;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeferredOperationResultKHR(this, arg1);
    }

    public void GetDescriptorEXT(in DescriptorGetInfoEXT pDescriptorInfo, ulong dataSize, ref void* pDescriptor)
    {
        var arg1 = ReferenceEquals(pDescriptorInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDescriptorInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorEXT(this, arg1, dataSize, pDescriptor);
        pDescriptorInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void GetDescriptorSetHostMappingVALVE(AdamantiumVulkan.Core.DescriptorSet descriptorSet, out void* ppData)
    {
        var arg1 = ReferenceEquals(descriptorSet, null) ? new VkDescriptorSet_T() : (VkDescriptorSet_T)descriptorSet;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetHostMappingVALVE(this, arg1, out ppData);
    }

    public void GetDescriptorSetLayoutBindingOffsetEXT(AdamantiumVulkan.Core.DescriptorSetLayout layout, uint binding, ref VkDeviceSize pOffset)
    {
        var arg1 = ReferenceEquals(layout, null) ? new VkDescriptorSetLayout_T() : (VkDescriptorSetLayout_T)layout;
        var arg3 = ReferenceEquals(pOffset, null) ? null : NativeUtils.StructOrEnumToPointer(pOffset);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutBindingOffsetEXT(this, arg1, binding, arg3);
        if (arg3 is not null)
        {
            pOffset = *arg3;
        }
        NativeUtils.Free(arg3);
    }

    public void GetDescriptorSetLayoutHostMappingInfoVALVE(in DescriptorSetBindingReferenceVALVE pBindingReference, DescriptorSetLayoutHostMappingInfoVALVE pHostMapping)
    {
        var arg1 = ReferenceEquals(pBindingReference, null) ? null : NativeUtils.StructOrEnumToPointer(pBindingReference.ToNative());
        var arg2 = ReferenceEquals(pHostMapping, null) ? null : NativeUtils.StructOrEnumToPointer(pHostMapping.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutHostMappingInfoVALVE(this, arg1, arg2);
        pBindingReference?.Dispose();
        NativeUtils.Free(arg1);
        pHostMapping?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDescriptorSetLayoutSizeEXT(AdamantiumVulkan.Core.DescriptorSetLayout layout, ref VkDeviceSize pLayoutSizeInBytes)
    {
        var arg1 = ReferenceEquals(layout, null) ? new VkDescriptorSetLayout_T() : (VkDescriptorSetLayout_T)layout;
        var arg2 = ReferenceEquals(pLayoutSizeInBytes, null) ? null : NativeUtils.StructOrEnumToPointer(pLayoutSizeInBytes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutSizeEXT(this, arg1, arg2);
        if (arg2 is not null)
        {
            pLayoutSizeInBytes = *arg2;
        }
        NativeUtils.Free(arg2);
    }

    public void GetDescriptorSetLayoutSupport(in DescriptorSetLayoutCreateInfo pCreateInfo, DescriptorSetLayoutSupport pSupport)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pSupport, null) ? null : NativeUtils.StructOrEnumToPointer(pSupport.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutSupport(this, arg1, arg2);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSupport?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDescriptorSetLayoutSupportKHR(in DescriptorSetLayoutCreateInfo pCreateInfo, DescriptorSetLayoutSupport pSupport)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pSupport, null) ? null : NativeUtils.StructOrEnumToPointer(pSupport.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDescriptorSetLayoutSupportKHR(this, arg1, arg2);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSupport?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceAccelerationStructureCompatibilityKHR(in AccelerationStructureVersionInfoKHR pVersionInfo, ref AccelerationStructureCompatibilityKHR pCompatibility)
    {
        var arg1 = ReferenceEquals(pVersionInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pVersionInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pCompatibility);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceAccelerationStructureCompatibilityKHR(this, arg1, arg2);
        pVersionInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pCompatibility = *arg2;
        }
        NativeUtils.Free(arg2);
    }

    public void GetDeviceBufferMemoryRequirements(in DeviceBufferMemoryRequirements pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceBufferMemoryRequirements(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceBufferMemoryRequirementsKHR(in DeviceBufferMemoryRequirements pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceBufferMemoryRequirementsKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetDeviceFaultInfoEXT(DeviceFaultCountsEXT pFaultCounts, DeviceFaultInfoEXT pFaultInfo)
    {
        var arg1 = ReferenceEquals(pFaultCounts, null) ? null : NativeUtils.StructOrEnumToPointer(pFaultCounts.ToNative());
        var arg2 = ReferenceEquals(pFaultInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pFaultInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceFaultInfoEXT(this, arg1, arg2);
        pFaultCounts?.Dispose();
        NativeUtils.Free(arg1);
        pFaultInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetDeviceGroupPeerMemoryFeatures(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref VkPeerMemoryFeatureFlags pPeerMemoryFeatures)
    {
        var arg4 = ReferenceEquals(pPeerMemoryFeatures, null) ? null : NativeUtils.StructOrEnumToPointer(pPeerMemoryFeatures);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPeerMemoryFeatures(this, heapIndex, localDeviceIndex, remoteDeviceIndex, arg4);
        if (arg4 is not null)
        {
            pPeerMemoryFeatures = *arg4;
        }
        NativeUtils.Free(arg4);
    }

    public void GetDeviceGroupPeerMemoryFeaturesKHR(uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref VkPeerMemoryFeatureFlags pPeerMemoryFeatures)
    {
        var arg4 = ReferenceEquals(pPeerMemoryFeatures, null) ? null : NativeUtils.StructOrEnumToPointer(pPeerMemoryFeatures);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPeerMemoryFeaturesKHR(this, heapIndex, localDeviceIndex, remoteDeviceIndex, arg4);
        if (arg4 is not null)
        {
            pPeerMemoryFeatures = *arg4;
        }
        NativeUtils.Free(arg4);
    }

    public Result GetDeviceGroupPresentCapabilitiesKHR(DeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities)
    {
        var arg1 = ReferenceEquals(pDeviceGroupPresentCapabilities, null) ? null : NativeUtils.StructOrEnumToPointer(pDeviceGroupPresentCapabilities.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupPresentCapabilitiesKHR(this, arg1);
        pDeviceGroupPresentCapabilities?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetDeviceGroupSurfacePresentModesKHR(AdamantiumVulkan.Core.SurfaceKHR surface, ref VkDeviceGroupPresentModeFlagsKHR pModes)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = ReferenceEquals(pModes, null) ? null : NativeUtils.StructOrEnumToPointer(pModes);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceGroupSurfacePresentModesKHR(this, arg1, arg2);
        if (arg2 is not null)
        {
            pModes = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetDeviceImageMemoryRequirements(in DeviceImageMemoryRequirements pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageMemoryRequirements(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceImageMemoryRequirementsKHR(in DeviceImageMemoryRequirements pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageMemoryRequirementsKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceImageSparseMemoryRequirements(in DeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirementCount);
        var arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageSparseMemoryRequirements(this, arg1, arg2, arg3);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSparseMemoryRequirementCount = *arg2;
        NativeUtils.Free(arg2);
        pSparseMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetDeviceImageSparseMemoryRequirementsKHR(in DeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirementCount);
        var arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageSparseMemoryRequirementsKHR(this, arg1, arg2, arg3);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSparseMemoryRequirementCount = *arg2;
        NativeUtils.Free(arg2);
        pSparseMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetDeviceImageSubresourceLayout(in DeviceImageSubresourceInfo pInfo, SubresourceLayout2 pLayout)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageSubresourceLayout(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pLayout?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceImageSubresourceLayoutKHR(in DeviceImageSubresourceInfo pInfo, SubresourceLayout2 pLayout)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceImageSubresourceLayoutKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pLayout?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetDeviceMemoryCommitment(AdamantiumVulkan.Core.DeviceMemory memory, ref VkDeviceSize pCommittedMemoryInBytes)
    {
        var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        var arg2 = ReferenceEquals(pCommittedMemoryInBytes, null) ? null : NativeUtils.StructOrEnumToPointer(pCommittedMemoryInBytes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceMemoryCommitment(this, arg1, arg2);
        if (arg2 is not null)
        {
            pCommittedMemoryInBytes = *arg2;
        }
        NativeUtils.Free(arg2);
    }

    public ulong GetDeviceMemoryOpaqueCaptureAddress(in DeviceMemoryOpaqueCaptureAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceMemoryOpaqueCaptureAddress(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public ulong GetDeviceMemoryOpaqueCaptureAddressKHR(in DeviceMemoryOpaqueCaptureAddressInfo pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceMemoryOpaqueCaptureAddressKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetDeviceMicromapCompatibilityEXT(in MicromapVersionInfoEXT pVersionInfo, ref AccelerationStructureCompatibilityKHR pCompatibility)
    {
        var arg1 = ReferenceEquals(pVersionInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pVersionInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pCompatibility);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceMicromapCompatibilityEXT(this, arg1, arg2);
        pVersionInfo?.Dispose();
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            pCompatibility = *arg2;
        }
        NativeUtils.Free(arg2);
    }

    public void* GetDeviceProcAddr(string pName)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(pName, false);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceProcAddr(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetDeviceQueue(uint queueFamilyIndex, uint queueIndex, out AdamantiumVulkan.Core.Queue pQueue)
    {
        VkQueue_T arg3;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceQueue(this, queueFamilyIndex, queueIndex, out arg3);
        pQueue = new Queue(arg3);
    }

    public void GetDeviceQueue2(in DeviceQueueInfo2 pQueueInfo, out AdamantiumVulkan.Core.Queue pQueue)
    {
        var arg1 = ReferenceEquals(pQueueInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pQueueInfo.ToNative());
        VkQueue_T arg2;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceQueue2(this, arg1, out arg2);
        pQueueInfo?.Dispose();
        NativeUtils.Free(arg1);
        pQueue = new Queue(arg2);
    }

    public Result GetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(AdamantiumVulkan.Core.RenderPass renderpass, Extent2D pMaxWorkgroupSize)
    {
        var arg1 = ReferenceEquals(renderpass, null) ? new VkRenderPass_T() : (VkRenderPass_T)renderpass;
        var arg2 = ReferenceEquals(pMaxWorkgroupSize, null) ? null : NativeUtils.StructOrEnumToPointer(pMaxWorkgroupSize.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(this, arg1, arg2);
        pMaxWorkgroupSize?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetDynamicRenderingTilePropertiesQCOM(in RenderingInfo pRenderingInfo, TilePropertiesQCOM pProperties)
    {
        var arg1 = ReferenceEquals(pRenderingInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderingInfo.ToNative());
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetDynamicRenderingTilePropertiesQCOM(this, arg1, arg2);
        pRenderingInfo?.Dispose();
        NativeUtils.Free(arg1);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetEncodedVideoSessionParametersKHR(in VideoEncodeSessionParametersGetInfoKHR pVideoSessionParametersInfo, VideoEncodeSessionParametersFeedbackInfoKHR pFeedbackInfo, ref ulong pDataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(pVideoSessionParametersInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pVideoSessionParametersInfo.ToNative());
        var arg2 = ReferenceEquals(pFeedbackInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pFeedbackInfo.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(pDataSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetEncodedVideoSessionParametersKHR(this, arg1, arg2, arg3, pData);
        pVideoSessionParametersInfo?.Dispose();
        NativeUtils.Free(arg1);
        pFeedbackInfo?.Dispose();
        NativeUtils.Free(arg2);
        pDataSize = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetEventStatus(AdamantiumVulkan.Core.Event @event)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetEventStatus(this, arg1);
    }

    public Result GetFenceFdKHR(in FenceGetFdInfoKHR pGetFdInfo, ref int pFd)
    {
        var arg1 = ReferenceEquals(pGetFdInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pGetFdInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pFd);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetFenceFdKHR(this, arg1, arg2);
        pGetFdInfo?.Dispose();
        NativeUtils.Free(arg1);
        pFd = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetFenceStatus(AdamantiumVulkan.Core.Fence fence)
    {
        var arg1 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetFenceStatus(this, arg1);
    }

    public Result GetFramebufferTilePropertiesQCOM(AdamantiumVulkan.Core.Framebuffer framebuffer, ref uint pPropertiesCount, TilePropertiesQCOM pProperties)
    {
        var arg1 = ReferenceEquals(framebuffer, null) ? new VkFramebuffer_T() : (VkFramebuffer_T)framebuffer;
        var arg2 = NativeUtils.StructOrEnumToPointer(pPropertiesCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetFramebufferTilePropertiesQCOM(this, arg1, arg2, arg3);
        pPropertiesCount = *arg2;
        NativeUtils.Free(arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public void GetGeneratedCommandsMemoryRequirementsEXT(in GeneratedCommandsMemoryRequirementsInfoEXT pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetGeneratedCommandsMemoryRequirementsEXT(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetGeneratedCommandsMemoryRequirementsNV(in GeneratedCommandsMemoryRequirementsInfoNV pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetGeneratedCommandsMemoryRequirementsNV(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Image image, ImageDrmFormatModifierPropertiesEXT pProperties)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageDrmFormatModifierPropertiesEXT(this, arg1, arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetImageMemoryRequirements(AdamantiumVulkan.Core.Image image, out MemoryRequirements pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        AdamantiumVulkan.Core.Interop.VkMemoryRequirements arg2;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements(this, arg1, out arg2);
        pMemoryRequirements = new MemoryRequirements(arg2);
    }

    public void GetImageMemoryRequirements2(in ImageMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements2(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetImageMemoryRequirements2KHR(in ImageMemoryRequirementsInfo2 pInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageMemoryRequirements2KHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetImageOpaqueCaptureDescriptorDataEXT(in ImageCaptureDescriptorDataInfoEXT pInfo, ref void* pData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageOpaqueCaptureDescriptorDataEXT(this, arg1, pData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetImageSparseMemoryRequirements(AdamantiumVulkan.Core.Image image, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements pSparseMemoryRequirements)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirementCount);
        var arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements(this, arg1, arg2, arg3);
        pSparseMemoryRequirementCount = *arg2;
        NativeUtils.Free(arg2);
        pSparseMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSparseMemoryRequirements2(in ImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirementCount);
        var arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements2(this, arg1, arg2, arg3);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSparseMemoryRequirementCount = *arg2;
        NativeUtils.Free(arg2);
        pSparseMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSparseMemoryRequirements2KHR(in ImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, SparseImageMemoryRequirements2 pSparseMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirementCount);
        var arg3 = ReferenceEquals(pSparseMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pSparseMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSparseMemoryRequirements2KHR(this, arg1, arg2, arg3);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSparseMemoryRequirementCount = *arg2;
        NativeUtils.Free(arg2);
        pSparseMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSubresourceLayout(AdamantiumVulkan.Core.Image image, in ImageSubresource pSubresource, SubresourceLayout pLayout)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pSubresource, null) ? null : NativeUtils.StructOrEnumToPointer(pSubresource.ToNative());
        var arg3 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSubresourceLayout(this, arg1, arg2, arg3);
        pSubresource?.Dispose();
        NativeUtils.Free(arg2);
        pLayout?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSubresourceLayout2(AdamantiumVulkan.Core.Image image, in ImageSubresource2 pSubresource, SubresourceLayout2 pLayout)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pSubresource, null) ? null : NativeUtils.StructOrEnumToPointer(pSubresource.ToNative());
        var arg3 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSubresourceLayout2(this, arg1, arg2, arg3);
        pSubresource?.Dispose();
        NativeUtils.Free(arg2);
        pLayout?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSubresourceLayout2EXT(AdamantiumVulkan.Core.Image image, in ImageSubresource2 pSubresource, SubresourceLayout2 pLayout)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pSubresource, null) ? null : NativeUtils.StructOrEnumToPointer(pSubresource.ToNative());
        var arg3 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSubresourceLayout2EXT(this, arg1, arg2, arg3);
        pSubresource?.Dispose();
        NativeUtils.Free(arg2);
        pLayout?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void GetImageSubresourceLayout2KHR(AdamantiumVulkan.Core.Image image, in ImageSubresource2 pSubresource, SubresourceLayout2 pLayout)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg2 = ReferenceEquals(pSubresource, null) ? null : NativeUtils.StructOrEnumToPointer(pSubresource.ToNative());
        var arg3 = ReferenceEquals(pLayout, null) ? null : NativeUtils.StructOrEnumToPointer(pLayout.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageSubresourceLayout2KHR(this, arg1, arg2, arg3);
        pSubresource?.Dispose();
        NativeUtils.Free(arg2);
        pLayout?.Dispose();
        NativeUtils.Free(arg3);
    }

    public Result GetImageViewAddressNVX(AdamantiumVulkan.Core.ImageView imageView, ImageViewAddressPropertiesNVX pProperties)
    {
        var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
        var arg2 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageViewAddressNVX(this, arg1, arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public ulong GetImageViewHandle64NVX(in ImageViewHandleInfoNVX pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageViewHandle64NVX(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public uint GetImageViewHandleNVX(in ImageViewHandleInfoNVX pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageViewHandleNVX(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetImageViewOpaqueCaptureDescriptorDataEXT(in ImageViewCaptureDescriptorDataInfoEXT pInfo, ref void* pData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetImageViewOpaqueCaptureDescriptorDataEXT(this, arg1, pData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetLatencyTimingsNV(AdamantiumVulkan.Core.SwapchainKHR swapchain, GetLatencyMarkerInfoNV pLatencyMarkerInfo)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pLatencyMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLatencyMarkerInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetLatencyTimingsNV(this, arg1, arg2);
        pLatencyMarkerInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetMemoryFdKHR(in MemoryGetFdInfoKHR pGetFdInfo, ref int pFd)
    {
        var arg1 = ReferenceEquals(pGetFdInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pGetFdInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pFd);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryFdKHR(this, arg1, arg2);
        pGetFdInfo?.Dispose();
        NativeUtils.Free(arg1);
        pFd = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetMemoryFdPropertiesKHR(ExternalMemoryHandleTypeFlagBits handleType, int fd, MemoryFdPropertiesKHR pMemoryFdProperties)
    {
        var arg3 = ReferenceEquals(pMemoryFdProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryFdProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryFdPropertiesKHR(this, handleType, fd, arg3);
        pMemoryFdProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetMemoryHostPointerPropertiesEXT(ExternalMemoryHandleTypeFlagBits handleType, in void* pHostPointer, MemoryHostPointerPropertiesEXT pMemoryHostPointerProperties)
    {
        var arg3 = ReferenceEquals(pMemoryHostPointerProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryHostPointerProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryHostPointerPropertiesEXT(this, handleType, pHostPointer, arg3);
        pMemoryHostPointerProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetMemoryRemoteAddressNV(in MemoryGetRemoteAddressInfoNV pMemoryGetRemoteAddressInfo, out AdamantiumVulkan.Core.RemoteAddressNV pAddress)
    {
        var arg1 = ReferenceEquals(pMemoryGetRemoteAddressInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryGetRemoteAddressInfo.ToNative());
        VkRemoteAddressNVImpl arg2;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMemoryRemoteAddressNV(this, arg1, out arg2);
        pMemoryGetRemoteAddressInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAddress = new RemoteAddressNV(arg2);
        return result;
    }

    public void GetMicromapBuildSizesEXT(AccelerationStructureBuildTypeKHR buildType, in MicromapBuildInfoEXT pBuildInfo, MicromapBuildSizesInfoEXT pSizeInfo)
    {
        var arg2 = ReferenceEquals(pBuildInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBuildInfo.ToNative());
        var arg3 = ReferenceEquals(pSizeInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSizeInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetMicromapBuildSizesEXT(this, buildType, arg2, arg3);
        pBuildInfo?.Dispose();
        NativeUtils.Free(arg2);
        pSizeInfo?.Dispose();
        NativeUtils.Free(arg3);
    }

    public Result GetPastPresentationTimingGOOGLE(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pPresentationTimingCount, PastPresentationTimingGOOGLE pPresentationTimings)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = NativeUtils.StructOrEnumToPointer(pPresentationTimingCount);
        var arg3 = ReferenceEquals(pPresentationTimings, null) ? null : NativeUtils.StructOrEnumToPointer(pPresentationTimings.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPastPresentationTimingGOOGLE(this, arg1, arg2, arg3);
        pPresentationTimingCount = *arg2;
        NativeUtils.Free(arg2);
        pPresentationTimings?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPerformanceParameterINTEL(PerformanceParameterTypeINTEL parameter, PerformanceValueINTEL pValue)
    {
        var arg2 = ReferenceEquals(pValue, null) ? null : NativeUtils.StructOrEnumToPointer(pValue.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPerformanceParameterINTEL(this, parameter, arg2);
        pValue?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPipelineBinaryDataKHR(in PipelineBinaryDataInfoKHR pInfo, PipelineBinaryKeyKHR pPipelineBinaryKey, ref ulong pPipelineBinaryDataSize, ref void* pPipelineBinaryData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pPipelineBinaryKey, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineBinaryKey.ToNative());
        var arg3 = NativeUtils.StructOrEnumToPointer(pPipelineBinaryDataSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineBinaryDataKHR(this, arg1, arg2, arg3, pPipelineBinaryData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pPipelineBinaryKey?.Dispose();
        NativeUtils.Free(arg2);
        pPipelineBinaryDataSize = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPipelineCacheData(AdamantiumVulkan.Core.PipelineCache pipelineCache, ref ulong pDataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(pipelineCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)pipelineCache;
        var arg2 = NativeUtils.StructOrEnumToPointer(pDataSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineCacheData(this, arg1, arg2, pData);
        pDataSize = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPipelineExecutableInternalRepresentationsKHR(in PipelineExecutableInfoKHR pExecutableInfo, ref uint pInternalRepresentationCount, PipelineExecutableInternalRepresentationKHR pInternalRepresentations)
    {
        var arg1 = ReferenceEquals(pExecutableInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExecutableInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pInternalRepresentationCount);
        var arg3 = ReferenceEquals(pInternalRepresentations, null) ? null : NativeUtils.StructOrEnumToPointer(pInternalRepresentations.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutableInternalRepresentationsKHR(this, arg1, arg2, arg3);
        pExecutableInfo?.Dispose();
        NativeUtils.Free(arg1);
        pInternalRepresentationCount = *arg2;
        NativeUtils.Free(arg2);
        pInternalRepresentations?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPipelineExecutablePropertiesKHR(in PipelineInfoKHR pPipelineInfo, ref uint pExecutableCount, PipelineExecutablePropertiesKHR pProperties)
    {
        var arg1 = ReferenceEquals(pPipelineInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pExecutableCount);
        var arg3 = ReferenceEquals(pProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutablePropertiesKHR(this, arg1, arg2, arg3);
        pPipelineInfo?.Dispose();
        NativeUtils.Free(arg1);
        pExecutableCount = *arg2;
        NativeUtils.Free(arg2);
        pProperties?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetPipelineExecutableStatisticsKHR(in PipelineExecutableInfoKHR pExecutableInfo, ref uint pStatisticCount, PipelineExecutableStatisticKHR pStatistics)
    {
        var arg1 = ReferenceEquals(pExecutableInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExecutableInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pStatisticCount);
        var arg3 = ReferenceEquals(pStatistics, null) ? null : NativeUtils.StructOrEnumToPointer(pStatistics.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineExecutableStatisticsKHR(this, arg1, arg2, arg3);
        pExecutableInfo?.Dispose();
        NativeUtils.Free(arg1);
        pStatisticCount = *arg2;
        NativeUtils.Free(arg2);
        pStatistics?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public VkDeviceAddress GetPipelineIndirectDeviceAddressNV(in PipelineIndirectDeviceAddressInfoNV pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineIndirectDeviceAddressNV(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void GetPipelineIndirectMemoryRequirementsNV(in ComputePipelineCreateInfo pCreateInfo, MemoryRequirements2 pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineIndirectMemoryRequirementsNV(this, arg1, arg2);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetPipelineKeyKHR(in PipelineCreateInfoKHR pPipelineCreateInfo, PipelineBinaryKeyKHR pPipelineKey)
    {
        var arg1 = ReferenceEquals(pPipelineCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pPipelineKey, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineKey.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelineKeyKHR(this, arg1, arg2);
        pPipelineCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pPipelineKey?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetPipelinePropertiesEXT(in PipelineInfoKHR pPipelineInfo, BaseOutStructure pPipelineProperties)
    {
        var arg1 = ReferenceEquals(pPipelineInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineInfo.ToNative());
        var arg2 = ReferenceEquals(pPipelineProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pPipelineProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPipelinePropertiesEXT(this, arg1, arg2);
        pPipelineInfo?.Dispose();
        NativeUtils.Free(arg1);
        pPipelineProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetPrivateData(ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, ref ulong pData)
    {
        var arg3 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        var arg4 = NativeUtils.StructOrEnumToPointer(pData);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPrivateData(this, objectType, objectHandle, arg3, arg4);
        pData = *arg4;
        NativeUtils.Free(arg4);
    }

    public void GetPrivateDataEXT(ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, ref ulong pData)
    {
        var arg3 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        var arg4 = NativeUtils.StructOrEnumToPointer(pData);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetPrivateDataEXT(this, objectType, objectHandle, arg3, arg4);
        pData = *arg4;
        NativeUtils.Free(arg4);
    }

    public Result GetQueryPoolResults(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount, ulong dataSize, ref void* pData, VkDeviceSize stride, VkQueryResultFlags flags)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetQueryPoolResults(this, arg1, firstQuery, queryCount, dataSize, pData, stride, flags);
    }

    public Result GetRayTracingCaptureReplayShaderGroupHandlesKHR(AdamantiumVulkan.Core.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(this, arg1, firstGroup, groupCount, dataSize, pData);
    }

    public Result GetRayTracingShaderGroupHandlesKHR(AdamantiumVulkan.Core.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRayTracingShaderGroupHandlesKHR(this, arg1, firstGroup, groupCount, dataSize, pData);
    }

    public Result GetRayTracingShaderGroupHandlesNV(AdamantiumVulkan.Core.Pipeline pipeline, uint firstGroup, uint groupCount, ulong dataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRayTracingShaderGroupHandlesNV(this, arg1, firstGroup, groupCount, dataSize, pData);
    }

    public VkDeviceSize GetRayTracingShaderGroupStackSizeKHR(AdamantiumVulkan.Core.Pipeline pipeline, uint group, ShaderGroupShaderKHR groupShader)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRayTracingShaderGroupStackSizeKHR(this, arg1, group, groupShader);
    }

    public Result GetRefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.SwapchainKHR swapchain, RefreshCycleDurationGOOGLE pDisplayTimingProperties)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pDisplayTimingProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pDisplayTimingProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRefreshCycleDurationGOOGLE(this, arg1, arg2);
        pDisplayTimingProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void GetRenderAreaGranularity(AdamantiumVulkan.Core.RenderPass renderPass, Extent2D pGranularity)
    {
        var arg1 = ReferenceEquals(renderPass, null) ? new VkRenderPass_T() : (VkRenderPass_T)renderPass;
        var arg2 = ReferenceEquals(pGranularity, null) ? null : NativeUtils.StructOrEnumToPointer(pGranularity.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRenderAreaGranularity(this, arg1, arg2);
        pGranularity?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetRenderingAreaGranularity(in RenderingAreaInfo pRenderingAreaInfo, Extent2D pGranularity)
    {
        var arg1 = ReferenceEquals(pRenderingAreaInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderingAreaInfo.ToNative());
        var arg2 = ReferenceEquals(pGranularity, null) ? null : NativeUtils.StructOrEnumToPointer(pGranularity.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRenderingAreaGranularity(this, arg1, arg2);
        pRenderingAreaInfo?.Dispose();
        NativeUtils.Free(arg1);
        pGranularity?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetRenderingAreaGranularityKHR(in RenderingAreaInfo pRenderingAreaInfo, Extent2D pGranularity)
    {
        var arg1 = ReferenceEquals(pRenderingAreaInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderingAreaInfo.ToNative());
        var arg2 = ReferenceEquals(pGranularity, null) ? null : NativeUtils.StructOrEnumToPointer(pGranularity.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetRenderingAreaGranularityKHR(this, arg1, arg2);
        pRenderingAreaInfo?.Dispose();
        NativeUtils.Free(arg1);
        pGranularity?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetSamplerOpaqueCaptureDescriptorDataEXT(in SamplerCaptureDescriptorDataInfoEXT pInfo, ref void* pData)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSamplerOpaqueCaptureDescriptorDataEXT(this, arg1, pData);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result GetSemaphoreCounterValue(AdamantiumVulkan.Core.Semaphore semaphore, ref ulong pValue)
    {
        var arg1 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
        var arg2 = NativeUtils.StructOrEnumToPointer(pValue);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSemaphoreCounterValue(this, arg1, arg2);
        pValue = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetSemaphoreCounterValueKHR(AdamantiumVulkan.Core.Semaphore semaphore, ref ulong pValue)
    {
        var arg1 = ReferenceEquals(semaphore, null) ? new VkSemaphore_T() : (VkSemaphore_T)semaphore;
        var arg2 = NativeUtils.StructOrEnumToPointer(pValue);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSemaphoreCounterValueKHR(this, arg1, arg2);
        pValue = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetSemaphoreFdKHR(in SemaphoreGetFdInfoKHR pGetFdInfo, ref int pFd)
    {
        var arg1 = ReferenceEquals(pGetFdInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pGetFdInfo.ToNative());
        var arg2 = NativeUtils.StructOrEnumToPointer(pFd);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSemaphoreFdKHR(this, arg1, arg2);
        pGetFdInfo?.Dispose();
        NativeUtils.Free(arg1);
        pFd = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetShaderBinaryDataEXT(AdamantiumVulkan.Core.ShaderEXT shader, ref ulong pDataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(shader, null) ? new VkShaderEXT_T() : (VkShaderEXT_T)shader;
        var arg2 = NativeUtils.StructOrEnumToPointer(pDataSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetShaderBinaryDataEXT(this, arg1, arg2, pData);
        pDataSize = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetShaderInfoAMD(AdamantiumVulkan.Core.Pipeline pipeline, ShaderStageFlagBits shaderStage, ShaderInfoTypeAMD infoType, ref ulong pInfoSize, ref void* pInfo)
    {
        var arg1 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        var arg4 = NativeUtils.StructOrEnumToPointer(pInfoSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetShaderInfoAMD(this, arg1, shaderStage, infoType, arg4, pInfo);
        pInfoSize = *arg4;
        NativeUtils.Free(arg4);
        return result;
    }

    public void GetShaderModuleCreateInfoIdentifierEXT(in ShaderModuleCreateInfo pCreateInfo, ShaderModuleIdentifierEXT pIdentifier)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pIdentifier, null) ? null : NativeUtils.StructOrEnumToPointer(pIdentifier.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetShaderModuleCreateInfoIdentifierEXT(this, arg1, arg2);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pIdentifier?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetShaderModuleIdentifierEXT(AdamantiumVulkan.Core.ShaderModule shaderModule, ShaderModuleIdentifierEXT pIdentifier)
    {
        var arg1 = ReferenceEquals(shaderModule, null) ? new VkShaderModule_T() : (VkShaderModule_T)shaderModule;
        var arg2 = ReferenceEquals(pIdentifier, null) ? null : NativeUtils.StructOrEnumToPointer(pIdentifier.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetShaderModuleIdentifierEXT(this, arg1, arg2);
        pIdentifier?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result GetSwapchainCounterEXT(AdamantiumVulkan.Core.SwapchainKHR swapchain, SurfaceCounterFlagBitsEXT counter, ref ulong pCounterValue)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg3 = NativeUtils.StructOrEnumToPointer(pCounterValue);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainCounterEXT(this, arg1, counter, arg3);
        pCounterValue = *arg3;
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetSwapchainImagesKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pSwapchainImageCount, AdamantiumVulkan.Core.Image[] pSwapchainImages)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = NativeUtils.StructOrEnumToPointer(pSwapchainImageCount);
        var arg3 = ReferenceEquals(pSwapchainImages, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkImage_T>(pSwapchainImages.Length);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainImagesKHR(this, arg1, arg2, arg3);
        pSwapchainImageCount = *arg2;
        NativeUtils.Free(arg2);
        if (!ReferenceEquals(pSwapchainImages, null))
        {
            for (var i = 0U; i < pSwapchainImages.Length; ++i)
            {
                pSwapchainImages[i] = new Image(arg3[i]);
            }
        }
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetSwapchainImagesKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ref uint pSwapchainImageCount, ref AdamantiumVulkan.Core.Image pSwapchainImages)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = NativeUtils.StructOrEnumToPointer(pSwapchainImageCount);
        var arg3 = ReferenceEquals(pSwapchainImages, null) ? null : NativeUtils.StructOrEnumToPointer((VkImage_T)pSwapchainImages);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainImagesKHR(this, arg1, arg2, arg3);
        pSwapchainImageCount = *arg2;
        NativeUtils.Free(arg2);
        if (arg3 is not null)
        {
            pSwapchainImages = *arg3;
        }
        NativeUtils.Free(arg3);
        return result;
    }

    public Result GetSwapchainStatusKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetSwapchainStatusKHR(this, arg1);
    }

    public Result GetValidationCacheDataEXT(AdamantiumVulkan.Core.ValidationCacheEXT validationCache, ref ulong pDataSize, ref void* pData)
    {
        var arg1 = ReferenceEquals(validationCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)validationCache;
        var arg2 = NativeUtils.StructOrEnumToPointer(pDataSize);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetValidationCacheDataEXT(this, arg1, arg2, pData);
        pDataSize = *arg2;
        NativeUtils.Free(arg2);
        return result;
    }

    public Result GetVideoSessionMemoryRequirementsKHR(AdamantiumVulkan.Core.VideoSessionKHR videoSession, ref uint pMemoryRequirementsCount, VideoSessionMemoryRequirementsKHR pMemoryRequirements)
    {
        var arg1 = ReferenceEquals(videoSession, null) ? new VkVideoSessionKHR_T() : (VkVideoSessionKHR_T)videoSession;
        var arg2 = NativeUtils.StructOrEnumToPointer(pMemoryRequirementsCount);
        var arg3 = ReferenceEquals(pMemoryRequirements, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRequirements.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetVideoSessionMemoryRequirementsKHR(this, arg1, arg2, arg3);
        pMemoryRequirementsCount = *arg2;
        NativeUtils.Free(arg2);
        pMemoryRequirements?.Dispose();
        NativeUtils.Free(arg3);
        return result;
    }

    public Result ImportFenceFdKHR(in ImportFenceFdInfoKHR pImportFenceFdInfo)
    {
        var arg1 = ReferenceEquals(pImportFenceFdInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pImportFenceFdInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkImportFenceFdKHR(this, arg1);
        pImportFenceFdInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result ImportSemaphoreFdKHR(in ImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo)
    {
        var arg1 = ReferenceEquals(pImportSemaphoreFdInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pImportSemaphoreFdInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkImportSemaphoreFdKHR(this, arg1);
        pImportSemaphoreFdInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result InitializePerformanceApiINTEL(in InitializePerformanceApiInfoINTEL pInitializeInfo)
    {
        var arg1 = ReferenceEquals(pInitializeInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInitializeInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkInitializePerformanceApiINTEL(this, arg1);
        pInitializeInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result InvalidateMappedMemoryRanges(uint memoryRangeCount, in MappedMemoryRange pMemoryRanges)
    {
        var arg2 = ReferenceEquals(pMemoryRanges, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryRanges.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkInvalidateMappedMemoryRanges(this, memoryRangeCount, arg2);
        pMemoryRanges?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result LatencySleepNV(AdamantiumVulkan.Core.SwapchainKHR swapchain, in LatencySleepInfoNV pSleepInfo)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pSleepInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSleepInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkLatencySleepNV(this, arg1, arg2);
        pSleepInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result MapMemory(AdamantiumVulkan.Core.DeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, out void* ppData)
    {
        var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkMapMemory(this, arg1, offset, size, flags, out ppData);
    }

    public Result MapMemory2(in MemoryMapInfo pMemoryMapInfo, out void* ppData)
    {
        var arg1 = ReferenceEquals(pMemoryMapInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryMapInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMapMemory2(this, arg1, out ppData);
        pMemoryMapInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result MapMemory2KHR(in MemoryMapInfo pMemoryMapInfo, out void* ppData)
    {
        var arg1 = ReferenceEquals(pMemoryMapInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryMapInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMapMemory2KHR(this, arg1, out ppData);
        pMemoryMapInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result MergePipelineCaches(AdamantiumVulkan.Core.PipelineCache dstCache, uint srcCacheCount, in AdamantiumVulkan.Core.PipelineCache pSrcCaches)
    {
        var arg1 = ReferenceEquals(dstCache, null) ? new VkPipelineCache_T() : (VkPipelineCache_T)dstCache;
        var arg3 = ReferenceEquals(pSrcCaches, null) ? null : NativeUtils.StructOrEnumToPointer((VkPipelineCache_T)pSrcCaches);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMergePipelineCaches(this, arg1, srcCacheCount, arg3);
        NativeUtils.Free(arg3);
        return result;
    }

    public Result MergeValidationCachesEXT(AdamantiumVulkan.Core.ValidationCacheEXT dstCache, uint srcCacheCount, in AdamantiumVulkan.Core.ValidationCacheEXT pSrcCaches)
    {
        var arg1 = ReferenceEquals(dstCache, null) ? new VkValidationCacheEXT_T() : (VkValidationCacheEXT_T)dstCache;
        var arg3 = ReferenceEquals(pSrcCaches, null) ? null : NativeUtils.StructOrEnumToPointer((VkValidationCacheEXT_T)pSrcCaches);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkMergeValidationCachesEXT(this, arg1, srcCacheCount, arg3);
        NativeUtils.Free(arg3);
        return result;
    }

    public Result RegisterDeviceEventEXT(in DeviceEventInfoEXT pDeviceEventInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
    {
        var arg1 = ReferenceEquals(pDeviceEventInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDeviceEventInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkFence_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkRegisterDeviceEventEXT(this, arg1, arg2, out arg3);
        pDeviceEventInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pFence = new Fence(arg3);
        return result;
    }

    public Result RegisterDisplayEventEXT(AdamantiumVulkan.Core.DisplayKHR display, in DisplayEventInfoEXT pDisplayEventInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.Fence pFence)
    {
        var arg1 = ReferenceEquals(display, null) ? new VkDisplayKHR_T() : (VkDisplayKHR_T)display;
        var arg2 = ReferenceEquals(pDisplayEventInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDisplayEventInfo.ToNative());
        var arg3 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkFence_T arg4;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkRegisterDisplayEventEXT(this, arg1, arg2, arg3, out arg4);
        pDisplayEventInfo?.Dispose();
        NativeUtils.Free(arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg3);
        pFence = new Fence(arg4);
        return result;
    }

    public Result ReleaseCapturedPipelineDataKHR(in ReleaseCapturedPipelineDataInfoKHR pInfo, in AllocationCallbacks pAllocator)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleaseCapturedPipelineDataKHR(this, arg1, arg2);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result ReleasePerformanceConfigurationINTEL(AdamantiumVulkan.Core.PerformanceConfigurationINTEL configuration)
    {
        var arg1 = ReferenceEquals(configuration, null) ? new VkPerformanceConfigurationINTEL_T() : (VkPerformanceConfigurationINTEL_T)configuration;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleasePerformanceConfigurationINTEL(this, arg1);
    }

    public void ReleaseProfilingLockKHR()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleaseProfilingLockKHR(this);
    }

    public Result ReleaseSwapchainImagesEXT(in ReleaseSwapchainImagesInfoEXT pReleaseInfo)
    {
        var arg1 = ReferenceEquals(pReleaseInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pReleaseInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkReleaseSwapchainImagesEXT(this, arg1);
        pReleaseInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result ResetCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, VkCommandPoolResetFlags flags)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetCommandPool(this, arg1, flags);
    }

    public Result ResetDescriptorPool(AdamantiumVulkan.Core.DescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
    {
        var arg1 = ReferenceEquals(descriptorPool, null) ? new VkDescriptorPool_T() : (VkDescriptorPool_T)descriptorPool;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetDescriptorPool(this, arg1, flags);
    }

    public Result ResetEvent(AdamantiumVulkan.Core.Event @event)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetEvent(this, arg1);
    }

    public Result ResetFences(uint fenceCount, params AdamantiumVulkan.Core.Fence[] pFences)
    {
         var arg2 = ReferenceEquals(pFences, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkFence_T>(pFences.Length);
        if (!ReferenceEquals(pFences, null))
        {
            for (var i = 0U; i < pFences.Length; ++i)
            {
                arg2[i] = pFences[i];
            }
        }
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetFences(this, fenceCount, arg2);
    }

    public Result ResetFences(uint fenceCount, AdamantiumVulkan.Core.Fence pFences)
    {
        var arg2 = ReferenceEquals(pFences, null) ? null : NativeUtils.StructOrEnumToPointer((VkFence_T)pFences);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetFences(this, fenceCount, arg2);
        NativeUtils.Free(arg2);
        return result;
    }

    public void ResetQueryPool(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetQueryPool(this, arg1, firstQuery, queryCount);
    }

    public void ResetQueryPoolEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetQueryPoolEXT(this, arg1, firstQuery, queryCount);
    }

    public Result SetDebugUtilsObjectNameEXT(in DebugUtilsObjectNameInfoEXT pNameInfo)
    {
        var arg1 = ReferenceEquals(pNameInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pNameInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetDebugUtilsObjectNameEXT(this, arg1);
        pNameInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result SetDebugUtilsObjectTagEXT(in DebugUtilsObjectTagInfoEXT pTagInfo)
    {
        var arg1 = ReferenceEquals(pTagInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pTagInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetDebugUtilsObjectTagEXT(this, arg1);
        pTagInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void SetDeviceMemoryPriorityEXT(AdamantiumVulkan.Core.DeviceMemory memory, float priority)
    {
        var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetDeviceMemoryPriorityEXT(this, arg1, priority);
    }

    public Result SetEvent(AdamantiumVulkan.Core.Event @event)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetEvent(this, arg1);
    }

    public void SetHdrMetadataEXT(uint swapchainCount, in AdamantiumVulkan.Core.SwapchainKHR pSwapchains, in HdrMetadataEXT pMetadata)
    {
        var arg2 = ReferenceEquals(pSwapchains, null) ? null : NativeUtils.StructOrEnumToPointer((VkSwapchainKHR_T)pSwapchains);
        var arg3 = ReferenceEquals(pMetadata, null) ? null : NativeUtils.StructOrEnumToPointer(pMetadata.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetHdrMetadataEXT(this, swapchainCount, arg2, arg3);
        NativeUtils.Free(arg2);
        pMetadata?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void SetLatencyMarkerNV(AdamantiumVulkan.Core.SwapchainKHR swapchain, in SetLatencyMarkerInfoNV pLatencyMarkerInfo)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pLatencyMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLatencyMarkerInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetLatencyMarkerNV(this, arg1, arg2);
        pLatencyMarkerInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result SetLatencySleepModeNV(AdamantiumVulkan.Core.SwapchainKHR swapchain, in LatencySleepModeInfoNV pSleepModeInfo)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        var arg2 = ReferenceEquals(pSleepModeInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSleepModeInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetLatencySleepModeNV(this, arg1, arg2);
        pSleepModeInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void SetLocalDimmingAMD(AdamantiumVulkan.Core.SwapchainKHR swapChain, VkBool32 localDimmingEnable)
    {
        var arg1 = ReferenceEquals(swapChain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapChain;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetLocalDimmingAMD(this, arg1, localDimmingEnable);
    }

    public Result SetPrivateData(ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, ulong data)
    {
        var arg3 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetPrivateData(this, objectType, objectHandle, arg3, data);
    }

    public Result SetPrivateDataEXT(ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.PrivateDataSlot privateDataSlot, ulong data)
    {
        var arg3 = ReferenceEquals(privateDataSlot, null) ? new VkPrivateDataSlot_T() : (VkPrivateDataSlot_T)privateDataSlot;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkSetPrivateDataEXT(this, objectType, objectHandle, arg3, data);
    }

    public Result SignalSemaphore(in SemaphoreSignalInfo pSignalInfo)
    {
        var arg1 = ReferenceEquals(pSignalInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSignalInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSignalSemaphore(this, arg1);
        pSignalInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result SignalSemaphoreKHR(in SemaphoreSignalInfo pSignalInfo)
    {
        var arg1 = ReferenceEquals(pSignalInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSignalInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkSignalSemaphoreKHR(this, arg1);
        pSignalInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result TransitionImageLayout(uint transitionCount, in HostImageLayoutTransitionInfo pTransitions)
    {
        var arg2 = ReferenceEquals(pTransitions, null) ? null : NativeUtils.StructOrEnumToPointer(pTransitions.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkTransitionImageLayout(this, transitionCount, arg2);
        pTransitions?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result TransitionImageLayoutEXT(uint transitionCount, in HostImageLayoutTransitionInfo pTransitions)
    {
        var arg2 = ReferenceEquals(pTransitions, null) ? null : NativeUtils.StructOrEnumToPointer(pTransitions.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkTransitionImageLayoutEXT(this, transitionCount, arg2);
        pTransitions?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void TrimCommandPool(AdamantiumVulkan.Core.CommandPool commandPool, VkCommandPoolTrimFlags flags)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkTrimCommandPool(this, arg1, flags);
    }

    public void TrimCommandPoolKHR(AdamantiumVulkan.Core.CommandPool commandPool, VkCommandPoolTrimFlags flags)
    {
        var arg1 = ReferenceEquals(commandPool, null) ? new VkCommandPool_T() : (VkCommandPool_T)commandPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkTrimCommandPoolKHR(this, arg1, flags);
    }

    public void UninitializePerformanceApiINTEL()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUninitializePerformanceApiINTEL(this);
    }

    public void UnmapMemory(AdamantiumVulkan.Core.DeviceMemory memory)
    {
        var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUnmapMemory(this, arg1);
    }

    public Result UnmapMemory2(in MemoryUnmapInfo pMemoryUnmapInfo)
    {
        var arg1 = ReferenceEquals(pMemoryUnmapInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryUnmapInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkUnmapMemory2(this, arg1);
        pMemoryUnmapInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result UnmapMemory2KHR(in MemoryUnmapInfo pMemoryUnmapInfo)
    {
        var arg1 = ReferenceEquals(pMemoryUnmapInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryUnmapInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkUnmapMemory2KHR(this, arg1);
        pMemoryUnmapInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void UpdateDescriptorSets(uint descriptorWriteCount, in WriteDescriptorSet[] pDescriptorWrites, uint descriptorCopyCount, out CopyDescriptorSet[] pDescriptorCopies)
    {
        var arg2 = ReferenceEquals(pDescriptorWrites, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet>(descriptorWriteCount);
        if (!ReferenceEquals(pDescriptorWrites, null))
        {
            for (var i = 0U; i < descriptorWriteCount; ++i)
            {
                arg2[i] = pDescriptorWrites[i].ToNative();
            }
        }
        AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet* arg4 = null;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSets(this, descriptorWriteCount, arg2, descriptorCopyCount, arg4);
        if (!ReferenceEquals(pDescriptorWrites, null))
        {
            for (var i = 0U; i < descriptorWriteCount; ++i)
            {
                pDescriptorWrites[i]?.Dispose();
            }
        }
        var _pDescriptorCopies = NativeUtils.PointerToManagedArray(arg4, (long)descriptorCopyCount);
        pDescriptorCopies = new AdamantiumVulkan.Core.CopyDescriptorSet[descriptorCopyCount];
        for (var i = 0U; i< descriptorCopyCount; ++i)
        {
            pDescriptorCopies[i] = new AdamantiumVulkan.Core.CopyDescriptorSet(_pDescriptorCopies[i]);
        }
    }

    public void UpdateDescriptorSets(uint descriptorWriteCount, in WriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, out CopyDescriptorSet[] pDescriptorCopies)
    {
        var arg2 = ReferenceEquals(pDescriptorWrites, null) ? null : NativeUtils.StructOrEnumToPointer(pDescriptorWrites.ToNative());
        AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet* arg4 = null;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSets(this, descriptorWriteCount, arg2, descriptorCopyCount, arg4);
        pDescriptorWrites?.Dispose();
        NativeUtils.Free(arg2);
        var _pDescriptorCopies = NativeUtils.PointerToManagedArray(arg4, (long)descriptorCopyCount);
        pDescriptorCopies = new AdamantiumVulkan.Core.CopyDescriptorSet[descriptorCopyCount];
        for (var i = 0U; i< descriptorCopyCount; ++i)
        {
            pDescriptorCopies[i] = new AdamantiumVulkan.Core.CopyDescriptorSet(_pDescriptorCopies[i]);
        }
    }

    public void UpdateDescriptorSetWithTemplate(AdamantiumVulkan.Core.DescriptorSet descriptorSet, AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in void* pData)
    {
        var arg1 = ReferenceEquals(descriptorSet, null) ? new VkDescriptorSet_T() : (VkDescriptorSet_T)descriptorSet;
        var arg2 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSetWithTemplate(this, arg1, arg2, pData);
    }

    public void UpdateDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.DescriptorSet descriptorSet, AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, in void* pData)
    {
        var arg1 = ReferenceEquals(descriptorSet, null) ? new VkDescriptorSet_T() : (VkDescriptorSet_T)descriptorSet;
        var arg2 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateDescriptorSetWithTemplateKHR(this, arg1, arg2, pData);
    }

    public void UpdateIndirectExecutionSetPipelineEXT(AdamantiumVulkan.Core.IndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, in WriteIndirectExecutionSetPipelineEXT pExecutionSetWrites)
    {
        var arg1 = ReferenceEquals(indirectExecutionSet, null) ? new VkIndirectExecutionSetEXT_T() : (VkIndirectExecutionSetEXT_T)indirectExecutionSet;
        var arg3 = ReferenceEquals(pExecutionSetWrites, null) ? null : NativeUtils.StructOrEnumToPointer(pExecutionSetWrites.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateIndirectExecutionSetPipelineEXT(this, arg1, executionSetWriteCount, arg3);
        pExecutionSetWrites?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void UpdateIndirectExecutionSetShaderEXT(AdamantiumVulkan.Core.IndirectExecutionSetEXT indirectExecutionSet, uint executionSetWriteCount, in WriteIndirectExecutionSetShaderEXT pExecutionSetWrites)
    {
        var arg1 = ReferenceEquals(indirectExecutionSet, null) ? new VkIndirectExecutionSetEXT_T() : (VkIndirectExecutionSetEXT_T)indirectExecutionSet;
        var arg3 = ReferenceEquals(pExecutionSetWrites, null) ? null : NativeUtils.StructOrEnumToPointer(pExecutionSetWrites.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateIndirectExecutionSetShaderEXT(this, arg1, executionSetWriteCount, arg3);
        pExecutionSetWrites?.Dispose();
        NativeUtils.Free(arg3);
    }

    public Result UpdateVideoSessionParametersKHR(AdamantiumVulkan.Core.VideoSessionParametersKHR videoSessionParameters, in VideoSessionParametersUpdateInfoKHR pUpdateInfo)
    {
        var arg1 = ReferenceEquals(videoSessionParameters, null) ? new VkVideoSessionParametersKHR_T() : (VkVideoSessionParametersKHR_T)videoSessionParameters;
        var arg2 = ReferenceEquals(pUpdateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pUpdateInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkUpdateVideoSessionParametersKHR(this, arg1, arg2);
        pUpdateInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result WaitForFences(uint fenceCount, AdamantiumVulkan.Core.Fence[] pFences, VkBool32 waitAll, ulong timeout)
    {
         var arg2 = ReferenceEquals(pFences, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkFence_T>(pFences.Length);
        if (!ReferenceEquals(pFences, null))
        {
            for (var i = 0U; i < pFences.Length; ++i)
            {
                arg2[i] = pFences[i];
            }
        }
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitForFences(this, fenceCount, arg2, waitAll, timeout);
    }

    public Result WaitForFences(uint fenceCount, AdamantiumVulkan.Core.Fence pFences, VkBool32 waitAll, ulong timeout)
    {
        var arg2 = ReferenceEquals(pFences, null) ? null : NativeUtils.StructOrEnumToPointer((VkFence_T)pFences);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitForFences(this, fenceCount, arg2, waitAll, timeout);
        NativeUtils.Free(arg2);
        return result;
    }

    public Result WaitForPresentKHR(AdamantiumVulkan.Core.SwapchainKHR swapchain, ulong presentId, ulong timeout)
    {
        var arg1 = ReferenceEquals(swapchain, null) ? new VkSwapchainKHR_T() : (VkSwapchainKHR_T)swapchain;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitForPresentKHR(this, arg1, presentId, timeout);
    }

    public Result WaitSemaphores(in SemaphoreWaitInfo pWaitInfo, ulong timeout)
    {
        var arg1 = ReferenceEquals(pWaitInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pWaitInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitSemaphores(this, arg1, timeout);
        pWaitInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result WaitSemaphoresKHR(in SemaphoreWaitInfo pWaitInfo, ulong timeout)
    {
        var arg1 = ReferenceEquals(pWaitInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pWaitInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWaitSemaphoresKHR(this, arg1, timeout);
        pWaitInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, in AdamantiumVulkan.Core.AccelerationStructureKHR pAccelerationStructures, QueryType queryType, ulong dataSize, ref void* pData, ulong stride)
    {
        var arg2 = ReferenceEquals(pAccelerationStructures, null) ? null : NativeUtils.StructOrEnumToPointer((VkAccelerationStructureKHR_T)pAccelerationStructures);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWriteAccelerationStructuresPropertiesKHR(this, accelerationStructureCount, arg2, queryType, dataSize, pData, stride);
        NativeUtils.Free(arg2);
        return result;
    }

    public Result WriteMicromapsPropertiesEXT(uint micromapCount, in AdamantiumVulkan.Core.MicromapEXT pMicromaps, QueryType queryType, ulong dataSize, ref void* pData, ulong stride)
    {
        var arg2 = ReferenceEquals(pMicromaps, null) ? null : NativeUtils.StructOrEnumToPointer((VkMicromapEXT_T)pMicromaps);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkWriteMicromapsPropertiesEXT(this, micromapCount, arg2, queryType, dataSize, pData, stride);
        NativeUtils.Free(arg2);
        return result;
    }

    public ref readonly VkDevice_T GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Core.Interop.VkDevice_T(Device d)
    {
        return d?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkDevice_T();
    }

    public static implicit operator Device(AdamantiumVulkan.Core.Interop.VkDevice_T d)
    {
        return new Device(d);
    }

}



