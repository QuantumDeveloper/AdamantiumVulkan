// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class CommandBuffer
{
    internal VkCommandBuffer_T __Instance;
    public CommandBuffer()
    {
    }

    public CommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T __Instance)
    {
        this.__Instance = __Instance;
    }

    public void* NativePointer => __Instance.pointer;

    public Result BeginCommandBuffer(in CommandBufferBeginInfo pBeginInfo)
    {
        var arg1 = ReferenceEquals(pBeginInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBeginInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkBeginCommandBuffer(this, arg1);
        pBeginInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void BeginConditionalRenderingEXT(in ConditionalRenderingBeginInfoEXT pConditionalRenderingBegin)
    {
        var arg1 = ReferenceEquals(pConditionalRenderingBegin, null) ? null : NativeUtils.StructOrEnumToPointer(pConditionalRenderingBegin.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginConditionalRenderingEXT(this, arg1);
        pConditionalRenderingBegin?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BeginDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
    {
        var arg1 = ReferenceEquals(pLabelInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLabelInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginDebugUtilsLabelEXT(this, arg1);
        pLabelInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BeginQuery(AdamantiumVulkan.Core.QueryPool queryPool, uint query, VkQueryControlFlags flags)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginQuery(this, arg1, query, flags);
    }

    public void BeginQueryIndexedEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint query, VkQueryControlFlags flags, uint index)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginQueryIndexedEXT(this, arg1, query, flags, index);
    }

    public void BeginRendering(in RenderingInfo pRenderingInfo)
    {
        var arg1 = ReferenceEquals(pRenderingInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderingInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRendering(this, arg1);
        pRenderingInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BeginRenderingKHR(in RenderingInfo pRenderingInfo)
    {
        var arg1 = ReferenceEquals(pRenderingInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderingInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderingKHR(this, arg1);
        pRenderingInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BeginRenderPass(in RenderPassBeginInfo pRenderPassBegin, SubpassContents contents)
    {
        var arg1 = ReferenceEquals(pRenderPassBegin, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderPassBegin.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderPass(this, arg1, contents);
        pRenderPassBegin?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BeginRenderPass2(in RenderPassBeginInfo pRenderPassBegin, in SubpassBeginInfo pSubpassBeginInfo)
    {
        var arg1 = ReferenceEquals(pRenderPassBegin, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderPassBegin.ToNative());
        var arg2 = ReferenceEquals(pSubpassBeginInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassBeginInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderPass2(this, arg1, arg2);
        pRenderPassBegin?.Dispose();
        NativeUtils.Free(arg1);
        pSubpassBeginInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void BeginRenderPass2KHR(in RenderPassBeginInfo pRenderPassBegin, in SubpassBeginInfo pSubpassBeginInfo)
    {
        var arg1 = ReferenceEquals(pRenderPassBegin, null) ? null : NativeUtils.StructOrEnumToPointer(pRenderPassBegin.ToNative());
        var arg2 = ReferenceEquals(pSubpassBeginInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassBeginInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginRenderPass2KHR(this, arg1, arg2);
        pRenderPassBegin?.Dispose();
        NativeUtils.Free(arg1);
        pSubpassBeginInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void BeginTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ulong[] pCounterBufferOffsets)
    {
        var arg3 = ReferenceEquals(pCounterBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pCounterBuffers);
        var arg4 = NativeUtils.ManagedArrayToPointer(pCounterBufferOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg3, arg4);
        NativeUtils.Free(arg3);
        if (!ReferenceEquals(pCounterBufferOffsets, null))
        {
            for (var i = 0U; i < pCounterBufferOffsets.Length; ++i)
            {
                pCounterBufferOffsets[i] = arg4[i];
            }
        }
        NativeUtils.Free(arg4);
    }

    public void BeginTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ref ulong pCounterBufferOffsets)
    {
        var arg3 = ReferenceEquals(pCounterBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pCounterBuffers);
        var arg4 = NativeUtils.StructOrEnumToPointer(pCounterBufferOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBeginTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg3, arg4);
        NativeUtils.Free(arg3);
        pCounterBufferOffsets = *arg4;
        NativeUtils.Free(arg4);
    }

    public void BindDescriptorBufferEmbeddedSamplersEXT(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint set)
    {
        var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindDescriptorBufferEmbeddedSamplersEXT(this, pipelineBindPoint, arg2, set);
    }

    public void BindDescriptorBuffersEXT(uint bufferCount, in DescriptorBufferBindingInfoEXT pBindingInfos)
    {
        var arg2 = ReferenceEquals(pBindingInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pBindingInfos.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindDescriptorBuffersEXT(this, bufferCount, arg2);
        pBindingInfos?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void BindDescriptorSets(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint firstSet, uint descriptorSetCount, in AdamantiumVulkan.Core.DescriptorSet pDescriptorSets, uint dynamicOffsetCount, in uint pDynamicOffsets)
    {
        var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        var arg5 = ReferenceEquals(pDescriptorSets, null) ? null : NativeUtils.StructOrEnumToPointer((VkDescriptorSet_T)pDescriptorSets);
        var arg7 = NativeUtils.StructOrEnumToPointer(pDynamicOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindDescriptorSets(this, pipelineBindPoint, arg2, firstSet, descriptorSetCount, arg5, dynamicOffsetCount, arg7);
        NativeUtils.Free(arg5);
    }

    public void BindIndexBuffer(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, IndexType indexType)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindIndexBuffer(this, arg1, offset, indexType);
    }

    public void BindInvocationMaskHUAWEI(AdamantiumVulkan.Core.ImageView imageView, ImageLayout imageLayout)
    {
        var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindInvocationMaskHUAWEI(this, arg1, imageLayout);
    }

    public void BindPipeline(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Pipeline pipeline)
    {
        var arg2 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindPipeline(this, pipelineBindPoint, arg2);
    }

    public void BindPipelineShaderGroupNV(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Pipeline pipeline, uint groupIndex)
    {
        var arg2 = ReferenceEquals(pipeline, null) ? new VkPipeline_T() : (VkPipeline_T)pipeline;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindPipelineShaderGroupNV(this, pipelineBindPoint, arg2, groupIndex);
    }

    public void BindShadingRateImageNV(AdamantiumVulkan.Core.ImageView imageView, ImageLayout imageLayout)
    {
        var arg1 = ReferenceEquals(imageView, null) ? new VkImageView_T() : (VkImageView_T)imageView;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindShadingRateImageNV(this, arg1, imageLayout);
    }

    public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ulong[] pOffsets, ulong[] pSizes)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = NativeUtils.ManagedArrayToPointer(pOffsets);
        var arg5 = NativeUtils.ManagedArrayToPointer(pSizes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg3, arg4, arg5);
        NativeUtils.Free(arg3);
        if (!ReferenceEquals(pOffsets, null))
        {
            for (var i = 0U; i < pOffsets.Length; ++i)
            {
                pOffsets[i] = arg4[i];
            }
        }
        NativeUtils.Free(arg4);
        if (!ReferenceEquals(pSizes, null))
        {
            for (var i = 0U; i < pSizes.Length; ++i)
            {
                pSizes[i] = arg5[i];
            }
        }
        NativeUtils.Free(arg5);
    }

    public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ref ulong pOffsets, ulong[] pSizes)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = NativeUtils.StructOrEnumToPointer(pOffsets);
        var arg5 = NativeUtils.ManagedArrayToPointer(pSizes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg3, arg4, arg5);
        NativeUtils.Free(arg3);
        pOffsets = *arg4;
        NativeUtils.Free(arg4);
        if (!ReferenceEquals(pSizes, null))
        {
            for (var i = 0U; i < pSizes.Length; ++i)
            {
                pSizes[i] = arg5[i];
            }
        }
        NativeUtils.Free(arg5);
    }

    public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ulong[] pOffsets, ref ulong pSizes)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = NativeUtils.ManagedArrayToPointer(pOffsets);
        var arg5 = NativeUtils.StructOrEnumToPointer(pSizes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg3, arg4, arg5);
        NativeUtils.Free(arg3);
        if (!ReferenceEquals(pOffsets, null))
        {
            for (var i = 0U; i < pOffsets.Length; ++i)
            {
                pOffsets[i] = arg4[i];
            }
        }
        NativeUtils.Free(arg4);
        pSizes = *arg5;
        NativeUtils.Free(arg5);
    }

    public void BindTransformFeedbackBuffersEXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, ref ulong pOffsets, ref ulong pSizes)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = NativeUtils.StructOrEnumToPointer(pOffsets);
        var arg5 = NativeUtils.StructOrEnumToPointer(pSizes);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindTransformFeedbackBuffersEXT(this, firstBinding, bindingCount, arg3, arg4, arg5);
        NativeUtils.Free(arg3);
        pOffsets = *arg4;
        NativeUtils.Free(arg4);
        pSizes = *arg5;
        NativeUtils.Free(arg5);
    }

    public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer[] pBuffers, params ulong[] pOffsets)
    {
         var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkBuffer_T>(pBuffers.Length);
        if (!ReferenceEquals(pBuffers, null))
        {
            for (var i = 0U; i < pBuffers.Length; ++i)
            {
                arg3[i] = pBuffers[i];
            }
        }
        var arg4 = ReferenceEquals(pOffsets, null) ? null : NativeUtils.ManagedArrayToPointer(pOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg3, arg4);
    }

    public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer pBuffers, params ulong[] pOffsets)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = ReferenceEquals(pOffsets, null) ? null : NativeUtils.ManagedArrayToPointer(pOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg3, arg4);
        NativeUtils.Free(arg3);
    }

    public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer[] pBuffers, ulong pOffsets)
    {
         var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkBuffer_T>(pBuffers.Length);
        if (!ReferenceEquals(pBuffers, null))
        {
            for (var i = 0U; i < pBuffers.Length; ++i)
            {
                arg3[i] = pBuffers[i];
            }
        }
        var arg4 = NativeUtils.StructOrEnumToPointer(pOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg3, arg4);
    }

    public void BindVertexBuffers(uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Buffer pBuffers, ulong pOffsets)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = NativeUtils.StructOrEnumToPointer(pOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers(this, firstBinding, bindingCount, arg3, arg4);
        NativeUtils.Free(arg3);
    }

    public void BindVertexBuffers2(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, in VkDeviceSize pOffsets, in VkDeviceSize pSizes, in VkDeviceSize pStrides)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = ReferenceEquals(pOffsets, null) ? null : NativeUtils.StructOrEnumToPointer(pOffsets);
        var arg5 = ReferenceEquals(pSizes, null) ? null : NativeUtils.StructOrEnumToPointer(pSizes);
        var arg6 = ReferenceEquals(pStrides, null) ? null : NativeUtils.StructOrEnumToPointer(pStrides);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers2(this, firstBinding, bindingCount, arg3, arg4, arg5, arg6);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg4);
        NativeUtils.Free(arg5);
        NativeUtils.Free(arg6);
    }

    public void BindVertexBuffers2EXT(uint firstBinding, uint bindingCount, in AdamantiumVulkan.Core.Buffer pBuffers, in VkDeviceSize pOffsets, in VkDeviceSize pSizes, in VkDeviceSize pStrides)
    {
        var arg3 = ReferenceEquals(pBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pBuffers);
        var arg4 = ReferenceEquals(pOffsets, null) ? null : NativeUtils.StructOrEnumToPointer(pOffsets);
        var arg5 = ReferenceEquals(pSizes, null) ? null : NativeUtils.StructOrEnumToPointer(pSizes);
        var arg6 = ReferenceEquals(pStrides, null) ? null : NativeUtils.StructOrEnumToPointer(pStrides);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBindVertexBuffers2EXT(this, firstBinding, bindingCount, arg3, arg4, arg5, arg6);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg4);
        NativeUtils.Free(arg5);
        NativeUtils.Free(arg6);
    }

    public void BlitImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageBlit pRegions, Filter filter)
    {
        var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
        var arg3 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
        var arg6 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBlitImage(this, arg1, srcImageLayout, arg3, dstImageLayout, regionCount, arg6, filter);
        NativeUtils.Free(arg6);
    }

    public void BlitImage2(in BlitImageInfo2 pBlitImageInfo)
    {
        var arg1 = ReferenceEquals(pBlitImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBlitImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBlitImage2(this, arg1);
        pBlitImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BlitImage2KHR(in BlitImageInfo2 pBlitImageInfo)
    {
        var arg1 = ReferenceEquals(pBlitImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBlitImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBlitImage2KHR(this, arg1);
        pBlitImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BuildAccelerationStructureNV(in AccelerationStructureInfoNV pInfo, AdamantiumVulkan.Core.Buffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, AdamantiumVulkan.Core.AccelerationStructureNV dst, AdamantiumVulkan.Core.AccelerationStructureNV src, AdamantiumVulkan.Core.Buffer scratch, VkDeviceSize scratchOffset)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        var arg2 = ReferenceEquals(instanceData, null) ? new VkBuffer_T() : (VkBuffer_T)instanceData;
        var arg5 = ReferenceEquals(dst, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)dst;
        var arg6 = ReferenceEquals(src, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)src;
        var arg7 = ReferenceEquals(scratch, null) ? new VkBuffer_T() : (VkBuffer_T)scratch;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBuildAccelerationStructureNV(this, arg1, arg2, instanceOffset, update, arg5, arg6, arg7, scratchOffset);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void BuildAccelerationStructuresIndirectKHR(uint infoCount, in AccelerationStructureBuildGeometryInfoKHR pInfos, in VkDeviceAddress pIndirectDeviceAddresses, in uint pIndirectStrides, in uint** ppMaxPrimitiveCounts)
    {
        var arg2 = ReferenceEquals(pInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pInfos.ToNative());
        var arg3 = ReferenceEquals(pIndirectDeviceAddresses, null) ? null : NativeUtils.StructOrEnumToPointer(pIndirectDeviceAddresses);
        var arg4 = NativeUtils.StructOrEnumToPointer(pIndirectStrides);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBuildAccelerationStructuresIndirectKHR(this, infoCount, arg2, arg3, arg4, ppMaxPrimitiveCounts);
        pInfos?.Dispose();
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
    }

    public void BuildAccelerationStructuresKHR(uint infoCount, in AccelerationStructureBuildGeometryInfoKHR pInfos, in AccelerationStructureBuildRangeInfoKHR ppBuildRangeInfos)
    {
        var arg2 = ReferenceEquals(pInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pInfos.ToNative());
        var arg3 = ReferenceEquals(ppBuildRangeInfos, null) ? null : (AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildRangeInfoKHR**)NativeUtils.StructOrEnumToPointer(ppBuildRangeInfos.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBuildAccelerationStructuresKHR(this, infoCount, arg2, arg3);
        pInfos?.Dispose();
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
    }

    public void BuildMicromapsEXT(uint infoCount, in MicromapBuildInfoEXT pInfos)
    {
        var arg2 = ReferenceEquals(pInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pInfos.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdBuildMicromapsEXT(this, infoCount, arg2);
        pInfos?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void ClearAttachments(uint attachmentCount, in ClearAttachment pAttachments, uint rectCount, in ClearRect pRects)
    {
        var arg2 = ReferenceEquals(pAttachments, null) ? null : NativeUtils.StructOrEnumToPointer(pAttachments.ToNative());
        var arg4 = ReferenceEquals(pRects, null) ? null : NativeUtils.StructOrEnumToPointer(pRects.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearAttachments(this, attachmentCount, arg2, rectCount, arg4);
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg4);
    }

    public void ClearColorImage(AdamantiumVulkan.Core.Image image, ImageLayout imageLayout, in ClearColorValue pColor, uint rangeCount, in ImageSubresourceRange pRanges)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg3 = ReferenceEquals(pColor, null) ? null : NativeUtils.StructOrEnumToPointer(pColor.ToNative());
        var arg5 = ReferenceEquals(pRanges, null) ? null : NativeUtils.StructOrEnumToPointer(pRanges.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearColorImage(this, arg1, imageLayout, arg3, rangeCount, arg5);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg5);
    }

    public void ClearDepthStencilImage(AdamantiumVulkan.Core.Image image, ImageLayout imageLayout, in ClearDepthStencilValue pDepthStencil, uint rangeCount, in ImageSubresourceRange pRanges)
    {
        var arg1 = ReferenceEquals(image, null) ? new VkImage_T() : (VkImage_T)image;
        var arg3 = ReferenceEquals(pDepthStencil, null) ? null : NativeUtils.StructOrEnumToPointer(pDepthStencil.ToNative());
        var arg5 = ReferenceEquals(pRanges, null) ? null : NativeUtils.StructOrEnumToPointer(pRanges.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdClearDepthStencilImage(this, arg1, imageLayout, arg3, rangeCount, arg5);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg5);
    }

    public void CopyAccelerationStructureKHR(in CopyAccelerationStructureInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyAccelerationStructureKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyAccelerationStructureNV(AdamantiumVulkan.Core.AccelerationStructureNV dst, AdamantiumVulkan.Core.AccelerationStructureNV src, CopyAccelerationStructureModeKHR mode)
    {
        var arg1 = ReferenceEquals(dst, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)dst;
        var arg2 = ReferenceEquals(src, null) ? new VkAccelerationStructureNV_T() : (VkAccelerationStructureNV_T)src;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyAccelerationStructureNV(this, arg1, arg2, mode);
    }

    public void CopyAccelerationStructureToMemoryKHR(in CopyAccelerationStructureToMemoryInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyAccelerationStructureToMemoryKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyBuffer(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, params BufferCopy[] pRegions)
    {
        var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
        var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        var arg4 = ReferenceEquals(pRegions, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkBufferCopy>(pRegions.Length);
        if (!ReferenceEquals(pRegions, null))
        {
            for (var i = 0U; i < pRegions.Length; ++i)
            {
                arg4[i] = pRegions[i].ToNative();
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer(this, arg1, arg2, regionCount, arg4);
    }

    public void CopyBuffer(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, BufferCopy pRegions)
    {
        var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
        var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        var arg4 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer(this, arg1, arg2, regionCount, arg4);
        NativeUtils.Free(arg4);
    }

    public void CopyBuffer2(in CopyBufferInfo2 pCopyBufferInfo)
    {
        var arg1 = ReferenceEquals(pCopyBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyBufferInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer2(this, arg1);
        pCopyBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyBuffer2KHR(in CopyBufferInfo2 pCopyBufferInfo)
    {
        var arg1 = ReferenceEquals(pCopyBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyBufferInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBuffer2KHR(this, arg1);
        pCopyBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyBufferToImage(AdamantiumVulkan.Core.Buffer srcBuffer, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in BufferImageCopy pRegions)
    {
        var arg1 = ReferenceEquals(srcBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)srcBuffer;
        var arg2 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
        var arg5 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBufferToImage(this, arg1, arg2, dstImageLayout, regionCount, arg5);
        NativeUtils.Free(arg5);
    }

    public void CopyBufferToImage2(in CopyBufferToImageInfo2 pCopyBufferToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyBufferToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyBufferToImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBufferToImage2(this, arg1);
        pCopyBufferToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyBufferToImage2KHR(in CopyBufferToImageInfo2 pCopyBufferToImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyBufferToImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyBufferToImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyBufferToImage2KHR(this, arg1);
        pCopyBufferToImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageCopy pRegions)
    {
        var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
        var arg3 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
        var arg6 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImage(this, arg1, srcImageLayout, arg3, dstImageLayout, regionCount, arg6);
        NativeUtils.Free(arg6);
    }

    public void CopyImage2(in CopyImageInfo2 pCopyImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImage2(this, arg1);
        pCopyImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyImage2KHR(in CopyImageInfo2 pCopyImageInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImage2KHR(this, arg1);
        pCopyImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyImageToBuffer(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Buffer dstBuffer, uint regionCount, in BufferImageCopy pRegions)
    {
        var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
        var arg3 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        var arg5 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImageToBuffer(this, arg1, srcImageLayout, arg3, regionCount, arg5);
        NativeUtils.Free(arg5);
    }

    public void CopyImageToBuffer2(in CopyImageToBufferInfo2 pCopyImageToBufferInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToBufferInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImageToBuffer2(this, arg1);
        pCopyImageToBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyImageToBuffer2KHR(in CopyImageToBufferInfo2 pCopyImageToBufferInfo)
    {
        var arg1 = ReferenceEquals(pCopyImageToBufferInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCopyImageToBufferInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyImageToBuffer2KHR(this, arg1);
        pCopyImageToBufferInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyMemoryIndirectNV(VkDeviceAddress copyBufferAddress, uint copyCount, uint stride)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMemoryIndirectNV(this, copyBufferAddress, copyCount, stride);
    }

    public void CopyMemoryToAccelerationStructureKHR(in CopyMemoryToAccelerationStructureInfoKHR pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMemoryToAccelerationStructureKHR(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyMemoryToImageIndirectNV(VkDeviceAddress copyBufferAddress, uint copyCount, uint stride, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, in ImageSubresourceLayers pImageSubresources)
    {
        var arg4 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
        var arg6 = ReferenceEquals(pImageSubresources, null) ? null : NativeUtils.StructOrEnumToPointer(pImageSubresources.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMemoryToImageIndirectNV(this, copyBufferAddress, copyCount, stride, arg4, dstImageLayout, arg6);
        NativeUtils.Free(arg6);
    }

    public void CopyMemoryToMicromapEXT(in CopyMemoryToMicromapInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMemoryToMicromapEXT(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyMicromapEXT(in CopyMicromapInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMicromapEXT(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyMicromapToMemoryEXT(in CopyMicromapToMemoryInfoEXT pInfo)
    {
        var arg1 = ReferenceEquals(pInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyMicromapToMemoryEXT(this, arg1);
        pInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void CopyQueryPoolResults(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount, AdamantiumVulkan.Core.Buffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        var arg4 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCopyQueryPoolResults(this, arg1, firstQuery, queryCount, arg4, dstOffset, stride, flags);
    }

    public void CuLaunchKernelNVX(in CuLaunchInfoNVX pLaunchInfo)
    {
        var arg1 = ReferenceEquals(pLaunchInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLaunchInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdCuLaunchKernelNVX(this, arg1);
        pLaunchInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void DebugMarkerBeginEXT(in DebugMarkerMarkerInfoEXT pMarkerInfo)
    {
        var arg1 = ReferenceEquals(pMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMarkerInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerBeginEXT(this, arg1);
        pMarkerInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void DebugMarkerEndEXT()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerEndEXT(this);
    }

    public void DebugMarkerInsertEXT(in DebugMarkerMarkerInfoEXT pMarkerInfo)
    {
        var arg1 = ReferenceEquals(pMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMarkerInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDebugMarkerInsertEXT(this, arg1);
        pMarkerInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void DecompressMemoryIndirectCountNV(VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint stride)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDecompressMemoryIndirectCountNV(this, indirectCommandsAddress, indirectCommandsCountAddress, stride);
    }

    public void DecompressMemoryNV(uint decompressRegionCount, in DecompressMemoryRegionNV pDecompressMemoryRegions)
    {
        var arg2 = ReferenceEquals(pDecompressMemoryRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pDecompressMemoryRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDecompressMemoryNV(this, decompressRegionCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void Dispatch(uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatch(this, groupCountX, groupCountY, groupCountZ);
    }

    public void DispatchBase(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchBase(this, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }

    public void DispatchBaseKHR(uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchBaseKHR(this, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }

    public void DispatchIndirect(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDispatchIndirect(this, arg1, offset);
    }

    public void Draw(uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDraw(this, vertexCount, instanceCount, firstVertex, firstInstance);
    }

    public void DrawIndexed(uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexed(this, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    }

    public void DrawIndexedIndirect(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirect(this, arg1, offset, drawCount, stride);
    }

    public void DrawIndexedIndirectCount(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirectCount(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawIndexedIndirectCountAMD(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirectCountAMD(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawIndexedIndirectCountKHR(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndexedIndirectCountKHR(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawIndirect(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirect(this, arg1, offset, drawCount, stride);
    }

    public void DrawIndirectByteCountEXT(uint instanceCount, uint firstInstance, AdamantiumVulkan.Core.Buffer counterBuffer, VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride)
    {
        var arg3 = ReferenceEquals(counterBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)counterBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectByteCountEXT(this, instanceCount, firstInstance, arg3, counterBufferOffset, counterOffset, vertexStride);
    }

    public void DrawIndirectCount(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectCount(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawIndirectCountAMD(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectCountAMD(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawIndirectCountKHR(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawIndirectCountKHR(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawMeshTasksEXT(uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksEXT(this, groupCountX, groupCountY, groupCountZ);
    }

    public void DrawMeshTasksIndirectCountEXT(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectCountEXT(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawMeshTasksIndirectCountNV(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Buffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        var arg3 = ReferenceEquals(countBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)countBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectCountNV(this, arg1, offset, arg3, countBufferOffset, maxDrawCount, stride);
    }

    public void DrawMeshTasksIndirectEXT(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectEXT(this, arg1, offset, drawCount, stride);
    }

    public void DrawMeshTasksIndirectNV(AdamantiumVulkan.Core.Buffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        var arg1 = ReferenceEquals(buffer, null) ? new VkBuffer_T() : (VkBuffer_T)buffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksIndirectNV(this, arg1, offset, drawCount, stride);
    }

    public void DrawMeshTasksNV(uint taskCount, uint firstTask)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMeshTasksNV(this, taskCount, firstTask);
    }

    public void DrawMultiEXT(uint drawCount, in MultiDrawInfoEXT pVertexInfo, uint instanceCount, uint firstInstance, uint stride)
    {
        var arg2 = ReferenceEquals(pVertexInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pVertexInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMultiEXT(this, drawCount, arg2, instanceCount, firstInstance, stride);
        NativeUtils.Free(arg2);
    }

    public void DrawMultiIndexedEXT(uint drawCount, in MultiDrawIndexedInfoEXT pIndexInfo, uint instanceCount, uint firstInstance, uint stride, in int pVertexOffset)
    {
        var arg2 = ReferenceEquals(pIndexInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pIndexInfo.ToNative());
        var arg6 = NativeUtils.StructOrEnumToPointer(pVertexOffset);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdDrawMultiIndexedEXT(this, drawCount, arg2, instanceCount, firstInstance, stride, arg6);
        NativeUtils.Free(arg2);
    }

    public Result EndCommandBuffer()
    {
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkEndCommandBuffer(this);
    }

    public void EndConditionalRenderingEXT()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndConditionalRenderingEXT(this);
    }

    public void EndDebugUtilsLabelEXT()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndDebugUtilsLabelEXT(this);
    }

    public void EndQuery(AdamantiumVulkan.Core.QueryPool queryPool, uint query)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndQuery(this, arg1, query);
    }

    public void EndQueryIndexedEXT(AdamantiumVulkan.Core.QueryPool queryPool, uint query, uint index)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndQueryIndexedEXT(this, arg1, query, index);
    }

    public void EndRendering()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRendering(this);
    }

    public void EndRenderingKHR()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderingKHR(this);
    }

    public void EndRenderPass()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderPass(this);
    }

    public void EndRenderPass2(in SubpassEndInfo pSubpassEndInfo)
    {
        var arg1 = ReferenceEquals(pSubpassEndInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassEndInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderPass2(this, arg1);
        pSubpassEndInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void EndRenderPass2KHR(in SubpassEndInfo pSubpassEndInfo)
    {
        var arg1 = ReferenceEquals(pSubpassEndInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassEndInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndRenderPass2KHR(this, arg1);
        pSubpassEndInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void EndTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ulong[] pCounterBufferOffsets)
    {
        var arg3 = ReferenceEquals(pCounterBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pCounterBuffers);
        var arg4 = NativeUtils.ManagedArrayToPointer(pCounterBufferOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg3, arg4);
        NativeUtils.Free(arg3);
        if (!ReferenceEquals(pCounterBufferOffsets, null))
        {
            for (var i = 0U; i < pCounterBufferOffsets.Length; ++i)
            {
                pCounterBufferOffsets[i] = arg4[i];
            }
        }
        NativeUtils.Free(arg4);
    }

    public void EndTransformFeedbackEXT(uint firstCounterBuffer, uint counterBufferCount, in AdamantiumVulkan.Core.Buffer pCounterBuffers, ref ulong pCounterBufferOffsets)
    {
        var arg3 = ReferenceEquals(pCounterBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkBuffer_T)pCounterBuffers);
        var arg4 = NativeUtils.StructOrEnumToPointer(pCounterBufferOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdEndTransformFeedbackEXT(this, firstCounterBuffer, counterBufferCount, arg3, arg4);
        NativeUtils.Free(arg3);
        pCounterBufferOffsets = *arg4;
        NativeUtils.Free(arg4);
    }

    public void ExecuteCommands(uint commandBufferCount, params AdamantiumVulkan.Core.CommandBuffer[] pCommandBuffers)
    {
         var arg2 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkCommandBuffer_T>(commandBufferCount);
        if (!ReferenceEquals(pCommandBuffers, null))
        {
            for (var i = 0U; i < commandBufferCount; ++i)
            {
                arg2[i] = pCommandBuffers[i];
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdExecuteCommands(this, commandBufferCount, arg2);
    }

    public void ExecuteCommands(uint commandBufferCount, in AdamantiumVulkan.Core.CommandBuffer pCommandBuffers)
    {
        var arg2 = ReferenceEquals(pCommandBuffers, null) ? null : NativeUtils.StructOrEnumToPointer((VkCommandBuffer_T)pCommandBuffers);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdExecuteCommands(this, commandBufferCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void ExecuteGeneratedCommandsNV(VkBool32 isPreprocessed, in GeneratedCommandsInfoNV pGeneratedCommandsInfo)
    {
        var arg2 = ReferenceEquals(pGeneratedCommandsInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pGeneratedCommandsInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdExecuteGeneratedCommandsNV(this, isPreprocessed, arg2);
        pGeneratedCommandsInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void FillBuffer(AdamantiumVulkan.Core.Buffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data)
    {
        var arg1 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdFillBuffer(this, arg1, dstOffset, size, data);
    }

    public void InsertDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
    {
        var arg1 = ReferenceEquals(pLabelInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLabelInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdInsertDebugUtilsLabelEXT(this, arg1);
        pLabelInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void NextSubpass(SubpassContents contents)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdNextSubpass(this, contents);
    }

    public void NextSubpass2(in SubpassBeginInfo pSubpassBeginInfo, in SubpassEndInfo pSubpassEndInfo)
    {
        var arg1 = ReferenceEquals(pSubpassBeginInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassBeginInfo.ToNative());
        var arg2 = ReferenceEquals(pSubpassEndInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassEndInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdNextSubpass2(this, arg1, arg2);
        pSubpassBeginInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSubpassEndInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void NextSubpass2KHR(in SubpassBeginInfo pSubpassBeginInfo, in SubpassEndInfo pSubpassEndInfo)
    {
        var arg1 = ReferenceEquals(pSubpassBeginInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassBeginInfo.ToNative());
        var arg2 = ReferenceEquals(pSubpassEndInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSubpassEndInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdNextSubpass2KHR(this, arg1, arg2);
        pSubpassBeginInfo?.Dispose();
        NativeUtils.Free(arg1);
        pSubpassEndInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void OpticalFlowExecuteNV(AdamantiumVulkan.Core.OpticalFlowSessionNV session, in OpticalFlowExecuteInfoNV pExecuteInfo)
    {
        var arg1 = ReferenceEquals(session, null) ? new VkOpticalFlowSessionNV_T() : (VkOpticalFlowSessionNV_T)session;
        var arg2 = ReferenceEquals(pExecuteInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pExecuteInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdOpticalFlowExecuteNV(this, arg1, arg2);
        pExecuteInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void PipelineBarrier(VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, MemoryBarrier[] pMemoryBarriers, uint bufferMemoryBarrierCount, BufferMemoryBarrier[] pBufferMemoryBarriers, uint imageMemoryBarrierCount, params ImageMemoryBarrier[] pImageMemoryBarriers)
    {
        var arg5 = ReferenceEquals(pMemoryBarriers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkMemoryBarrier>(pMemoryBarriers.Length);
        if (!ReferenceEquals(pMemoryBarriers, null))
        {
            for (var i = 0U; i < pMemoryBarriers.Length; ++i)
            {
                arg5[i] = pMemoryBarriers[i].ToNative();
            }
        }
        var arg7 = ReferenceEquals(pBufferMemoryBarriers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier>(pBufferMemoryBarriers.Length);
        if (!ReferenceEquals(pBufferMemoryBarriers, null))
        {
            for (var i = 0U; i < pBufferMemoryBarriers.Length; ++i)
            {
                arg7[i] = pBufferMemoryBarriers[i].ToNative();
            }
        }
        var arg9 = ReferenceEquals(pImageMemoryBarriers, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier>(pImageMemoryBarriers.Length);
        if (!ReferenceEquals(pImageMemoryBarriers, null))
        {
            for (var i = 0U; i < pImageMemoryBarriers.Length; ++i)
            {
                arg9[i] = pImageMemoryBarriers[i].ToNative();
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPipelineBarrier(this, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, arg5, bufferMemoryBarrierCount, arg7, imageMemoryBarrierCount, arg9);
        if (!ReferenceEquals(pMemoryBarriers, null))
        {
            for (var i = 0U; i < pMemoryBarriers.Length; ++i)
            {
                pMemoryBarriers[i]?.Dispose();
            }
        }
        if (!ReferenceEquals(pBufferMemoryBarriers, null))
        {
            for (var i = 0U; i < pBufferMemoryBarriers.Length; ++i)
            {
                pBufferMemoryBarriers[i]?.Dispose();
            }
        }
        if (!ReferenceEquals(pImageMemoryBarriers, null))
        {
            for (var i = 0U; i < pImageMemoryBarriers.Length; ++i)
            {
                pImageMemoryBarriers[i]?.Dispose();
            }
        }
    }

    public void PipelineBarrier2(in DependencyInfo pDependencyInfo)
    {
        var arg1 = ReferenceEquals(pDependencyInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPipelineBarrier2(this, arg1);
        pDependencyInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void PipelineBarrier2KHR(in DependencyInfo pDependencyInfo)
    {
        var arg1 = ReferenceEquals(pDependencyInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPipelineBarrier2KHR(this, arg1);
        pDependencyInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void PreprocessGeneratedCommandsNV(in GeneratedCommandsInfoNV pGeneratedCommandsInfo)
    {
        var arg1 = ReferenceEquals(pGeneratedCommandsInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pGeneratedCommandsInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPreprocessGeneratedCommandsNV(this, arg1);
        pGeneratedCommandsInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void PushConstants(AdamantiumVulkan.Core.PipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, in void* pValues)
    {
        var arg1 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushConstants(this, arg1, stageFlags, offset, size, pValues);
    }

    public void PushDescriptorSetKHR(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint set, uint descriptorWriteCount, in WriteDescriptorSet pDescriptorWrites)
    {
        var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        var arg5 = ReferenceEquals(pDescriptorWrites, null) ? null : NativeUtils.StructOrEnumToPointer(pDescriptorWrites.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushDescriptorSetKHR(this, pipelineBindPoint, arg2, set, descriptorWriteCount, arg5);
        pDescriptorWrites?.Dispose();
        NativeUtils.Free(arg5);
    }

    public void PushDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.DescriptorUpdateTemplate descriptorUpdateTemplate, AdamantiumVulkan.Core.PipelineLayout layout, uint set, in void* pData)
    {
        var arg1 = ReferenceEquals(descriptorUpdateTemplate, null) ? new VkDescriptorUpdateTemplate_T() : (VkDescriptorUpdateTemplate_T)descriptorUpdateTemplate;
        var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdPushDescriptorSetWithTemplateKHR(this, arg1, arg2, set, pData);
    }

    public Result ResetCommandBuffer(VkCommandBufferResetFlags flags)
    {
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkResetCommandBuffer(this, flags);
    }

    public void ResetEvent(AdamantiumVulkan.Core.Event @event, VkPipelineStageFlags stageMask)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetEvent(this, arg1, stageMask);
    }

    public void ResetEvent2(AdamantiumVulkan.Core.Event @event, VkPipelineStageFlags2 stageMask)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetEvent2(this, arg1, stageMask);
    }

    public void ResetEvent2KHR(AdamantiumVulkan.Core.Event @event, VkPipelineStageFlags2 stageMask)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetEvent2KHR(this, arg1, stageMask);
    }

    public void ResetQueryPool(AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery, uint queryCount)
    {
        var arg1 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResetQueryPool(this, arg1, firstQuery, queryCount);
    }

    public void ResolveImage(AdamantiumVulkan.Core.Image srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Image dstImage, ImageLayout dstImageLayout, uint regionCount, in ImageResolve pRegions)
    {
        var arg1 = ReferenceEquals(srcImage, null) ? new VkImage_T() : (VkImage_T)srcImage;
        var arg3 = ReferenceEquals(dstImage, null) ? new VkImage_T() : (VkImage_T)dstImage;
        var arg6 = ReferenceEquals(pRegions, null) ? null : NativeUtils.StructOrEnumToPointer(pRegions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResolveImage(this, arg1, srcImageLayout, arg3, dstImageLayout, regionCount, arg6);
        NativeUtils.Free(arg6);
    }

    public void ResolveImage2(in ResolveImageInfo2 pResolveImageInfo)
    {
        var arg1 = ReferenceEquals(pResolveImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pResolveImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResolveImage2(this, arg1);
        pResolveImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void ResolveImage2KHR(in ResolveImageInfo2 pResolveImageInfo)
    {
        var arg1 = ReferenceEquals(pResolveImageInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pResolveImageInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdResolveImage2KHR(this, arg1);
        pResolveImageInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void SetAlphaToCoverageEnableEXT(VkBool32 alphaToCoverageEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetAlphaToCoverageEnableEXT(this, alphaToCoverageEnable);
    }

    public void SetAlphaToOneEnableEXT(VkBool32 alphaToOneEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetAlphaToOneEnableEXT(this, alphaToOneEnable);
    }

    public void SetBlendConstants(in float[] blendConstants)
    {
        if (blendConstants == null || blendConstants.Length != 4)
        {
            throw new ArgumentOutOfRangeException("blendConstants", "The dimensions of the provided array don't match the required size. Size should be = 4");
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetBlendConstants(this, blendConstants);
    }

    public void SetCheckpointNV(in void* pCheckpointMarker)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCheckpointNV(this, pCheckpointMarker);
    }

    public void SetCoarseSampleOrderNV(CoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, in CoarseSampleOrderCustomNV pCustomSampleOrders)
    {
        var arg3 = ReferenceEquals(pCustomSampleOrders, null) ? null : NativeUtils.StructOrEnumToPointer(pCustomSampleOrders.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoarseSampleOrderNV(this, sampleOrderType, customSampleOrderCount, arg3);
        pCustomSampleOrders?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void SetColorBlendAdvancedEXT(uint firstAttachment, uint attachmentCount, in ColorBlendAdvancedEXT pColorBlendAdvanced)
    {
        var arg3 = ReferenceEquals(pColorBlendAdvanced, null) ? null : NativeUtils.StructOrEnumToPointer(pColorBlendAdvanced.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetColorBlendAdvancedEXT(this, firstAttachment, attachmentCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetColorBlendEnableEXT(uint firstAttachment, uint attachmentCount, in VkBool32 pColorBlendEnables)
    {
        var arg3 = ReferenceEquals(pColorBlendEnables, null) ? null : NativeUtils.StructOrEnumToPointer(pColorBlendEnables);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetColorBlendEnableEXT(this, firstAttachment, attachmentCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetColorBlendEquationEXT(uint firstAttachment, uint attachmentCount, in ColorBlendEquationEXT pColorBlendEquations)
    {
        var arg3 = ReferenceEquals(pColorBlendEquations, null) ? null : NativeUtils.StructOrEnumToPointer(pColorBlendEquations.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetColorBlendEquationEXT(this, firstAttachment, attachmentCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetColorWriteEnableEXT(uint attachmentCount, in VkBool32 pColorWriteEnables)
    {
        var arg2 = ReferenceEquals(pColorWriteEnables, null) ? null : NativeUtils.StructOrEnumToPointer(pColorWriteEnables);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetColorWriteEnableEXT(this, attachmentCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetColorWriteMaskEXT(uint firstAttachment, uint attachmentCount, in VkColorComponentFlags pColorWriteMasks)
    {
        var arg3 = ReferenceEquals(pColorWriteMasks, null) ? null : NativeUtils.StructOrEnumToPointer(pColorWriteMasks);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetColorWriteMaskEXT(this, firstAttachment, attachmentCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetConservativeRasterizationModeEXT(ConservativeRasterizationModeEXT conservativeRasterizationMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetConservativeRasterizationModeEXT(this, conservativeRasterizationMode);
    }

    public void SetCoverageModulationModeNV(CoverageModulationModeNV coverageModulationMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageModulationModeNV(this, coverageModulationMode);
    }

    public void SetCoverageModulationTableEnableNV(VkBool32 coverageModulationTableEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageModulationTableEnableNV(this, coverageModulationTableEnable);
    }

    public void SetCoverageModulationTableNV(uint coverageModulationTableCount, in float pCoverageModulationTable)
    {
        var arg2 = NativeUtils.StructOrEnumToPointer(pCoverageModulationTable);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageModulationTableNV(this, coverageModulationTableCount, arg2);
    }

    public void SetCoverageReductionModeNV(CoverageReductionModeNV coverageReductionMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageReductionModeNV(this, coverageReductionMode);
    }

    public void SetCoverageToColorEnableNV(VkBool32 coverageToColorEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageToColorEnableNV(this, coverageToColorEnable);
    }

    public void SetCoverageToColorLocationNV(uint coverageToColorLocation)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCoverageToColorLocationNV(this, coverageToColorLocation);
    }

    public void SetCullMode(VkCullModeFlags cullMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCullMode(this, cullMode);
    }

    public void SetCullModeEXT(VkCullModeFlags cullMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetCullModeEXT(this, cullMode);
    }

    public void SetDepthBias(float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBias(this, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    }

    public void SetDepthBiasEnable(VkBool32 depthBiasEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBiasEnable(this, depthBiasEnable);
    }

    public void SetDepthBiasEnableEXT(VkBool32 depthBiasEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBiasEnableEXT(this, depthBiasEnable);
    }

    public void SetDepthBounds(float minDepthBounds, float maxDepthBounds)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBounds(this, minDepthBounds, maxDepthBounds);
    }

    public void SetDepthBoundsTestEnable(VkBool32 depthBoundsTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBoundsTestEnable(this, depthBoundsTestEnable);
    }

    public void SetDepthBoundsTestEnableEXT(VkBool32 depthBoundsTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthBoundsTestEnableEXT(this, depthBoundsTestEnable);
    }

    public void SetDepthClampEnableEXT(VkBool32 depthClampEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthClampEnableEXT(this, depthClampEnable);
    }

    public void SetDepthClipEnableEXT(VkBool32 depthClipEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthClipEnableEXT(this, depthClipEnable);
    }

    public void SetDepthClipNegativeOneToOneEXT(VkBool32 negativeOneToOne)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthClipNegativeOneToOneEXT(this, negativeOneToOne);
    }

    public void SetDepthCompareOp(CompareOp depthCompareOp)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthCompareOp(this, depthCompareOp);
    }

    public void SetDepthCompareOpEXT(CompareOp depthCompareOp)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthCompareOpEXT(this, depthCompareOp);
    }

    public void SetDepthTestEnable(VkBool32 depthTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthTestEnable(this, depthTestEnable);
    }

    public void SetDepthTestEnableEXT(VkBool32 depthTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthTestEnableEXT(this, depthTestEnable);
    }

    public void SetDepthWriteEnable(VkBool32 depthWriteEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthWriteEnable(this, depthWriteEnable);
    }

    public void SetDepthWriteEnableEXT(VkBool32 depthWriteEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDepthWriteEnableEXT(this, depthWriteEnable);
    }

    public void SetDescriptorBufferOffsetsEXT(PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.PipelineLayout layout, uint firstSet, uint setCount, in uint pBufferIndices, in VkDeviceSize pOffsets)
    {
        var arg2 = ReferenceEquals(layout, null) ? new VkPipelineLayout_T() : (VkPipelineLayout_T)layout;
        var arg5 = NativeUtils.StructOrEnumToPointer(pBufferIndices);
        var arg6 = ReferenceEquals(pOffsets, null) ? null : NativeUtils.StructOrEnumToPointer(pOffsets);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDescriptorBufferOffsetsEXT(this, pipelineBindPoint, arg2, firstSet, setCount, arg5, arg6);
        NativeUtils.Free(arg6);
    }

    public void SetDeviceMask(uint deviceMask)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDeviceMask(this, deviceMask);
    }

    public void SetDeviceMaskKHR(uint deviceMask)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDeviceMaskKHR(this, deviceMask);
    }

    public void SetDiscardRectangleEXT(uint firstDiscardRectangle, uint discardRectangleCount, in Rect2D pDiscardRectangles)
    {
        var arg3 = ReferenceEquals(pDiscardRectangles, null) ? null : NativeUtils.StructOrEnumToPointer(pDiscardRectangles.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetDiscardRectangleEXT(this, firstDiscardRectangle, discardRectangleCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetEvent(AdamantiumVulkan.Core.Event @event, VkPipelineStageFlags stageMask)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetEvent(this, arg1, stageMask);
    }

    public void SetEvent2(AdamantiumVulkan.Core.Event @event, in DependencyInfo pDependencyInfo)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        var arg2 = ReferenceEquals(pDependencyInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetEvent2(this, arg1, arg2);
        pDependencyInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void SetEvent2KHR(AdamantiumVulkan.Core.Event @event, in DependencyInfo pDependencyInfo)
    {
        var arg1 = ReferenceEquals(@event, null) ? new VkEvent_T() : (VkEvent_T)@event;
        var arg2 = ReferenceEquals(pDependencyInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetEvent2KHR(this, arg1, arg2);
        pDependencyInfo?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void SetExclusiveScissorNV(uint firstExclusiveScissor, uint exclusiveScissorCount, in Rect2D pExclusiveScissors)
    {
        var arg3 = ReferenceEquals(pExclusiveScissors, null) ? null : NativeUtils.StructOrEnumToPointer(pExclusiveScissors.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetExclusiveScissorNV(this, firstExclusiveScissor, exclusiveScissorCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetExtraPrimitiveOverestimationSizeEXT(float extraPrimitiveOverestimationSize)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetExtraPrimitiveOverestimationSizeEXT(this, extraPrimitiveOverestimationSize);
    }

    public void SetFragmentShadingRateEnumNV(FragmentShadingRateNV shadingRate, in FragmentShadingRateCombinerOpKHR[] combinerOps)
    {
        if (combinerOps == null || combinerOps.Length != 2)
        {
            throw new ArgumentOutOfRangeException("combinerOps", "The dimensions of the provided array don't match the required size. Size should be = 2");
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetFragmentShadingRateEnumNV(this, shadingRate, combinerOps);
    }

    public void SetFragmentShadingRateKHR(in Extent2D pFragmentSize, in FragmentShadingRateCombinerOpKHR[] combinerOps)
    {
        var arg1 = ReferenceEquals(pFragmentSize, null) ? null : NativeUtils.StructOrEnumToPointer(pFragmentSize.ToNative());
        if (combinerOps == null || combinerOps.Length != 2)
        {
            throw new ArgumentOutOfRangeException("combinerOps", "The dimensions of the provided array don't match the required size. Size should be = 2");
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetFragmentShadingRateKHR(this, arg1, combinerOps);
        NativeUtils.Free(arg1);
    }

    public void SetFrontFace(FrontFace frontFace)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetFrontFace(this, frontFace);
    }

    public void SetFrontFaceEXT(FrontFace frontFace)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetFrontFaceEXT(this, frontFace);
    }

    public void SetLineRasterizationModeEXT(LineRasterizationModeEXT lineRasterizationMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineRasterizationModeEXT(this, lineRasterizationMode);
    }

    public void SetLineStippleEnableEXT(VkBool32 stippledLineEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineStippleEnableEXT(this, stippledLineEnable);
    }

    public void SetLineStippleEXT(uint lineStippleFactor, ushort lineStipplePattern)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineStippleEXT(this, lineStippleFactor, lineStipplePattern);
    }

    public void SetLineWidth(float lineWidth)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLineWidth(this, lineWidth);
    }

    public void SetLogicOpEnableEXT(VkBool32 logicOpEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLogicOpEnableEXT(this, logicOpEnable);
    }

    public void SetLogicOpEXT(LogicOp logicOp)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetLogicOpEXT(this, logicOp);
    }

    public void SetPatchControlPointsEXT(uint patchControlPoints)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPatchControlPointsEXT(this, patchControlPoints);
    }

    public Result SetPerformanceMarkerINTEL(in PerformanceMarkerInfoINTEL pMarkerInfo)
    {
        var arg1 = ReferenceEquals(pMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMarkerInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceMarkerINTEL(this, arg1);
        pMarkerInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result SetPerformanceOverrideINTEL(in PerformanceOverrideInfoINTEL pOverrideInfo)
    {
        var arg1 = ReferenceEquals(pOverrideInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pOverrideInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceOverrideINTEL(this, arg1);
        pOverrideInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result SetPerformanceStreamMarkerINTEL(in PerformanceStreamMarkerInfoINTEL pMarkerInfo)
    {
        var arg1 = ReferenceEquals(pMarkerInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pMarkerInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPerformanceStreamMarkerINTEL(this, arg1);
        pMarkerInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public void SetPolygonModeEXT(PolygonMode polygonMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPolygonModeEXT(this, polygonMode);
    }

    public void SetPrimitiveRestartEnable(VkBool32 primitiveRestartEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPrimitiveRestartEnable(this, primitiveRestartEnable);
    }

    public void SetPrimitiveRestartEnableEXT(VkBool32 primitiveRestartEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPrimitiveRestartEnableEXT(this, primitiveRestartEnable);
    }

    public void SetPrimitiveTopology(PrimitiveTopology primitiveTopology)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPrimitiveTopology(this, primitiveTopology);
    }

    public void SetPrimitiveTopologyEXT(PrimitiveTopology primitiveTopology)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetPrimitiveTopologyEXT(this, primitiveTopology);
    }

    public void SetProvokingVertexModeEXT(ProvokingVertexModeEXT provokingVertexMode)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetProvokingVertexModeEXT(this, provokingVertexMode);
    }

    public void SetRasterizationSamplesEXT(SampleCountFlagBits rasterizationSamples)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRasterizationSamplesEXT(this, rasterizationSamples);
    }

    public void SetRasterizationStreamEXT(uint rasterizationStream)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRasterizationStreamEXT(this, rasterizationStream);
    }

    public void SetRasterizerDiscardEnable(VkBool32 rasterizerDiscardEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRasterizerDiscardEnable(this, rasterizerDiscardEnable);
    }

    public void SetRasterizerDiscardEnableEXT(VkBool32 rasterizerDiscardEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRasterizerDiscardEnableEXT(this, rasterizerDiscardEnable);
    }

    public void SetRayTracingPipelineStackSizeKHR(uint pipelineStackSize)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRayTracingPipelineStackSizeKHR(this, pipelineStackSize);
    }

    public void SetRepresentativeFragmentTestEnableNV(VkBool32 representativeFragmentTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetRepresentativeFragmentTestEnableNV(this, representativeFragmentTestEnable);
    }

    public void SetSampleLocationsEnableEXT(VkBool32 sampleLocationsEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetSampleLocationsEnableEXT(this, sampleLocationsEnable);
    }

    public void SetSampleLocationsEXT(in SampleLocationsInfoEXT pSampleLocationsInfo)
    {
        var arg1 = ReferenceEquals(pSampleLocationsInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pSampleLocationsInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetSampleLocationsEXT(this, arg1);
        pSampleLocationsInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void SetSampleMaskEXT(SampleCountFlagBits samples, in VkSampleMask pSampleMask)
    {
        var arg2 = ReferenceEquals(pSampleMask, null) ? null : NativeUtils.StructOrEnumToPointer(pSampleMask);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetSampleMaskEXT(this, samples, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetScissor(uint firstScissor, uint scissorCount, params Rect2D[] pScissors)
    {
        var arg3 = ReferenceEquals(pScissors, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkRect2D>(scissorCount);
        if (!ReferenceEquals(pScissors, null))
        {
            for (var i = 0U; i < scissorCount; ++i)
            {
                arg3[i] = pScissors[i].ToNative();
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissor(this, firstScissor, scissorCount, arg3);
    }

    public void SetScissor(uint firstScissor, uint scissorCount, in Rect2D pScissors)
    {
        var arg3 = ReferenceEquals(pScissors, null) ? null : NativeUtils.StructOrEnumToPointer(pScissors.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissor(this, firstScissor, scissorCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetScissorWithCount(uint scissorCount, in Rect2D pScissors)
    {
        var arg2 = ReferenceEquals(pScissors, null) ? null : NativeUtils.StructOrEnumToPointer(pScissors.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissorWithCount(this, scissorCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetScissorWithCountEXT(uint scissorCount, in Rect2D pScissors)
    {
        var arg2 = ReferenceEquals(pScissors, null) ? null : NativeUtils.StructOrEnumToPointer(pScissors.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetScissorWithCountEXT(this, scissorCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetShadingRateImageEnableNV(VkBool32 shadingRateImageEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetShadingRateImageEnableNV(this, shadingRateImageEnable);
    }

    public void SetStencilCompareMask(VkStencilFaceFlags faceMask, uint compareMask)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilCompareMask(this, faceMask, compareMask);
    }

    public void SetStencilOp(VkStencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilOp(this, faceMask, failOp, passOp, depthFailOp, compareOp);
    }

    public void SetStencilOpEXT(VkStencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilOpEXT(this, faceMask, failOp, passOp, depthFailOp, compareOp);
    }

    public void SetStencilReference(VkStencilFaceFlags faceMask, uint reference)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilReference(this, faceMask, reference);
    }

    public void SetStencilTestEnable(VkBool32 stencilTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilTestEnable(this, stencilTestEnable);
    }

    public void SetStencilTestEnableEXT(VkBool32 stencilTestEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilTestEnableEXT(this, stencilTestEnable);
    }

    public void SetStencilWriteMask(VkStencilFaceFlags faceMask, uint writeMask)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetStencilWriteMask(this, faceMask, writeMask);
    }

    public void SetTessellationDomainOriginEXT(TessellationDomainOrigin domainOrigin)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetTessellationDomainOriginEXT(this, domainOrigin);
    }

    public void SetVertexInputEXT(uint vertexBindingDescriptionCount, in VertexInputBindingDescription2EXT pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, in VertexInputAttributeDescription2EXT pVertexAttributeDescriptions)
    {
        var arg2 = ReferenceEquals(pVertexBindingDescriptions, null) ? null : NativeUtils.StructOrEnumToPointer(pVertexBindingDescriptions.ToNative());
        var arg4 = ReferenceEquals(pVertexAttributeDescriptions, null) ? null : NativeUtils.StructOrEnumToPointer(pVertexAttributeDescriptions.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetVertexInputEXT(this, vertexBindingDescriptionCount, arg2, vertexAttributeDescriptionCount, arg4);
        pVertexBindingDescriptions?.Dispose();
        NativeUtils.Free(arg2);
        pVertexAttributeDescriptions?.Dispose();
        NativeUtils.Free(arg4);
    }

    public void SetViewport(uint firstViewport, uint viewportCount, params Viewport[] pViewports)
    {
        var arg3 = ReferenceEquals(pViewports, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkViewport>(viewportCount);
        if (!ReferenceEquals(pViewports, null))
        {
            for (var i = 0U; i < viewportCount; ++i)
            {
                arg3[i] = pViewports[i].ToNative();
            }
        }
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewport(this, firstViewport, viewportCount, arg3);
    }

    public void SetViewport(uint firstViewport, uint viewportCount, in Viewport pViewports)
    {
        var arg3 = ReferenceEquals(pViewports, null) ? null : NativeUtils.StructOrEnumToPointer(pViewports.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewport(this, firstViewport, viewportCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetViewportShadingRatePaletteNV(uint firstViewport, uint viewportCount, in ShadingRatePaletteNV pShadingRatePalettes)
    {
        var arg3 = ReferenceEquals(pShadingRatePalettes, null) ? null : NativeUtils.StructOrEnumToPointer(pShadingRatePalettes.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportShadingRatePaletteNV(this, firstViewport, viewportCount, arg3);
        pShadingRatePalettes?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void SetViewportSwizzleNV(uint firstViewport, uint viewportCount, in ViewportSwizzleNV pViewportSwizzles)
    {
        var arg3 = ReferenceEquals(pViewportSwizzles, null) ? null : NativeUtils.StructOrEnumToPointer(pViewportSwizzles.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportSwizzleNV(this, firstViewport, viewportCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SetViewportWithCount(uint viewportCount, in Viewport pViewports)
    {
        var arg2 = ReferenceEquals(pViewports, null) ? null : NativeUtils.StructOrEnumToPointer(pViewports.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportWithCount(this, viewportCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetViewportWithCountEXT(uint viewportCount, in Viewport pViewports)
    {
        var arg2 = ReferenceEquals(pViewports, null) ? null : NativeUtils.StructOrEnumToPointer(pViewports.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportWithCountEXT(this, viewportCount, arg2);
        NativeUtils.Free(arg2);
    }

    public void SetViewportWScalingEnableNV(VkBool32 viewportWScalingEnable)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportWScalingEnableNV(this, viewportWScalingEnable);
    }

    public void SetViewportWScalingNV(uint firstViewport, uint viewportCount, in ViewportWScalingNV pViewportWScalings)
    {
        var arg3 = ReferenceEquals(pViewportWScalings, null) ? null : NativeUtils.StructOrEnumToPointer(pViewportWScalings.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSetViewportWScalingNV(this, firstViewport, viewportCount, arg3);
        NativeUtils.Free(arg3);
    }

    public void SubpassShadingHUAWEI()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdSubpassShadingHUAWEI(this);
    }

    public void TraceRaysIndirect2KHR(VkDeviceAddress indirectDeviceAddress)
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdTraceRaysIndirect2KHR(this, indirectDeviceAddress);
    }

    public void TraceRaysIndirectKHR(in StridedDeviceAddressRegionKHR pRaygenShaderBindingTable, in StridedDeviceAddressRegionKHR pMissShaderBindingTable, in StridedDeviceAddressRegionKHR pHitShaderBindingTable, in StridedDeviceAddressRegionKHR pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
    {
        var arg1 = ReferenceEquals(pRaygenShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pRaygenShaderBindingTable.ToNative());
        var arg2 = ReferenceEquals(pMissShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pMissShaderBindingTable.ToNative());
        var arg3 = ReferenceEquals(pHitShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pHitShaderBindingTable.ToNative());
        var arg4 = ReferenceEquals(pCallableShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pCallableShaderBindingTable.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdTraceRaysIndirectKHR(this, arg1, arg2, arg3, arg4, indirectDeviceAddress);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg4);
    }

    public void TraceRaysKHR(in StridedDeviceAddressRegionKHR pRaygenShaderBindingTable, in StridedDeviceAddressRegionKHR pMissShaderBindingTable, in StridedDeviceAddressRegionKHR pHitShaderBindingTable, in StridedDeviceAddressRegionKHR pCallableShaderBindingTable, uint width, uint height, uint depth)
    {
        var arg1 = ReferenceEquals(pRaygenShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pRaygenShaderBindingTable.ToNative());
        var arg2 = ReferenceEquals(pMissShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pMissShaderBindingTable.ToNative());
        var arg3 = ReferenceEquals(pHitShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pHitShaderBindingTable.ToNative());
        var arg4 = ReferenceEquals(pCallableShaderBindingTable, null) ? null : NativeUtils.StructOrEnumToPointer(pCallableShaderBindingTable.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdTraceRaysKHR(this, arg1, arg2, arg3, arg4, width, height, depth);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg2);
        NativeUtils.Free(arg3);
        NativeUtils.Free(arg4);
    }

    public void TraceRaysNV(AdamantiumVulkan.Core.Buffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, AdamantiumVulkan.Core.Buffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, AdamantiumVulkan.Core.Buffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, AdamantiumVulkan.Core.Buffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth)
    {
        var arg1 = ReferenceEquals(raygenShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)raygenShaderBindingTableBuffer;
        var arg3 = ReferenceEquals(missShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)missShaderBindingTableBuffer;
        var arg6 = ReferenceEquals(hitShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)hitShaderBindingTableBuffer;
        var arg9 = ReferenceEquals(callableShaderBindingTableBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)callableShaderBindingTableBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdTraceRaysNV(this, arg1, raygenShaderBindingOffset, arg3, missShaderBindingOffset, missShaderBindingStride, arg6, hitShaderBindingOffset, hitShaderBindingStride, arg9, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    }

    public void UpdateBuffer(AdamantiumVulkan.Core.Buffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, in void* pData)
    {
        var arg1 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdUpdateBuffer(this, arg1, dstOffset, dataSize, pData);
    }

    public void WaitEvents(uint eventCount, in AdamantiumVulkan.Core.Event pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, in MemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, in BufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, in ImageMemoryBarrier pImageMemoryBarriers)
    {
        var arg2 = ReferenceEquals(pEvents, null) ? null : NativeUtils.StructOrEnumToPointer((VkEvent_T)pEvents);
        var arg6 = ReferenceEquals(pMemoryBarriers, null) ? null : NativeUtils.StructOrEnumToPointer(pMemoryBarriers.ToNative());
        var arg8 = ReferenceEquals(pBufferMemoryBarriers, null) ? null : NativeUtils.StructOrEnumToPointer(pBufferMemoryBarriers.ToNative());
        var arg10 = ReferenceEquals(pImageMemoryBarriers, null) ? null : NativeUtils.StructOrEnumToPointer(pImageMemoryBarriers.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWaitEvents(this, eventCount, arg2, srcStageMask, dstStageMask, memoryBarrierCount, arg6, bufferMemoryBarrierCount, arg8, imageMemoryBarrierCount, arg10);
        NativeUtils.Free(arg2);
        pMemoryBarriers?.Dispose();
        NativeUtils.Free(arg6);
        pBufferMemoryBarriers?.Dispose();
        NativeUtils.Free(arg8);
        pImageMemoryBarriers?.Dispose();
        NativeUtils.Free(arg10);
    }

    public void WaitEvents2(uint eventCount, in AdamantiumVulkan.Core.Event pEvents, in DependencyInfo pDependencyInfos)
    {
        var arg2 = ReferenceEquals(pEvents, null) ? null : NativeUtils.StructOrEnumToPointer((VkEvent_T)pEvents);
        var arg3 = ReferenceEquals(pDependencyInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfos.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWaitEvents2(this, eventCount, arg2, arg3);
        NativeUtils.Free(arg2);
        pDependencyInfos?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void WaitEvents2KHR(uint eventCount, in AdamantiumVulkan.Core.Event pEvents, in DependencyInfo pDependencyInfos)
    {
        var arg2 = ReferenceEquals(pEvents, null) ? null : NativeUtils.StructOrEnumToPointer((VkEvent_T)pEvents);
        var arg3 = ReferenceEquals(pDependencyInfos, null) ? null : NativeUtils.StructOrEnumToPointer(pDependencyInfos.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWaitEvents2KHR(this, eventCount, arg2, arg3);
        NativeUtils.Free(arg2);
        pDependencyInfos?.Dispose();
        NativeUtils.Free(arg3);
    }

    public void WriteAccelerationStructuresPropertiesKHR(uint accelerationStructureCount, in AdamantiumVulkan.Core.AccelerationStructureKHR pAccelerationStructures, QueryType queryType, AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery)
    {
        var arg2 = ReferenceEquals(pAccelerationStructures, null) ? null : NativeUtils.StructOrEnumToPointer((VkAccelerationStructureKHR_T)pAccelerationStructures);
        var arg4 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteAccelerationStructuresPropertiesKHR(this, accelerationStructureCount, arg2, queryType, arg4, firstQuery);
        NativeUtils.Free(arg2);
    }

    public void WriteAccelerationStructuresPropertiesNV(uint accelerationStructureCount, in AdamantiumVulkan.Core.AccelerationStructureNV pAccelerationStructures, QueryType queryType, AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery)
    {
        var arg2 = ReferenceEquals(pAccelerationStructures, null) ? null : NativeUtils.StructOrEnumToPointer((VkAccelerationStructureNV_T)pAccelerationStructures);
        var arg4 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteAccelerationStructuresPropertiesNV(this, accelerationStructureCount, arg2, queryType, arg4, firstQuery);
        NativeUtils.Free(arg2);
    }

    public void WriteBufferMarker2AMD(VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.Buffer dstBuffer, VkDeviceSize dstOffset, uint marker)
    {
        var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteBufferMarker2AMD(this, stage, arg2, dstOffset, marker);
    }

    public void WriteBufferMarkerAMD(PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.Buffer dstBuffer, VkDeviceSize dstOffset, uint marker)
    {
        var arg2 = ReferenceEquals(dstBuffer, null) ? new VkBuffer_T() : (VkBuffer_T)dstBuffer;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteBufferMarkerAMD(this, pipelineStage, arg2, dstOffset, marker);
    }

    public void WriteMicromapsPropertiesEXT(uint micromapCount, in AdamantiumVulkan.Core.MicromapEXT pMicromaps, QueryType queryType, AdamantiumVulkan.Core.QueryPool queryPool, uint firstQuery)
    {
        var arg2 = ReferenceEquals(pMicromaps, null) ? null : NativeUtils.StructOrEnumToPointer((VkMicromapEXT_T)pMicromaps);
        var arg4 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteMicromapsPropertiesEXT(this, micromapCount, arg2, queryType, arg4, firstQuery);
        NativeUtils.Free(arg2);
    }

    public void WriteTimestamp(PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.QueryPool queryPool, uint query)
    {
        var arg2 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteTimestamp(this, pipelineStage, arg2, query);
    }

    public void WriteTimestamp2(VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.QueryPool queryPool, uint query)
    {
        var arg2 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteTimestamp2(this, stage, arg2, query);
    }

    public void WriteTimestamp2KHR(VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.QueryPool queryPool, uint query)
    {
        var arg2 = ReferenceEquals(queryPool, null) ? new VkQueryPool_T() : (VkQueryPool_T)queryPool;
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkCmdWriteTimestamp2KHR(this, stage, arg2, query);
    }

    public ref readonly VkCommandBuffer_T GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Core.Interop.VkCommandBuffer_T(CommandBuffer c)
    {
        return c?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkCommandBuffer_T();
    }

    public static implicit operator CommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T c)
    {
        return new CommandBuffer(c);
    }

}



