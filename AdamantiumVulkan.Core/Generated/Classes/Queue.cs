// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class Queue
{
    internal VkQueue_T __Instance;
    public Queue()
    {
    }

    public Queue(AdamantiumVulkan.Core.Interop.VkQueue_T __Instance)
    {
        this.__Instance = __Instance;
    }

    public void* NativePointer => __Instance.pointer;

    public void GetQueueCheckpointData2NV(ref uint pCheckpointDataCount, CheckpointData2NV pCheckpointData)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pCheckpointDataCount);
        var arg2 = ReferenceEquals(pCheckpointData, null) ? null : NativeUtils.StructOrEnumToPointer(pCheckpointData.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetQueueCheckpointData2NV(this, arg1, arg2);
        pCheckpointDataCount = *arg1;
        NativeUtils.Free(arg1);
        pCheckpointData?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void GetQueueCheckpointDataNV(ref uint pCheckpointDataCount, CheckpointDataNV pCheckpointData)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pCheckpointDataCount);
        var arg2 = ReferenceEquals(pCheckpointData, null) ? null : NativeUtils.StructOrEnumToPointer(pCheckpointData.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetQueueCheckpointDataNV(this, arg1, arg2);
        pCheckpointDataCount = *arg1;
        NativeUtils.Free(arg1);
        pCheckpointData?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void QueueBeginDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
    {
        var arg1 = ReferenceEquals(pLabelInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLabelInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueBeginDebugUtilsLabelEXT(this, arg1);
        pLabelInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public Result QueueBindSparse(uint bindInfoCount, in BindSparseInfo pBindInfo, AdamantiumVulkan.Core.Fence fence)
    {
        var arg2 = ReferenceEquals(pBindInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pBindInfo.ToNative());
        var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueBindSparse(this, bindInfoCount, arg2, arg3);
        pBindInfo?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public void QueueEndDebugUtilsLabelEXT()
    {
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueEndDebugUtilsLabelEXT(this);
    }

    public void QueueInsertDebugUtilsLabelEXT(in DebugUtilsLabelEXT pLabelInfo)
    {
        var arg1 = ReferenceEquals(pLabelInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pLabelInfo.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueInsertDebugUtilsLabelEXT(this, arg1);
        pLabelInfo?.Dispose();
        NativeUtils.Free(arg1);
    }

    public Result QueuePresentKHR(in PresentInfoKHR pPresentInfo)
    {
        var arg1 = ReferenceEquals(pPresentInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pPresentInfo.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueuePresentKHR(this, arg1);
        pPresentInfo?.Dispose();
        NativeUtils.Free(arg1);
        return result;
    }

    public Result QueueSetPerformanceConfigurationINTEL(AdamantiumVulkan.Core.PerformanceConfigurationINTEL configuration)
    {
        var arg1 = ReferenceEquals(configuration, null) ? new VkPerformanceConfigurationINTEL_T() : (VkPerformanceConfigurationINTEL_T)configuration;
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSetPerformanceConfigurationINTEL(this, arg1);
    }

    public Result QueueSubmit(uint submitCount, SubmitInfo[] pSubmits, AdamantiumVulkan.Core.Fence fence)
    {
        var arg2 = ReferenceEquals(pSubmits, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkSubmitInfo>(pSubmits.Length);
        if (!ReferenceEquals(pSubmits, null))
        {
            for (var i = 0U; i < pSubmits.Length; ++i)
            {
                arg2[i] = pSubmits[i].ToNative();
            }
        }
        var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit(this, submitCount, arg2, arg3);
        if (!ReferenceEquals(pSubmits, null))
        {
            for (var i = 0U; i < pSubmits.Length; ++i)
            {
                pSubmits[i]?.Dispose();
            }
        }
        return result;
    }

    public Result QueueSubmit(uint submitCount, SubmitInfo pSubmits, AdamantiumVulkan.Core.Fence fence)
    {
        var arg2 = ReferenceEquals(pSubmits, null) ? null : NativeUtils.StructOrEnumToPointer(pSubmits.ToNative());
        var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit(this, submitCount, arg2, arg3);
        pSubmits?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result QueueSubmit2(uint submitCount, in SubmitInfo2 pSubmits, AdamantiumVulkan.Core.Fence fence)
    {
        var arg2 = ReferenceEquals(pSubmits, null) ? null : NativeUtils.StructOrEnumToPointer(pSubmits.ToNative());
        var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit2(this, submitCount, arg2, arg3);
        pSubmits?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result QueueSubmit2KHR(uint submitCount, in SubmitInfo2 pSubmits, AdamantiumVulkan.Core.Fence fence)
    {
        var arg2 = ReferenceEquals(pSubmits, null) ? null : NativeUtils.StructOrEnumToPointer(pSubmits.ToNative());
        var arg3 = ReferenceEquals(fence, null) ? new VkFence_T() : (VkFence_T)fence;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueSubmit2KHR(this, submitCount, arg2, arg3);
        pSubmits?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result QueueWaitIdle()
    {
        return AdamantiumVulkan.Core.Interop.VulkanInterop.vkQueueWaitIdle(this);
    }

    public ref readonly VkQueue_T GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Core.Interop.VkQueue_T(Queue q)
    {
        return q?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkQueue_T();
    }

    public static implicit operator Queue(AdamantiumVulkan.Core.Interop.VkQueue_T q)
    {
        return new Queue(q);
    }

}



