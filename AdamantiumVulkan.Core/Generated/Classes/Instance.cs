// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class Instance
{
    internal VkInstance_T __Instance;
    public Instance()
    {
    }

    public Instance(AdamantiumVulkan.Core.Interop.VkInstance_T __Instance)
    {
        this.__Instance = __Instance;
    }

    public void* NativePointer => __Instance.pointer;

    public Result CreateDebugReportCallbackEXT(in DebugReportCallbackCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DebugReportCallbackEXT pCallback)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDebugReportCallbackEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDebugReportCallbackEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pCallback = new DebugReportCallbackEXT(arg3);
        return result;
    }

    public Result CreateDebugUtilsMessengerEXT(in DebugUtilsMessengerCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.DebugUtilsMessengerEXT pMessenger)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkDebugUtilsMessengerEXT_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDebugUtilsMessengerEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pMessenger = new DebugUtilsMessengerEXT(arg3);
        return result;
    }

    public Result CreateDisplayPlaneSurfaceKHR(in DisplaySurfaceCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SurfaceKHR pSurface)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSurfaceKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateDisplayPlaneSurfaceKHR(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSurface = new SurfaceKHR(arg3);
        return result;
    }

    public Result CreateHeadlessSurfaceEXT(in HeadlessSurfaceCreateInfoEXT pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SurfaceKHR pSurface)
    {
        var arg1 = ReferenceEquals(pCreateInfo, null) ? null : NativeUtils.StructOrEnumToPointer(pCreateInfo.ToNative());
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        VkSurfaceKHR_T arg3;
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkCreateHeadlessSurfaceEXT(this, arg1, arg2, out arg3);
        pCreateInfo?.Dispose();
        NativeUtils.Free(arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
        pSurface = new SurfaceKHR(arg3);
        return result;
    }

    public void DebugReportMessageEXT(VkDebugReportFlagsEXT flags, DebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, string pLayerPrefix, string pMessage)
    {
        var arg6 = (sbyte*)NativeUtils.StringToPointer(pLayerPrefix, false);
        var arg7 = (sbyte*)NativeUtils.StringToPointer(pMessage, false);
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDebugReportMessageEXT(this, flags, objectType, @object, location, messageCode, arg6, arg7);
        NativeUtils.Free(arg6);
        NativeUtils.Free(arg7);
    }

    public void DestroyDebugReportCallbackEXT(AdamantiumVulkan.Core.DebugReportCallbackEXT callback, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(callback, null) ? new VkDebugReportCallbackEXT_T() : (VkDebugReportCallbackEXT_T)callback;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDebugReportCallbackEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyDebugUtilsMessengerEXT(AdamantiumVulkan.Core.DebugUtilsMessengerEXT messenger, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(messenger, null) ? new VkDebugUtilsMessengerEXT_T() : (VkDebugUtilsMessengerEXT_T)messenger;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyDebugUtilsMessengerEXT(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public void DestroyInstance(in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroyInstance(this, arg1);
        pAllocator?.Dispose();
        NativeUtils.Free(arg1);
    }

    public void DestroySurfaceKHR(AdamantiumVulkan.Core.SurfaceKHR surface, in AllocationCallbacks pAllocator = null)
    {
        var arg1 = ReferenceEquals(surface, null) ? new VkSurfaceKHR_T() : (VkSurfaceKHR_T)surface;
        var arg2 = ReferenceEquals(pAllocator, null) ? null : NativeUtils.StructOrEnumToPointer(pAllocator.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkDestroySurfaceKHR(this, arg1, arg2);
        pAllocator?.Dispose();
        NativeUtils.Free(arg2);
    }

    public Result EnumeratePhysicalDeviceGroups(ref uint pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPhysicalDeviceGroupCount);
        var arg2 = ReferenceEquals(pPhysicalDeviceGroupProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pPhysicalDeviceGroupProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDeviceGroups(this, arg1, arg2);
        pPhysicalDeviceGroupCount = *arg1;
        NativeUtils.Free(arg1);
        pPhysicalDeviceGroupProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result EnumeratePhysicalDeviceGroupsKHR(ref uint pPhysicalDeviceGroupCount, PhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPhysicalDeviceGroupCount);
        var arg2 = ReferenceEquals(pPhysicalDeviceGroupProperties, null) ? null : NativeUtils.StructOrEnumToPointer(pPhysicalDeviceGroupProperties.ToNative());
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDeviceGroupsKHR(this, arg1, arg2);
        pPhysicalDeviceGroupCount = *arg1;
        NativeUtils.Free(arg1);
        pPhysicalDeviceGroupProperties?.Dispose();
        NativeUtils.Free(arg2);
        return result;
    }

    public Result EnumeratePhysicalDevices(ref uint pPhysicalDeviceCount, AdamantiumVulkan.Core.PhysicalDevice[] pPhysicalDevices)
    {
        var arg1 = NativeUtils.StructOrEnumToPointer(pPhysicalDeviceCount);
        var arg2 = ReferenceEquals(pPhysicalDevices, null) ? null : NativeUtils.GetPointerToManagedArray<AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T>(pPhysicalDevices.Length);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkEnumeratePhysicalDevices(this, arg1, arg2);
        pPhysicalDeviceCount = *arg1;
        NativeUtils.Free(arg1);
        if (!ReferenceEquals(pPhysicalDevices, null))
        {
            for (var i = 0U; i < pPhysicalDevices.Length; ++i)
            {
                pPhysicalDevices[i] = new PhysicalDevice(arg2[i]);
            }
        }
        NativeUtils.Free(arg2);
        return result;
    }

    public void* GetInstanceProcAddr(string pName)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(pName, false);
        var result = AdamantiumVulkan.Core.Interop.VulkanInterop.vkGetInstanceProcAddr(this, arg1);
        NativeUtils.Free(arg1);
        return result;
    }

    public void SubmitDebugUtilsMessageEXT(DebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, in DebugUtilsMessengerCallbackDataEXT pCallbackData)
    {
        var arg3 = ReferenceEquals(pCallbackData, null) ? null : NativeUtils.StructOrEnumToPointer(pCallbackData.ToNative());
        AdamantiumVulkan.Core.Interop.VulkanInterop.vkSubmitDebugUtilsMessageEXT(this, messageSeverity, messageTypes, arg3);
        pCallbackData?.Dispose();
        NativeUtils.Free(arg3);
    }

    public ref readonly VkInstance_T GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Core.Interop.VkInstance_T(Instance i)
    {
        return i?.__Instance ?? new AdamantiumVulkan.Core.Interop.VkInstance_T();
    }

    public static implicit operator Instance(AdamantiumVulkan.Core.Interop.VkInstance_T i)
    {
        return new Instance(i);
    }

}



