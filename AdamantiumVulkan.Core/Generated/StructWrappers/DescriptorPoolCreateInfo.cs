// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DescriptorPoolCreateInfo : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize> _pPoolSizes;

    public DescriptorPoolCreateInfo()
    {
    }

    public DescriptorPoolCreateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        MaxSets = _internal.maxSets;
        PoolSizeCount = _internal.poolSizeCount;
        PoolSizes = new DescriptorPoolSize[_internal.poolSizeCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pPoolSizes, _internal.poolSizeCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PoolSizes[i] = new DescriptorPoolSize(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pPoolSizes);
    }

    public StructureType SType => StructureType.DescriptorPoolCreateInfo;
    public void* PNext { get; set; }
    public VkDescriptorPoolCreateFlags Flags { get; set; }
    public uint MaxSets { get; set; }
    public uint PoolSizeCount { get; set; }
    public DescriptorPoolSize[] PoolSizes { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.maxSets = MaxSets;
        _internal.poolSizeCount = PoolSizeCount;
        _pPoolSizes.Dispose();
        if (PoolSizes != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize[PoolSizes.Length];
            for (int i = 0; i < PoolSizes.Length; ++i)
            {
                tmpArray0[i] = PoolSizes[i].ToNative();
            }
            _pPoolSizes = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkDescriptorPoolSize>(tmpArray0);
            _internal.pPoolSizes = _pPoolSizes.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pPoolSizes.Dispose();
    }


    public static implicit operator DescriptorPoolCreateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo d)
    {
        return new DescriptorPoolCreateInfo(d);
    }

}



