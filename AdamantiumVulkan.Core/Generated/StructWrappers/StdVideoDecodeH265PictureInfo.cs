// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoDecodeH265PictureInfo
{
    public StdVideoDecodeH265PictureInfo()
    {
    }

    public StdVideoDecodeH265PictureInfo(AdamantiumVulkan.Interop.StdVideoDecodeH265PictureInfo _internal)
    {
        Flags = new StdVideoDecodeH265PictureInfoFlags(_internal.flags);
        Sps_video_parameter_set_id = _internal.sps_video_parameter_set_id;
        Ps_seq_parameter_set_id = _internal.pps_seq_parameter_set_id;
        Ps_pic_parameter_set_id = _internal.pps_pic_parameter_set_id;
        NumDeltaPocsOfRefRpsIdx = _internal.NumDeltaPocsOfRefRpsIdx;
        PicOrderCntVal = _internal.PicOrderCntVal;
        NumBitsForSTRefPicSetInSlice = _internal.NumBitsForSTRefPicSetInSlice;
        Reserved = _internal.reserved;
        RefPicSetStCurrBefore = NativeUtils.PointerToManagedArray(_internal.RefPicSetStCurrBefore, 8);
        RefPicSetStCurrAfter = NativeUtils.PointerToManagedArray(_internal.RefPicSetStCurrAfter, 8);
        RefPicSetLtCurr = NativeUtils.PointerToManagedArray(_internal.RefPicSetLtCurr, 8);
    }

    public StdVideoDecodeH265PictureInfoFlags Flags { get; set; }
    public byte Sps_video_parameter_set_id { get; set; }
    public byte Ps_seq_parameter_set_id { get; set; }
    public byte Ps_pic_parameter_set_id { get; set; }
    public byte NumDeltaPocsOfRefRpsIdx { get; set; }
    public int PicOrderCntVal { get; set; }
    public ushort NumBitsForSTRefPicSetInSlice { get; set; }
    public ushort Reserved { get; set; }
    public byte[] RefPicSetStCurrBefore { get; set; }
    public byte[] RefPicSetStCurrAfter { get; set; }
    public byte[] RefPicSetLtCurr { get; set; }

    public AdamantiumVulkan.Interop.StdVideoDecodeH265PictureInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoDecodeH265PictureInfo();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.sps_video_parameter_set_id = Sps_video_parameter_set_id;
        _internal.pps_seq_parameter_set_id = Ps_seq_parameter_set_id;
        _internal.pps_pic_parameter_set_id = Ps_pic_parameter_set_id;
        _internal.NumDeltaPocsOfRefRpsIdx = NumDeltaPocsOfRefRpsIdx;
        _internal.PicOrderCntVal = PicOrderCntVal;
        _internal.NumBitsForSTRefPicSetInSlice = NumBitsForSTRefPicSetInSlice;
        _internal.reserved = Reserved;
        if(RefPicSetStCurrBefore != null)
        {
            if (RefPicSetStCurrBefore.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicSetStCurrBefore), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicSetStCurrBefore, 8, RefPicSetStCurrBefore);
        }
        if(RefPicSetStCurrAfter != null)
        {
            if (RefPicSetStCurrAfter.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicSetStCurrAfter), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicSetStCurrAfter, 8, RefPicSetStCurrAfter);
        }
        if(RefPicSetLtCurr != null)
        {
            if (RefPicSetLtCurr.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicSetLtCurr), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicSetLtCurr, 8, RefPicSetLtCurr);
        }
        return _internal;
    }

    public static implicit operator StdVideoDecodeH265PictureInfo(AdamantiumVulkan.Interop.StdVideoDecodeH265PictureInfo s)
    {
        return new StdVideoDecodeH265PictureInfo(s);
    }

}



