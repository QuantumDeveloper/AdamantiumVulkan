// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class TimelineSemaphoreSubmitInfo : QBDisposableObject
{
    private NativeStruct<ulong> _pWaitSemaphoreValues;

    private NativeStruct<ulong> _pSignalSemaphoreValues;

    public TimelineSemaphoreSubmitInfo()
    {
    }

    public TimelineSemaphoreSubmitInfo(AdamantiumVulkan.Core.Interop.VkTimelineSemaphoreSubmitInfo _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        WaitSemaphoreValueCount = _internal.waitSemaphoreValueCount;
        if (_internal.pWaitSemaphoreValues != null)
        {
            PWaitSemaphoreValues = *_internal.pWaitSemaphoreValues;
            NativeUtils.Free(_internal.pWaitSemaphoreValues);
        }
        SignalSemaphoreValueCount = _internal.signalSemaphoreValueCount;
        if (_internal.pSignalSemaphoreValues != null)
        {
            PSignalSemaphoreValues = *_internal.pSignalSemaphoreValues;
            NativeUtils.Free(_internal.pSignalSemaphoreValues);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint WaitSemaphoreValueCount { get; set; }
    public ulong? PWaitSemaphoreValues { get; set; }
    public uint SignalSemaphoreValueCount { get; set; }
    public ulong? PSignalSemaphoreValues { get; set; }

    public AdamantiumVulkan.Core.Interop.VkTimelineSemaphoreSubmitInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkTimelineSemaphoreSubmitInfo();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (WaitSemaphoreValueCount != default)
        {
            _internal.waitSemaphoreValueCount = WaitSemaphoreValueCount;
        }
        _pWaitSemaphoreValues.Dispose();
        if (PWaitSemaphoreValues.HasValue)
        {
            _pWaitSemaphoreValues = new NativeStruct<ulong>(PWaitSemaphoreValues.Value);
            _internal.pWaitSemaphoreValues = _pWaitSemaphoreValues.Handle;
        }
        if (SignalSemaphoreValueCount != default)
        {
            _internal.signalSemaphoreValueCount = SignalSemaphoreValueCount;
        }
        _pSignalSemaphoreValues.Dispose();
        if (PSignalSemaphoreValues.HasValue)
        {
            _pSignalSemaphoreValues = new NativeStruct<ulong>(PSignalSemaphoreValues.Value);
            _internal.pSignalSemaphoreValues = _pSignalSemaphoreValues.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pWaitSemaphoreValues.Dispose();
        _pSignalSemaphoreValues.Dispose();
    }


    public static implicit operator TimelineSemaphoreSubmitInfo(AdamantiumVulkan.Core.Interop.VkTimelineSemaphoreSubmitInfo t)
    {
        return new TimelineSemaphoreSubmitInfo(t);
    }

}



