// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class HdrMetadataEXT : QBDisposableObject
{
    public HdrMetadataEXT()
    {
    }

    public HdrMetadataEXT(AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT _internal)
    {
        PNext = _internal.pNext;
        DisplayPrimaryRed = new XYColorEXT(_internal.displayPrimaryRed);
        DisplayPrimaryGreen = new XYColorEXT(_internal.displayPrimaryGreen);
        DisplayPrimaryBlue = new XYColorEXT(_internal.displayPrimaryBlue);
        WhitePoint = new XYColorEXT(_internal.whitePoint);
        MaxLuminance = _internal.maxLuminance;
        MinLuminance = _internal.minLuminance;
        MaxContentLightLevel = _internal.maxContentLightLevel;
        MaxFrameAverageLightLevel = _internal.maxFrameAverageLightLevel;
    }

    public StructureType SType => StructureType.HdrMetadataExt;
    public void* PNext { get; set; }
    public XYColorEXT DisplayPrimaryRed { get; set; }
    public XYColorEXT DisplayPrimaryGreen { get; set; }
    public XYColorEXT DisplayPrimaryBlue { get; set; }
    public XYColorEXT WhitePoint { get; set; }
    public float MaxLuminance { get; set; }
    public float MinLuminance { get; set; }
    public float MaxContentLightLevel { get; set; }
    public float MaxFrameAverageLightLevel { get; set; }

    public AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (DisplayPrimaryRed != default)
        {
            _internal.displayPrimaryRed = DisplayPrimaryRed.ToNative();
        }
        if (DisplayPrimaryGreen != default)
        {
            _internal.displayPrimaryGreen = DisplayPrimaryGreen.ToNative();
        }
        if (DisplayPrimaryBlue != default)
        {
            _internal.displayPrimaryBlue = DisplayPrimaryBlue.ToNative();
        }
        if (WhitePoint != default)
        {
            _internal.whitePoint = WhitePoint.ToNative();
        }
        if (MaxLuminance != default)
        {
            _internal.maxLuminance = MaxLuminance;
        }
        if (MinLuminance != default)
        {
            _internal.minLuminance = MinLuminance;
        }
        if (MaxContentLightLevel != default)
        {
            _internal.maxContentLightLevel = MaxContentLightLevel;
        }
        if (MaxFrameAverageLightLevel != default)
        {
            _internal.maxFrameAverageLightLevel = MaxFrameAverageLightLevel;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        DisplayPrimaryRed?.Dispose();
        DisplayPrimaryGreen?.Dispose();
        DisplayPrimaryBlue?.Dispose();
        WhitePoint?.Dispose();
    }


    public static implicit operator HdrMetadataEXT(AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT h)
    {
        return new HdrMetadataEXT(h);
    }

}



