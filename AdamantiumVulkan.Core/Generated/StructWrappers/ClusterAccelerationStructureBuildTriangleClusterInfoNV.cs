// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class ClusterAccelerationStructureBuildTriangleClusterInfoNV : QBDisposableObject
{
    public ClusterAccelerationStructureBuildTriangleClusterInfoNV()
    {
    }

    public ClusterAccelerationStructureBuildTriangleClusterInfoNV(AdamantiumVulkan.Core.Interop.VkClusterAccelerationStructureBuildTriangleClusterInfoNV _internal)
    {
        ClusterID = _internal.clusterID;
        ClusterFlags = _internal.clusterFlags;
        TriangleCount = _internal.triangleCount;
        VertexCount = _internal.vertexCount;
        PositionTruncateBitCount = _internal.positionTruncateBitCount;
        IndexType = _internal.indexType;
        OpacityMicromapIndexType = _internal.opacityMicromapIndexType;
        BaseGeometryIndexAndGeometryFlags = new ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(_internal.baseGeometryIndexAndGeometryFlags);
        IndexBufferStride = _internal.indexBufferStride;
        VertexBufferStride = _internal.vertexBufferStride;
        GeometryIndexAndFlagsBufferStride = _internal.geometryIndexAndFlagsBufferStride;
        OpacityMicromapIndexBufferStride = _internal.opacityMicromapIndexBufferStride;
        IndexBuffer = _internal.indexBuffer;
        VertexBuffer = _internal.vertexBuffer;
        GeometryIndexAndFlagsBuffer = _internal.geometryIndexAndFlagsBuffer;
        OpacityMicromapArray = _internal.opacityMicromapArray;
        OpacityMicromapIndexBuffer = _internal.opacityMicromapIndexBuffer;
    }

    public uint ClusterID { get; set; }
    public VkClusterAccelerationStructureClusterFlagsNV ClusterFlags { get; set; }
    public uint TriangleCount { get; set; }
    public uint VertexCount { get; set; }
    public uint PositionTruncateBitCount { get; set; }
    public uint IndexType { get; set; }
    public uint OpacityMicromapIndexType { get; set; }
    public ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV BaseGeometryIndexAndGeometryFlags { get; set; }
    public ushort IndexBufferStride { get; set; }
    public ushort VertexBufferStride { get; set; }
    public ushort GeometryIndexAndFlagsBufferStride { get; set; }
    public ushort OpacityMicromapIndexBufferStride { get; set; }
    public VkDeviceAddress IndexBuffer { get; set; }
    public VkDeviceAddress VertexBuffer { get; set; }
    public VkDeviceAddress GeometryIndexAndFlagsBuffer { get; set; }
    public VkDeviceAddress OpacityMicromapArray { get; set; }
    public VkDeviceAddress OpacityMicromapIndexBuffer { get; set; }

    public AdamantiumVulkan.Core.Interop.VkClusterAccelerationStructureBuildTriangleClusterInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkClusterAccelerationStructureBuildTriangleClusterInfoNV();
        if (ClusterID != default)
        {
            _internal.clusterID = ClusterID;
        }
        if (ClusterFlags != (uint)default)
        {
            _internal.clusterFlags = ClusterFlags;
        }
        if (TriangleCount != default)
        {
            _internal.triangleCount = TriangleCount;
        }
        if (VertexCount != default)
        {
            _internal.vertexCount = VertexCount;
        }
        if (PositionTruncateBitCount != default)
        {
            _internal.positionTruncateBitCount = PositionTruncateBitCount;
        }
        if (IndexType != default)
        {
            _internal.indexType = IndexType;
        }
        if (OpacityMicromapIndexType != default)
        {
            _internal.opacityMicromapIndexType = OpacityMicromapIndexType;
        }
        if (BaseGeometryIndexAndGeometryFlags != default)
        {
            _internal.baseGeometryIndexAndGeometryFlags = BaseGeometryIndexAndGeometryFlags.ToNative();
        }
        if (IndexBufferStride != default)
        {
            _internal.indexBufferStride = IndexBufferStride;
        }
        if (VertexBufferStride != default)
        {
            _internal.vertexBufferStride = VertexBufferStride;
        }
        if (GeometryIndexAndFlagsBufferStride != default)
        {
            _internal.geometryIndexAndFlagsBufferStride = GeometryIndexAndFlagsBufferStride;
        }
        if (OpacityMicromapIndexBufferStride != default)
        {
            _internal.opacityMicromapIndexBufferStride = OpacityMicromapIndexBufferStride;
        }
        if (IndexBuffer != (ulong)default)
        {
            _internal.indexBuffer = IndexBuffer;
        }
        if (VertexBuffer != (ulong)default)
        {
            _internal.vertexBuffer = VertexBuffer;
        }
        if (GeometryIndexAndFlagsBuffer != (ulong)default)
        {
            _internal.geometryIndexAndFlagsBuffer = GeometryIndexAndFlagsBuffer;
        }
        if (OpacityMicromapArray != (ulong)default)
        {
            _internal.opacityMicromapArray = OpacityMicromapArray;
        }
        if (OpacityMicromapIndexBuffer != (ulong)default)
        {
            _internal.opacityMicromapIndexBuffer = OpacityMicromapIndexBuffer;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        BaseGeometryIndexAndGeometryFlags?.Dispose();
    }


    public static implicit operator ClusterAccelerationStructureBuildTriangleClusterInfoNV(AdamantiumVulkan.Core.Interop.VkClusterAccelerationStructureBuildTriangleClusterInfoNV c)
    {
        return new ClusterAccelerationStructureBuildTriangleClusterInfoNV(c);
    }

}



