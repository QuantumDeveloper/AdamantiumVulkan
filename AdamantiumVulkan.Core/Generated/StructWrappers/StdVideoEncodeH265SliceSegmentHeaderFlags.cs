// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265SliceSegmentHeaderFlags
{
    public StdVideoEncodeH265SliceSegmentHeaderFlags()
    {
    }

    public StdVideoEncodeH265SliceSegmentHeaderFlags(AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeaderFlags _internal)
    {
        First_slice_segment_in_pic_flag = _internal.first_slice_segment_in_pic_flag;
        Dependent_slice_segment_flag = _internal.dependent_slice_segment_flag;
        Slice_sao_luma_flag = _internal.slice_sao_luma_flag;
        Slice_sao_chroma_flag = _internal.slice_sao_chroma_flag;
        Num_ref_idx_active_override_flag = _internal.num_ref_idx_active_override_flag;
        Mvd_l1_zero_flag = _internal.mvd_l1_zero_flag;
        Cabac_init_flag = _internal.cabac_init_flag;
        Cu_chroma_qp_offset_enabled_flag = _internal.cu_chroma_qp_offset_enabled_flag;
        Deblocking_filter_override_flag = _internal.deblocking_filter_override_flag;
        Slice_deblocking_filter_disabled_flag = _internal.slice_deblocking_filter_disabled_flag;
        Collocated_from_l0_flag = _internal.collocated_from_l0_flag;
        Slice_loop_filter_across_slices_enabled_flag = _internal.slice_loop_filter_across_slices_enabled_flag;
        Reserved = _internal.reserved;
    }

    public uint First_slice_segment_in_pic_flag { get; set; }
    public uint Dependent_slice_segment_flag { get; set; }
    public uint Slice_sao_luma_flag { get; set; }
    public uint Slice_sao_chroma_flag { get; set; }
    public uint Num_ref_idx_active_override_flag { get; set; }
    public uint Mvd_l1_zero_flag { get; set; }
    public uint Cabac_init_flag { get; set; }
    public uint Cu_chroma_qp_offset_enabled_flag { get; set; }
    public uint Deblocking_filter_override_flag { get; set; }
    public uint Slice_deblocking_filter_disabled_flag { get; set; }
    public uint Collocated_from_l0_flag { get; set; }
    public uint Slice_loop_filter_across_slices_enabled_flag { get; set; }
    public uint Reserved { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeaderFlags ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeaderFlags();
        _internal.first_slice_segment_in_pic_flag = First_slice_segment_in_pic_flag;
        _internal.dependent_slice_segment_flag = Dependent_slice_segment_flag;
        _internal.slice_sao_luma_flag = Slice_sao_luma_flag;
        _internal.slice_sao_chroma_flag = Slice_sao_chroma_flag;
        _internal.num_ref_idx_active_override_flag = Num_ref_idx_active_override_flag;
        _internal.mvd_l1_zero_flag = Mvd_l1_zero_flag;
        _internal.cabac_init_flag = Cabac_init_flag;
        _internal.cu_chroma_qp_offset_enabled_flag = Cu_chroma_qp_offset_enabled_flag;
        _internal.deblocking_filter_override_flag = Deblocking_filter_override_flag;
        _internal.slice_deblocking_filter_disabled_flag = Slice_deblocking_filter_disabled_flag;
        _internal.collocated_from_l0_flag = Collocated_from_l0_flag;
        _internal.slice_loop_filter_across_slices_enabled_flag = Slice_loop_filter_across_slices_enabled_flag;
        _internal.reserved = Reserved;
        return _internal;
    }

    public static implicit operator StdVideoEncodeH265SliceSegmentHeaderFlags(AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeaderFlags s)
    {
        return new StdVideoEncodeH265SliceSegmentHeaderFlags(s);
    }

}



