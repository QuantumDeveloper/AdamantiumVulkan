// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class OpticalFlowExecuteInfoNV : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkRect2D> _pRegions;

    public OpticalFlowExecuteInfoNV()
    {
    }

    public OpticalFlowExecuteInfoNV(AdamantiumVulkan.Core.Interop.VkOpticalFlowExecuteInfoNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        RegionCount = _internal.regionCount;
        PRegions = new Rect2D(*_internal.pRegions);
        NativeUtils.Free(_internal.pRegions);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkOpticalFlowExecuteFlagsNV Flags { get; set; }
    public uint RegionCount { get; set; }
    public Rect2D PRegions { get; set; }

    public AdamantiumVulkan.Core.Interop.VkOpticalFlowExecuteInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkOpticalFlowExecuteInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (RegionCount != default)
        {
            _internal.regionCount = RegionCount;
        }
        _pRegions.Dispose();
        if (PRegions != default)
        {
            var struct0 = PRegions.ToNative();
            _pRegions = new NativeStruct<AdamantiumVulkan.Core.Interop.VkRect2D>(struct0);
            _internal.pRegions = _pRegions.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pRegions.Dispose();
    }


    public static implicit operator OpticalFlowExecuteInfoNV(AdamantiumVulkan.Core.Interop.VkOpticalFlowExecuteInfoNV o)
    {
        return new OpticalFlowExecuteInfoNV(o);
    }

}



