// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class BindSparseInfo : QBDisposableObject
{
    private NativeStruct<VkSemaphore_T> pWaitSemaphores;

    private NativeStruct<VkSparseBufferMemoryBindInfo> pBufferBinds;

    private NativeStruct<VkSparseImageOpaqueMemoryBindInfo> pImageOpaqueBinds;

    private NativeStruct<VkSparseImageMemoryBindInfo> pImageBinds;

    private NativeStruct<VkSemaphore_T> pSignalSemaphores;

    public BindSparseInfo()
    {
    }

    public BindSparseInfo(AdamantiumVulkan.Core.Interop.VkBindSparseInfo _internal)
    {
        PNext = _internal.pNext;
        WaitSemaphoreCount = _internal.waitSemaphoreCount;
        PWaitSemaphores = new Semaphore(*_internal.pWaitSemaphores);
        NativeUtils.Free(_internal.pWaitSemaphores);
        BufferBindCount = _internal.bufferBindCount;
        PBufferBinds = new SparseBufferMemoryBindInfo(*_internal.pBufferBinds);
        NativeUtils.Free(_internal.pBufferBinds);
        ImageOpaqueBindCount = _internal.imageOpaqueBindCount;
        PImageOpaqueBinds = new SparseImageOpaqueMemoryBindInfo(*_internal.pImageOpaqueBinds);
        NativeUtils.Free(_internal.pImageOpaqueBinds);
        ImageBindCount = _internal.imageBindCount;
        PImageBinds = new SparseImageMemoryBindInfo(*_internal.pImageBinds);
        NativeUtils.Free(_internal.pImageBinds);
        SignalSemaphoreCount = _internal.signalSemaphoreCount;
        PSignalSemaphores = new Semaphore(*_internal.pSignalSemaphores);
        NativeUtils.Free(_internal.pSignalSemaphores);
    }

    public StructureType SType => StructureType.BindSparseInfo;
    public void* PNext { get; set; }
    public uint WaitSemaphoreCount { get; set; }
    public Semaphore PWaitSemaphores { get; set; }
    public uint BufferBindCount { get; set; }
    public SparseBufferMemoryBindInfo PBufferBinds { get; set; }
    public uint ImageOpaqueBindCount { get; set; }
    public SparseImageOpaqueMemoryBindInfo PImageOpaqueBinds { get; set; }
    public uint ImageBindCount { get; set; }
    public SparseImageMemoryBindInfo PImageBinds { get; set; }
    public uint SignalSemaphoreCount { get; set; }
    public Semaphore PSignalSemaphores { get; set; }

    public AdamantiumVulkan.Core.Interop.VkBindSparseInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkBindSparseInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.waitSemaphoreCount = WaitSemaphoreCount;
        pWaitSemaphores.Dispose();
        if (PWaitSemaphores != null)
        {
            AdamantiumVulkan.Core.Interop.VkSemaphore_T struct0 = PWaitSemaphores;
            pWaitSemaphores = new NativeStruct<VkSemaphore_T>(struct0);
            _internal.pWaitSemaphores = pWaitSemaphores.Handle;
        }
        _internal.bufferBindCount = BufferBindCount;
        pBufferBinds.Dispose();
        if (PBufferBinds != null)
        {
            var struct1 = PBufferBinds.ToNative();
            pBufferBinds = new NativeStruct<VkSparseBufferMemoryBindInfo>(struct1);
            _internal.pBufferBinds = pBufferBinds.Handle;
        }
        _internal.imageOpaqueBindCount = ImageOpaqueBindCount;
        pImageOpaqueBinds.Dispose();
        if (PImageOpaqueBinds != null)
        {
            var struct2 = PImageOpaqueBinds.ToNative();
            pImageOpaqueBinds = new NativeStruct<VkSparseImageOpaqueMemoryBindInfo>(struct2);
            _internal.pImageOpaqueBinds = pImageOpaqueBinds.Handle;
        }
        _internal.imageBindCount = ImageBindCount;
        pImageBinds.Dispose();
        if (PImageBinds != null)
        {
            var struct3 = PImageBinds.ToNative();
            pImageBinds = new NativeStruct<VkSparseImageMemoryBindInfo>(struct3);
            _internal.pImageBinds = pImageBinds.Handle;
        }
        _internal.signalSemaphoreCount = SignalSemaphoreCount;
        pSignalSemaphores.Dispose();
        if (PSignalSemaphores != null)
        {
            AdamantiumVulkan.Core.Interop.VkSemaphore_T struct4 = PSignalSemaphores;
            pSignalSemaphores = new NativeStruct<VkSemaphore_T>(struct4);
            _internal.pSignalSemaphores = pSignalSemaphores.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pWaitSemaphores.Dispose();
        pBufferBinds.Dispose();
        pImageOpaqueBinds.Dispose();
        pImageBinds.Dispose();
        pSignalSemaphores.Dispose();
    }


    public static implicit operator BindSparseInfo(AdamantiumVulkan.Core.Interop.VkBindSparseInfo b)
    {
        return new BindSparseInfo(b);
    }

}



