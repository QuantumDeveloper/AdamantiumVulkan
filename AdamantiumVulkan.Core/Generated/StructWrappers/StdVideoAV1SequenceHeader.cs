// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoAV1SequenceHeader : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1ColorConfig> _pColorConfig;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1TimingInfo> _pTimingInfo;

    public StdVideoAV1SequenceHeader()
    {
    }

    public StdVideoAV1SequenceHeader(AdamantiumVulkan.Interop.StdVideoAV1SequenceHeader _internal)
    {
        Flags = new StdVideoAV1SequenceHeaderFlags(_internal.flags);
        Seq_profile = _internal.seq_profile;
        Frame_width_bits_minus_1 = _internal.frame_width_bits_minus_1;
        Frame_height_bits_minus_1 = _internal.frame_height_bits_minus_1;
        Max_frame_width_minus_1 = _internal.max_frame_width_minus_1;
        Max_frame_height_minus_1 = _internal.max_frame_height_minus_1;
        Delta_frame_id_length_minus_2 = _internal.delta_frame_id_length_minus_2;
        Additional_frame_id_length_minus_1 = _internal.additional_frame_id_length_minus_1;
        Order_hint_bits_minus_1 = _internal.order_hint_bits_minus_1;
        Seq_force_integer_mv = _internal.seq_force_integer_mv;
        Seq_force_screen_content_tools = _internal.seq_force_screen_content_tools;
        Reserved1 = NativeUtils.PointerToManagedArray(_internal.reserved1, 5);
        PColorConfig = new StdVideoAV1ColorConfig(*_internal.pColorConfig);
        NativeUtils.Free(_internal.pColorConfig);
        PTimingInfo = new StdVideoAV1TimingInfo(*_internal.pTimingInfo);
        NativeUtils.Free(_internal.pTimingInfo);
    }

    public StdVideoAV1SequenceHeaderFlags Flags { get; set; }
    public StdVideoAV1Profile Seq_profile { get; set; }
    public byte Frame_width_bits_minus_1 { get; set; }
    public byte Frame_height_bits_minus_1 { get; set; }
    public ushort Max_frame_width_minus_1 { get; set; }
    public ushort Max_frame_height_minus_1 { get; set; }
    public byte Delta_frame_id_length_minus_2 { get; set; }
    public byte Additional_frame_id_length_minus_1 { get; set; }
    public byte Order_hint_bits_minus_1 { get; set; }
    public byte Seq_force_integer_mv { get; set; }
    public byte Seq_force_screen_content_tools { get; set; }
    public byte[] Reserved1 { get; set; }
    public StdVideoAV1ColorConfig PColorConfig { get; set; }
    public StdVideoAV1TimingInfo PTimingInfo { get; set; }

    public AdamantiumVulkan.Interop.StdVideoAV1SequenceHeader ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoAV1SequenceHeader();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Seq_profile != default)
        {
            _internal.seq_profile = Seq_profile;
        }
        if (Frame_width_bits_minus_1 != default)
        {
            _internal.frame_width_bits_minus_1 = Frame_width_bits_minus_1;
        }
        if (Frame_height_bits_minus_1 != default)
        {
            _internal.frame_height_bits_minus_1 = Frame_height_bits_minus_1;
        }
        if (Max_frame_width_minus_1 != default)
        {
            _internal.max_frame_width_minus_1 = Max_frame_width_minus_1;
        }
        if (Max_frame_height_minus_1 != default)
        {
            _internal.max_frame_height_minus_1 = Max_frame_height_minus_1;
        }
        if (Delta_frame_id_length_minus_2 != default)
        {
            _internal.delta_frame_id_length_minus_2 = Delta_frame_id_length_minus_2;
        }
        if (Additional_frame_id_length_minus_1 != default)
        {
            _internal.additional_frame_id_length_minus_1 = Additional_frame_id_length_minus_1;
        }
        if (Order_hint_bits_minus_1 != default)
        {
            _internal.order_hint_bits_minus_1 = Order_hint_bits_minus_1;
        }
        if (Seq_force_integer_mv != default)
        {
            _internal.seq_force_integer_mv = Seq_force_integer_mv;
        }
        if (Seq_force_screen_content_tools != default)
        {
            _internal.seq_force_screen_content_tools = Seq_force_screen_content_tools;
        }
        if (Reserved1 != default)
        {
            if (Reserved1.Length > 5)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved1), "Array is out of bounds. Size should not be more than 5");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved1, 5, Reserved1);
        }
        _pColorConfig.Dispose();
        if (PColorConfig != default)
        {
            var struct0 = PColorConfig.ToNative();
            _pColorConfig = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1ColorConfig>(struct0);
            _internal.pColorConfig = _pColorConfig.Handle;
        }
        _pTimingInfo.Dispose();
        if (PTimingInfo != default)
        {
            var struct1 = PTimingInfo.ToNative();
            _pTimingInfo = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1TimingInfo>(struct1);
            _internal.pTimingInfo = _pTimingInfo.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pColorConfig.Dispose();
        _pTimingInfo.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoAV1SequenceHeader(AdamantiumVulkan.Interop.StdVideoAV1SequenceHeader s)
    {
        return new StdVideoAV1SequenceHeader(s);
    }

}



