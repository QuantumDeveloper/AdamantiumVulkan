// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceIDProperties : QBDisposableObject
{
    public PhysicalDeviceIDProperties()
    {
    }

    public PhysicalDeviceIDProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties _internal)
    {
        PNext = _internal.pNext;
        DeviceUUID = NativeUtils.PointerToManagedArray(_internal.deviceUUID, 16);
        DriverUUID = NativeUtils.PointerToManagedArray(_internal.driverUUID, 16);
        DeviceLUID = NativeUtils.PointerToManagedArray(_internal.deviceLUID, 8);
        DeviceNodeMask = _internal.deviceNodeMask;
        DeviceLUIDValid = _internal.deviceLUIDValid;
    }

    public StructureType SType => StructureType.PhysicalDeviceIdProperties;
    public void* PNext { get; set; }
    public byte[] DeviceUUID { get; set; }
    public byte[] DriverUUID { get; set; }
    public byte[] DeviceLUID { get; set; }
    public uint DeviceNodeMask { get; set; }
    public VkBool32 DeviceLUIDValid { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (DeviceUUID != default)
        {
            if (DeviceUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(DeviceUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.deviceUUID, 16, DeviceUUID);
        }
        if (DriverUUID != default)
        {
            if (DriverUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(DriverUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.driverUUID, 16, DriverUUID);
        }
        if (DeviceLUID != default)
        {
            if (DeviceLUID.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(DeviceLUID), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.deviceLUID, 8, DeviceLUID);
        }
        if (DeviceNodeMask != default)
        {
            _internal.deviceNodeMask = DeviceNodeMask;
        }
        if (DeviceLUIDValid != (uint)default)
        {
            _internal.deviceLUIDValid = DeviceLUIDValid;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceIDProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceIDProperties p)
    {
        return new PhysicalDeviceIDProperties(p);
    }

}



