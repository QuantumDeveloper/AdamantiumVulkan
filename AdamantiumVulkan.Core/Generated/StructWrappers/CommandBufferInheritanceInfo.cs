// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class CommandBufferInheritanceInfo : QBDisposableObject
{
    public CommandBufferInheritanceInfo()
    {
    }

    public CommandBufferInheritanceInfo(AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo _internal)
    {
        PNext = _internal.pNext;
        RenderPass = new RenderPass(_internal.renderPass);
        Subpass = _internal.subpass;
        Framebuffer = new Framebuffer(_internal.framebuffer);
        OcclusionQueryEnable = _internal.occlusionQueryEnable;
        QueryFlags = _internal.queryFlags;
        PipelineStatistics = _internal.pipelineStatistics;
    }

    public StructureType SType => StructureType.CommandBufferInheritanceInfo;
    public void* PNext { get; set; }
    public RenderPass RenderPass { get; set; }
    public uint Subpass { get; set; }
    public Framebuffer Framebuffer { get; set; }
    public VkBool32 OcclusionQueryEnable { get; set; }
    public VkQueryControlFlags QueryFlags { get; set; }
    public VkQueryPipelineStatisticFlags PipelineStatistics { get; set; }

    public AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (RenderPass != default)
        {
            _internal.renderPass = RenderPass;
        }
        if (Subpass != default)
        {
            _internal.subpass = Subpass;
        }
        if (Framebuffer != default)
        {
            _internal.framebuffer = Framebuffer;
        }
        if (OcclusionQueryEnable != (uint)default)
        {
            _internal.occlusionQueryEnable = OcclusionQueryEnable;
        }
        if (QueryFlags != (uint)default)
        {
            _internal.queryFlags = QueryFlags;
        }
        if (PipelineStatistics != (uint)default)
        {
            _internal.pipelineStatistics = PipelineStatistics;
        }
        return _internal;
    }

    public static implicit operator CommandBufferInheritanceInfo(AdamantiumVulkan.Core.Interop.VkCommandBufferInheritanceInfo c)
    {
        return new CommandBufferInheritanceInfo(c);
    }

}



