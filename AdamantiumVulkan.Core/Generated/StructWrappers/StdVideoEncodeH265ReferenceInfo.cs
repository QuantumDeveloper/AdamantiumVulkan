// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265ReferenceInfo : QBDisposableObject
{
    public StdVideoEncodeH265ReferenceInfo()
    {
    }

    public StdVideoEncodeH265ReferenceInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceInfo _internal)
    {
        Flags = new StdVideoEncodeH265ReferenceInfoFlags(_internal.flags);
        Pic_type = _internal.pic_type;
        PicOrderCntVal = _internal.PicOrderCntVal;
        TemporalId = _internal.TemporalId;
    }

    public StdVideoEncodeH265ReferenceInfoFlags Flags { get; set; }
    public StdVideoH265PictureType Pic_type { get; set; }
    public int PicOrderCntVal { get; set; }
    public byte TemporalId { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceInfo();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Pic_type != default)
        {
            _internal.pic_type = Pic_type;
        }
        if (PicOrderCntVal != default)
        {
            _internal.PicOrderCntVal = PicOrderCntVal;
        }
        if (TemporalId != default)
        {
            _internal.TemporalId = TemporalId;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        Flags?.Dispose();
    }


    public static implicit operator StdVideoEncodeH265ReferenceInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceInfo s)
    {
        return new StdVideoEncodeH265ReferenceInfo(s);
    }

}



