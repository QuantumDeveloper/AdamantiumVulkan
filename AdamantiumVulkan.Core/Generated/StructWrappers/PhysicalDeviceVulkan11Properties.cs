// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceVulkan11Properties : QBDisposableObject
{
    public PhysicalDeviceVulkan11Properties()
    {
    }

    public PhysicalDeviceVulkan11Properties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Properties _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        DeviceUUID = NativeUtils.PointerToManagedArray(_internal.deviceUUID, 16);
        DriverUUID = NativeUtils.PointerToManagedArray(_internal.driverUUID, 16);
        DeviceLUID = NativeUtils.PointerToManagedArray(_internal.deviceLUID, 8);
        DeviceNodeMask = _internal.deviceNodeMask;
        DeviceLUIDValid = _internal.deviceLUIDValid;
        SubgroupSize = _internal.subgroupSize;
        SubgroupSupportedStages = _internal.subgroupSupportedStages;
        SubgroupSupportedOperations = _internal.subgroupSupportedOperations;
        SubgroupQuadOperationsInAllStages = _internal.subgroupQuadOperationsInAllStages;
        PointClippingBehavior = _internal.pointClippingBehavior;
        MaxMultiviewViewCount = _internal.maxMultiviewViewCount;
        MaxMultiviewInstanceIndex = _internal.maxMultiviewInstanceIndex;
        ProtectedNoFault = _internal.protectedNoFault;
        MaxPerSetDescriptors = _internal.maxPerSetDescriptors;
        MaxMemoryAllocationSize = _internal.maxMemoryAllocationSize;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public byte[] DeviceUUID { get; set; }
    public byte[] DriverUUID { get; set; }
    public byte[] DeviceLUID { get; set; }
    public uint DeviceNodeMask { get; set; }
    public VkBool32 DeviceLUIDValid { get; set; }
    public uint SubgroupSize { get; set; }
    public VkShaderStageFlags SubgroupSupportedStages { get; set; }
    public VkSubgroupFeatureFlags SubgroupSupportedOperations { get; set; }
    public VkBool32 SubgroupQuadOperationsInAllStages { get; set; }
    public PointClippingBehavior PointClippingBehavior { get; set; }
    public uint MaxMultiviewViewCount { get; set; }
    public uint MaxMultiviewInstanceIndex { get; set; }
    public VkBool32 ProtectedNoFault { get; set; }
    public uint MaxPerSetDescriptors { get; set; }
    public VkDeviceSize MaxMemoryAllocationSize { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Properties ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Properties();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (DeviceUUID != default)
        {
            if (DeviceUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(DeviceUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.deviceUUID, 16, DeviceUUID);
        }
        if (DriverUUID != default)
        {
            if (DriverUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(DriverUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.driverUUID, 16, DriverUUID);
        }
        if (DeviceLUID != default)
        {
            if (DeviceLUID.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(DeviceLUID), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.deviceLUID, 8, DeviceLUID);
        }
        if (DeviceNodeMask != default)
        {
            _internal.deviceNodeMask = DeviceNodeMask;
        }
        if (DeviceLUIDValid != (uint)default)
        {
            _internal.deviceLUIDValid = DeviceLUIDValid;
        }
        if (SubgroupSize != default)
        {
            _internal.subgroupSize = SubgroupSize;
        }
        if (SubgroupSupportedStages != (uint)default)
        {
            _internal.subgroupSupportedStages = SubgroupSupportedStages;
        }
        if (SubgroupSupportedOperations != (uint)default)
        {
            _internal.subgroupSupportedOperations = SubgroupSupportedOperations;
        }
        if (SubgroupQuadOperationsInAllStages != (uint)default)
        {
            _internal.subgroupQuadOperationsInAllStages = SubgroupQuadOperationsInAllStages;
        }
        if (PointClippingBehavior != default)
        {
            _internal.pointClippingBehavior = PointClippingBehavior;
        }
        if (MaxMultiviewViewCount != default)
        {
            _internal.maxMultiviewViewCount = MaxMultiviewViewCount;
        }
        if (MaxMultiviewInstanceIndex != default)
        {
            _internal.maxMultiviewInstanceIndex = MaxMultiviewInstanceIndex;
        }
        if (ProtectedNoFault != (uint)default)
        {
            _internal.protectedNoFault = ProtectedNoFault;
        }
        if (MaxPerSetDescriptors != default)
        {
            _internal.maxPerSetDescriptors = MaxPerSetDescriptors;
        }
        if (MaxMemoryAllocationSize != (ulong)default)
        {
            _internal.maxMemoryAllocationSize = MaxMemoryAllocationSize;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceVulkan11Properties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Properties p)
    {
        return new PhysicalDeviceVulkan11Properties(p);
    }

}



