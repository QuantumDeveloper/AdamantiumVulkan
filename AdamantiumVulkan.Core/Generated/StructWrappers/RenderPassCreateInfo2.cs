// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class RenderPassCreateInfo2 : QBDisposableObject
{
    private NativeStruct<VkAttachmentDescription2> pAttachments;

    private NativeStruct<VkSubpassDescription2> pSubpasses;

    private NativeStruct<VkSubpassDependency2> pDependencies;

    private NativeStruct<uint> pCorrelatedViewMasks;

    public RenderPassCreateInfo2()
    {
    }

    public RenderPassCreateInfo2(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2 _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        AttachmentCount = _internal.attachmentCount;
        PAttachments = new AttachmentDescription2(*_internal.pAttachments);
        NativeUtils.Free(_internal.pAttachments);
        SubpassCount = _internal.subpassCount;
        PSubpasses = new SubpassDescription2(*_internal.pSubpasses);
        NativeUtils.Free(_internal.pSubpasses);
        DependencyCount = _internal.dependencyCount;
        PDependencies = new SubpassDependency2(*_internal.pDependencies);
        NativeUtils.Free(_internal.pDependencies);
        CorrelatedViewMaskCount = _internal.correlatedViewMaskCount;
        if (_internal.pCorrelatedViewMasks != null)
        {
            PCorrelatedViewMasks = *_internal.pCorrelatedViewMasks;
            NativeUtils.Free(_internal.pCorrelatedViewMasks);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkRenderPassCreateFlags Flags { get; set; }
    public uint AttachmentCount { get; set; }
    public AttachmentDescription2 PAttachments { get; set; }
    public uint SubpassCount { get; set; }
    public SubpassDescription2 PSubpasses { get; set; }
    public uint DependencyCount { get; set; }
    public SubpassDependency2 PDependencies { get; set; }
    public uint CorrelatedViewMaskCount { get; set; }
    public uint? PCorrelatedViewMasks { get; set; }

    public AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2 ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.attachmentCount = AttachmentCount;
        pAttachments.Dispose();
        if (PAttachments != null)
        {
            var struct0 = PAttachments.ToNative();
            pAttachments = new NativeStruct<VkAttachmentDescription2>(struct0);
            _internal.pAttachments = pAttachments.Handle;
        }
        _internal.subpassCount = SubpassCount;
        pSubpasses.Dispose();
        if (PSubpasses != null)
        {
            var struct1 = PSubpasses.ToNative();
            pSubpasses = new NativeStruct<VkSubpassDescription2>(struct1);
            _internal.pSubpasses = pSubpasses.Handle;
        }
        _internal.dependencyCount = DependencyCount;
        pDependencies.Dispose();
        if (PDependencies != null)
        {
            var struct2 = PDependencies.ToNative();
            pDependencies = new NativeStruct<VkSubpassDependency2>(struct2);
            _internal.pDependencies = pDependencies.Handle;
        }
        _internal.correlatedViewMaskCount = CorrelatedViewMaskCount;
        pCorrelatedViewMasks.Dispose();
        if (PCorrelatedViewMasks.HasValue)
        {
            pCorrelatedViewMasks = new NativeStruct<uint>(PCorrelatedViewMasks.Value);
            _internal.pCorrelatedViewMasks = pCorrelatedViewMasks.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pAttachments.Dispose();
        pSubpasses.Dispose();
        pDependencies.Dispose();
        pCorrelatedViewMasks.Dispose();
    }


    public static implicit operator RenderPassCreateInfo2(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2 r)
    {
        return new RenderPassCreateInfo2(r);
    }

}



