// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class VideoEncodeRateControlInfoKHR : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlLayerInfoKHR> _pLayers;

    public VideoEncodeRateControlInfoKHR()
    {
    }

    public VideoEncodeRateControlInfoKHR(AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlInfoKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        RateControlMode = _internal.rateControlMode;
        LayerCount = _internal.layerCount;
        PLayers = new VideoEncodeRateControlLayerInfoKHR(*_internal.pLayers);
        NativeUtils.Free(_internal.pLayers);
        VirtualBufferSizeInMs = _internal.virtualBufferSizeInMs;
        InitialVirtualBufferSizeInMs = _internal.initialVirtualBufferSizeInMs;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkVideoEncodeRateControlFlagsKHR Flags { get; set; }
    public VideoEncodeRateControlModeFlagBitsKHR RateControlMode { get; set; }
    public uint LayerCount { get; set; }
    public VideoEncodeRateControlLayerInfoKHR PLayers { get; set; }
    public uint VirtualBufferSizeInMs { get; set; }
    public uint InitialVirtualBufferSizeInMs { get; set; }

    public AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlInfoKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlInfoKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (RateControlMode != default)
        {
            _internal.rateControlMode = RateControlMode;
        }
        if (LayerCount != default)
        {
            _internal.layerCount = LayerCount;
        }
        _pLayers.Dispose();
        if (PLayers != default)
        {
            var struct0 = PLayers.ToNative();
            _pLayers = new NativeStruct<AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlLayerInfoKHR>(struct0);
            _internal.pLayers = _pLayers.Handle;
        }
        if (VirtualBufferSizeInMs != default)
        {
            _internal.virtualBufferSizeInMs = VirtualBufferSizeInMs;
        }
        if (InitialVirtualBufferSizeInMs != default)
        {
            _internal.initialVirtualBufferSizeInMs = InitialVirtualBufferSizeInMs;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pLayers.Dispose();
    }


    public static implicit operator VideoEncodeRateControlInfoKHR(AdamantiumVulkan.Core.Interop.VkVideoEncodeRateControlInfoKHR v)
    {
        return new VideoEncodeRateControlInfoKHR(v);
    }

}



