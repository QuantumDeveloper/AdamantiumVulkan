// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class AccelerationStructureSRTMotionInstanceNV : QBDisposableObject
{
    public AccelerationStructureSRTMotionInstanceNV()
    {
    }

    public AccelerationStructureSRTMotionInstanceNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureSRTMotionInstanceNV _internal)
    {
        TransformT0 = new SRTDataNV(_internal.transformT0);
        TransformT1 = new SRTDataNV(_internal.transformT1);
        InstanceCustomIndex = _internal.instanceCustomIndex;
        Mask = _internal.mask;
        InstanceShaderBindingTableRecordOffset = _internal.instanceShaderBindingTableRecordOffset;
        Flags = _internal.flags;
        AccelerationStructureReference = _internal.accelerationStructureReference;
    }

    public SRTDataNV TransformT0 { get; set; }
    public SRTDataNV TransformT1 { get; set; }
    public uint InstanceCustomIndex { get; set; }
    public uint Mask { get; set; }
    public uint InstanceShaderBindingTableRecordOffset { get; set; }
    public GeometryInstanceFlagBitsKHR Flags { get; set; }
    public ulong AccelerationStructureReference { get; set; }

    public AdamantiumVulkan.Core.Interop.VkAccelerationStructureSRTMotionInstanceNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkAccelerationStructureSRTMotionInstanceNV();
        if (TransformT0 != default)
        {
            _internal.transformT0 = TransformT0.ToNative();
        }
        if (TransformT1 != default)
        {
            _internal.transformT1 = TransformT1.ToNative();
        }
        if (InstanceCustomIndex != default)
        {
            _internal.instanceCustomIndex = InstanceCustomIndex;
        }
        if (Mask != default)
        {
            _internal.mask = Mask;
        }
        if (InstanceShaderBindingTableRecordOffset != default)
        {
            _internal.instanceShaderBindingTableRecordOffset = InstanceShaderBindingTableRecordOffset;
        }
        if (Flags != default)
        {
            _internal.flags = Flags;
        }
        if (AccelerationStructureReference != default)
        {
            _internal.accelerationStructureReference = AccelerationStructureReference;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        TransformT0?.Dispose();
        TransformT1?.Dispose();
    }


    public static implicit operator AccelerationStructureSRTMotionInstanceNV(AdamantiumVulkan.Core.Interop.VkAccelerationStructureSRTMotionInstanceNV a)
    {
        return new AccelerationStructureSRTMotionInstanceNV(a);
    }

}



