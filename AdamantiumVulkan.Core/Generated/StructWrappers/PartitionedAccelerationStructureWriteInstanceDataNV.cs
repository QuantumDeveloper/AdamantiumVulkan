// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PartitionedAccelerationStructureWriteInstanceDataNV : QBDisposableObject
{
    public PartitionedAccelerationStructureWriteInstanceDataNV()
    {
    }

    public PartitionedAccelerationStructureWriteInstanceDataNV(AdamantiumVulkan.Core.Interop.VkPartitionedAccelerationStructureWriteInstanceDataNV _internal)
    {
        Transform = new TransformMatrixKHR(_internal.transform);
        ExplicitAABB = NativeUtils.PointerToManagedArray(_internal.explicitAABB, 6);
        InstanceID = _internal.instanceID;
        InstanceMask = _internal.instanceMask;
        InstanceContributionToHitGroupIndex = _internal.instanceContributionToHitGroupIndex;
        InstanceFlags = _internal.instanceFlags;
        InstanceIndex = _internal.instanceIndex;
        PartitionIndex = _internal.partitionIndex;
        AccelerationStructure = _internal.accelerationStructure;
    }

    public TransformMatrixKHR Transform { get; set; }
    public float[] ExplicitAABB { get; set; }
    public uint InstanceID { get; set; }
    public uint InstanceMask { get; set; }
    public uint InstanceContributionToHitGroupIndex { get; set; }
    public VkPartitionedAccelerationStructureInstanceFlagsNV InstanceFlags { get; set; }
    public uint InstanceIndex { get; set; }
    public uint PartitionIndex { get; set; }
    public VkDeviceAddress AccelerationStructure { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPartitionedAccelerationStructureWriteInstanceDataNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPartitionedAccelerationStructureWriteInstanceDataNV();
        if (Transform != default)
        {
            _internal.transform = Transform.ToNative();
        }
        if (ExplicitAABB != default)
        {
            if (ExplicitAABB.Length > 6)
                throw new System.ArgumentOutOfRangeException(nameof(ExplicitAABB), "Array is out of bounds. Size should not be more than 6");

            NativeUtils.PrimitiveToFixedArray(_internal.explicitAABB, 6, ExplicitAABB);
        }
        if (InstanceID != default)
        {
            _internal.instanceID = InstanceID;
        }
        if (InstanceMask != default)
        {
            _internal.instanceMask = InstanceMask;
        }
        if (InstanceContributionToHitGroupIndex != default)
        {
            _internal.instanceContributionToHitGroupIndex = InstanceContributionToHitGroupIndex;
        }
        if (InstanceFlags != (uint)default)
        {
            _internal.instanceFlags = InstanceFlags;
        }
        if (InstanceIndex != default)
        {
            _internal.instanceIndex = InstanceIndex;
        }
        if (PartitionIndex != default)
        {
            _internal.partitionIndex = PartitionIndex;
        }
        if (AccelerationStructure != (ulong)default)
        {
            _internal.accelerationStructure = AccelerationStructure;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        Transform?.Dispose();
    }


    public static implicit operator PartitionedAccelerationStructureWriteInstanceDataNV(AdamantiumVulkan.Core.Interop.VkPartitionedAccelerationStructureWriteInstanceDataNV p)
    {
        return new PartitionedAccelerationStructureWriteInstanceDataNV(p);
    }

}



