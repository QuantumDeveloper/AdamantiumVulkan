// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceShaderCorePropertiesAMD : QBDisposableObject
{
    public PhysicalDeviceShaderCorePropertiesAMD()
    {
    }

    public PhysicalDeviceShaderCorePropertiesAMD(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD _internal)
    {
        PNext = _internal.pNext;
        ShaderEngineCount = _internal.shaderEngineCount;
        ShaderArraysPerEngineCount = _internal.shaderArraysPerEngineCount;
        ComputeUnitsPerShaderArray = _internal.computeUnitsPerShaderArray;
        SimdPerComputeUnit = _internal.simdPerComputeUnit;
        WavefrontsPerSimd = _internal.wavefrontsPerSimd;
        WavefrontSize = _internal.wavefrontSize;
        SgprsPerSimd = _internal.sgprsPerSimd;
        MinSgprAllocation = _internal.minSgprAllocation;
        MaxSgprAllocation = _internal.maxSgprAllocation;
        SgprAllocationGranularity = _internal.sgprAllocationGranularity;
        VgprsPerSimd = _internal.vgprsPerSimd;
        MinVgprAllocation = _internal.minVgprAllocation;
        MaxVgprAllocation = _internal.maxVgprAllocation;
        VgprAllocationGranularity = _internal.vgprAllocationGranularity;
    }

    public StructureType SType => StructureType.PhysicalDeviceShaderCorePropertiesAmd;
    public void* PNext { get; set; }
    public uint ShaderEngineCount { get; set; }
    public uint ShaderArraysPerEngineCount { get; set; }
    public uint ComputeUnitsPerShaderArray { get; set; }
    public uint SimdPerComputeUnit { get; set; }
    public uint WavefrontsPerSimd { get; set; }
    public uint WavefrontSize { get; set; }
    public uint SgprsPerSimd { get; set; }
    public uint MinSgprAllocation { get; set; }
    public uint MaxSgprAllocation { get; set; }
    public uint SgprAllocationGranularity { get; set; }
    public uint VgprsPerSimd { get; set; }
    public uint MinVgprAllocation { get; set; }
    public uint MaxVgprAllocation { get; set; }
    public uint VgprAllocationGranularity { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (ShaderEngineCount != default)
        {
            _internal.shaderEngineCount = ShaderEngineCount;
        }
        if (ShaderArraysPerEngineCount != default)
        {
            _internal.shaderArraysPerEngineCount = ShaderArraysPerEngineCount;
        }
        if (ComputeUnitsPerShaderArray != default)
        {
            _internal.computeUnitsPerShaderArray = ComputeUnitsPerShaderArray;
        }
        if (SimdPerComputeUnit != default)
        {
            _internal.simdPerComputeUnit = SimdPerComputeUnit;
        }
        if (WavefrontsPerSimd != default)
        {
            _internal.wavefrontsPerSimd = WavefrontsPerSimd;
        }
        if (WavefrontSize != default)
        {
            _internal.wavefrontSize = WavefrontSize;
        }
        if (SgprsPerSimd != default)
        {
            _internal.sgprsPerSimd = SgprsPerSimd;
        }
        if (MinSgprAllocation != default)
        {
            _internal.minSgprAllocation = MinSgprAllocation;
        }
        if (MaxSgprAllocation != default)
        {
            _internal.maxSgprAllocation = MaxSgprAllocation;
        }
        if (SgprAllocationGranularity != default)
        {
            _internal.sgprAllocationGranularity = SgprAllocationGranularity;
        }
        if (VgprsPerSimd != default)
        {
            _internal.vgprsPerSimd = VgprsPerSimd;
        }
        if (MinVgprAllocation != default)
        {
            _internal.minVgprAllocation = MinVgprAllocation;
        }
        if (MaxVgprAllocation != default)
        {
            _internal.maxVgprAllocation = MaxVgprAllocation;
        }
        if (VgprAllocationGranularity != default)
        {
            _internal.vgprAllocationGranularity = VgprAllocationGranularity;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceShaderCorePropertiesAMD(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderCorePropertiesAMD p)
    {
        return new PhysicalDeviceShaderCorePropertiesAMD(p);
    }

}



