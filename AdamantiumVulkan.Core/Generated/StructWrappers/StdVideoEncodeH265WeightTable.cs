// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265WeightTable
{
    public StdVideoEncodeH265WeightTable()
    {
    }

    public StdVideoEncodeH265WeightTable(AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable _internal)
    {
        Flags = new StdVideoEncodeH265WeightTableFlags(_internal.flags);
        Luma_log2_weight_denom = _internal.luma_log2_weight_denom;
        Delta_chroma_log2_weight_denom = _internal.delta_chroma_log2_weight_denom;
        Delta_luma_weight_l0 = new string((sbyte*)_internal.delta_luma_weight_l0);
        Luma_offset_l0 = new string((sbyte*)_internal.luma_offset_l0);
        Delta_chroma_weight_l0 = new string((sbyte*)_internal.delta_chroma_weight_l0);
        Delta_chroma_offset_l0 = new string((sbyte*)_internal.delta_chroma_offset_l0);
        Delta_luma_weight_l1 = new string((sbyte*)_internal.delta_luma_weight_l1);
        Luma_offset_l1 = new string((sbyte*)_internal.luma_offset_l1);
        Delta_chroma_weight_l1 = new string((sbyte*)_internal.delta_chroma_weight_l1);
        Delta_chroma_offset_l1 = new string((sbyte*)_internal.delta_chroma_offset_l1);
    }

    public StdVideoEncodeH265WeightTableFlags Flags { get; set; }
    public byte Luma_log2_weight_denom { get; set; }
    public sbyte Delta_chroma_log2_weight_denom { get; set; }
    public string Delta_luma_weight_l0 { get; set; }
    public string Luma_offset_l0 { get; set; }
    public string Delta_chroma_weight_l0 { get; set; }
    public string Delta_chroma_offset_l0 { get; set; }
    public string Delta_luma_weight_l1 { get; set; }
    public string Luma_offset_l1 { get; set; }
    public string Delta_chroma_weight_l1 { get; set; }
    public string Delta_chroma_offset_l1 { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.luma_log2_weight_denom = Luma_log2_weight_denom;
        _internal.delta_chroma_log2_weight_denom = Delta_chroma_log2_weight_denom;
        if(Delta_luma_weight_l0 != null)
        {
            if (Delta_luma_weight_l0.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_luma_weight_l0), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.StringToFixedArray(_internal.delta_luma_weight_l0, 15, Delta_luma_weight_l0, false);
        }
        if(Luma_offset_l0 != null)
        {
            if (Luma_offset_l0.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(Luma_offset_l0), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.StringToFixedArray(_internal.luma_offset_l0, 15, Luma_offset_l0, false);
        }
        if(Delta_chroma_weight_l0 != null)
        {
            if (Delta_chroma_weight_l0.Length > 30)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_chroma_weight_l0), "Array is out of bounds. Size should not be more than 30");

            NativeUtils.StringToFixedArray(_internal.delta_chroma_weight_l0, 30, Delta_chroma_weight_l0, false);
        }
        if(Delta_chroma_offset_l0 != null)
        {
            if (Delta_chroma_offset_l0.Length > 30)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_chroma_offset_l0), "Array is out of bounds. Size should not be more than 30");

            NativeUtils.StringToFixedArray(_internal.delta_chroma_offset_l0, 30, Delta_chroma_offset_l0, false);
        }
        if(Delta_luma_weight_l1 != null)
        {
            if (Delta_luma_weight_l1.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_luma_weight_l1), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.StringToFixedArray(_internal.delta_luma_weight_l1, 15, Delta_luma_weight_l1, false);
        }
        if(Luma_offset_l1 != null)
        {
            if (Luma_offset_l1.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(Luma_offset_l1), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.StringToFixedArray(_internal.luma_offset_l1, 15, Luma_offset_l1, false);
        }
        if(Delta_chroma_weight_l1 != null)
        {
            if (Delta_chroma_weight_l1.Length > 30)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_chroma_weight_l1), "Array is out of bounds. Size should not be more than 30");

            NativeUtils.StringToFixedArray(_internal.delta_chroma_weight_l1, 30, Delta_chroma_weight_l1, false);
        }
        if(Delta_chroma_offset_l1 != null)
        {
            if (Delta_chroma_offset_l1.Length > 30)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_chroma_offset_l1), "Array is out of bounds. Size should not be more than 30");

            NativeUtils.StringToFixedArray(_internal.delta_chroma_offset_l1, 30, Delta_chroma_offset_l1, false);
        }
        return _internal;
    }

    public static implicit operator StdVideoEncodeH265WeightTable(AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable s)
    {
        return new StdVideoEncodeH265WeightTable(s);
    }

}



