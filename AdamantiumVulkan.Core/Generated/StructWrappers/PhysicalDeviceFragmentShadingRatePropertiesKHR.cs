// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceFragmentShadingRatePropertiesKHR : QBDisposableObject
{
    public PhysicalDeviceFragmentShadingRatePropertiesKHR()
    {
    }

    public PhysicalDeviceFragmentShadingRatePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShadingRatePropertiesKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        MinFragmentShadingRateAttachmentTexelSize = new Extent2D(_internal.minFragmentShadingRateAttachmentTexelSize);
        MaxFragmentShadingRateAttachmentTexelSize = new Extent2D(_internal.maxFragmentShadingRateAttachmentTexelSize);
        MaxFragmentShadingRateAttachmentTexelSizeAspectRatio = _internal.maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
        PrimitiveFragmentShadingRateWithMultipleViewports = _internal.primitiveFragmentShadingRateWithMultipleViewports;
        LayeredShadingRateAttachments = _internal.layeredShadingRateAttachments;
        FragmentShadingRateNonTrivialCombinerOps = _internal.fragmentShadingRateNonTrivialCombinerOps;
        MaxFragmentSize = new Extent2D(_internal.maxFragmentSize);
        MaxFragmentSizeAspectRatio = _internal.maxFragmentSizeAspectRatio;
        MaxFragmentShadingRateCoverageSamples = _internal.maxFragmentShadingRateCoverageSamples;
        MaxFragmentShadingRateRasterizationSamples = _internal.maxFragmentShadingRateRasterizationSamples;
        FragmentShadingRateWithShaderDepthStencilWrites = _internal.fragmentShadingRateWithShaderDepthStencilWrites;
        FragmentShadingRateWithSampleMask = _internal.fragmentShadingRateWithSampleMask;
        FragmentShadingRateWithShaderSampleMask = _internal.fragmentShadingRateWithShaderSampleMask;
        FragmentShadingRateWithConservativeRasterization = _internal.fragmentShadingRateWithConservativeRasterization;
        FragmentShadingRateWithFragmentShaderInterlock = _internal.fragmentShadingRateWithFragmentShaderInterlock;
        FragmentShadingRateWithCustomSampleLocations = _internal.fragmentShadingRateWithCustomSampleLocations;
        FragmentShadingRateStrictMultiplyCombiner = _internal.fragmentShadingRateStrictMultiplyCombiner;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public Extent2D MinFragmentShadingRateAttachmentTexelSize { get; set; }
    public Extent2D MaxFragmentShadingRateAttachmentTexelSize { get; set; }
    public uint MaxFragmentShadingRateAttachmentTexelSizeAspectRatio { get; set; }
    public VkBool32 PrimitiveFragmentShadingRateWithMultipleViewports { get; set; }
    public VkBool32 LayeredShadingRateAttachments { get; set; }
    public VkBool32 FragmentShadingRateNonTrivialCombinerOps { get; set; }
    public Extent2D MaxFragmentSize { get; set; }
    public uint MaxFragmentSizeAspectRatio { get; set; }
    public uint MaxFragmentShadingRateCoverageSamples { get; set; }
    public SampleCountFlagBits MaxFragmentShadingRateRasterizationSamples { get; set; }
    public VkBool32 FragmentShadingRateWithShaderDepthStencilWrites { get; set; }
    public VkBool32 FragmentShadingRateWithSampleMask { get; set; }
    public VkBool32 FragmentShadingRateWithShaderSampleMask { get; set; }
    public VkBool32 FragmentShadingRateWithConservativeRasterization { get; set; }
    public VkBool32 FragmentShadingRateWithFragmentShaderInterlock { get; set; }
    public VkBool32 FragmentShadingRateWithCustomSampleLocations { get; set; }
    public VkBool32 FragmentShadingRateStrictMultiplyCombiner { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShadingRatePropertiesKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShadingRatePropertiesKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (MinFragmentShadingRateAttachmentTexelSize != default)
        {
            _internal.minFragmentShadingRateAttachmentTexelSize = MinFragmentShadingRateAttachmentTexelSize.ToNative();
        }
        if (MaxFragmentShadingRateAttachmentTexelSize != default)
        {
            _internal.maxFragmentShadingRateAttachmentTexelSize = MaxFragmentShadingRateAttachmentTexelSize.ToNative();
        }
        if (MaxFragmentShadingRateAttachmentTexelSizeAspectRatio != default)
        {
            _internal.maxFragmentShadingRateAttachmentTexelSizeAspectRatio = MaxFragmentShadingRateAttachmentTexelSizeAspectRatio;
        }
        if (PrimitiveFragmentShadingRateWithMultipleViewports != (uint)default)
        {
            _internal.primitiveFragmentShadingRateWithMultipleViewports = PrimitiveFragmentShadingRateWithMultipleViewports;
        }
        if (LayeredShadingRateAttachments != (uint)default)
        {
            _internal.layeredShadingRateAttachments = LayeredShadingRateAttachments;
        }
        if (FragmentShadingRateNonTrivialCombinerOps != (uint)default)
        {
            _internal.fragmentShadingRateNonTrivialCombinerOps = FragmentShadingRateNonTrivialCombinerOps;
        }
        if (MaxFragmentSize != default)
        {
            _internal.maxFragmentSize = MaxFragmentSize.ToNative();
        }
        if (MaxFragmentSizeAspectRatio != default)
        {
            _internal.maxFragmentSizeAspectRatio = MaxFragmentSizeAspectRatio;
        }
        if (MaxFragmentShadingRateCoverageSamples != default)
        {
            _internal.maxFragmentShadingRateCoverageSamples = MaxFragmentShadingRateCoverageSamples;
        }
        if (MaxFragmentShadingRateRasterizationSamples != default)
        {
            _internal.maxFragmentShadingRateRasterizationSamples = MaxFragmentShadingRateRasterizationSamples;
        }
        if (FragmentShadingRateWithShaderDepthStencilWrites != (uint)default)
        {
            _internal.fragmentShadingRateWithShaderDepthStencilWrites = FragmentShadingRateWithShaderDepthStencilWrites;
        }
        if (FragmentShadingRateWithSampleMask != (uint)default)
        {
            _internal.fragmentShadingRateWithSampleMask = FragmentShadingRateWithSampleMask;
        }
        if (FragmentShadingRateWithShaderSampleMask != (uint)default)
        {
            _internal.fragmentShadingRateWithShaderSampleMask = FragmentShadingRateWithShaderSampleMask;
        }
        if (FragmentShadingRateWithConservativeRasterization != (uint)default)
        {
            _internal.fragmentShadingRateWithConservativeRasterization = FragmentShadingRateWithConservativeRasterization;
        }
        if (FragmentShadingRateWithFragmentShaderInterlock != (uint)default)
        {
            _internal.fragmentShadingRateWithFragmentShaderInterlock = FragmentShadingRateWithFragmentShaderInterlock;
        }
        if (FragmentShadingRateWithCustomSampleLocations != (uint)default)
        {
            _internal.fragmentShadingRateWithCustomSampleLocations = FragmentShadingRateWithCustomSampleLocations;
        }
        if (FragmentShadingRateStrictMultiplyCombiner != (uint)default)
        {
            _internal.fragmentShadingRateStrictMultiplyCombiner = FragmentShadingRateStrictMultiplyCombiner;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        MinFragmentShadingRateAttachmentTexelSize?.Dispose();
        MaxFragmentShadingRateAttachmentTexelSize?.Dispose();
        MaxFragmentSize?.Dispose();
    }


    public static implicit operator PhysicalDeviceFragmentShadingRatePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShadingRatePropertiesKHR p)
    {
        return new PhysicalDeviceFragmentShadingRatePropertiesKHR(p);
    }

}



