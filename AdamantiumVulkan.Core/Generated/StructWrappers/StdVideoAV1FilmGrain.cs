// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoAV1FilmGrain : QBDisposableObject
{
    public StdVideoAV1FilmGrain()
    {
    }

    public StdVideoAV1FilmGrain(AdamantiumVulkan.Interop.StdVideoAV1FilmGrain _internal)
    {
        Flags = new StdVideoAV1FilmGrainFlags(_internal.flags);
        Grain_scaling_minus_8 = _internal.grain_scaling_minus_8;
        Ar_coeff_lag = _internal.ar_coeff_lag;
        Ar_coeff_shift_minus_6 = _internal.ar_coeff_shift_minus_6;
        Grain_scale_shift = _internal.grain_scale_shift;
        Grain_seed = _internal.grain_seed;
        Film_grain_params_ref_idx = _internal.film_grain_params_ref_idx;
        Num_y_points = _internal.num_y_points;
        Point_y_value = NativeUtils.PointerToManagedArray(_internal.point_y_value, 14);
        Point_y_scaling = NativeUtils.PointerToManagedArray(_internal.point_y_scaling, 14);
        Num_cb_points = _internal.num_cb_points;
        Point_cb_value = NativeUtils.PointerToManagedArray(_internal.point_cb_value, 10);
        Point_cb_scaling = NativeUtils.PointerToManagedArray(_internal.point_cb_scaling, 10);
        Num_cr_points = _internal.num_cr_points;
        Point_cr_value = NativeUtils.PointerToManagedArray(_internal.point_cr_value, 10);
        Point_cr_scaling = NativeUtils.PointerToManagedArray(_internal.point_cr_scaling, 10);
        Ar_coeffs_y_plus_128 = new string((sbyte*)_internal.ar_coeffs_y_plus_128);
        Ar_coeffs_cb_plus_128 = new string((sbyte*)_internal.ar_coeffs_cb_plus_128);
        Ar_coeffs_cr_plus_128 = new string((sbyte*)_internal.ar_coeffs_cr_plus_128);
        Cb_mult = _internal.cb_mult;
        Cb_luma_mult = _internal.cb_luma_mult;
        Cb_offset = _internal.cb_offset;
        Cr_mult = _internal.cr_mult;
        Cr_luma_mult = _internal.cr_luma_mult;
        Cr_offset = _internal.cr_offset;
    }

    public StdVideoAV1FilmGrainFlags Flags { get; set; }
    public byte Grain_scaling_minus_8 { get; set; }
    public byte Ar_coeff_lag { get; set; }
    public byte Ar_coeff_shift_minus_6 { get; set; }
    public byte Grain_scale_shift { get; set; }
    public ushort Grain_seed { get; set; }
    public byte Film_grain_params_ref_idx { get; set; }
    public byte Num_y_points { get; set; }
    public byte[] Point_y_value { get; set; }
    public byte[] Point_y_scaling { get; set; }
    public byte Num_cb_points { get; set; }
    public byte[] Point_cb_value { get; set; }
    public byte[] Point_cb_scaling { get; set; }
    public byte Num_cr_points { get; set; }
    public byte[] Point_cr_value { get; set; }
    public byte[] Point_cr_scaling { get; set; }
    public string Ar_coeffs_y_plus_128 { get; set; }
    public string Ar_coeffs_cb_plus_128 { get; set; }
    public string Ar_coeffs_cr_plus_128 { get; set; }
    public byte Cb_mult { get; set; }
    public byte Cb_luma_mult { get; set; }
    public ushort Cb_offset { get; set; }
    public byte Cr_mult { get; set; }
    public byte Cr_luma_mult { get; set; }
    public ushort Cr_offset { get; set; }

    public AdamantiumVulkan.Interop.StdVideoAV1FilmGrain ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoAV1FilmGrain();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Grain_scaling_minus_8 != default)
        {
            _internal.grain_scaling_minus_8 = Grain_scaling_minus_8;
        }
        if (Ar_coeff_lag != default)
        {
            _internal.ar_coeff_lag = Ar_coeff_lag;
        }
        if (Ar_coeff_shift_minus_6 != default)
        {
            _internal.ar_coeff_shift_minus_6 = Ar_coeff_shift_minus_6;
        }
        if (Grain_scale_shift != default)
        {
            _internal.grain_scale_shift = Grain_scale_shift;
        }
        if (Grain_seed != default)
        {
            _internal.grain_seed = Grain_seed;
        }
        if (Film_grain_params_ref_idx != default)
        {
            _internal.film_grain_params_ref_idx = Film_grain_params_ref_idx;
        }
        if (Num_y_points != default)
        {
            _internal.num_y_points = Num_y_points;
        }
        if (Point_y_value != default)
        {
            if (Point_y_value.Length > 14)
                throw new System.ArgumentOutOfRangeException(nameof(Point_y_value), "Array is out of bounds. Size should not be more than 14");

            NativeUtils.PrimitiveToFixedArray(_internal.point_y_value, 14, Point_y_value);
        }
        if (Point_y_scaling != default)
        {
            if (Point_y_scaling.Length > 14)
                throw new System.ArgumentOutOfRangeException(nameof(Point_y_scaling), "Array is out of bounds. Size should not be more than 14");

            NativeUtils.PrimitiveToFixedArray(_internal.point_y_scaling, 14, Point_y_scaling);
        }
        if (Num_cb_points != default)
        {
            _internal.num_cb_points = Num_cb_points;
        }
        if (Point_cb_value != default)
        {
            if (Point_cb_value.Length > 10)
                throw new System.ArgumentOutOfRangeException(nameof(Point_cb_value), "Array is out of bounds. Size should not be more than 10");

            NativeUtils.PrimitiveToFixedArray(_internal.point_cb_value, 10, Point_cb_value);
        }
        if (Point_cb_scaling != default)
        {
            if (Point_cb_scaling.Length > 10)
                throw new System.ArgumentOutOfRangeException(nameof(Point_cb_scaling), "Array is out of bounds. Size should not be more than 10");

            NativeUtils.PrimitiveToFixedArray(_internal.point_cb_scaling, 10, Point_cb_scaling);
        }
        if (Num_cr_points != default)
        {
            _internal.num_cr_points = Num_cr_points;
        }
        if (Point_cr_value != default)
        {
            if (Point_cr_value.Length > 10)
                throw new System.ArgumentOutOfRangeException(nameof(Point_cr_value), "Array is out of bounds. Size should not be more than 10");

            NativeUtils.PrimitiveToFixedArray(_internal.point_cr_value, 10, Point_cr_value);
        }
        if (Point_cr_scaling != default)
        {
            if (Point_cr_scaling.Length > 10)
                throw new System.ArgumentOutOfRangeException(nameof(Point_cr_scaling), "Array is out of bounds. Size should not be more than 10");

            NativeUtils.PrimitiveToFixedArray(_internal.point_cr_scaling, 10, Point_cr_scaling);
        }
        if (Ar_coeffs_y_plus_128 != default)
        {
            if (Ar_coeffs_y_plus_128.Length > 24)
                throw new System.ArgumentOutOfRangeException(nameof(Ar_coeffs_y_plus_128), "Array is out of bounds. Size should not be more than 24");

            NativeUtils.StringToFixedArray(_internal.ar_coeffs_y_plus_128, 24, Ar_coeffs_y_plus_128, false);
        }
        if (Ar_coeffs_cb_plus_128 != default)
        {
            if (Ar_coeffs_cb_plus_128.Length > 25)
                throw new System.ArgumentOutOfRangeException(nameof(Ar_coeffs_cb_plus_128), "Array is out of bounds. Size should not be more than 25");

            NativeUtils.StringToFixedArray(_internal.ar_coeffs_cb_plus_128, 25, Ar_coeffs_cb_plus_128, false);
        }
        if (Ar_coeffs_cr_plus_128 != default)
        {
            if (Ar_coeffs_cr_plus_128.Length > 25)
                throw new System.ArgumentOutOfRangeException(nameof(Ar_coeffs_cr_plus_128), "Array is out of bounds. Size should not be more than 25");

            NativeUtils.StringToFixedArray(_internal.ar_coeffs_cr_plus_128, 25, Ar_coeffs_cr_plus_128, false);
        }
        if (Cb_mult != default)
        {
            _internal.cb_mult = Cb_mult;
        }
        if (Cb_luma_mult != default)
        {
            _internal.cb_luma_mult = Cb_luma_mult;
        }
        if (Cb_offset != default)
        {
            _internal.cb_offset = Cb_offset;
        }
        if (Cr_mult != default)
        {
            _internal.cr_mult = Cr_mult;
        }
        if (Cr_luma_mult != default)
        {
            _internal.cr_luma_mult = Cr_luma_mult;
        }
        if (Cr_offset != default)
        {
            _internal.cr_offset = Cr_offset;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        Flags?.Dispose();
    }


    public static implicit operator StdVideoAV1FilmGrain(AdamantiumVulkan.Interop.StdVideoAV1FilmGrain s)
    {
        return new StdVideoAV1FilmGrain(s);
    }

}



