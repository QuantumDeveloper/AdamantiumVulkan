// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceVulkan14Features : QBDisposableObject
{
    public PhysicalDeviceVulkan14Features()
    {
    }

    public PhysicalDeviceVulkan14Features(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Features _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        GlobalPriorityQuery = _internal.globalPriorityQuery;
        ShaderSubgroupRotate = _internal.shaderSubgroupRotate;
        ShaderSubgroupRotateClustered = _internal.shaderSubgroupRotateClustered;
        ShaderFloatControls2 = _internal.shaderFloatControls2;
        ShaderExpectAssume = _internal.shaderExpectAssume;
        RectangularLines = _internal.rectangularLines;
        BresenhamLines = _internal.bresenhamLines;
        SmoothLines = _internal.smoothLines;
        StippledRectangularLines = _internal.stippledRectangularLines;
        StippledBresenhamLines = _internal.stippledBresenhamLines;
        StippledSmoothLines = _internal.stippledSmoothLines;
        VertexAttributeInstanceRateDivisor = _internal.vertexAttributeInstanceRateDivisor;
        VertexAttributeInstanceRateZeroDivisor = _internal.vertexAttributeInstanceRateZeroDivisor;
        IndexTypeUint8 = _internal.indexTypeUint8;
        DynamicRenderingLocalRead = _internal.dynamicRenderingLocalRead;
        Maintenance5 = _internal.maintenance5;
        Maintenance6 = _internal.maintenance6;
        PipelineProtectedAccess = _internal.pipelineProtectedAccess;
        PipelineRobustness = _internal.pipelineRobustness;
        HostImageCopy = _internal.hostImageCopy;
        PushDescriptor = _internal.pushDescriptor;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 GlobalPriorityQuery { get; set; }
    public VkBool32 ShaderSubgroupRotate { get; set; }
    public VkBool32 ShaderSubgroupRotateClustered { get; set; }
    public VkBool32 ShaderFloatControls2 { get; set; }
    public VkBool32 ShaderExpectAssume { get; set; }
    public VkBool32 RectangularLines { get; set; }
    public VkBool32 BresenhamLines { get; set; }
    public VkBool32 SmoothLines { get; set; }
    public VkBool32 StippledRectangularLines { get; set; }
    public VkBool32 StippledBresenhamLines { get; set; }
    public VkBool32 StippledSmoothLines { get; set; }
    public VkBool32 VertexAttributeInstanceRateDivisor { get; set; }
    public VkBool32 VertexAttributeInstanceRateZeroDivisor { get; set; }
    public VkBool32 IndexTypeUint8 { get; set; }
    public VkBool32 DynamicRenderingLocalRead { get; set; }
    public VkBool32 Maintenance5 { get; set; }
    public VkBool32 Maintenance6 { get; set; }
    public VkBool32 PipelineProtectedAccess { get; set; }
    public VkBool32 PipelineRobustness { get; set; }
    public VkBool32 HostImageCopy { get; set; }
    public VkBool32 PushDescriptor { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Features ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Features();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (GlobalPriorityQuery != (uint)default)
        {
            _internal.globalPriorityQuery = GlobalPriorityQuery;
        }
        if (ShaderSubgroupRotate != (uint)default)
        {
            _internal.shaderSubgroupRotate = ShaderSubgroupRotate;
        }
        if (ShaderSubgroupRotateClustered != (uint)default)
        {
            _internal.shaderSubgroupRotateClustered = ShaderSubgroupRotateClustered;
        }
        if (ShaderFloatControls2 != (uint)default)
        {
            _internal.shaderFloatControls2 = ShaderFloatControls2;
        }
        if (ShaderExpectAssume != (uint)default)
        {
            _internal.shaderExpectAssume = ShaderExpectAssume;
        }
        if (RectangularLines != (uint)default)
        {
            _internal.rectangularLines = RectangularLines;
        }
        if (BresenhamLines != (uint)default)
        {
            _internal.bresenhamLines = BresenhamLines;
        }
        if (SmoothLines != (uint)default)
        {
            _internal.smoothLines = SmoothLines;
        }
        if (StippledRectangularLines != (uint)default)
        {
            _internal.stippledRectangularLines = StippledRectangularLines;
        }
        if (StippledBresenhamLines != (uint)default)
        {
            _internal.stippledBresenhamLines = StippledBresenhamLines;
        }
        if (StippledSmoothLines != (uint)default)
        {
            _internal.stippledSmoothLines = StippledSmoothLines;
        }
        if (VertexAttributeInstanceRateDivisor != (uint)default)
        {
            _internal.vertexAttributeInstanceRateDivisor = VertexAttributeInstanceRateDivisor;
        }
        if (VertexAttributeInstanceRateZeroDivisor != (uint)default)
        {
            _internal.vertexAttributeInstanceRateZeroDivisor = VertexAttributeInstanceRateZeroDivisor;
        }
        if (IndexTypeUint8 != (uint)default)
        {
            _internal.indexTypeUint8 = IndexTypeUint8;
        }
        if (DynamicRenderingLocalRead != (uint)default)
        {
            _internal.dynamicRenderingLocalRead = DynamicRenderingLocalRead;
        }
        if (Maintenance5 != (uint)default)
        {
            _internal.maintenance5 = Maintenance5;
        }
        if (Maintenance6 != (uint)default)
        {
            _internal.maintenance6 = Maintenance6;
        }
        if (PipelineProtectedAccess != (uint)default)
        {
            _internal.pipelineProtectedAccess = PipelineProtectedAccess;
        }
        if (PipelineRobustness != (uint)default)
        {
            _internal.pipelineRobustness = PipelineRobustness;
        }
        if (HostImageCopy != (uint)default)
        {
            _internal.hostImageCopy = HostImageCopy;
        }
        if (PushDescriptor != (uint)default)
        {
            _internal.pushDescriptor = PushDescriptor;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceVulkan14Features(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Features p)
    {
        return new PhysicalDeviceVulkan14Features(p);
    }

}



