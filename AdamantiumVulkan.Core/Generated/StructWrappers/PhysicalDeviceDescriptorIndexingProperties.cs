// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceDescriptorIndexingProperties : QBDisposableObject
{
    public PhysicalDeviceDescriptorIndexingProperties()
    {
    }

    public PhysicalDeviceDescriptorIndexingProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingProperties _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        MaxUpdateAfterBindDescriptorsInAllPools = _internal.maxUpdateAfterBindDescriptorsInAllPools;
        ShaderUniformBufferArrayNonUniformIndexingNative = _internal.shaderUniformBufferArrayNonUniformIndexingNative;
        ShaderSampledImageArrayNonUniformIndexingNative = _internal.shaderSampledImageArrayNonUniformIndexingNative;
        ShaderStorageBufferArrayNonUniformIndexingNative = _internal.shaderStorageBufferArrayNonUniformIndexingNative;
        ShaderStorageImageArrayNonUniformIndexingNative = _internal.shaderStorageImageArrayNonUniformIndexingNative;
        ShaderInputAttachmentArrayNonUniformIndexingNative = _internal.shaderInputAttachmentArrayNonUniformIndexingNative;
        RobustBufferAccessUpdateAfterBind = _internal.robustBufferAccessUpdateAfterBind;
        QuadDivergentImplicitLod = _internal.quadDivergentImplicitLod;
        MaxPerStageDescriptorUpdateAfterBindSamplers = _internal.maxPerStageDescriptorUpdateAfterBindSamplers;
        MaxPerStageDescriptorUpdateAfterBindUniformBuffers = _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        MaxPerStageDescriptorUpdateAfterBindStorageBuffers = _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        MaxPerStageDescriptorUpdateAfterBindSampledImages = _internal.maxPerStageDescriptorUpdateAfterBindSampledImages;
        MaxPerStageDescriptorUpdateAfterBindStorageImages = _internal.maxPerStageDescriptorUpdateAfterBindStorageImages;
        MaxPerStageDescriptorUpdateAfterBindInputAttachments = _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments;
        MaxPerStageUpdateAfterBindResources = _internal.maxPerStageUpdateAfterBindResources;
        MaxDescriptorSetUpdateAfterBindSamplers = _internal.maxDescriptorSetUpdateAfterBindSamplers;
        MaxDescriptorSetUpdateAfterBindUniformBuffers = _internal.maxDescriptorSetUpdateAfterBindUniformBuffers;
        MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic = _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        MaxDescriptorSetUpdateAfterBindStorageBuffers = _internal.maxDescriptorSetUpdateAfterBindStorageBuffers;
        MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic = _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        MaxDescriptorSetUpdateAfterBindSampledImages = _internal.maxDescriptorSetUpdateAfterBindSampledImages;
        MaxDescriptorSetUpdateAfterBindStorageImages = _internal.maxDescriptorSetUpdateAfterBindStorageImages;
        MaxDescriptorSetUpdateAfterBindInputAttachments = _internal.maxDescriptorSetUpdateAfterBindInputAttachments;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint MaxUpdateAfterBindDescriptorsInAllPools { get; set; }
    public VkBool32 ShaderUniformBufferArrayNonUniformIndexingNative { get; set; }
    public VkBool32 ShaderSampledImageArrayNonUniformIndexingNative { get; set; }
    public VkBool32 ShaderStorageBufferArrayNonUniformIndexingNative { get; set; }
    public VkBool32 ShaderStorageImageArrayNonUniformIndexingNative { get; set; }
    public VkBool32 ShaderInputAttachmentArrayNonUniformIndexingNative { get; set; }
    public VkBool32 RobustBufferAccessUpdateAfterBind { get; set; }
    public VkBool32 QuadDivergentImplicitLod { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindSamplers { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindSampledImages { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindStorageImages { get; set; }
    public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments { get; set; }
    public uint MaxPerStageUpdateAfterBindResources { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindSamplers { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindUniformBuffers { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindStorageBuffers { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindSampledImages { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindStorageImages { get; set; }
    public uint MaxDescriptorSetUpdateAfterBindInputAttachments { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingProperties ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingProperties();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (MaxUpdateAfterBindDescriptorsInAllPools != default)
        {
            _internal.maxUpdateAfterBindDescriptorsInAllPools = MaxUpdateAfterBindDescriptorsInAllPools;
        }
        if (ShaderUniformBufferArrayNonUniformIndexingNative != (uint)default)
        {
            _internal.shaderUniformBufferArrayNonUniformIndexingNative = ShaderUniformBufferArrayNonUniformIndexingNative;
        }
        if (ShaderSampledImageArrayNonUniformIndexingNative != (uint)default)
        {
            _internal.shaderSampledImageArrayNonUniformIndexingNative = ShaderSampledImageArrayNonUniformIndexingNative;
        }
        if (ShaderStorageBufferArrayNonUniformIndexingNative != (uint)default)
        {
            _internal.shaderStorageBufferArrayNonUniformIndexingNative = ShaderStorageBufferArrayNonUniformIndexingNative;
        }
        if (ShaderStorageImageArrayNonUniformIndexingNative != (uint)default)
        {
            _internal.shaderStorageImageArrayNonUniformIndexingNative = ShaderStorageImageArrayNonUniformIndexingNative;
        }
        if (ShaderInputAttachmentArrayNonUniformIndexingNative != (uint)default)
        {
            _internal.shaderInputAttachmentArrayNonUniformIndexingNative = ShaderInputAttachmentArrayNonUniformIndexingNative;
        }
        if (RobustBufferAccessUpdateAfterBind != (uint)default)
        {
            _internal.robustBufferAccessUpdateAfterBind = RobustBufferAccessUpdateAfterBind;
        }
        if (QuadDivergentImplicitLod != (uint)default)
        {
            _internal.quadDivergentImplicitLod = QuadDivergentImplicitLod;
        }
        if (MaxPerStageDescriptorUpdateAfterBindSamplers != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindSamplers = MaxPerStageDescriptorUpdateAfterBindSamplers;
        }
        if (MaxPerStageDescriptorUpdateAfterBindUniformBuffers != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindUniformBuffers = MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
        }
        if (MaxPerStageDescriptorUpdateAfterBindStorageBuffers != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindStorageBuffers = MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
        }
        if (MaxPerStageDescriptorUpdateAfterBindSampledImages != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindSampledImages = MaxPerStageDescriptorUpdateAfterBindSampledImages;
        }
        if (MaxPerStageDescriptorUpdateAfterBindStorageImages != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindStorageImages = MaxPerStageDescriptorUpdateAfterBindStorageImages;
        }
        if (MaxPerStageDescriptorUpdateAfterBindInputAttachments != default)
        {
            _internal.maxPerStageDescriptorUpdateAfterBindInputAttachments = MaxPerStageDescriptorUpdateAfterBindInputAttachments;
        }
        if (MaxPerStageUpdateAfterBindResources != default)
        {
            _internal.maxPerStageUpdateAfterBindResources = MaxPerStageUpdateAfterBindResources;
        }
        if (MaxDescriptorSetUpdateAfterBindSamplers != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindSamplers = MaxDescriptorSetUpdateAfterBindSamplers;
        }
        if (MaxDescriptorSetUpdateAfterBindUniformBuffers != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindUniformBuffers = MaxDescriptorSetUpdateAfterBindUniformBuffers;
        }
        if (MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        }
        if (MaxDescriptorSetUpdateAfterBindStorageBuffers != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindStorageBuffers = MaxDescriptorSetUpdateAfterBindStorageBuffers;
        }
        if (MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        }
        if (MaxDescriptorSetUpdateAfterBindSampledImages != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindSampledImages = MaxDescriptorSetUpdateAfterBindSampledImages;
        }
        if (MaxDescriptorSetUpdateAfterBindStorageImages != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindStorageImages = MaxDescriptorSetUpdateAfterBindStorageImages;
        }
        if (MaxDescriptorSetUpdateAfterBindInputAttachments != default)
        {
            _internal.maxDescriptorSetUpdateAfterBindInputAttachments = MaxDescriptorSetUpdateAfterBindInputAttachments;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceDescriptorIndexingProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingProperties p)
    {
        return new PhysicalDeviceDescriptorIndexingProperties(p);
    }

}



