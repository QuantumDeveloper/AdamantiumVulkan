// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceShaderAtomicFloatFeaturesEXT : QBDisposableObject
{
    public PhysicalDeviceShaderAtomicFloatFeaturesEXT()
    {
    }

    public PhysicalDeviceShaderAtomicFloatFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        ShaderBufferFloat32Atomics = _internal.shaderBufferFloat32Atomics;
        ShaderBufferFloat32AtomicAdd = _internal.shaderBufferFloat32AtomicAdd;
        ShaderBufferFloat64Atomics = _internal.shaderBufferFloat64Atomics;
        ShaderBufferFloat64AtomicAdd = _internal.shaderBufferFloat64AtomicAdd;
        ShaderSharedFloat32Atomics = _internal.shaderSharedFloat32Atomics;
        ShaderSharedFloat32AtomicAdd = _internal.shaderSharedFloat32AtomicAdd;
        ShaderSharedFloat64Atomics = _internal.shaderSharedFloat64Atomics;
        ShaderSharedFloat64AtomicAdd = _internal.shaderSharedFloat64AtomicAdd;
        ShaderImageFloat32Atomics = _internal.shaderImageFloat32Atomics;
        ShaderImageFloat32AtomicAdd = _internal.shaderImageFloat32AtomicAdd;
        SparseImageFloat32Atomics = _internal.sparseImageFloat32Atomics;
        SparseImageFloat32AtomicAdd = _internal.sparseImageFloat32AtomicAdd;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 ShaderBufferFloat32Atomics { get; set; }
    public VkBool32 ShaderBufferFloat32AtomicAdd { get; set; }
    public VkBool32 ShaderBufferFloat64Atomics { get; set; }
    public VkBool32 ShaderBufferFloat64AtomicAdd { get; set; }
    public VkBool32 ShaderSharedFloat32Atomics { get; set; }
    public VkBool32 ShaderSharedFloat32AtomicAdd { get; set; }
    public VkBool32 ShaderSharedFloat64Atomics { get; set; }
    public VkBool32 ShaderSharedFloat64AtomicAdd { get; set; }
    public VkBool32 ShaderImageFloat32Atomics { get; set; }
    public VkBool32 ShaderImageFloat32AtomicAdd { get; set; }
    public VkBool32 SparseImageFloat32Atomics { get; set; }
    public VkBool32 SparseImageFloat32AtomicAdd { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (ShaderBufferFloat32Atomics != (uint)default)
        {
            _internal.shaderBufferFloat32Atomics = ShaderBufferFloat32Atomics;
        }
        if (ShaderBufferFloat32AtomicAdd != (uint)default)
        {
            _internal.shaderBufferFloat32AtomicAdd = ShaderBufferFloat32AtomicAdd;
        }
        if (ShaderBufferFloat64Atomics != (uint)default)
        {
            _internal.shaderBufferFloat64Atomics = ShaderBufferFloat64Atomics;
        }
        if (ShaderBufferFloat64AtomicAdd != (uint)default)
        {
            _internal.shaderBufferFloat64AtomicAdd = ShaderBufferFloat64AtomicAdd;
        }
        if (ShaderSharedFloat32Atomics != (uint)default)
        {
            _internal.shaderSharedFloat32Atomics = ShaderSharedFloat32Atomics;
        }
        if (ShaderSharedFloat32AtomicAdd != (uint)default)
        {
            _internal.shaderSharedFloat32AtomicAdd = ShaderSharedFloat32AtomicAdd;
        }
        if (ShaderSharedFloat64Atomics != (uint)default)
        {
            _internal.shaderSharedFloat64Atomics = ShaderSharedFloat64Atomics;
        }
        if (ShaderSharedFloat64AtomicAdd != (uint)default)
        {
            _internal.shaderSharedFloat64AtomicAdd = ShaderSharedFloat64AtomicAdd;
        }
        if (ShaderImageFloat32Atomics != (uint)default)
        {
            _internal.shaderImageFloat32Atomics = ShaderImageFloat32Atomics;
        }
        if (ShaderImageFloat32AtomicAdd != (uint)default)
        {
            _internal.shaderImageFloat32AtomicAdd = ShaderImageFloat32AtomicAdd;
        }
        if (SparseImageFloat32Atomics != (uint)default)
        {
            _internal.sparseImageFloat32Atomics = SparseImageFloat32Atomics;
        }
        if (SparseImageFloat32AtomicAdd != (uint)default)
        {
            _internal.sparseImageFloat32AtomicAdd = SparseImageFloat32AtomicAdd;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceShaderAtomicFloatFeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT p)
    {
        return new PhysicalDeviceShaderAtomicFloatFeaturesEXT(p);
    }

}



