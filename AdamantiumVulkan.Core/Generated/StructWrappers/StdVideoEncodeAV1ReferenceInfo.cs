// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeAV1ReferenceInfo : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeAV1ExtensionHeader> _pExtensionHeader;

    public StdVideoEncodeAV1ReferenceInfo()
    {
    }

    public StdVideoEncodeAV1ReferenceInfo(AdamantiumVulkan.Interop.StdVideoEncodeAV1ReferenceInfo _internal)
    {
        Flags = new StdVideoEncodeAV1ReferenceInfoFlags(_internal.flags);
        RefFrameId = _internal.RefFrameId;
        Frame_type = _internal.frame_type;
        OrderHint = _internal.OrderHint;
        Reserved1 = NativeUtils.PointerToManagedArray(_internal.reserved1, 3);
        PExtensionHeader = new StdVideoEncodeAV1ExtensionHeader(*_internal.pExtensionHeader);
        NativeUtils.Free(_internal.pExtensionHeader);
    }

    public StdVideoEncodeAV1ReferenceInfoFlags Flags { get; set; }
    public uint RefFrameId { get; set; }
    public StdVideoAV1FrameType Frame_type { get; set; }
    public byte OrderHint { get; set; }
    public byte[] Reserved1 { get; set; }
    public StdVideoEncodeAV1ExtensionHeader PExtensionHeader { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeAV1ReferenceInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeAV1ReferenceInfo();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (RefFrameId != default)
        {
            _internal.RefFrameId = RefFrameId;
        }
        if (Frame_type != default)
        {
            _internal.frame_type = Frame_type;
        }
        if (OrderHint != default)
        {
            _internal.OrderHint = OrderHint;
        }
        if (Reserved1 != default)
        {
            if (Reserved1.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved1), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved1, 3, Reserved1);
        }
        _pExtensionHeader.Dispose();
        if (PExtensionHeader != default)
        {
            var struct0 = PExtensionHeader.ToNative();
            _pExtensionHeader = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeAV1ExtensionHeader>(struct0);
            _internal.pExtensionHeader = _pExtensionHeader.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pExtensionHeader.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoEncodeAV1ReferenceInfo(AdamantiumVulkan.Interop.StdVideoEncodeAV1ReferenceInfo s)
    {
        return new StdVideoEncodeAV1ReferenceInfo(s);
    }

}



