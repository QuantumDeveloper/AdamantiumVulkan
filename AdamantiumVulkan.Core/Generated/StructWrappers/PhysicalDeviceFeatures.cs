// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceFeatures : QBDisposableObject
{
    public PhysicalDeviceFeatures()
    {
    }

    public PhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures _internal)
    {
        RobustBufferAccess = _internal.robustBufferAccess;
        FullDrawIndexUint32 = _internal.fullDrawIndexUint32;
        ImageCubeArray = _internal.imageCubeArray;
        IndependentBlend = _internal.independentBlend;
        GeometryShader = _internal.geometryShader;
        TessellationShader = _internal.tessellationShader;
        SampleRateShading = _internal.sampleRateShading;
        DualSrcBlend = _internal.dualSrcBlend;
        LogicOp = _internal.logicOp;
        MultiDrawIndirect = _internal.multiDrawIndirect;
        DrawIndirectFirstInstance = _internal.drawIndirectFirstInstance;
        DepthClamp = _internal.depthClamp;
        DepthBiasClamp = _internal.depthBiasClamp;
        FillModeNonSolid = _internal.fillModeNonSolid;
        DepthBounds = _internal.depthBounds;
        WideLines = _internal.wideLines;
        LargePoints = _internal.largePoints;
        AlphaToOne = _internal.alphaToOne;
        MultiViewport = _internal.multiViewport;
        SamplerAnisotropy = _internal.samplerAnisotropy;
        TextureCompressionETC2 = _internal.textureCompressionETC2;
        TextureCompressionASTC_LDR = _internal.textureCompressionASTC_LDR;
        TextureCompressionBC = _internal.textureCompressionBC;
        OcclusionQueryPrecise = _internal.occlusionQueryPrecise;
        PipelineStatisticsQuery = _internal.pipelineStatisticsQuery;
        VertexPipelineStoresAndAtomics = _internal.vertexPipelineStoresAndAtomics;
        FragmentStoresAndAtomics = _internal.fragmentStoresAndAtomics;
        ShaderTessellationAndGeometryPointSize = _internal.shaderTessellationAndGeometryPointSize;
        ShaderImageGatherExtended = _internal.shaderImageGatherExtended;
        ShaderStorageImageExtendedFormats = _internal.shaderStorageImageExtendedFormats;
        ShaderStorageImageMultisample = _internal.shaderStorageImageMultisample;
        ShaderStorageImageReadWithoutFormat = _internal.shaderStorageImageReadWithoutFormat;
        ShaderStorageImageWriteWithoutFormat = _internal.shaderStorageImageWriteWithoutFormat;
        ShaderUniformBufferArrayDynamicIndexing = _internal.shaderUniformBufferArrayDynamicIndexing;
        ShaderSampledImageArrayDynamicIndexing = _internal.shaderSampledImageArrayDynamicIndexing;
        ShaderStorageBufferArrayDynamicIndexing = _internal.shaderStorageBufferArrayDynamicIndexing;
        ShaderStorageImageArrayDynamicIndexing = _internal.shaderStorageImageArrayDynamicIndexing;
        ShaderClipDistance = _internal.shaderClipDistance;
        ShaderCullDistance = _internal.shaderCullDistance;
        ShaderFloat64 = _internal.shaderFloat64;
        ShaderInt64 = _internal.shaderInt64;
        ShaderInt16 = _internal.shaderInt16;
        ShaderResourceResidency = _internal.shaderResourceResidency;
        ShaderResourceMinLod = _internal.shaderResourceMinLod;
        SparseBinding = _internal.sparseBinding;
        SparseResidencyBuffer = _internal.sparseResidencyBuffer;
        SparseResidencyImage2D = _internal.sparseResidencyImage2D;
        SparseResidencyImage3D = _internal.sparseResidencyImage3D;
        SparseResidency2Samples = _internal.sparseResidency2Samples;
        SparseResidency4Samples = _internal.sparseResidency4Samples;
        SparseResidency8Samples = _internal.sparseResidency8Samples;
        SparseResidency16Samples = _internal.sparseResidency16Samples;
        SparseResidencyAliased = _internal.sparseResidencyAliased;
        VariableMultisampleRate = _internal.variableMultisampleRate;
        InheritedQueries = _internal.inheritedQueries;
    }

    public VkBool32 RobustBufferAccess { get; set; }
    public VkBool32 FullDrawIndexUint32 { get; set; }
    public VkBool32 ImageCubeArray { get; set; }
    public VkBool32 IndependentBlend { get; set; }
    public VkBool32 GeometryShader { get; set; }
    public VkBool32 TessellationShader { get; set; }
    public VkBool32 SampleRateShading { get; set; }
    public VkBool32 DualSrcBlend { get; set; }
    public VkBool32 LogicOp { get; set; }
    public VkBool32 MultiDrawIndirect { get; set; }
    public VkBool32 DrawIndirectFirstInstance { get; set; }
    public VkBool32 DepthClamp { get; set; }
    public VkBool32 DepthBiasClamp { get; set; }
    public VkBool32 FillModeNonSolid { get; set; }
    public VkBool32 DepthBounds { get; set; }
    public VkBool32 WideLines { get; set; }
    public VkBool32 LargePoints { get; set; }
    public VkBool32 AlphaToOne { get; set; }
    public VkBool32 MultiViewport { get; set; }
    public VkBool32 SamplerAnisotropy { get; set; }
    public VkBool32 TextureCompressionETC2 { get; set; }
    public VkBool32 TextureCompressionASTC_LDR { get; set; }
    public VkBool32 TextureCompressionBC { get; set; }
    public VkBool32 OcclusionQueryPrecise { get; set; }
    public VkBool32 PipelineStatisticsQuery { get; set; }
    public VkBool32 VertexPipelineStoresAndAtomics { get; set; }
    public VkBool32 FragmentStoresAndAtomics { get; set; }
    public VkBool32 ShaderTessellationAndGeometryPointSize { get; set; }
    public VkBool32 ShaderImageGatherExtended { get; set; }
    public VkBool32 ShaderStorageImageExtendedFormats { get; set; }
    public VkBool32 ShaderStorageImageMultisample { get; set; }
    public VkBool32 ShaderStorageImageReadWithoutFormat { get; set; }
    public VkBool32 ShaderStorageImageWriteWithoutFormat { get; set; }
    public VkBool32 ShaderUniformBufferArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderSampledImageArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderStorageBufferArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderStorageImageArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderClipDistance { get; set; }
    public VkBool32 ShaderCullDistance { get; set; }
    public VkBool32 ShaderFloat64 { get; set; }
    public VkBool32 ShaderInt64 { get; set; }
    public VkBool32 ShaderInt16 { get; set; }
    public VkBool32 ShaderResourceResidency { get; set; }
    public VkBool32 ShaderResourceMinLod { get; set; }
    public VkBool32 SparseBinding { get; set; }
    public VkBool32 SparseResidencyBuffer { get; set; }
    public VkBool32 SparseResidencyImage2D { get; set; }
    public VkBool32 SparseResidencyImage3D { get; set; }
    public VkBool32 SparseResidency2Samples { get; set; }
    public VkBool32 SparseResidency4Samples { get; set; }
    public VkBool32 SparseResidency8Samples { get; set; }
    public VkBool32 SparseResidency16Samples { get; set; }
    public VkBool32 SparseResidencyAliased { get; set; }
    public VkBool32 VariableMultisampleRate { get; set; }
    public VkBool32 InheritedQueries { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures();
        if (RobustBufferAccess != (uint)default)
        {
            _internal.robustBufferAccess = RobustBufferAccess;
        }
        if (FullDrawIndexUint32 != (uint)default)
        {
            _internal.fullDrawIndexUint32 = FullDrawIndexUint32;
        }
        if (ImageCubeArray != (uint)default)
        {
            _internal.imageCubeArray = ImageCubeArray;
        }
        if (IndependentBlend != (uint)default)
        {
            _internal.independentBlend = IndependentBlend;
        }
        if (GeometryShader != (uint)default)
        {
            _internal.geometryShader = GeometryShader;
        }
        if (TessellationShader != (uint)default)
        {
            _internal.tessellationShader = TessellationShader;
        }
        if (SampleRateShading != (uint)default)
        {
            _internal.sampleRateShading = SampleRateShading;
        }
        if (DualSrcBlend != (uint)default)
        {
            _internal.dualSrcBlend = DualSrcBlend;
        }
        if (LogicOp != (uint)default)
        {
            _internal.logicOp = LogicOp;
        }
        if (MultiDrawIndirect != (uint)default)
        {
            _internal.multiDrawIndirect = MultiDrawIndirect;
        }
        if (DrawIndirectFirstInstance != (uint)default)
        {
            _internal.drawIndirectFirstInstance = DrawIndirectFirstInstance;
        }
        if (DepthClamp != (uint)default)
        {
            _internal.depthClamp = DepthClamp;
        }
        if (DepthBiasClamp != (uint)default)
        {
            _internal.depthBiasClamp = DepthBiasClamp;
        }
        if (FillModeNonSolid != (uint)default)
        {
            _internal.fillModeNonSolid = FillModeNonSolid;
        }
        if (DepthBounds != (uint)default)
        {
            _internal.depthBounds = DepthBounds;
        }
        if (WideLines != (uint)default)
        {
            _internal.wideLines = WideLines;
        }
        if (LargePoints != (uint)default)
        {
            _internal.largePoints = LargePoints;
        }
        if (AlphaToOne != (uint)default)
        {
            _internal.alphaToOne = AlphaToOne;
        }
        if (MultiViewport != (uint)default)
        {
            _internal.multiViewport = MultiViewport;
        }
        if (SamplerAnisotropy != (uint)default)
        {
            _internal.samplerAnisotropy = SamplerAnisotropy;
        }
        if (TextureCompressionETC2 != (uint)default)
        {
            _internal.textureCompressionETC2 = TextureCompressionETC2;
        }
        if (TextureCompressionASTC_LDR != (uint)default)
        {
            _internal.textureCompressionASTC_LDR = TextureCompressionASTC_LDR;
        }
        if (TextureCompressionBC != (uint)default)
        {
            _internal.textureCompressionBC = TextureCompressionBC;
        }
        if (OcclusionQueryPrecise != (uint)default)
        {
            _internal.occlusionQueryPrecise = OcclusionQueryPrecise;
        }
        if (PipelineStatisticsQuery != (uint)default)
        {
            _internal.pipelineStatisticsQuery = PipelineStatisticsQuery;
        }
        if (VertexPipelineStoresAndAtomics != (uint)default)
        {
            _internal.vertexPipelineStoresAndAtomics = VertexPipelineStoresAndAtomics;
        }
        if (FragmentStoresAndAtomics != (uint)default)
        {
            _internal.fragmentStoresAndAtomics = FragmentStoresAndAtomics;
        }
        if (ShaderTessellationAndGeometryPointSize != (uint)default)
        {
            _internal.shaderTessellationAndGeometryPointSize = ShaderTessellationAndGeometryPointSize;
        }
        if (ShaderImageGatherExtended != (uint)default)
        {
            _internal.shaderImageGatherExtended = ShaderImageGatherExtended;
        }
        if (ShaderStorageImageExtendedFormats != (uint)default)
        {
            _internal.shaderStorageImageExtendedFormats = ShaderStorageImageExtendedFormats;
        }
        if (ShaderStorageImageMultisample != (uint)default)
        {
            _internal.shaderStorageImageMultisample = ShaderStorageImageMultisample;
        }
        if (ShaderStorageImageReadWithoutFormat != (uint)default)
        {
            _internal.shaderStorageImageReadWithoutFormat = ShaderStorageImageReadWithoutFormat;
        }
        if (ShaderStorageImageWriteWithoutFormat != (uint)default)
        {
            _internal.shaderStorageImageWriteWithoutFormat = ShaderStorageImageWriteWithoutFormat;
        }
        if (ShaderUniformBufferArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderUniformBufferArrayDynamicIndexing = ShaderUniformBufferArrayDynamicIndexing;
        }
        if (ShaderSampledImageArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderSampledImageArrayDynamicIndexing = ShaderSampledImageArrayDynamicIndexing;
        }
        if (ShaderStorageBufferArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderStorageBufferArrayDynamicIndexing = ShaderStorageBufferArrayDynamicIndexing;
        }
        if (ShaderStorageImageArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderStorageImageArrayDynamicIndexing = ShaderStorageImageArrayDynamicIndexing;
        }
        if (ShaderClipDistance != (uint)default)
        {
            _internal.shaderClipDistance = ShaderClipDistance;
        }
        if (ShaderCullDistance != (uint)default)
        {
            _internal.shaderCullDistance = ShaderCullDistance;
        }
        if (ShaderFloat64 != (uint)default)
        {
            _internal.shaderFloat64 = ShaderFloat64;
        }
        if (ShaderInt64 != (uint)default)
        {
            _internal.shaderInt64 = ShaderInt64;
        }
        if (ShaderInt16 != (uint)default)
        {
            _internal.shaderInt16 = ShaderInt16;
        }
        if (ShaderResourceResidency != (uint)default)
        {
            _internal.shaderResourceResidency = ShaderResourceResidency;
        }
        if (ShaderResourceMinLod != (uint)default)
        {
            _internal.shaderResourceMinLod = ShaderResourceMinLod;
        }
        if (SparseBinding != (uint)default)
        {
            _internal.sparseBinding = SparseBinding;
        }
        if (SparseResidencyBuffer != (uint)default)
        {
            _internal.sparseResidencyBuffer = SparseResidencyBuffer;
        }
        if (SparseResidencyImage2D != (uint)default)
        {
            _internal.sparseResidencyImage2D = SparseResidencyImage2D;
        }
        if (SparseResidencyImage3D != (uint)default)
        {
            _internal.sparseResidencyImage3D = SparseResidencyImage3D;
        }
        if (SparseResidency2Samples != (uint)default)
        {
            _internal.sparseResidency2Samples = SparseResidency2Samples;
        }
        if (SparseResidency4Samples != (uint)default)
        {
            _internal.sparseResidency4Samples = SparseResidency4Samples;
        }
        if (SparseResidency8Samples != (uint)default)
        {
            _internal.sparseResidency8Samples = SparseResidency8Samples;
        }
        if (SparseResidency16Samples != (uint)default)
        {
            _internal.sparseResidency16Samples = SparseResidency16Samples;
        }
        if (SparseResidencyAliased != (uint)default)
        {
            _internal.sparseResidencyAliased = SparseResidencyAliased;
        }
        if (VariableMultisampleRate != (uint)default)
        {
            _internal.variableMultisampleRate = VariableMultisampleRate;
        }
        if (InheritedQueries != (uint)default)
        {
            _internal.inheritedQueries = InheritedQueries;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures p)
    {
        return new PhysicalDeviceFeatures(p);
    }

}



