// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class SubpassDescription2 : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2> _pInputAttachments;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2> _pColorAttachments;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2> _pResolveAttachments;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2> _pDepthStencilAttachment;

    private NativeStruct<uint> _pPreserveAttachments;

    public SubpassDescription2()
    {
    }

    public SubpassDescription2(AdamantiumVulkan.Core.Interop.VkSubpassDescription2 _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        PipelineBindPoint = _internal.pipelineBindPoint;
        ViewMask = _internal.viewMask;
        InputAttachmentCount = _internal.inputAttachmentCount;
        PInputAttachments = new AttachmentReference2(*_internal.pInputAttachments);
        NativeUtils.Free(_internal.pInputAttachments);
        ColorAttachmentCount = _internal.colorAttachmentCount;
        PColorAttachments = new AttachmentReference2(*_internal.pColorAttachments);
        NativeUtils.Free(_internal.pColorAttachments);
        PResolveAttachments = new AttachmentReference2(*_internal.pResolveAttachments);
        NativeUtils.Free(_internal.pResolveAttachments);
        PDepthStencilAttachment = new AttachmentReference2(*_internal.pDepthStencilAttachment);
        NativeUtils.Free(_internal.pDepthStencilAttachment);
        PreserveAttachmentCount = _internal.preserveAttachmentCount;
        if (_internal.pPreserveAttachments != null)
        {
            PreserveAttachments = *_internal.pPreserveAttachments;
            NativeUtils.Free(_internal.pPreserveAttachments);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkSubpassDescriptionFlags Flags { get; set; }
    public PipelineBindPoint PipelineBindPoint { get; set; }
    public uint ViewMask { get; set; }
    public uint InputAttachmentCount { get; set; }
    public AttachmentReference2 PInputAttachments { get; set; }
    public uint ColorAttachmentCount { get; set; }
    public AttachmentReference2 PColorAttachments { get; set; }
    public AttachmentReference2 PResolveAttachments { get; set; }
    public AttachmentReference2 PDepthStencilAttachment { get; set; }
    public uint PreserveAttachmentCount { get; set; }
    public uint? PreserveAttachments { get; set; }

    public AdamantiumVulkan.Core.Interop.VkSubpassDescription2 ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDescription2();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.pipelineBindPoint = PipelineBindPoint;
        _internal.viewMask = ViewMask;
        _internal.inputAttachmentCount = InputAttachmentCount;
        _pInputAttachments.Dispose();
        if (PInputAttachments != null)
        {
            var struct0 = PInputAttachments.ToNative();
            _pInputAttachments = new NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2>(struct0);
            _internal.pInputAttachments = _pInputAttachments.Handle;
        }
        _internal.colorAttachmentCount = ColorAttachmentCount;
        _pColorAttachments.Dispose();
        if (PColorAttachments != null)
        {
            var struct1 = PColorAttachments.ToNative();
            _pColorAttachments = new NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2>(struct1);
            _internal.pColorAttachments = _pColorAttachments.Handle;
        }
        _pResolveAttachments.Dispose();
        if (PResolveAttachments != null)
        {
            var struct2 = PResolveAttachments.ToNative();
            _pResolveAttachments = new NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2>(struct2);
            _internal.pResolveAttachments = _pResolveAttachments.Handle;
        }
        _pDepthStencilAttachment.Dispose();
        if (PDepthStencilAttachment != null)
        {
            var struct3 = PDepthStencilAttachment.ToNative();
            _pDepthStencilAttachment = new NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference2>(struct3);
            _internal.pDepthStencilAttachment = _pDepthStencilAttachment.Handle;
        }
        _internal.preserveAttachmentCount = PreserveAttachmentCount;
        _pPreserveAttachments.Dispose();
        if (PreserveAttachments.HasValue)
        {
            _pPreserveAttachments = new NativeStruct<uint>(PreserveAttachments.Value);
            _internal.pPreserveAttachments = _pPreserveAttachments.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pInputAttachments.Dispose();
        _pColorAttachments.Dispose();
        _pResolveAttachments.Dispose();
        _pDepthStencilAttachment.Dispose();
        _pPreserveAttachments.Dispose();
    }


    public static implicit operator SubpassDescription2(AdamantiumVulkan.Core.Interop.VkSubpassDescription2 s)
    {
        return new SubpassDescription2(s);
    }

}



