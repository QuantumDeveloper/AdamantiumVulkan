// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class RayTracingShaderGroupCreateInfoNV : QBDisposableObject
{
    public RayTracingShaderGroupCreateInfoNV()
    {
    }

    public RayTracingShaderGroupCreateInfoNV(AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV _internal)
    {
        PNext = _internal.pNext;
        Type = _internal.type;
        GeneralShader = _internal.generalShader;
        ClosestHitShader = _internal.closestHitShader;
        AnyHitShader = _internal.anyHitShader;
        IntersectionShader = _internal.intersectionShader;
    }

    public StructureType SType => StructureType.RayTracingShaderGroupCreateInfoNv;
    public void* PNext { get; set; }
    public RayTracingShaderGroupTypeKHR Type { get; set; }
    public uint GeneralShader { get; set; }
    public uint ClosestHitShader { get; set; }
    public uint AnyHitShader { get; set; }
    public uint IntersectionShader { get; set; }

    public AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Type != default)
        {
            _internal.type = Type;
        }
        if (GeneralShader != default)
        {
            _internal.generalShader = GeneralShader;
        }
        if (ClosestHitShader != default)
        {
            _internal.closestHitShader = ClosestHitShader;
        }
        if (AnyHitShader != default)
        {
            _internal.anyHitShader = AnyHitShader;
        }
        if (IntersectionShader != default)
        {
            _internal.intersectionShader = IntersectionShader;
        }
        return _internal;
    }

    public static implicit operator RayTracingShaderGroupCreateInfoNV(AdamantiumVulkan.Core.Interop.VkRayTracingShaderGroupCreateInfoNV r)
    {
        return new RayTracingShaderGroupCreateInfoNV(r);
    }

}



