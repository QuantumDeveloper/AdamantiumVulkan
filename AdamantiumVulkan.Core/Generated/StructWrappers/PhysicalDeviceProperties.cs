// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceProperties : QBDisposableObject
{
    public PhysicalDeviceProperties()
    {
    }

    public PhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties _internal)
    {
        ApiVersion = _internal.apiVersion;
        DriverVersion = _internal.driverVersion;
        VendorID = _internal.vendorID;
        DeviceID = _internal.deviceID;
        DeviceType = _internal.deviceType;
        DeviceName = new string((sbyte*)_internal.deviceName);
        PipelineCacheUUID = NativeUtils.PointerToManagedArray(_internal.pipelineCacheUUID, 16);
        Limits = new PhysicalDeviceLimits(_internal.limits);
        SparseProperties = new PhysicalDeviceSparseProperties(_internal.sparseProperties);
    }

    public uint ApiVersion { get; set; }
    public uint DriverVersion { get; set; }
    public uint VendorID { get; set; }
    public uint DeviceID { get; set; }
    public PhysicalDeviceType DeviceType { get; set; }
    public string DeviceName { get; set; }
    public byte[] PipelineCacheUUID { get; set; }
    public PhysicalDeviceLimits Limits { get; set; }
    public PhysicalDeviceSparseProperties SparseProperties { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties();
        if (ApiVersion != default)
        {
            _internal.apiVersion = ApiVersion;
        }
        if (DriverVersion != default)
        {
            _internal.driverVersion = DriverVersion;
        }
        if (VendorID != default)
        {
            _internal.vendorID = VendorID;
        }
        if (DeviceID != default)
        {
            _internal.deviceID = DeviceID;
        }
        if (DeviceType != default)
        {
            _internal.deviceType = DeviceType;
        }
        if (DeviceName != default)
        {
            if (DeviceName.Length > 256)
                throw new System.ArgumentOutOfRangeException(nameof(DeviceName), "Array is out of bounds. Size should not be more than 256");

            NativeUtils.StringToFixedArray(_internal.deviceName, 256, DeviceName, false);
        }
        if (PipelineCacheUUID != default)
        {
            if (PipelineCacheUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(PipelineCacheUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.pipelineCacheUUID, 16, PipelineCacheUUID);
        }
        if (Limits != default)
        {
            _internal.limits = Limits.ToNative();
        }
        if (SparseProperties != default)
        {
            _internal.sparseProperties = SparseProperties.ToNative();
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        Limits?.Dispose();
        SparseProperties?.Dispose();
    }


    public static implicit operator PhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties p)
    {
        return new PhysicalDeviceProperties(p);
    }

}



