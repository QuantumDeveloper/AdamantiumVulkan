// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoH265ShortTermRefPicSet : QBDisposableObject
{
    public StdVideoH265ShortTermRefPicSet()
    {
    }

    public StdVideoH265ShortTermRefPicSet(AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet _internal)
    {
        Flags = new StdVideoH265ShortTermRefPicSetFlags(_internal.flags);
        Delta_idx_minus1 = _internal.delta_idx_minus1;
        Use_delta_flag = _internal.use_delta_flag;
        Abs_delta_rps_minus1 = _internal.abs_delta_rps_minus1;
        Used_by_curr_pic_flag = _internal.used_by_curr_pic_flag;
        Used_by_curr_pic_s0_flag = _internal.used_by_curr_pic_s0_flag;
        Used_by_curr_pic_s1_flag = _internal.used_by_curr_pic_s1_flag;
        Reserved1 = _internal.reserved1;
        Reserved2 = _internal.reserved2;
        Reserved3 = _internal.reserved3;
        Num_negative_pics = _internal.num_negative_pics;
        Num_positive_pics = _internal.num_positive_pics;
        Delta_poc_s0_minus1 = NativeUtils.PointerToManagedArray(_internal.delta_poc_s0_minus1, 16);
        Delta_poc_s1_minus1 = NativeUtils.PointerToManagedArray(_internal.delta_poc_s1_minus1, 16);
    }

    public StdVideoH265ShortTermRefPicSetFlags Flags { get; set; }
    public uint Delta_idx_minus1 { get; set; }
    public ushort Use_delta_flag { get; set; }
    public ushort Abs_delta_rps_minus1 { get; set; }
    public ushort Used_by_curr_pic_flag { get; set; }
    public ushort Used_by_curr_pic_s0_flag { get; set; }
    public ushort Used_by_curr_pic_s1_flag { get; set; }
    public ushort Reserved1 { get; set; }
    public byte Reserved2 { get; set; }
    public byte Reserved3 { get; set; }
    public byte Num_negative_pics { get; set; }
    public byte Num_positive_pics { get; set; }
    public ushort[] Delta_poc_s0_minus1 { get; set; }
    public ushort[] Delta_poc_s1_minus1 { get; set; }

    public AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Delta_idx_minus1 != default)
        {
            _internal.delta_idx_minus1 = Delta_idx_minus1;
        }
        if (Use_delta_flag != default)
        {
            _internal.use_delta_flag = Use_delta_flag;
        }
        if (Abs_delta_rps_minus1 != default)
        {
            _internal.abs_delta_rps_minus1 = Abs_delta_rps_minus1;
        }
        if (Used_by_curr_pic_flag != default)
        {
            _internal.used_by_curr_pic_flag = Used_by_curr_pic_flag;
        }
        if (Used_by_curr_pic_s0_flag != default)
        {
            _internal.used_by_curr_pic_s0_flag = Used_by_curr_pic_s0_flag;
        }
        if (Used_by_curr_pic_s1_flag != default)
        {
            _internal.used_by_curr_pic_s1_flag = Used_by_curr_pic_s1_flag;
        }
        if (Reserved1 != default)
        {
            _internal.reserved1 = Reserved1;
        }
        if (Reserved2 != default)
        {
            _internal.reserved2 = Reserved2;
        }
        if (Reserved3 != default)
        {
            _internal.reserved3 = Reserved3;
        }
        if (Num_negative_pics != default)
        {
            _internal.num_negative_pics = Num_negative_pics;
        }
        if (Num_positive_pics != default)
        {
            _internal.num_positive_pics = Num_positive_pics;
        }
        if (Delta_poc_s0_minus1 != default)
        {
            if (Delta_poc_s0_minus1.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_poc_s0_minus1), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.delta_poc_s0_minus1, 16, Delta_poc_s0_minus1);
        }
        if (Delta_poc_s1_minus1 != default)
        {
            if (Delta_poc_s1_minus1.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(Delta_poc_s1_minus1), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.delta_poc_s1_minus1, 16, Delta_poc_s1_minus1);
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        Flags?.Dispose();
    }


    public static implicit operator StdVideoH265ShortTermRefPicSet(AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet s)
    {
        return new StdVideoH265ShortTermRefPicSet(s);
    }

}



