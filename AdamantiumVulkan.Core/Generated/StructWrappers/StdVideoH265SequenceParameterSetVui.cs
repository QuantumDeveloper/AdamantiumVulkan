// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoH265SequenceParameterSetVui : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoH265HrdParameters> _pHrdParameters;

    public StdVideoH265SequenceParameterSetVui()
    {
    }

    public StdVideoH265SequenceParameterSetVui(AdamantiumVulkan.Interop.StdVideoH265SequenceParameterSetVui _internal)
    {
        Flags = new StdVideoH265SpsVuiFlags(_internal.flags);
        Aspect_ratio_idc = _internal.aspect_ratio_idc;
        Sar_width = _internal.sar_width;
        Sar_height = _internal.sar_height;
        Video_format = _internal.video_format;
        Colour_primaries = _internal.colour_primaries;
        Transfer_characteristics = _internal.transfer_characteristics;
        Matrix_coeffs = _internal.matrix_coeffs;
        Chroma_sample_loc_type_top_field = _internal.chroma_sample_loc_type_top_field;
        Chroma_sample_loc_type_bottom_field = _internal.chroma_sample_loc_type_bottom_field;
        Reserved1 = _internal.reserved1;
        Reserved2 = _internal.reserved2;
        Def_disp_win_left_offset = _internal.def_disp_win_left_offset;
        Def_disp_win_right_offset = _internal.def_disp_win_right_offset;
        Def_disp_win_top_offset = _internal.def_disp_win_top_offset;
        Def_disp_win_bottom_offset = _internal.def_disp_win_bottom_offset;
        Vui_num_units_in_tick = _internal.vui_num_units_in_tick;
        Vui_time_scale = _internal.vui_time_scale;
        Vui_num_ticks_poc_diff_one_minus1 = _internal.vui_num_ticks_poc_diff_one_minus1;
        Min_spatial_segmentation_idc = _internal.min_spatial_segmentation_idc;
        Reserved3 = _internal.reserved3;
        Max_bytes_per_pic_denom = _internal.max_bytes_per_pic_denom;
        Max_bits_per_min_cu_denom = _internal.max_bits_per_min_cu_denom;
        Log2_max_mv_length_horizontal = _internal.log2_max_mv_length_horizontal;
        Log2_max_mv_length_vertical = _internal.log2_max_mv_length_vertical;
        PHrdParameters = new StdVideoH265HrdParameters(*_internal.pHrdParameters);
        NativeUtils.Free(_internal.pHrdParameters);
    }

    public StdVideoH265SpsVuiFlags Flags { get; set; }
    public StdVideoH265AspectRatioIdc Aspect_ratio_idc { get; set; }
    public ushort Sar_width { get; set; }
    public ushort Sar_height { get; set; }
    public byte Video_format { get; set; }
    public byte Colour_primaries { get; set; }
    public byte Transfer_characteristics { get; set; }
    public byte Matrix_coeffs { get; set; }
    public byte Chroma_sample_loc_type_top_field { get; set; }
    public byte Chroma_sample_loc_type_bottom_field { get; set; }
    public byte Reserved1 { get; set; }
    public byte Reserved2 { get; set; }
    public ushort Def_disp_win_left_offset { get; set; }
    public ushort Def_disp_win_right_offset { get; set; }
    public ushort Def_disp_win_top_offset { get; set; }
    public ushort Def_disp_win_bottom_offset { get; set; }
    public uint Vui_num_units_in_tick { get; set; }
    public uint Vui_time_scale { get; set; }
    public uint Vui_num_ticks_poc_diff_one_minus1 { get; set; }
    public ushort Min_spatial_segmentation_idc { get; set; }
    public ushort Reserved3 { get; set; }
    public byte Max_bytes_per_pic_denom { get; set; }
    public byte Max_bits_per_min_cu_denom { get; set; }
    public byte Log2_max_mv_length_horizontal { get; set; }
    public byte Log2_max_mv_length_vertical { get; set; }
    public StdVideoH265HrdParameters PHrdParameters { get; set; }

    public AdamantiumVulkan.Interop.StdVideoH265SequenceParameterSetVui ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoH265SequenceParameterSetVui();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Aspect_ratio_idc != default)
        {
            _internal.aspect_ratio_idc = Aspect_ratio_idc;
        }
        if (Sar_width != default)
        {
            _internal.sar_width = Sar_width;
        }
        if (Sar_height != default)
        {
            _internal.sar_height = Sar_height;
        }
        if (Video_format != default)
        {
            _internal.video_format = Video_format;
        }
        if (Colour_primaries != default)
        {
            _internal.colour_primaries = Colour_primaries;
        }
        if (Transfer_characteristics != default)
        {
            _internal.transfer_characteristics = Transfer_characteristics;
        }
        if (Matrix_coeffs != default)
        {
            _internal.matrix_coeffs = Matrix_coeffs;
        }
        if (Chroma_sample_loc_type_top_field != default)
        {
            _internal.chroma_sample_loc_type_top_field = Chroma_sample_loc_type_top_field;
        }
        if (Chroma_sample_loc_type_bottom_field != default)
        {
            _internal.chroma_sample_loc_type_bottom_field = Chroma_sample_loc_type_bottom_field;
        }
        if (Reserved1 != default)
        {
            _internal.reserved1 = Reserved1;
        }
        if (Reserved2 != default)
        {
            _internal.reserved2 = Reserved2;
        }
        if (Def_disp_win_left_offset != default)
        {
            _internal.def_disp_win_left_offset = Def_disp_win_left_offset;
        }
        if (Def_disp_win_right_offset != default)
        {
            _internal.def_disp_win_right_offset = Def_disp_win_right_offset;
        }
        if (Def_disp_win_top_offset != default)
        {
            _internal.def_disp_win_top_offset = Def_disp_win_top_offset;
        }
        if (Def_disp_win_bottom_offset != default)
        {
            _internal.def_disp_win_bottom_offset = Def_disp_win_bottom_offset;
        }
        if (Vui_num_units_in_tick != default)
        {
            _internal.vui_num_units_in_tick = Vui_num_units_in_tick;
        }
        if (Vui_time_scale != default)
        {
            _internal.vui_time_scale = Vui_time_scale;
        }
        if (Vui_num_ticks_poc_diff_one_minus1 != default)
        {
            _internal.vui_num_ticks_poc_diff_one_minus1 = Vui_num_ticks_poc_diff_one_minus1;
        }
        if (Min_spatial_segmentation_idc != default)
        {
            _internal.min_spatial_segmentation_idc = Min_spatial_segmentation_idc;
        }
        if (Reserved3 != default)
        {
            _internal.reserved3 = Reserved3;
        }
        if (Max_bytes_per_pic_denom != default)
        {
            _internal.max_bytes_per_pic_denom = Max_bytes_per_pic_denom;
        }
        if (Max_bits_per_min_cu_denom != default)
        {
            _internal.max_bits_per_min_cu_denom = Max_bits_per_min_cu_denom;
        }
        if (Log2_max_mv_length_horizontal != default)
        {
            _internal.log2_max_mv_length_horizontal = Log2_max_mv_length_horizontal;
        }
        if (Log2_max_mv_length_vertical != default)
        {
            _internal.log2_max_mv_length_vertical = Log2_max_mv_length_vertical;
        }
        _pHrdParameters.Dispose();
        if (PHrdParameters != default)
        {
            var struct0 = PHrdParameters.ToNative();
            _pHrdParameters = new NativeStruct<AdamantiumVulkan.Interop.StdVideoH265HrdParameters>(struct0);
            _internal.pHrdParameters = _pHrdParameters.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pHrdParameters.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoH265SequenceParameterSetVui(AdamantiumVulkan.Interop.StdVideoH265SequenceParameterSetVui s)
    {
        return new StdVideoH265SequenceParameterSetVui(s);
    }

}



