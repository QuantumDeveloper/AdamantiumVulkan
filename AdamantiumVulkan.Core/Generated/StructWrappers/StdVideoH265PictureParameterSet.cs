// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoH265PictureParameterSet : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoH265ScalingLists> _pScalingLists;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoH265PredictorPaletteEntries> _pPredictorPaletteEntries;

    public StdVideoH265PictureParameterSet()
    {
    }

    public StdVideoH265PictureParameterSet(AdamantiumVulkan.Interop.StdVideoH265PictureParameterSet _internal)
    {
        Flags = new StdVideoH265PpsFlags(_internal.flags);
        Ps_pic_parameter_set_id = _internal.pps_pic_parameter_set_id;
        Ps_seq_parameter_set_id = _internal.pps_seq_parameter_set_id;
        Sps_video_parameter_set_id = _internal.sps_video_parameter_set_id;
        Num_extra_slice_header_bits = _internal.num_extra_slice_header_bits;
        Num_ref_idx_l0_default_active_minus1 = _internal.num_ref_idx_l0_default_active_minus1;
        Num_ref_idx_l1_default_active_minus1 = _internal.num_ref_idx_l1_default_active_minus1;
        Init_qp_minus26 = _internal.init_qp_minus26;
        Diff_cu_qp_delta_depth = _internal.diff_cu_qp_delta_depth;
        Ps_cb_qp_offset = _internal.pps_cb_qp_offset;
        Ps_cr_qp_offset = _internal.pps_cr_qp_offset;
        Ps_beta_offset_div2 = _internal.pps_beta_offset_div2;
        Ps_tc_offset_div2 = _internal.pps_tc_offset_div2;
        Log2_parallel_merge_level_minus2 = _internal.log2_parallel_merge_level_minus2;
        Log2_max_transform_skip_block_size_minus2 = _internal.log2_max_transform_skip_block_size_minus2;
        Diff_cu_chroma_qp_offset_depth = _internal.diff_cu_chroma_qp_offset_depth;
        Chroma_qp_offset_list_len_minus1 = _internal.chroma_qp_offset_list_len_minus1;
        Cb_qp_offset_list = new string((sbyte*)_internal.cb_qp_offset_list);
        Cr_qp_offset_list = new string((sbyte*)_internal.cr_qp_offset_list);
        Log2_sao_offset_scale_luma = _internal.log2_sao_offset_scale_luma;
        Log2_sao_offset_scale_chroma = _internal.log2_sao_offset_scale_chroma;
        Ps_act_y_qp_offset_plus5 = _internal.pps_act_y_qp_offset_plus5;
        Ps_act_cb_qp_offset_plus5 = _internal.pps_act_cb_qp_offset_plus5;
        Ps_act_cr_qp_offset_plus3 = _internal.pps_act_cr_qp_offset_plus3;
        Ps_num_palette_predictor_initializers = _internal.pps_num_palette_predictor_initializers;
        Luma_bit_depth_entry_minus8 = _internal.luma_bit_depth_entry_minus8;
        Chroma_bit_depth_entry_minus8 = _internal.chroma_bit_depth_entry_minus8;
        Num_tile_columns_minus1 = _internal.num_tile_columns_minus1;
        Num_tile_rows_minus1 = _internal.num_tile_rows_minus1;
        Reserved1 = _internal.reserved1;
        Reserved2 = _internal.reserved2;
        Column_width_minus1 = NativeUtils.PointerToManagedArray(_internal.column_width_minus1, 19);
        Row_height_minus1 = NativeUtils.PointerToManagedArray(_internal.row_height_minus1, 21);
        Reserved3 = _internal.reserved3;
        PScalingLists = new StdVideoH265ScalingLists(*_internal.pScalingLists);
        NativeUtils.Free(_internal.pScalingLists);
        PredictorPaletteEntries = new StdVideoH265PredictorPaletteEntries(*_internal.pPredictorPaletteEntries);
        NativeUtils.Free(_internal.pPredictorPaletteEntries);
    }

    public StdVideoH265PpsFlags Flags { get; set; }
    public byte Ps_pic_parameter_set_id { get; set; }
    public byte Ps_seq_parameter_set_id { get; set; }
    public byte Sps_video_parameter_set_id { get; set; }
    public byte Num_extra_slice_header_bits { get; set; }
    public byte Num_ref_idx_l0_default_active_minus1 { get; set; }
    public byte Num_ref_idx_l1_default_active_minus1 { get; set; }
    public sbyte Init_qp_minus26 { get; set; }
    public byte Diff_cu_qp_delta_depth { get; set; }
    public sbyte Ps_cb_qp_offset { get; set; }
    public sbyte Ps_cr_qp_offset { get; set; }
    public sbyte Ps_beta_offset_div2 { get; set; }
    public sbyte Ps_tc_offset_div2 { get; set; }
    public byte Log2_parallel_merge_level_minus2 { get; set; }
    public byte Log2_max_transform_skip_block_size_minus2 { get; set; }
    public byte Diff_cu_chroma_qp_offset_depth { get; set; }
    public byte Chroma_qp_offset_list_len_minus1 { get; set; }
    public string Cb_qp_offset_list { get; set; }
    public string Cr_qp_offset_list { get; set; }
    public byte Log2_sao_offset_scale_luma { get; set; }
    public byte Log2_sao_offset_scale_chroma { get; set; }
    public sbyte Ps_act_y_qp_offset_plus5 { get; set; }
    public sbyte Ps_act_cb_qp_offset_plus5 { get; set; }
    public sbyte Ps_act_cr_qp_offset_plus3 { get; set; }
    public byte Ps_num_palette_predictor_initializers { get; set; }
    public byte Luma_bit_depth_entry_minus8 { get; set; }
    public byte Chroma_bit_depth_entry_minus8 { get; set; }
    public byte Num_tile_columns_minus1 { get; set; }
    public byte Num_tile_rows_minus1 { get; set; }
    public byte Reserved1 { get; set; }
    public byte Reserved2 { get; set; }
    public ushort[] Column_width_minus1 { get; set; }
    public ushort[] Row_height_minus1 { get; set; }
    public uint Reserved3 { get; set; }
    public StdVideoH265ScalingLists PScalingLists { get; set; }
    public StdVideoH265PredictorPaletteEntries PredictorPaletteEntries { get; set; }

    public AdamantiumVulkan.Interop.StdVideoH265PictureParameterSet ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoH265PictureParameterSet();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.pps_pic_parameter_set_id = Ps_pic_parameter_set_id;
        _internal.pps_seq_parameter_set_id = Ps_seq_parameter_set_id;
        _internal.sps_video_parameter_set_id = Sps_video_parameter_set_id;
        _internal.num_extra_slice_header_bits = Num_extra_slice_header_bits;
        _internal.num_ref_idx_l0_default_active_minus1 = Num_ref_idx_l0_default_active_minus1;
        _internal.num_ref_idx_l1_default_active_minus1 = Num_ref_idx_l1_default_active_minus1;
        _internal.init_qp_minus26 = Init_qp_minus26;
        _internal.diff_cu_qp_delta_depth = Diff_cu_qp_delta_depth;
        _internal.pps_cb_qp_offset = Ps_cb_qp_offset;
        _internal.pps_cr_qp_offset = Ps_cr_qp_offset;
        _internal.pps_beta_offset_div2 = Ps_beta_offset_div2;
        _internal.pps_tc_offset_div2 = Ps_tc_offset_div2;
        _internal.log2_parallel_merge_level_minus2 = Log2_parallel_merge_level_minus2;
        _internal.log2_max_transform_skip_block_size_minus2 = Log2_max_transform_skip_block_size_minus2;
        _internal.diff_cu_chroma_qp_offset_depth = Diff_cu_chroma_qp_offset_depth;
        _internal.chroma_qp_offset_list_len_minus1 = Chroma_qp_offset_list_len_minus1;
        if(Cb_qp_offset_list != null)
        {
            if (Cb_qp_offset_list.Length > 6)
                throw new System.ArgumentOutOfRangeException(nameof(Cb_qp_offset_list), "Array is out of bounds. Size should not be more than 6");

            NativeUtils.StringToFixedArray(_internal.cb_qp_offset_list, 6, Cb_qp_offset_list, false);
        }
        if(Cr_qp_offset_list != null)
        {
            if (Cr_qp_offset_list.Length > 6)
                throw new System.ArgumentOutOfRangeException(nameof(Cr_qp_offset_list), "Array is out of bounds. Size should not be more than 6");

            NativeUtils.StringToFixedArray(_internal.cr_qp_offset_list, 6, Cr_qp_offset_list, false);
        }
        _internal.log2_sao_offset_scale_luma = Log2_sao_offset_scale_luma;
        _internal.log2_sao_offset_scale_chroma = Log2_sao_offset_scale_chroma;
        _internal.pps_act_y_qp_offset_plus5 = Ps_act_y_qp_offset_plus5;
        _internal.pps_act_cb_qp_offset_plus5 = Ps_act_cb_qp_offset_plus5;
        _internal.pps_act_cr_qp_offset_plus3 = Ps_act_cr_qp_offset_plus3;
        _internal.pps_num_palette_predictor_initializers = Ps_num_palette_predictor_initializers;
        _internal.luma_bit_depth_entry_minus8 = Luma_bit_depth_entry_minus8;
        _internal.chroma_bit_depth_entry_minus8 = Chroma_bit_depth_entry_minus8;
        _internal.num_tile_columns_minus1 = Num_tile_columns_minus1;
        _internal.num_tile_rows_minus1 = Num_tile_rows_minus1;
        _internal.reserved1 = Reserved1;
        _internal.reserved2 = Reserved2;
        if(Column_width_minus1 != null)
        {
            if (Column_width_minus1.Length > 19)
                throw new System.ArgumentOutOfRangeException(nameof(Column_width_minus1), "Array is out of bounds. Size should not be more than 19");

            NativeUtils.PrimitiveToFixedArray(_internal.column_width_minus1, 19, Column_width_minus1);
        }
        if(Row_height_minus1 != null)
        {
            if (Row_height_minus1.Length > 21)
                throw new System.ArgumentOutOfRangeException(nameof(Row_height_minus1), "Array is out of bounds. Size should not be more than 21");

            NativeUtils.PrimitiveToFixedArray(_internal.row_height_minus1, 21, Row_height_minus1);
        }
        _internal.reserved3 = Reserved3;
        _pScalingLists.Dispose();
        if (PScalingLists != null)
        {
            var struct0 = PScalingLists.ToNative();
            _pScalingLists = new NativeStruct<AdamantiumVulkan.Interop.StdVideoH265ScalingLists>(struct0);
            _internal.pScalingLists = _pScalingLists.Handle;
        }
        _pPredictorPaletteEntries.Dispose();
        if (PredictorPaletteEntries != null)
        {
            var struct1 = PredictorPaletteEntries.ToNative();
            _pPredictorPaletteEntries = new NativeStruct<AdamantiumVulkan.Interop.StdVideoH265PredictorPaletteEntries>(struct1);
            _internal.pPredictorPaletteEntries = _pPredictorPaletteEntries.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pScalingLists.Dispose();
        _pPredictorPaletteEntries.Dispose();
    }


    public static implicit operator StdVideoH265PictureParameterSet(AdamantiumVulkan.Interop.StdVideoH265PictureParameterSet s)
    {
        return new StdVideoH265PictureParameterSet(s);
    }

}



