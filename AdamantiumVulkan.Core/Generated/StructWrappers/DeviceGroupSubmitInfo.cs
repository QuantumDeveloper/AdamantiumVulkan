// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DeviceGroupSubmitInfo : QBDisposableObject
{
    private NativeStruct<uint> _pWaitSemaphoreDeviceIndices;

    private NativeStruct<uint> _pCommandBufferDeviceMasks;

    private NativeStruct<uint> _pSignalSemaphoreDeviceIndices;

    public DeviceGroupSubmitInfo()
    {
    }

    public DeviceGroupSubmitInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo _internal)
    {
        PNext = _internal.pNext;
        WaitSemaphoreCount = _internal.waitSemaphoreCount;
        if (_internal.pWaitSemaphoreDeviceIndices != null)
        {
            PWaitSemaphoreDeviceIndices = *_internal.pWaitSemaphoreDeviceIndices;
            NativeUtils.Free(_internal.pWaitSemaphoreDeviceIndices);
        }
        CommandBufferCount = _internal.commandBufferCount;
        if (_internal.pCommandBufferDeviceMasks != null)
        {
            PCommandBufferDeviceMasks = *_internal.pCommandBufferDeviceMasks;
            NativeUtils.Free(_internal.pCommandBufferDeviceMasks);
        }
        SignalSemaphoreCount = _internal.signalSemaphoreCount;
        if (_internal.pSignalSemaphoreDeviceIndices != null)
        {
            PSignalSemaphoreDeviceIndices = *_internal.pSignalSemaphoreDeviceIndices;
            NativeUtils.Free(_internal.pSignalSemaphoreDeviceIndices);
        }
    }

    public StructureType SType => StructureType.DeviceGroupSubmitInfo;
    public void* PNext { get; set; }
    public uint WaitSemaphoreCount { get; set; }
    public uint? PWaitSemaphoreDeviceIndices { get; set; }
    public uint CommandBufferCount { get; set; }
    public uint? PCommandBufferDeviceMasks { get; set; }
    public uint SignalSemaphoreCount { get; set; }
    public uint? PSignalSemaphoreDeviceIndices { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.waitSemaphoreCount = WaitSemaphoreCount;
        _pWaitSemaphoreDeviceIndices.Dispose();
        if (PWaitSemaphoreDeviceIndices.HasValue)
        {
            _pWaitSemaphoreDeviceIndices = new NativeStruct<uint>(PWaitSemaphoreDeviceIndices.Value);
            _internal.pWaitSemaphoreDeviceIndices = _pWaitSemaphoreDeviceIndices.Handle;
        }
        _internal.commandBufferCount = CommandBufferCount;
        _pCommandBufferDeviceMasks.Dispose();
        if (PCommandBufferDeviceMasks.HasValue)
        {
            _pCommandBufferDeviceMasks = new NativeStruct<uint>(PCommandBufferDeviceMasks.Value);
            _internal.pCommandBufferDeviceMasks = _pCommandBufferDeviceMasks.Handle;
        }
        _internal.signalSemaphoreCount = SignalSemaphoreCount;
        _pSignalSemaphoreDeviceIndices.Dispose();
        if (PSignalSemaphoreDeviceIndices.HasValue)
        {
            _pSignalSemaphoreDeviceIndices = new NativeStruct<uint>(PSignalSemaphoreDeviceIndices.Value);
            _internal.pSignalSemaphoreDeviceIndices = _pSignalSemaphoreDeviceIndices.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pWaitSemaphoreDeviceIndices.Dispose();
        _pCommandBufferDeviceMasks.Dispose();
        _pSignalSemaphoreDeviceIndices.Dispose();
    }


    public static implicit operator DeviceGroupSubmitInfo(AdamantiumVulkan.Core.Interop.VkDeviceGroupSubmitInfo d)
    {
        return new DeviceGroupSubmitInfo(d);
    }

}



