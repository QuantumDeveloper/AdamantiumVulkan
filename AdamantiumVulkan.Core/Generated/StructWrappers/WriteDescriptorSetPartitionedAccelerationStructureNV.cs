// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class WriteDescriptorSetPartitionedAccelerationStructureNV : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceAddress> _pAccelerationStructures;

    public WriteDescriptorSetPartitionedAccelerationStructureNV()
    {
    }

    public WriteDescriptorSetPartitionedAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetPartitionedAccelerationStructureNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        AccelerationStructureCount = _internal.accelerationStructureCount;
        if (_internal.pAccelerationStructures != null)
        {
            PAccelerationStructures = *_internal.pAccelerationStructures;
            NativeUtils.Free(_internal.pAccelerationStructures);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint AccelerationStructureCount { get; set; }
    public VkDeviceAddress? PAccelerationStructures { get; set; }

    public AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetPartitionedAccelerationStructureNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetPartitionedAccelerationStructureNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (AccelerationStructureCount != default)
        {
            _internal.accelerationStructureCount = AccelerationStructureCount;
        }
        _pAccelerationStructures.Dispose();
        if (PAccelerationStructures.HasValue)
        {
            _pAccelerationStructures = new NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceAddress>(PAccelerationStructures.Value);
            _internal.pAccelerationStructures = _pAccelerationStructures.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pAccelerationStructures.Dispose();
    }


    public static implicit operator WriteDescriptorSetPartitionedAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkWriteDescriptorSetPartitionedAccelerationStructureNV w)
    {
        return new WriteDescriptorSetPartitionedAccelerationStructureNV(w);
    }

}



