// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class SetDescriptorBufferOffsetsInfoEXT : QBDisposableObject
{
    private NativeStruct<uint> _pBufferIndices;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceSize> _pOffsets;

    public SetDescriptorBufferOffsetsInfoEXT()
    {
    }

    public SetDescriptorBufferOffsetsInfoEXT(AdamantiumVulkan.Core.Interop.VkSetDescriptorBufferOffsetsInfoEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        StageFlags = _internal.stageFlags;
        Layout = new PipelineLayout(_internal.layout);
        FirstSet = _internal.firstSet;
        SetCount = _internal.setCount;
        if (_internal.pBufferIndices != null)
        {
            PBufferIndices = *_internal.pBufferIndices;
            NativeUtils.Free(_internal.pBufferIndices);
        }
        if (_internal.pOffsets != null)
        {
            POffsets = *_internal.pOffsets;
            NativeUtils.Free(_internal.pOffsets);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkShaderStageFlags StageFlags { get; set; }
    public PipelineLayout Layout { get; set; }
    public uint FirstSet { get; set; }
    public uint SetCount { get; set; }
    public uint? PBufferIndices { get; set; }
    public VkDeviceSize? POffsets { get; set; }

    public AdamantiumVulkan.Core.Interop.VkSetDescriptorBufferOffsetsInfoEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkSetDescriptorBufferOffsetsInfoEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (StageFlags != (uint)default)
        {
            _internal.stageFlags = StageFlags;
        }
        if (Layout != default)
        {
            _internal.layout = Layout;
        }
        if (FirstSet != default)
        {
            _internal.firstSet = FirstSet;
        }
        if (SetCount != default)
        {
            _internal.setCount = SetCount;
        }
        _pBufferIndices.Dispose();
        if (PBufferIndices.HasValue)
        {
            _pBufferIndices = new NativeStruct<uint>(PBufferIndices.Value);
            _internal.pBufferIndices = _pBufferIndices.Handle;
        }
        _pOffsets.Dispose();
        if (POffsets.HasValue)
        {
            _pOffsets = new NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceSize>(POffsets.Value);
            _internal.pOffsets = _pOffsets.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pBufferIndices.Dispose();
        _pOffsets.Dispose();
    }


    public static implicit operator SetDescriptorBufferOffsetsInfoEXT(AdamantiumVulkan.Core.Interop.VkSetDescriptorBufferOffsetsInfoEXT s)
    {
        return new SetDescriptorBufferOffsetsInfoEXT(s);
    }

}



