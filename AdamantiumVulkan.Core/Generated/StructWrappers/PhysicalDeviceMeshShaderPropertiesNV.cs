// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceMeshShaderPropertiesNV : QBDisposableObject
{
    public PhysicalDeviceMeshShaderPropertiesNV()
    {
    }

    public PhysicalDeviceMeshShaderPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV _internal)
    {
        PNext = _internal.pNext;
        MaxDrawMeshTasksCount = _internal.maxDrawMeshTasksCount;
        MaxTaskWorkGroupInvocations = _internal.maxTaskWorkGroupInvocations;
        MaxTaskWorkGroupSize = NativeUtils.PointerToManagedArray(_internal.maxTaskWorkGroupSize, 3);
        MaxTaskTotalMemorySize = _internal.maxTaskTotalMemorySize;
        MaxTaskOutputCount = _internal.maxTaskOutputCount;
        MaxMeshWorkGroupInvocations = _internal.maxMeshWorkGroupInvocations;
        MaxMeshWorkGroupSize = NativeUtils.PointerToManagedArray(_internal.maxMeshWorkGroupSize, 3);
        MaxMeshTotalMemorySize = _internal.maxMeshTotalMemorySize;
        MaxMeshOutputVertices = _internal.maxMeshOutputVertices;
        MaxMeshOutputPrimitives = _internal.maxMeshOutputPrimitives;
        MaxMeshMultiviewViewCount = _internal.maxMeshMultiviewViewCount;
        MeshOutputPerVertexGranularity = _internal.meshOutputPerVertexGranularity;
        MeshOutputPerPrimitiveGranularity = _internal.meshOutputPerPrimitiveGranularity;
    }

    public StructureType SType => StructureType.PhysicalDeviceMeshShaderPropertiesNv;
    public void* PNext { get; set; }
    public uint MaxDrawMeshTasksCount { get; set; }
    public uint MaxTaskWorkGroupInvocations { get; set; }
    public uint[] MaxTaskWorkGroupSize { get; set; }
    public uint MaxTaskTotalMemorySize { get; set; }
    public uint MaxTaskOutputCount { get; set; }
    public uint MaxMeshWorkGroupInvocations { get; set; }
    public uint[] MaxMeshWorkGroupSize { get; set; }
    public uint MaxMeshTotalMemorySize { get; set; }
    public uint MaxMeshOutputVertices { get; set; }
    public uint MaxMeshOutputPrimitives { get; set; }
    public uint MaxMeshMultiviewViewCount { get; set; }
    public uint MeshOutputPerVertexGranularity { get; set; }
    public uint MeshOutputPerPrimitiveGranularity { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (MaxDrawMeshTasksCount != default)
        {
            _internal.maxDrawMeshTasksCount = MaxDrawMeshTasksCount;
        }
        if (MaxTaskWorkGroupInvocations != default)
        {
            _internal.maxTaskWorkGroupInvocations = MaxTaskWorkGroupInvocations;
        }
        if (MaxTaskWorkGroupSize != default)
        {
            if (MaxTaskWorkGroupSize.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxTaskWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxTaskWorkGroupSize, 3, MaxTaskWorkGroupSize);
        }
        if (MaxTaskTotalMemorySize != default)
        {
            _internal.maxTaskTotalMemorySize = MaxTaskTotalMemorySize;
        }
        if (MaxTaskOutputCount != default)
        {
            _internal.maxTaskOutputCount = MaxTaskOutputCount;
        }
        if (MaxMeshWorkGroupInvocations != default)
        {
            _internal.maxMeshWorkGroupInvocations = MaxMeshWorkGroupInvocations;
        }
        if (MaxMeshWorkGroupSize != default)
        {
            if (MaxMeshWorkGroupSize.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxMeshWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxMeshWorkGroupSize, 3, MaxMeshWorkGroupSize);
        }
        if (MaxMeshTotalMemorySize != default)
        {
            _internal.maxMeshTotalMemorySize = MaxMeshTotalMemorySize;
        }
        if (MaxMeshOutputVertices != default)
        {
            _internal.maxMeshOutputVertices = MaxMeshOutputVertices;
        }
        if (MaxMeshOutputPrimitives != default)
        {
            _internal.maxMeshOutputPrimitives = MaxMeshOutputPrimitives;
        }
        if (MaxMeshMultiviewViewCount != default)
        {
            _internal.maxMeshMultiviewViewCount = MaxMeshMultiviewViewCount;
        }
        if (MeshOutputPerVertexGranularity != default)
        {
            _internal.meshOutputPerVertexGranularity = MeshOutputPerVertexGranularity;
        }
        if (MeshOutputPerPrimitiveGranularity != default)
        {
            _internal.meshOutputPerPrimitiveGranularity = MeshOutputPerPrimitiveGranularity;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceMeshShaderPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesNV p)
    {
        return new PhysicalDeviceMeshShaderPropertiesNV(p);
    }

}



