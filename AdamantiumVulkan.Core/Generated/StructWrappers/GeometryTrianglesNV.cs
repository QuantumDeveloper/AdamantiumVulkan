// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class GeometryTrianglesNV : QBDisposableObject
{
    public GeometryTrianglesNV()
    {
    }

    public GeometryTrianglesNV(AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV _internal)
    {
        PNext = _internal.pNext;
        VertexData = new Buffer(_internal.vertexData);
        VertexOffset = _internal.vertexOffset;
        VertexCount = _internal.vertexCount;
        VertexStride = _internal.vertexStride;
        VertexFormat = _internal.vertexFormat;
        IndexData = new Buffer(_internal.indexData);
        IndexOffset = _internal.indexOffset;
        IndexCount = _internal.indexCount;
        IndexType = _internal.indexType;
        TransformData = new Buffer(_internal.transformData);
        TransformOffset = _internal.transformOffset;
    }

    public StructureType SType => StructureType.GeometryTrianglesNv;
    public void* PNext { get; set; }
    public Buffer VertexData { get; set; }
    public VkDeviceSize VertexOffset { get; set; }
    public uint VertexCount { get; set; }
    public VkDeviceSize VertexStride { get; set; }
    public Format VertexFormat { get; set; }
    public Buffer IndexData { get; set; }
    public VkDeviceSize IndexOffset { get; set; }
    public uint IndexCount { get; set; }
    public IndexType IndexType { get; set; }
    public Buffer TransformData { get; set; }
    public VkDeviceSize TransformOffset { get; set; }

    public AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (VertexData != default)
        {
            _internal.vertexData = VertexData;
        }
        if (VertexOffset != (ulong)default)
        {
            _internal.vertexOffset = VertexOffset;
        }
        if (VertexCount != default)
        {
            _internal.vertexCount = VertexCount;
        }
        if (VertexStride != (ulong)default)
        {
            _internal.vertexStride = VertexStride;
        }
        if (VertexFormat != default)
        {
            _internal.vertexFormat = VertexFormat;
        }
        if (IndexData != default)
        {
            _internal.indexData = IndexData;
        }
        if (IndexOffset != (ulong)default)
        {
            _internal.indexOffset = IndexOffset;
        }
        if (IndexCount != default)
        {
            _internal.indexCount = IndexCount;
        }
        if (IndexType != default)
        {
            _internal.indexType = IndexType;
        }
        if (TransformData != default)
        {
            _internal.transformData = TransformData;
        }
        if (TransformOffset != (ulong)default)
        {
            _internal.transformOffset = TransformOffset;
        }
        return _internal;
    }

    public static implicit operator GeometryTrianglesNV(AdamantiumVulkan.Core.Interop.VkGeometryTrianglesNV g)
    {
        return new GeometryTrianglesNV(g);
    }

}



