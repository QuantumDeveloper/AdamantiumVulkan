// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class SubpassDescription : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference> pInputAttachments;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference> pColorAttachments;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference> pResolveAttachments;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference> pDepthStencilAttachment;

    private NativeStructArray<uint> pPreserveAttachments;

    public SubpassDescription()
    {
    }

    public SubpassDescription(AdamantiumVulkan.Core.Interop.VkSubpassDescription _internal)
    {
        Flags = _internal.flags;
        PipelineBindPoint = _internal.pipelineBindPoint;
        InputAttachmentCount = _internal.inputAttachmentCount;
        PInputAttachments = new AttachmentReference[_internal.inputAttachmentCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pInputAttachments, _internal.inputAttachmentCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PInputAttachments[i] = new AttachmentReference(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pInputAttachments);
        ColorAttachmentCount = _internal.colorAttachmentCount;
        PColorAttachments = new AttachmentReference[_internal.colorAttachmentCount];
        var nativeTmpArray1 = NativeUtils.PointerToManagedArray(_internal.pColorAttachments, _internal.colorAttachmentCount);
        for (int i = 0; i < nativeTmpArray1.Length; ++i)
        {
            PColorAttachments[i] = new AttachmentReference(nativeTmpArray1[i]);
        }
        NativeUtils.Free(_internal.pColorAttachments);
        PResolveAttachments = new AttachmentReference[_internal.colorAttachmentCount];
        var nativeTmpArray2 = NativeUtils.PointerToManagedArray(_internal.pResolveAttachments, _internal.colorAttachmentCount);
        for (int i = 0; i < nativeTmpArray2.Length; ++i)
        {
            PResolveAttachments[i] = new AttachmentReference(nativeTmpArray2[i]);
        }
        NativeUtils.Free(_internal.pResolveAttachments);
        PDepthStencilAttachment = new AttachmentReference(*_internal.pDepthStencilAttachment);
        NativeUtils.Free(_internal.pDepthStencilAttachment);
        PreserveAttachmentCount = _internal.preserveAttachmentCount;
        PreserveAttachments = new uint[_internal.preserveAttachmentCount];
        PreserveAttachments = NativeUtils.PointerToManagedArray(_internal.pPreserveAttachments, (long)_internal.preserveAttachmentCount);
        NativeUtils.Free(_internal.pPreserveAttachments);
    }

    public VkSubpassDescriptionFlags Flags { get; set; }
    public PipelineBindPoint PipelineBindPoint { get; set; }
    public uint InputAttachmentCount { get; set; }
    public AttachmentReference[] PInputAttachments { get; set; }
    public uint ColorAttachmentCount { get; set; }
    public AttachmentReference[] PColorAttachments { get; set; }
    public AttachmentReference[] PResolveAttachments { get; set; }
    public AttachmentReference PDepthStencilAttachment { get; set; }
    public uint PreserveAttachmentCount { get; set; }
    public uint[] PreserveAttachments { get; set; }

    public AdamantiumVulkan.Core.Interop.VkSubpassDescription ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDescription();
        _internal.flags = Flags;
        _internal.pipelineBindPoint = PipelineBindPoint;
        _internal.inputAttachmentCount = InputAttachmentCount;
        pInputAttachments.Dispose();
        if (PInputAttachments != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[PInputAttachments.Length];
            for (int i = 0; i < PInputAttachments.Length; ++i)
            {
                tmpArray0[i] = PInputAttachments[i].ToNative();
            }
            pInputAttachments = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference>(tmpArray0);
            _internal.pInputAttachments = pInputAttachments.Handle;
        }
        _internal.colorAttachmentCount = ColorAttachmentCount;
        pColorAttachments.Dispose();
        if (PColorAttachments != null)
        {
            var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[PColorAttachments.Length];
            for (int i = 0; i < PColorAttachments.Length; ++i)
            {
                tmpArray1[i] = PColorAttachments[i].ToNative();
            }
            pColorAttachments = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference>(tmpArray1);
            _internal.pColorAttachments = pColorAttachments.Handle;
        }
        pResolveAttachments.Dispose();
        if (PResolveAttachments != null)
        {
            var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkAttachmentReference[PResolveAttachments.Length];
            for (int i = 0; i < PResolveAttachments.Length; ++i)
            {
                tmpArray2[i] = PResolveAttachments[i].ToNative();
            }
            pResolveAttachments = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentReference>(tmpArray2);
            _internal.pResolveAttachments = pResolveAttachments.Handle;
        }
        pDepthStencilAttachment.Dispose();
        if (PDepthStencilAttachment != null)
        {
            var struct0 = PDepthStencilAttachment.ToNative();
            pDepthStencilAttachment = new NativeStruct<AdamantiumVulkan.Core.Interop.VkAttachmentReference>(struct0);
            _internal.pDepthStencilAttachment = pDepthStencilAttachment.Handle;
        }
        _internal.preserveAttachmentCount = PreserveAttachmentCount;
        pPreserveAttachments.Dispose();
        if (PreserveAttachments != null)
        {
            var tmpArray3 = new uint[PreserveAttachments.Length];
            for (int i = 0; i < PreserveAttachments.Length; ++i)
            {
                tmpArray3[i] = PreserveAttachments[i];
            }
            pPreserveAttachments = new NativeStructArray<uint>(tmpArray3);
            _internal.pPreserveAttachments = pPreserveAttachments.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pInputAttachments.Dispose();
        pColorAttachments.Dispose();
        pResolveAttachments.Dispose();
        pDepthStencilAttachment.Dispose();
        pPreserveAttachments.Dispose();
    }


    public static implicit operator SubpassDescription(AdamantiumVulkan.Core.Interop.VkSubpassDescription s)
    {
        return new SubpassDescription(s);
    }

}



