// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class ConvertCooperativeVectorMatrixInfoNV : QBDisposableObject
{
    private NativeStruct<ulong> _pDstSize;

    public ConvertCooperativeVectorMatrixInfoNV()
    {
    }

    public ConvertCooperativeVectorMatrixInfoNV(AdamantiumVulkan.Core.Interop.VkConvertCooperativeVectorMatrixInfoNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        SrcSize = _internal.srcSize;
        SrcData = new DeviceOrHostAddressConstKHR(_internal.srcData);
        if (_internal.pDstSize != null)
        {
            PDstSize = *_internal.pDstSize;
            NativeUtils.Free(_internal.pDstSize);
        }
        DstData = new DeviceOrHostAddressKHR(_internal.dstData);
        SrcComponentType = _internal.srcComponentType;
        DstComponentType = _internal.dstComponentType;
        NumRows = _internal.numRows;
        NumColumns = _internal.numColumns;
        SrcLayout = _internal.srcLayout;
        SrcStride = _internal.srcStride;
        DstLayout = _internal.dstLayout;
        DstStride = _internal.dstStride;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public ulong SrcSize { get; set; }
    public DeviceOrHostAddressConstKHR SrcData { get; set; }
    public ulong? PDstSize { get; set; }
    public DeviceOrHostAddressKHR DstData { get; set; }
    public ComponentTypeKHR SrcComponentType { get; set; }
    public ComponentTypeKHR DstComponentType { get; set; }
    public uint NumRows { get; set; }
    public uint NumColumns { get; set; }
    public CooperativeVectorMatrixLayoutNV SrcLayout { get; set; }
    public ulong SrcStride { get; set; }
    public CooperativeVectorMatrixLayoutNV DstLayout { get; set; }
    public ulong DstStride { get; set; }

    public AdamantiumVulkan.Core.Interop.VkConvertCooperativeVectorMatrixInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkConvertCooperativeVectorMatrixInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (SrcSize != default)
        {
            _internal.srcSize = SrcSize;
        }
        if (SrcData != default)
        {
            _internal.srcData = SrcData.ToNative();
        }
        _pDstSize.Dispose();
        if (PDstSize.HasValue)
        {
            _pDstSize = new NativeStruct<ulong>(PDstSize.Value);
            _internal.pDstSize = _pDstSize.Handle;
        }
        if (DstData != default)
        {
            _internal.dstData = DstData.ToNative();
        }
        if (SrcComponentType != default)
        {
            _internal.srcComponentType = SrcComponentType;
        }
        if (DstComponentType != default)
        {
            _internal.dstComponentType = DstComponentType;
        }
        if (NumRows != default)
        {
            _internal.numRows = NumRows;
        }
        if (NumColumns != default)
        {
            _internal.numColumns = NumColumns;
        }
        if (SrcLayout != default)
        {
            _internal.srcLayout = SrcLayout;
        }
        if (SrcStride != default)
        {
            _internal.srcStride = SrcStride;
        }
        if (DstLayout != default)
        {
            _internal.dstLayout = DstLayout;
        }
        if (DstStride != default)
        {
            _internal.dstStride = DstStride;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pDstSize.Dispose();
        SrcData?.Dispose();
        DstData?.Dispose();
    }


    public static implicit operator ConvertCooperativeVectorMatrixInfoNV(AdamantiumVulkan.Core.Interop.VkConvertCooperativeVectorMatrixInfoNV c)
    {
        return new ConvertCooperativeVectorMatrixInfoNV(c);
    }

}



