// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DeviceQueueCreateInfo : QBDisposableObject
{
    private NativeStruct<float> _pQueuePriorities;

    public DeviceQueueCreateInfo()
    {
    }

    public DeviceQueueCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        QueueFamilyIndex = _internal.queueFamilyIndex;
        QueueCount = _internal.queueCount;
        if (_internal.pQueuePriorities != null)
        {
            PQueuePriorities = *_internal.pQueuePriorities;
            NativeUtils.Free(_internal.pQueuePriorities);
        }
    }

    public StructureType SType => StructureType.DeviceQueueCreateInfo;
    public void* PNext { get; set; }
    public VkDeviceQueueCreateFlags Flags { get; set; }
    public uint QueueFamilyIndex { get; set; }
    public uint QueueCount { get; set; }
    public float? PQueuePriorities { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (QueueFamilyIndex != default)
        {
            _internal.queueFamilyIndex = QueueFamilyIndex;
        }
        if (QueueCount != default)
        {
            _internal.queueCount = QueueCount;
        }
        _pQueuePriorities.Dispose();
        if (PQueuePriorities.HasValue)
        {
            _pQueuePriorities = new NativeStruct<float>(PQueuePriorities.Value);
            _internal.pQueuePriorities = _pQueuePriorities.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pQueuePriorities.Dispose();
    }


    public static implicit operator DeviceQueueCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo d)
    {
        return new DeviceQueueCreateInfo(d);
    }

}



