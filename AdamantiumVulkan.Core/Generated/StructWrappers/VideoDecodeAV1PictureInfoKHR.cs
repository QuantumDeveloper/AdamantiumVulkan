// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;
using AdamantiumVulkan;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class VideoDecodeAV1PictureInfoKHR : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo> _pStdPictureInfo;

    private NativeStruct<uint> _pTileOffsets;

    private NativeStruct<uint> _pTileSizes;

    public VideoDecodeAV1PictureInfoKHR()
    {
    }

    public VideoDecodeAV1PictureInfoKHR(AdamantiumVulkan.Core.Interop.VkVideoDecodeAV1PictureInfoKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        PStdPictureInfo = new StdVideoDecodeAV1PictureInfo(*_internal.pStdPictureInfo);
        NativeUtils.Free(_internal.pStdPictureInfo);
        ReferenceNameSlotIndices = NativeUtils.PointerToManagedArray(_internal.referenceNameSlotIndices, 7);
        FrameHeaderOffset = _internal.frameHeaderOffset;
        TileCount = _internal.tileCount;
        if (_internal.pTileOffsets != null)
        {
            PTileOffsets = *_internal.pTileOffsets;
            NativeUtils.Free(_internal.pTileOffsets);
        }
        if (_internal.pTileSizes != null)
        {
            PTileSizes = *_internal.pTileSizes;
            NativeUtils.Free(_internal.pTileSizes);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public StdVideoDecodeAV1PictureInfo PStdPictureInfo { get; set; }
    public int[] ReferenceNameSlotIndices { get; set; }
    public uint FrameHeaderOffset { get; set; }
    public uint TileCount { get; set; }
    public uint? PTileOffsets { get; set; }
    public uint? PTileSizes { get; set; }

    public AdamantiumVulkan.Core.Interop.VkVideoDecodeAV1PictureInfoKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkVideoDecodeAV1PictureInfoKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        _pStdPictureInfo.Dispose();
        if (PStdPictureInfo != default)
        {
            var struct0 = PStdPictureInfo.ToNative();
            _pStdPictureInfo = new NativeStruct<AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo>(struct0);
            _internal.pStdPictureInfo = _pStdPictureInfo.Handle;
        }
        if (ReferenceNameSlotIndices != default)
        {
            if (ReferenceNameSlotIndices.Length > 7)
                throw new System.ArgumentOutOfRangeException(nameof(ReferenceNameSlotIndices), "Array is out of bounds. Size should not be more than 7");

            NativeUtils.PrimitiveToFixedArray(_internal.referenceNameSlotIndices, 7, ReferenceNameSlotIndices);
        }
        if (FrameHeaderOffset != default)
        {
            _internal.frameHeaderOffset = FrameHeaderOffset;
        }
        if (TileCount != default)
        {
            _internal.tileCount = TileCount;
        }
        _pTileOffsets.Dispose();
        if (PTileOffsets.HasValue)
        {
            _pTileOffsets = new NativeStruct<uint>(PTileOffsets.Value);
            _internal.pTileOffsets = _pTileOffsets.Handle;
        }
        _pTileSizes.Dispose();
        if (PTileSizes.HasValue)
        {
            _pTileSizes = new NativeStruct<uint>(PTileSizes.Value);
            _internal.pTileSizes = _pTileSizes.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pStdPictureInfo.Dispose();
        _pTileOffsets.Dispose();
        _pTileSizes.Dispose();
    }


    public static implicit operator VideoDecodeAV1PictureInfoKHR(AdamantiumVulkan.Core.Interop.VkVideoDecodeAV1PictureInfoKHR v)
    {
        return new VideoDecodeAV1PictureInfoKHR(v);
    }

}



