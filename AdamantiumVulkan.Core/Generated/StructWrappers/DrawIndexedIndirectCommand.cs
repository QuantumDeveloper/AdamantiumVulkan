// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DrawIndexedIndirectCommand : QBDisposableObject
{
    public DrawIndexedIndirectCommand()
    {
    }

    public DrawIndexedIndirectCommand(AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand _internal)
    {
        IndexCount = _internal.indexCount;
        InstanceCount = _internal.instanceCount;
        FirstIndex = _internal.firstIndex;
        VertexOffset = _internal.vertexOffset;
        FirstInstance = _internal.firstInstance;
    }

    public uint IndexCount { get; set; }
    public uint InstanceCount { get; set; }
    public uint FirstIndex { get; set; }
    public int VertexOffset { get; set; }
    public uint FirstInstance { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand();
        if (IndexCount != default)
        {
            _internal.indexCount = IndexCount;
        }
        if (InstanceCount != default)
        {
            _internal.instanceCount = InstanceCount;
        }
        if (FirstIndex != default)
        {
            _internal.firstIndex = FirstIndex;
        }
        if (VertexOffset != default)
        {
            _internal.vertexOffset = VertexOffset;
        }
        if (FirstInstance != default)
        {
            _internal.firstInstance = FirstInstance;
        }
        return _internal;
    }

    public static implicit operator DrawIndexedIndirectCommand(AdamantiumVulkan.Core.Interop.VkDrawIndexedIndirectCommand d)
    {
        return new DrawIndexedIndirectCommand(d);
    }

}



