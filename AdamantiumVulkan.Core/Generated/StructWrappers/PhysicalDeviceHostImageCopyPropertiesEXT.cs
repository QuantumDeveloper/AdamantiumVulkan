// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceHostImageCopyPropertiesEXT : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.ImageLayout> _pCopySrcLayouts;

    private NativeStruct<AdamantiumVulkan.Core.ImageLayout> _pCopyDstLayouts;

    public PhysicalDeviceHostImageCopyPropertiesEXT()
    {
    }

    public PhysicalDeviceHostImageCopyPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceHostImageCopyPropertiesEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        CopySrcLayoutCount = _internal.copySrcLayoutCount;
        PCopySrcLayouts = *_internal.pCopySrcLayouts;
        CopyDstLayoutCount = _internal.copyDstLayoutCount;
        PCopyDstLayouts = *_internal.pCopyDstLayouts;
        OptimalTilingLayoutUUID = NativeUtils.PointerToManagedArray(_internal.optimalTilingLayoutUUID, 16);
        IdenticalMemoryTypeRequirements = _internal.identicalMemoryTypeRequirements;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint CopySrcLayoutCount { get; set; }
    public ImageLayout? PCopySrcLayouts { get; set; }
    public uint CopyDstLayoutCount { get; set; }
    public ImageLayout? PCopyDstLayouts { get; set; }
    public byte[] OptimalTilingLayoutUUID { get; set; }
    public VkBool32 IdenticalMemoryTypeRequirements { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceHostImageCopyPropertiesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceHostImageCopyPropertiesEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.copySrcLayoutCount = CopySrcLayoutCount;
        _pCopySrcLayouts.Dispose();
        if (PCopySrcLayouts.HasValue)
        {
            _pCopySrcLayouts = new NativeStruct<AdamantiumVulkan.Core.ImageLayout>(PCopySrcLayouts.Value);
            _internal.pCopySrcLayouts = _pCopySrcLayouts.Handle;
        }
        _internal.copyDstLayoutCount = CopyDstLayoutCount;
        _pCopyDstLayouts.Dispose();
        if (PCopyDstLayouts.HasValue)
        {
            _pCopyDstLayouts = new NativeStruct<AdamantiumVulkan.Core.ImageLayout>(PCopyDstLayouts.Value);
            _internal.pCopyDstLayouts = _pCopyDstLayouts.Handle;
        }
        if(OptimalTilingLayoutUUID != null)
        {
            if (OptimalTilingLayoutUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(OptimalTilingLayoutUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.optimalTilingLayoutUUID, 16, OptimalTilingLayoutUUID);
        }
        _internal.identicalMemoryTypeRequirements = IdenticalMemoryTypeRequirements;
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pCopySrcLayouts.Dispose();
        _pCopyDstLayouts.Dispose();
    }


    public static implicit operator PhysicalDeviceHostImageCopyPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceHostImageCopyPropertiesEXT p)
    {
        return new PhysicalDeviceHostImageCopyPropertiesEXT(p);
    }

}



