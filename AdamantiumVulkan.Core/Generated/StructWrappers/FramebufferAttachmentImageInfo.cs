// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class FramebufferAttachmentImageInfo : QBDisposableObject
{
    private NativeStructArray<Format> pViewFormats;

    public FramebufferAttachmentImageInfo()
    {
    }

    public FramebufferAttachmentImageInfo(AdamantiumVulkan.Core.Interop.VkFramebufferAttachmentImageInfo _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        Usage = _internal.usage;
        Width = _internal.width;
        Height = _internal.height;
        LayerCount = _internal.layerCount;
        ViewFormatCount = _internal.viewFormatCount;
        PViewFormats = NativeUtils.PointerToManagedArray(_internal.pViewFormats, _internal.viewFormatCount);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkImageCreateFlags Flags { get; set; }
    public VkImageUsageFlags Usage { get; set; }
    public uint Width { get; set; }
    public uint Height { get; set; }
    public uint LayerCount { get; set; }
    public uint ViewFormatCount { get; set; }
    public Format[] PViewFormats { get; set; }

    public AdamantiumVulkan.Core.Interop.VkFramebufferAttachmentImageInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkFramebufferAttachmentImageInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.usage = Usage;
        _internal.width = Width;
        _internal.height = Height;
        _internal.layerCount = LayerCount;
        _internal.viewFormatCount = ViewFormatCount;
        pViewFormats.Dispose();
        if (PViewFormats != null)
        {
            pViewFormats = new NativeStructArray<Format>(PViewFormats);
            _internal.pViewFormats = pViewFormats.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pViewFormats.Dispose();
    }


    public static implicit operator FramebufferAttachmentImageInfo(AdamantiumVulkan.Core.Interop.VkFramebufferAttachmentImageInfo f)
    {
        return new FramebufferAttachmentImageInfo(f);
    }

}



