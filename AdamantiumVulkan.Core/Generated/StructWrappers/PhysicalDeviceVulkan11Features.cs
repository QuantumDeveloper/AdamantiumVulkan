// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceVulkan11Features : QBDisposableObject
{
    public PhysicalDeviceVulkan11Features()
    {
    }

    public PhysicalDeviceVulkan11Features(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Features _internal)
    {
        PNext = _internal.pNext;
        StorageBuffer16BitAccess = _internal.storageBuffer16BitAccess;
        UniformAndStorageBuffer16BitAccess = _internal.uniformAndStorageBuffer16BitAccess;
        StoragePushConstant16 = _internal.storagePushConstant16;
        StorageInputOutput16 = _internal.storageInputOutput16;
        Multiview = _internal.multiview;
        MultiviewGeometryShader = _internal.multiviewGeometryShader;
        MultiviewTessellationShader = _internal.multiviewTessellationShader;
        VariablePointersStorageBuffer = _internal.variablePointersStorageBuffer;
        VariablePointers = _internal.variablePointers;
        ProtectedMemory = _internal.protectedMemory;
        SamplerYcbcrConversion = _internal.samplerYcbcrConversion;
        ShaderDrawParameters = _internal.shaderDrawParameters;
    }

    public StructureType SType => StructureType.PhysicalDeviceVulkan11Features;
    public void* PNext { get; set; }
    public VkBool32 StorageBuffer16BitAccess { get; set; }
    public VkBool32 UniformAndStorageBuffer16BitAccess { get; set; }
    public VkBool32 StoragePushConstant16 { get; set; }
    public VkBool32 StorageInputOutput16 { get; set; }
    public VkBool32 Multiview { get; set; }
    public VkBool32 MultiviewGeometryShader { get; set; }
    public VkBool32 MultiviewTessellationShader { get; set; }
    public VkBool32 VariablePointersStorageBuffer { get; set; }
    public VkBool32 VariablePointers { get; set; }
    public VkBool32 ProtectedMemory { get; set; }
    public VkBool32 SamplerYcbcrConversion { get; set; }
    public VkBool32 ShaderDrawParameters { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Features ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Features();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (StorageBuffer16BitAccess != (uint)default)
        {
            _internal.storageBuffer16BitAccess = StorageBuffer16BitAccess;
        }
        if (UniformAndStorageBuffer16BitAccess != (uint)default)
        {
            _internal.uniformAndStorageBuffer16BitAccess = UniformAndStorageBuffer16BitAccess;
        }
        if (StoragePushConstant16 != (uint)default)
        {
            _internal.storagePushConstant16 = StoragePushConstant16;
        }
        if (StorageInputOutput16 != (uint)default)
        {
            _internal.storageInputOutput16 = StorageInputOutput16;
        }
        if (Multiview != (uint)default)
        {
            _internal.multiview = Multiview;
        }
        if (MultiviewGeometryShader != (uint)default)
        {
            _internal.multiviewGeometryShader = MultiviewGeometryShader;
        }
        if (MultiviewTessellationShader != (uint)default)
        {
            _internal.multiviewTessellationShader = MultiviewTessellationShader;
        }
        if (VariablePointersStorageBuffer != (uint)default)
        {
            _internal.variablePointersStorageBuffer = VariablePointersStorageBuffer;
        }
        if (VariablePointers != (uint)default)
        {
            _internal.variablePointers = VariablePointers;
        }
        if (ProtectedMemory != (uint)default)
        {
            _internal.protectedMemory = ProtectedMemory;
        }
        if (SamplerYcbcrConversion != (uint)default)
        {
            _internal.samplerYcbcrConversion = SamplerYcbcrConversion;
        }
        if (ShaderDrawParameters != (uint)default)
        {
            _internal.shaderDrawParameters = ShaderDrawParameters;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceVulkan11Features(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan11Features p)
    {
        return new PhysicalDeviceVulkan11Features(p);
    }

}



