// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class ImageToMemoryCopyEXT : QBDisposableObject
{
    public ImageToMemoryCopyEXT()
    {
    }

    public ImageToMemoryCopyEXT(AdamantiumVulkan.Core.Interop.VkImageToMemoryCopyEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        PHostPointer = _internal.pHostPointer;
        MemoryRowLength = _internal.memoryRowLength;
        MemoryImageHeight = _internal.memoryImageHeight;
        ImageSubresource = new ImageSubresourceLayers(_internal.imageSubresource);
        ImageOffset = new Offset3D(_internal.imageOffset);
        ImageExtent = new Extent3D(_internal.imageExtent);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public void* PHostPointer { get; set; }
    public uint MemoryRowLength { get; set; }
    public uint MemoryImageHeight { get; set; }
    public ImageSubresourceLayers ImageSubresource { get; set; }
    public Offset3D ImageOffset { get; set; }
    public Extent3D ImageExtent { get; set; }

    public AdamantiumVulkan.Core.Interop.VkImageToMemoryCopyEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkImageToMemoryCopyEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.pHostPointer = PHostPointer;
        _internal.memoryRowLength = MemoryRowLength;
        _internal.memoryImageHeight = MemoryImageHeight;
        if (ImageSubresource != null)
        {
            _internal.imageSubresource = ImageSubresource.ToNative();
        }
        if (ImageOffset != null)
        {
            _internal.imageOffset = ImageOffset.ToNative();
        }
        if (ImageExtent != null)
        {
            _internal.imageExtent = ImageExtent.ToNative();
        }
        return _internal;
    }

    public static implicit operator ImageToMemoryCopyEXT(AdamantiumVulkan.Core.Interop.VkImageToMemoryCopyEXT i)
    {
        return new ImageToMemoryCopyEXT(i);
    }

}



