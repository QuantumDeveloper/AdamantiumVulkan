// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class IndirectCommandsLayoutTokenNV : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.IndexType> _pIndexTypes;

    private NativeStructArray<uint> _pIndexTypeValues;

    public IndirectCommandsLayoutTokenNV()
    {
    }

    public IndirectCommandsLayoutTokenNV(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        TokenType = _internal.tokenType;
        Stream = _internal.stream;
        Offset = _internal.offset;
        VertexBindingUnit = _internal.vertexBindingUnit;
        VertexDynamicStride = _internal.vertexDynamicStride;
        PushconstantPipelineLayout = new PipelineLayout(_internal.pushconstantPipelineLayout);
        PushconstantShaderStageFlags = _internal.pushconstantShaderStageFlags;
        PushconstantOffset = _internal.pushconstantOffset;
        PushconstantSize = _internal.pushconstantSize;
        IndirectStateFlags = _internal.indirectStateFlags;
        IndexTypeCount = _internal.indexTypeCount;
        PIndexTypes = NativeUtils.PointerToManagedArray(_internal.pIndexTypes, _internal.indexTypeCount);
        PIndexTypeValues = new uint[_internal.indexTypeCount];
        PIndexTypeValues = NativeUtils.PointerToManagedArray(_internal.pIndexTypeValues, (long)_internal.indexTypeCount);
        NativeUtils.Free(_internal.pIndexTypeValues);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public IndirectCommandsTokenTypeNV TokenType { get; set; }
    public uint Stream { get; set; }
    public uint Offset { get; set; }
    public uint VertexBindingUnit { get; set; }
    public VkBool32 VertexDynamicStride { get; set; }
    public PipelineLayout PushconstantPipelineLayout { get; set; }
    public VkShaderStageFlags PushconstantShaderStageFlags { get; set; }
    public uint PushconstantOffset { get; set; }
    public uint PushconstantSize { get; set; }
    public VkIndirectStateFlagsNV IndirectStateFlags { get; set; }
    public uint IndexTypeCount { get; set; }
    public IndexType[] PIndexTypes { get; set; }
    public uint[] PIndexTypeValues { get; set; }

    public AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNV();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.tokenType = TokenType;
        _internal.stream = Stream;
        _internal.offset = Offset;
        _internal.vertexBindingUnit = VertexBindingUnit;
        _internal.vertexDynamicStride = VertexDynamicStride;
        _internal.pushconstantPipelineLayout = PushconstantPipelineLayout;
        _internal.pushconstantShaderStageFlags = PushconstantShaderStageFlags;
        _internal.pushconstantOffset = PushconstantOffset;
        _internal.pushconstantSize = PushconstantSize;
        _internal.indirectStateFlags = IndirectStateFlags;
        _internal.indexTypeCount = IndexTypeCount;
        _pIndexTypes.Dispose();
        if (PIndexTypes != null)
        {
            _pIndexTypes = new NativeStructArray<AdamantiumVulkan.Core.IndexType>(PIndexTypes);
            _internal.pIndexTypes = _pIndexTypes.Handle;
        }
        _pIndexTypeValues.Dispose();
        if (PIndexTypeValues != null)
        {
            var tmpArray0 = new uint[PIndexTypeValues.Length];
            for (int i = 0; i < PIndexTypeValues.Length; ++i)
            {
                tmpArray0[i] = PIndexTypeValues[i];
            }
            _pIndexTypeValues = new NativeStructArray<uint>(tmpArray0);
            _internal.pIndexTypeValues = _pIndexTypeValues.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pIndexTypes.Dispose();
        _pIndexTypeValues.Dispose();
    }


    public static implicit operator IndirectCommandsLayoutTokenNV(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenNV i)
    {
        return new IndirectCommandsLayoutTokenNV(i);
    }

}



