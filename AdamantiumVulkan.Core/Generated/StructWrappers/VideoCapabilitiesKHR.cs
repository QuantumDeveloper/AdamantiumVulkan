// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class VideoCapabilitiesKHR : QBDisposableObject
{
    public VideoCapabilitiesKHR()
    {
    }

    public VideoCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkVideoCapabilitiesKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        MinBitstreamBufferOffsetAlignment = _internal.minBitstreamBufferOffsetAlignment;
        MinBitstreamBufferSizeAlignment = _internal.minBitstreamBufferSizeAlignment;
        PictureAccessGranularity = new Extent2D(_internal.pictureAccessGranularity);
        MinCodedExtent = new Extent2D(_internal.minCodedExtent);
        MaxCodedExtent = new Extent2D(_internal.maxCodedExtent);
        MaxDpbSlots = _internal.maxDpbSlots;
        MaxActiveReferencePictures = _internal.maxActiveReferencePictures;
        StdHeaderVersion = new ExtensionProperties(_internal.stdHeaderVersion);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkVideoCapabilityFlagsKHR Flags { get; set; }
    public VkDeviceSize MinBitstreamBufferOffsetAlignment { get; set; }
    public VkDeviceSize MinBitstreamBufferSizeAlignment { get; set; }
    public Extent2D PictureAccessGranularity { get; set; }
    public Extent2D MinCodedExtent { get; set; }
    public Extent2D MaxCodedExtent { get; set; }
    public uint MaxDpbSlots { get; set; }
    public uint MaxActiveReferencePictures { get; set; }
    public ExtensionProperties StdHeaderVersion { get; set; }

    public AdamantiumVulkan.Core.Interop.VkVideoCapabilitiesKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkVideoCapabilitiesKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (MinBitstreamBufferOffsetAlignment != (ulong)default)
        {
            _internal.minBitstreamBufferOffsetAlignment = MinBitstreamBufferOffsetAlignment;
        }
        if (MinBitstreamBufferSizeAlignment != (ulong)default)
        {
            _internal.minBitstreamBufferSizeAlignment = MinBitstreamBufferSizeAlignment;
        }
        if (PictureAccessGranularity != default)
        {
            _internal.pictureAccessGranularity = PictureAccessGranularity.ToNative();
        }
        if (MinCodedExtent != default)
        {
            _internal.minCodedExtent = MinCodedExtent.ToNative();
        }
        if (MaxCodedExtent != default)
        {
            _internal.maxCodedExtent = MaxCodedExtent.ToNative();
        }
        if (MaxDpbSlots != default)
        {
            _internal.maxDpbSlots = MaxDpbSlots;
        }
        if (MaxActiveReferencePictures != default)
        {
            _internal.maxActiveReferencePictures = MaxActiveReferencePictures;
        }
        if (StdHeaderVersion != default)
        {
            _internal.stdHeaderVersion = StdHeaderVersion.ToNative();
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        PictureAccessGranularity?.Dispose();
        MinCodedExtent?.Dispose();
        MaxCodedExtent?.Dispose();
        StdHeaderVersion?.Dispose();
    }


    public static implicit operator VideoCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkVideoCapabilitiesKHR v)
    {
        return new VideoCapabilitiesKHR(v);
    }

}



