// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class IndirectCommandsLayoutCreateInfoEXT : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenEXT> _pTokens;

    public IndirectCommandsLayoutCreateInfoEXT()
    {
    }

    public IndirectCommandsLayoutCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        ShaderStages = _internal.shaderStages;
        IndirectStride = _internal.indirectStride;
        PipelineLayout = new PipelineLayout(_internal.pipelineLayout);
        TokenCount = _internal.tokenCount;
        PTokens = new IndirectCommandsLayoutTokenEXT(*_internal.pTokens);
        NativeUtils.Free(_internal.pTokens);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkIndirectCommandsLayoutUsageFlagsEXT Flags { get; set; }
    public VkShaderStageFlags ShaderStages { get; set; }
    public uint IndirectStride { get; set; }
    public PipelineLayout PipelineLayout { get; set; }
    public uint TokenCount { get; set; }
    public IndirectCommandsLayoutTokenEXT PTokens { get; set; }

    public AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (ShaderStages != (uint)default)
        {
            _internal.shaderStages = ShaderStages;
        }
        if (IndirectStride != default)
        {
            _internal.indirectStride = IndirectStride;
        }
        if (PipelineLayout != default)
        {
            _internal.pipelineLayout = PipelineLayout;
        }
        if (TokenCount != default)
        {
            _internal.tokenCount = TokenCount;
        }
        _pTokens.Dispose();
        if (PTokens != default)
        {
            var struct0 = PTokens.ToNative();
            _pTokens = new NativeStruct<AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutTokenEXT>(struct0);
            _internal.pTokens = _pTokens.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pTokens.Dispose();
    }


    public static implicit operator IndirectCommandsLayoutCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoEXT i)
    {
        return new IndirectCommandsLayoutCreateInfoEXT(i);
    }

}



