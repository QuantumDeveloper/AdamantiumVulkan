// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineLayoutCreateInfo : QBDisposableObject
{
    private NativeStructArray<VkDescriptorSetLayout_T> pSetLayouts;

    private NativeStruct<VkPushConstantRange> pPushConstantRanges;

    public PipelineLayoutCreateInfo()
    {
    }

    public PipelineLayoutCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        SetLayoutCount = _internal.setLayoutCount;
        PSetLayouts = new DescriptorSetLayout[_internal.setLayoutCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pSetLayouts, _internal.setLayoutCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PSetLayouts[i] = new DescriptorSetLayout(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pSetLayouts);
        PushConstantRangeCount = _internal.pushConstantRangeCount;
        PushConstantRanges = new PushConstantRange(*_internal.pPushConstantRanges);
        NativeUtils.Free(_internal.pPushConstantRanges);
    }

    public StructureType SType => StructureType.PipelineLayoutCreateInfo;
    public void* PNext { get; set; }
    public PipelineLayoutCreateFlagBits Flags { get; set; }
    public uint SetLayoutCount { get; set; }
    public DescriptorSetLayout[] PSetLayouts { get; set; }
    public uint PushConstantRangeCount { get; set; }
    public PushConstantRange PushConstantRanges { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.setLayoutCount = SetLayoutCount;
        pSetLayouts.Dispose();
        if (PSetLayouts != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T[PSetLayouts.Length];
            for (int i = 0; i < PSetLayouts.Length; ++i)
            {
                tmpArray0[i] = PSetLayouts[i];
            }
            pSetLayouts = new NativeStructArray<VkDescriptorSetLayout_T>(tmpArray0);
            _internal.pSetLayouts = pSetLayouts.Handle;
        }
        _internal.pushConstantRangeCount = PushConstantRangeCount;
        pPushConstantRanges.Dispose();
        if (PushConstantRanges != null)
        {
            var struct0 = PushConstantRanges.ToNative();
            pPushConstantRanges = new NativeStruct<VkPushConstantRange>(struct0);
            _internal.pPushConstantRanges = pPushConstantRanges.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pSetLayouts.Dispose();
        pPushConstantRanges.Dispose();
    }


    public static implicit operator PipelineLayoutCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo p)
    {
        return new PipelineLayoutCreateInfo(p);
    }

}



