// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class SubpassDependency
{
    public SubpassDependency()
    {
    }

    public SubpassDependency(AdamantiumVulkan.Core.Interop.VkSubpassDependency _internal)
    {
        SrcSubpass = _internal.srcSubpass;
        DstSubpass = _internal.dstSubpass;
        SrcStageMask = _internal.srcStageMask;
        DstStageMask = _internal.dstStageMask;
        SrcAccessMask = _internal.srcAccessMask;
        DstAccessMask = _internal.dstAccessMask;
        DependencyFlags = _internal.dependencyFlags;
    }

    public uint SrcSubpass { get; set; }
    public uint DstSubpass { get; set; }
    public VkPipelineStageFlags SrcStageMask { get; set; }
    public VkPipelineStageFlags DstStageMask { get; set; }
    public VkAccessFlags SrcAccessMask { get; set; }
    public VkAccessFlags DstAccessMask { get; set; }
    public VkDependencyFlags DependencyFlags { get; set; }

    public AdamantiumVulkan.Core.Interop.VkSubpassDependency ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkSubpassDependency();
        _internal.srcSubpass = SrcSubpass;
        _internal.dstSubpass = DstSubpass;
        _internal.srcStageMask = SrcStageMask;
        _internal.dstStageMask = DstStageMask;
        _internal.srcAccessMask = SrcAccessMask;
        _internal.dstAccessMask = DstAccessMask;
        _internal.dependencyFlags = DependencyFlags;
        return _internal;
    }

    public static implicit operator SubpassDependency(AdamantiumVulkan.Core.Interop.VkSubpassDependency s)
    {
        return new SubpassDependency(s);
    }

}



