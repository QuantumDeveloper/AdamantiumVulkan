// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;
using AdamantiumVulkan;

namespace AdamantiumVulkan.Core;

public unsafe partial class VideoEncodeAV1CapabilitiesKHR : QBDisposableObject
{
    public VideoEncodeAV1CapabilitiesKHR()
    {
    }

    public VideoEncodeAV1CapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkVideoEncodeAV1CapabilitiesKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        MaxLevel = _internal.maxLevel;
        CodedPictureAlignment = new Extent2D(_internal.codedPictureAlignment);
        MaxTiles = new Extent2D(_internal.maxTiles);
        MinTileSize = new Extent2D(_internal.minTileSize);
        MaxTileSize = new Extent2D(_internal.maxTileSize);
        SuperblockSizes = _internal.superblockSizes;
        MaxSingleReferenceCount = _internal.maxSingleReferenceCount;
        SingleReferenceNameMask = _internal.singleReferenceNameMask;
        MaxUnidirectionalCompoundReferenceCount = _internal.maxUnidirectionalCompoundReferenceCount;
        MaxUnidirectionalCompoundGroup1ReferenceCount = _internal.maxUnidirectionalCompoundGroup1ReferenceCount;
        UnidirectionalCompoundReferenceNameMask = _internal.unidirectionalCompoundReferenceNameMask;
        MaxBidirectionalCompoundReferenceCount = _internal.maxBidirectionalCompoundReferenceCount;
        MaxBidirectionalCompoundGroup1ReferenceCount = _internal.maxBidirectionalCompoundGroup1ReferenceCount;
        MaxBidirectionalCompoundGroup2ReferenceCount = _internal.maxBidirectionalCompoundGroup2ReferenceCount;
        BidirectionalCompoundReferenceNameMask = _internal.bidirectionalCompoundReferenceNameMask;
        MaxTemporalLayerCount = _internal.maxTemporalLayerCount;
        MaxSpatialLayerCount = _internal.maxSpatialLayerCount;
        MaxOperatingPoints = _internal.maxOperatingPoints;
        MinQIndex = _internal.minQIndex;
        MaxQIndex = _internal.maxQIndex;
        PrefersGopRemainingFrames = _internal.prefersGopRemainingFrames;
        RequiresGopRemainingFrames = _internal.requiresGopRemainingFrames;
        StdSyntaxFlags = _internal.stdSyntaxFlags;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkVideoEncodeAV1CapabilityFlagsKHR Flags { get; set; }
    public StdVideoAV1Level MaxLevel { get; set; }
    public Extent2D CodedPictureAlignment { get; set; }
    public Extent2D MaxTiles { get; set; }
    public Extent2D MinTileSize { get; set; }
    public Extent2D MaxTileSize { get; set; }
    public VkVideoEncodeAV1SuperblockSizeFlagsKHR SuperblockSizes { get; set; }
    public uint MaxSingleReferenceCount { get; set; }
    public uint SingleReferenceNameMask { get; set; }
    public uint MaxUnidirectionalCompoundReferenceCount { get; set; }
    public uint MaxUnidirectionalCompoundGroup1ReferenceCount { get; set; }
    public uint UnidirectionalCompoundReferenceNameMask { get; set; }
    public uint MaxBidirectionalCompoundReferenceCount { get; set; }
    public uint MaxBidirectionalCompoundGroup1ReferenceCount { get; set; }
    public uint MaxBidirectionalCompoundGroup2ReferenceCount { get; set; }
    public uint BidirectionalCompoundReferenceNameMask { get; set; }
    public uint MaxTemporalLayerCount { get; set; }
    public uint MaxSpatialLayerCount { get; set; }
    public uint MaxOperatingPoints { get; set; }
    public uint MinQIndex { get; set; }
    public uint MaxQIndex { get; set; }
    public VkBool32 PrefersGopRemainingFrames { get; set; }
    public VkBool32 RequiresGopRemainingFrames { get; set; }
    public VkVideoEncodeAV1StdFlagsKHR StdSyntaxFlags { get; set; }

    public AdamantiumVulkan.Core.Interop.VkVideoEncodeAV1CapabilitiesKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkVideoEncodeAV1CapabilitiesKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (MaxLevel != default)
        {
            _internal.maxLevel = MaxLevel;
        }
        if (CodedPictureAlignment != default)
        {
            _internal.codedPictureAlignment = CodedPictureAlignment.ToNative();
        }
        if (MaxTiles != default)
        {
            _internal.maxTiles = MaxTiles.ToNative();
        }
        if (MinTileSize != default)
        {
            _internal.minTileSize = MinTileSize.ToNative();
        }
        if (MaxTileSize != default)
        {
            _internal.maxTileSize = MaxTileSize.ToNative();
        }
        if (SuperblockSizes != (uint)default)
        {
            _internal.superblockSizes = SuperblockSizes;
        }
        if (MaxSingleReferenceCount != default)
        {
            _internal.maxSingleReferenceCount = MaxSingleReferenceCount;
        }
        if (SingleReferenceNameMask != default)
        {
            _internal.singleReferenceNameMask = SingleReferenceNameMask;
        }
        if (MaxUnidirectionalCompoundReferenceCount != default)
        {
            _internal.maxUnidirectionalCompoundReferenceCount = MaxUnidirectionalCompoundReferenceCount;
        }
        if (MaxUnidirectionalCompoundGroup1ReferenceCount != default)
        {
            _internal.maxUnidirectionalCompoundGroup1ReferenceCount = MaxUnidirectionalCompoundGroup1ReferenceCount;
        }
        if (UnidirectionalCompoundReferenceNameMask != default)
        {
            _internal.unidirectionalCompoundReferenceNameMask = UnidirectionalCompoundReferenceNameMask;
        }
        if (MaxBidirectionalCompoundReferenceCount != default)
        {
            _internal.maxBidirectionalCompoundReferenceCount = MaxBidirectionalCompoundReferenceCount;
        }
        if (MaxBidirectionalCompoundGroup1ReferenceCount != default)
        {
            _internal.maxBidirectionalCompoundGroup1ReferenceCount = MaxBidirectionalCompoundGroup1ReferenceCount;
        }
        if (MaxBidirectionalCompoundGroup2ReferenceCount != default)
        {
            _internal.maxBidirectionalCompoundGroup2ReferenceCount = MaxBidirectionalCompoundGroup2ReferenceCount;
        }
        if (BidirectionalCompoundReferenceNameMask != default)
        {
            _internal.bidirectionalCompoundReferenceNameMask = BidirectionalCompoundReferenceNameMask;
        }
        if (MaxTemporalLayerCount != default)
        {
            _internal.maxTemporalLayerCount = MaxTemporalLayerCount;
        }
        if (MaxSpatialLayerCount != default)
        {
            _internal.maxSpatialLayerCount = MaxSpatialLayerCount;
        }
        if (MaxOperatingPoints != default)
        {
            _internal.maxOperatingPoints = MaxOperatingPoints;
        }
        if (MinQIndex != default)
        {
            _internal.minQIndex = MinQIndex;
        }
        if (MaxQIndex != default)
        {
            _internal.maxQIndex = MaxQIndex;
        }
        if (PrefersGopRemainingFrames != (uint)default)
        {
            _internal.prefersGopRemainingFrames = PrefersGopRemainingFrames;
        }
        if (RequiresGopRemainingFrames != (uint)default)
        {
            _internal.requiresGopRemainingFrames = RequiresGopRemainingFrames;
        }
        if (StdSyntaxFlags != (uint)default)
        {
            _internal.stdSyntaxFlags = StdSyntaxFlags;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        CodedPictureAlignment?.Dispose();
        MaxTiles?.Dispose();
        MinTileSize?.Dispose();
        MaxTileSize?.Dispose();
    }


    public static implicit operator VideoEncodeAV1CapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkVideoEncodeAV1CapabilitiesKHR v)
    {
        return new VideoEncodeAV1CapabilitiesKHR(v);
    }

}



