// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PerformanceCounterKHR : QBDisposableObject
{
    public PerformanceCounterKHR()
    {
    }

    public PerformanceCounterKHR(AdamantiumVulkan.Core.Interop.VkPerformanceCounterKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Unit = _internal.unit;
        Scope = _internal.scope;
        Storage = _internal.storage;
        Uuid = NativeUtils.PointerToManagedArray(_internal.uuid, 16);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public PerformanceCounterUnitKHR Unit { get; set; }
    public PerformanceCounterScopeKHR Scope { get; set; }
    public PerformanceCounterStorageKHR Storage { get; set; }
    public byte[] Uuid { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPerformanceCounterKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPerformanceCounterKHR();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.unit = Unit;
        _internal.scope = Scope;
        _internal.storage = Storage;
        if(Uuid != null)
        {
            if (Uuid.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(Uuid), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.uuid, 16, Uuid);
        }
        return _internal;
    }

    public static implicit operator PerformanceCounterKHR(AdamantiumVulkan.Core.Interop.VkPerformanceCounterKHR p)
    {
        return new PerformanceCounterKHR(p);
    }

}



