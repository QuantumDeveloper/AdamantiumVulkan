// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineColorWriteCreateInfoEXT : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.Interop.uint> pColorWriteEnables;

    public PipelineColorWriteCreateInfoEXT()
    {
    }

    public PipelineColorWriteCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineColorWriteCreateInfoEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        AttachmentCount = _internal.attachmentCount;
        PColorWriteEnables = new bool[_internal.attachmentCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pColorWriteEnables, _internal.attachmentCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PColorWriteEnables[i] = System.Convert.ToBoolean(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pColorWriteEnables);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint AttachmentCount { get; set; }
    public bool[] PColorWriteEnables { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineColorWriteCreateInfoEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineColorWriteCreateInfoEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.attachmentCount = AttachmentCount;
        pColorWriteEnables.Dispose();
        if (PColorWriteEnables != null)
        {
            var tmpArray0 = new uint[PColorWriteEnables.Length];
            for (int i = 0; i < PColorWriteEnables.Length; ++i)
            {
                tmpArray0[i] = System.Convert.ToUInt32(PColorWriteEnables[i]);
            }
            pColorWriteEnables = new NativeStructArray<AdamantiumVulkan.Core.Interop.uint>(tmpArray0);
            _internal.pColorWriteEnables = pColorWriteEnables.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pColorWriteEnables.Dispose();
    }


    public static implicit operator PipelineColorWriteCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkPipelineColorWriteCreateInfoEXT p)
    {
        return new PipelineColorWriteCreateInfoEXT(p);
    }

}



