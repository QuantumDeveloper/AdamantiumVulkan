// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265PictureInfo : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo> _pRefLists;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet> _pShortTermRefPicSet;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265LongTermRefPics> _pLongTermRefPics;

    public StdVideoEncodeH265PictureInfo()
    {
    }

    public StdVideoEncodeH265PictureInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265PictureInfo _internal)
    {
        Flags = new StdVideoEncodeH265PictureInfoFlags(_internal.flags);
        Pic_type = _internal.pic_type;
        Sps_video_parameter_set_id = _internal.sps_video_parameter_set_id;
        Ps_seq_parameter_set_id = _internal.pps_seq_parameter_set_id;
        Ps_pic_parameter_set_id = _internal.pps_pic_parameter_set_id;
        Short_term_ref_pic_set_idx = _internal.short_term_ref_pic_set_idx;
        PicOrderCntVal = _internal.PicOrderCntVal;
        TemporalId = _internal.TemporalId;
        Reserved1 = NativeUtils.PointerToManagedArray(_internal.reserved1, 7);
        PRefLists = new StdVideoEncodeH265ReferenceListsInfo(*_internal.pRefLists);
        NativeUtils.Free(_internal.pRefLists);
        PShortTermRefPicSet = new StdVideoH265ShortTermRefPicSet(*_internal.pShortTermRefPicSet);
        NativeUtils.Free(_internal.pShortTermRefPicSet);
        PLongTermRefPics = new StdVideoEncodeH265LongTermRefPics(*_internal.pLongTermRefPics);
        NativeUtils.Free(_internal.pLongTermRefPics);
    }

    public StdVideoEncodeH265PictureInfoFlags Flags { get; set; }
    public StdVideoH265PictureType Pic_type { get; set; }
    public byte Sps_video_parameter_set_id { get; set; }
    public byte Ps_seq_parameter_set_id { get; set; }
    public byte Ps_pic_parameter_set_id { get; set; }
    public byte Short_term_ref_pic_set_idx { get; set; }
    public int PicOrderCntVal { get; set; }
    public byte TemporalId { get; set; }
    public byte[] Reserved1 { get; set; }
    public StdVideoEncodeH265ReferenceListsInfo PRefLists { get; set; }
    public StdVideoH265ShortTermRefPicSet PShortTermRefPicSet { get; set; }
    public StdVideoEncodeH265LongTermRefPics PLongTermRefPics { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265PictureInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265PictureInfo();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Pic_type != default)
        {
            _internal.pic_type = Pic_type;
        }
        if (Sps_video_parameter_set_id != default)
        {
            _internal.sps_video_parameter_set_id = Sps_video_parameter_set_id;
        }
        if (Ps_seq_parameter_set_id != default)
        {
            _internal.pps_seq_parameter_set_id = Ps_seq_parameter_set_id;
        }
        if (Ps_pic_parameter_set_id != default)
        {
            _internal.pps_pic_parameter_set_id = Ps_pic_parameter_set_id;
        }
        if (Short_term_ref_pic_set_idx != default)
        {
            _internal.short_term_ref_pic_set_idx = Short_term_ref_pic_set_idx;
        }
        if (PicOrderCntVal != default)
        {
            _internal.PicOrderCntVal = PicOrderCntVal;
        }
        if (TemporalId != default)
        {
            _internal.TemporalId = TemporalId;
        }
        if (Reserved1 != default)
        {
            if (Reserved1.Length > 7)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved1), "Array is out of bounds. Size should not be more than 7");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved1, 7, Reserved1);
        }
        _pRefLists.Dispose();
        if (PRefLists != default)
        {
            var struct0 = PRefLists.ToNative();
            _pRefLists = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo>(struct0);
            _internal.pRefLists = _pRefLists.Handle;
        }
        _pShortTermRefPicSet.Dispose();
        if (PShortTermRefPicSet != default)
        {
            var struct1 = PShortTermRefPicSet.ToNative();
            _pShortTermRefPicSet = new NativeStruct<AdamantiumVulkan.Interop.StdVideoH265ShortTermRefPicSet>(struct1);
            _internal.pShortTermRefPicSet = _pShortTermRefPicSet.Handle;
        }
        _pLongTermRefPics.Dispose();
        if (PLongTermRefPics != default)
        {
            var struct2 = PLongTermRefPics.ToNative();
            _pLongTermRefPics = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265LongTermRefPics>(struct2);
            _internal.pLongTermRefPics = _pLongTermRefPics.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pRefLists.Dispose();
        _pShortTermRefPicSet.Dispose();
        _pLongTermRefPics.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoEncodeH265PictureInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265PictureInfo s)
    {
        return new StdVideoEncodeH265PictureInfo(s);
    }

}



