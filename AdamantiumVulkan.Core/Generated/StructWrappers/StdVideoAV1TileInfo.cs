// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoAV1TileInfo : QBDisposableObject
{
    private NativeStruct<ushort> _pMiColStarts;

    private NativeStruct<ushort> _pMiRowStarts;

    private NativeStruct<ushort> _pWidthInSbsMinus1;

    private NativeStruct<ushort> _pHeightInSbsMinus1;

    public StdVideoAV1TileInfo()
    {
    }

    public StdVideoAV1TileInfo(AdamantiumVulkan.Interop.StdVideoAV1TileInfo _internal)
    {
        Flags = new StdVideoAV1TileInfoFlags(_internal.flags);
        TileCols = _internal.TileCols;
        TileRows = _internal.TileRows;
        Context_update_tile_id = _internal.context_update_tile_id;
        Tile_size_bytes_minus_1 = _internal.tile_size_bytes_minus_1;
        Reserved1 = NativeUtils.PointerToManagedArray(_internal.reserved1, 7);
        if (_internal.pMiColStarts != null)
        {
            PMiColStarts = *_internal.pMiColStarts;
            NativeUtils.Free(_internal.pMiColStarts);
        }
        if (_internal.pMiRowStarts != null)
        {
            PMiRowStarts = *_internal.pMiRowStarts;
            NativeUtils.Free(_internal.pMiRowStarts);
        }
        if (_internal.pWidthInSbsMinus1 != null)
        {
            PWidthInSbsMinus1 = *_internal.pWidthInSbsMinus1;
            NativeUtils.Free(_internal.pWidthInSbsMinus1);
        }
        if (_internal.pHeightInSbsMinus1 != null)
        {
            PHeightInSbsMinus1 = *_internal.pHeightInSbsMinus1;
            NativeUtils.Free(_internal.pHeightInSbsMinus1);
        }
    }

    public StdVideoAV1TileInfoFlags Flags { get; set; }
    public byte TileCols { get; set; }
    public byte TileRows { get; set; }
    public ushort Context_update_tile_id { get; set; }
    public byte Tile_size_bytes_minus_1 { get; set; }
    public byte[] Reserved1 { get; set; }
    public ushort? PMiColStarts { get; set; }
    public ushort? PMiRowStarts { get; set; }
    public ushort? PWidthInSbsMinus1 { get; set; }
    public ushort? PHeightInSbsMinus1 { get; set; }

    public AdamantiumVulkan.Interop.StdVideoAV1TileInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoAV1TileInfo();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (TileCols != default)
        {
            _internal.TileCols = TileCols;
        }
        if (TileRows != default)
        {
            _internal.TileRows = TileRows;
        }
        if (Context_update_tile_id != default)
        {
            _internal.context_update_tile_id = Context_update_tile_id;
        }
        if (Tile_size_bytes_minus_1 != default)
        {
            _internal.tile_size_bytes_minus_1 = Tile_size_bytes_minus_1;
        }
        if (Reserved1 != default)
        {
            if (Reserved1.Length > 7)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved1), "Array is out of bounds. Size should not be more than 7");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved1, 7, Reserved1);
        }
        _pMiColStarts.Dispose();
        if (PMiColStarts.HasValue)
        {
            _pMiColStarts = new NativeStruct<ushort>(PMiColStarts.Value);
            _internal.pMiColStarts = _pMiColStarts.Handle;
        }
        _pMiRowStarts.Dispose();
        if (PMiRowStarts.HasValue)
        {
            _pMiRowStarts = new NativeStruct<ushort>(PMiRowStarts.Value);
            _internal.pMiRowStarts = _pMiRowStarts.Handle;
        }
        _pWidthInSbsMinus1.Dispose();
        if (PWidthInSbsMinus1.HasValue)
        {
            _pWidthInSbsMinus1 = new NativeStruct<ushort>(PWidthInSbsMinus1.Value);
            _internal.pWidthInSbsMinus1 = _pWidthInSbsMinus1.Handle;
        }
        _pHeightInSbsMinus1.Dispose();
        if (PHeightInSbsMinus1.HasValue)
        {
            _pHeightInSbsMinus1 = new NativeStruct<ushort>(PHeightInSbsMinus1.Value);
            _internal.pHeightInSbsMinus1 = _pHeightInSbsMinus1.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pMiColStarts.Dispose();
        _pMiRowStarts.Dispose();
        _pWidthInSbsMinus1.Dispose();
        _pHeightInSbsMinus1.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoAV1TileInfo(AdamantiumVulkan.Interop.StdVideoAV1TileInfo s)
    {
        return new StdVideoAV1TileInfo(s);
    }

}



