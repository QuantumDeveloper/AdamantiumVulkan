// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class ImageCompressionControlEXT : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkImageCompressionFixedRateFlagsEXT> _pFixedRateFlags;

    public ImageCompressionControlEXT()
    {
    }

    public ImageCompressionControlEXT(AdamantiumVulkan.Core.Interop.VkImageCompressionControlEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        CompressionControlPlaneCount = _internal.compressionControlPlaneCount;
        if (_internal.pFixedRateFlags != null)
        {
            PFixedRateFlags = *_internal.pFixedRateFlags;
            NativeUtils.Free(_internal.pFixedRateFlags);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkImageCompressionFlagsEXT Flags { get; set; }
    public uint CompressionControlPlaneCount { get; set; }
    public VkImageCompressionFixedRateFlagsEXT? PFixedRateFlags { get; set; }

    public AdamantiumVulkan.Core.Interop.VkImageCompressionControlEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkImageCompressionControlEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.compressionControlPlaneCount = CompressionControlPlaneCount;
        _pFixedRateFlags.Dispose();
        if (PFixedRateFlags.HasValue)
        {
            _pFixedRateFlags = new NativeStruct<AdamantiumVulkan.Core.Interop.VkImageCompressionFixedRateFlagsEXT>(PFixedRateFlags.Value);
            _internal.pFixedRateFlags = _pFixedRateFlags.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pFixedRateFlags.Dispose();
    }


    public static implicit operator ImageCompressionControlEXT(AdamantiumVulkan.Core.Interop.VkImageCompressionControlEXT i)
    {
        return new ImageCompressionControlEXT(i);
    }

}



