// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceVulkan14Properties : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.ImageLayout> _pCopySrcLayouts;

    private NativeStruct<AdamantiumVulkan.Core.ImageLayout> _pCopyDstLayouts;

    public PhysicalDeviceVulkan14Properties()
    {
    }

    public PhysicalDeviceVulkan14Properties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Properties _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        LineSubPixelPrecisionBits = _internal.lineSubPixelPrecisionBits;
        MaxVertexAttribDivisor = _internal.maxVertexAttribDivisor;
        SupportsNonZeroFirstInstance = _internal.supportsNonZeroFirstInstance;
        MaxPushDescriptors = _internal.maxPushDescriptors;
        DynamicRenderingLocalReadDepthStencilAttachments = _internal.dynamicRenderingLocalReadDepthStencilAttachments;
        DynamicRenderingLocalReadMultisampledAttachments = _internal.dynamicRenderingLocalReadMultisampledAttachments;
        EarlyFragmentMultisampleCoverageAfterSampleCounting = _internal.earlyFragmentMultisampleCoverageAfterSampleCounting;
        EarlyFragmentSampleMaskTestBeforeSampleCounting = _internal.earlyFragmentSampleMaskTestBeforeSampleCounting;
        DepthStencilSwizzleOneSupport = _internal.depthStencilSwizzleOneSupport;
        PolygonModePointSize = _internal.polygonModePointSize;
        NonStrictSinglePixelWideLinesUseParallelogram = _internal.nonStrictSinglePixelWideLinesUseParallelogram;
        NonStrictWideLinesUseParallelogram = _internal.nonStrictWideLinesUseParallelogram;
        BlockTexelViewCompatibleMultipleLayers = _internal.blockTexelViewCompatibleMultipleLayers;
        MaxCombinedImageSamplerDescriptorCount = _internal.maxCombinedImageSamplerDescriptorCount;
        FragmentShadingRateClampCombinerInputs = _internal.fragmentShadingRateClampCombinerInputs;
        DefaultRobustnessStorageBuffers = _internal.defaultRobustnessStorageBuffers;
        DefaultRobustnessUniformBuffers = _internal.defaultRobustnessUniformBuffers;
        DefaultRobustnessVertexInputs = _internal.defaultRobustnessVertexInputs;
        DefaultRobustnessImages = _internal.defaultRobustnessImages;
        CopySrcLayoutCount = _internal.copySrcLayoutCount;
        PCopySrcLayouts = *_internal.pCopySrcLayouts;
        CopyDstLayoutCount = _internal.copyDstLayoutCount;
        PCopyDstLayouts = *_internal.pCopyDstLayouts;
        OptimalTilingLayoutUUID = NativeUtils.PointerToManagedArray(_internal.optimalTilingLayoutUUID, 16);
        IdenticalMemoryTypeRequirements = _internal.identicalMemoryTypeRequirements;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint LineSubPixelPrecisionBits { get; set; }
    public uint MaxVertexAttribDivisor { get; set; }
    public VkBool32 SupportsNonZeroFirstInstance { get; set; }
    public uint MaxPushDescriptors { get; set; }
    public VkBool32 DynamicRenderingLocalReadDepthStencilAttachments { get; set; }
    public VkBool32 DynamicRenderingLocalReadMultisampledAttachments { get; set; }
    public VkBool32 EarlyFragmentMultisampleCoverageAfterSampleCounting { get; set; }
    public VkBool32 EarlyFragmentSampleMaskTestBeforeSampleCounting { get; set; }
    public VkBool32 DepthStencilSwizzleOneSupport { get; set; }
    public VkBool32 PolygonModePointSize { get; set; }
    public VkBool32 NonStrictSinglePixelWideLinesUseParallelogram { get; set; }
    public VkBool32 NonStrictWideLinesUseParallelogram { get; set; }
    public VkBool32 BlockTexelViewCompatibleMultipleLayers { get; set; }
    public uint MaxCombinedImageSamplerDescriptorCount { get; set; }
    public VkBool32 FragmentShadingRateClampCombinerInputs { get; set; }
    public PipelineRobustnessBufferBehavior DefaultRobustnessStorageBuffers { get; set; }
    public PipelineRobustnessBufferBehavior DefaultRobustnessUniformBuffers { get; set; }
    public PipelineRobustnessBufferBehavior DefaultRobustnessVertexInputs { get; set; }
    public PipelineRobustnessImageBehavior DefaultRobustnessImages { get; set; }
    public uint CopySrcLayoutCount { get; set; }
    public ImageLayout? PCopySrcLayouts { get; set; }
    public uint CopyDstLayoutCount { get; set; }
    public ImageLayout? PCopyDstLayouts { get; set; }
    public byte[] OptimalTilingLayoutUUID { get; set; }
    public VkBool32 IdenticalMemoryTypeRequirements { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Properties ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Properties();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (LineSubPixelPrecisionBits != default)
        {
            _internal.lineSubPixelPrecisionBits = LineSubPixelPrecisionBits;
        }
        if (MaxVertexAttribDivisor != default)
        {
            _internal.maxVertexAttribDivisor = MaxVertexAttribDivisor;
        }
        if (SupportsNonZeroFirstInstance != (uint)default)
        {
            _internal.supportsNonZeroFirstInstance = SupportsNonZeroFirstInstance;
        }
        if (MaxPushDescriptors != default)
        {
            _internal.maxPushDescriptors = MaxPushDescriptors;
        }
        if (DynamicRenderingLocalReadDepthStencilAttachments != (uint)default)
        {
            _internal.dynamicRenderingLocalReadDepthStencilAttachments = DynamicRenderingLocalReadDepthStencilAttachments;
        }
        if (DynamicRenderingLocalReadMultisampledAttachments != (uint)default)
        {
            _internal.dynamicRenderingLocalReadMultisampledAttachments = DynamicRenderingLocalReadMultisampledAttachments;
        }
        if (EarlyFragmentMultisampleCoverageAfterSampleCounting != (uint)default)
        {
            _internal.earlyFragmentMultisampleCoverageAfterSampleCounting = EarlyFragmentMultisampleCoverageAfterSampleCounting;
        }
        if (EarlyFragmentSampleMaskTestBeforeSampleCounting != (uint)default)
        {
            _internal.earlyFragmentSampleMaskTestBeforeSampleCounting = EarlyFragmentSampleMaskTestBeforeSampleCounting;
        }
        if (DepthStencilSwizzleOneSupport != (uint)default)
        {
            _internal.depthStencilSwizzleOneSupport = DepthStencilSwizzleOneSupport;
        }
        if (PolygonModePointSize != (uint)default)
        {
            _internal.polygonModePointSize = PolygonModePointSize;
        }
        if (NonStrictSinglePixelWideLinesUseParallelogram != (uint)default)
        {
            _internal.nonStrictSinglePixelWideLinesUseParallelogram = NonStrictSinglePixelWideLinesUseParallelogram;
        }
        if (NonStrictWideLinesUseParallelogram != (uint)default)
        {
            _internal.nonStrictWideLinesUseParallelogram = NonStrictWideLinesUseParallelogram;
        }
        if (BlockTexelViewCompatibleMultipleLayers != (uint)default)
        {
            _internal.blockTexelViewCompatibleMultipleLayers = BlockTexelViewCompatibleMultipleLayers;
        }
        if (MaxCombinedImageSamplerDescriptorCount != default)
        {
            _internal.maxCombinedImageSamplerDescriptorCount = MaxCombinedImageSamplerDescriptorCount;
        }
        if (FragmentShadingRateClampCombinerInputs != (uint)default)
        {
            _internal.fragmentShadingRateClampCombinerInputs = FragmentShadingRateClampCombinerInputs;
        }
        if (DefaultRobustnessStorageBuffers != default)
        {
            _internal.defaultRobustnessStorageBuffers = DefaultRobustnessStorageBuffers;
        }
        if (DefaultRobustnessUniformBuffers != default)
        {
            _internal.defaultRobustnessUniformBuffers = DefaultRobustnessUniformBuffers;
        }
        if (DefaultRobustnessVertexInputs != default)
        {
            _internal.defaultRobustnessVertexInputs = DefaultRobustnessVertexInputs;
        }
        if (DefaultRobustnessImages != default)
        {
            _internal.defaultRobustnessImages = DefaultRobustnessImages;
        }
        if (CopySrcLayoutCount != default)
        {
            _internal.copySrcLayoutCount = CopySrcLayoutCount;
        }
        _pCopySrcLayouts.Dispose();
        if (PCopySrcLayouts.HasValue)
        {
            _pCopySrcLayouts = new NativeStruct<AdamantiumVulkan.Core.ImageLayout>(PCopySrcLayouts.Value);
            _internal.pCopySrcLayouts = _pCopySrcLayouts.Handle;
        }
        if (CopyDstLayoutCount != default)
        {
            _internal.copyDstLayoutCount = CopyDstLayoutCount;
        }
        _pCopyDstLayouts.Dispose();
        if (PCopyDstLayouts.HasValue)
        {
            _pCopyDstLayouts = new NativeStruct<AdamantiumVulkan.Core.ImageLayout>(PCopyDstLayouts.Value);
            _internal.pCopyDstLayouts = _pCopyDstLayouts.Handle;
        }
        if (OptimalTilingLayoutUUID != default)
        {
            if (OptimalTilingLayoutUUID.Length > 16)
                throw new System.ArgumentOutOfRangeException(nameof(OptimalTilingLayoutUUID), "Array is out of bounds. Size should not be more than 16");

            NativeUtils.PrimitiveToFixedArray(_internal.optimalTilingLayoutUUID, 16, OptimalTilingLayoutUUID);
        }
        if (IdenticalMemoryTypeRequirements != (uint)default)
        {
            _internal.identicalMemoryTypeRequirements = IdenticalMemoryTypeRequirements;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pCopySrcLayouts.Dispose();
        _pCopyDstLayouts.Dispose();
    }


    public static implicit operator PhysicalDeviceVulkan14Properties(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceVulkan14Properties p)
    {
        return new PhysicalDeviceVulkan14Properties(p);
    }

}



