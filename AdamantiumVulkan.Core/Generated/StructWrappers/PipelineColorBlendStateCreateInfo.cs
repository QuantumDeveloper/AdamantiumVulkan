// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineColorBlendStateCreateInfo : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState> _pAttachments;

    public PipelineColorBlendStateCreateInfo()
    {
    }

    public PipelineColorBlendStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        LogicOpEnable = _internal.logicOpEnable;
        LogicOp = _internal.logicOp;
        AttachmentCount = _internal.attachmentCount;
        PAttachments = new PipelineColorBlendAttachmentState[_internal.attachmentCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pAttachments, _internal.attachmentCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PAttachments[i] = new PipelineColorBlendAttachmentState(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pAttachments);
        BlendConstants = NativeUtils.PointerToManagedArray(_internal.blendConstants, 4);
    }

    public StructureType SType => StructureType.PipelineColorBlendStateCreateInfo;
    public void* PNext { get; set; }
    public VkPipelineColorBlendStateCreateFlags Flags { get; set; }
    public VkBool32 LogicOpEnable { get; set; }
    public LogicOp LogicOp { get; set; }
    public uint AttachmentCount { get; set; }
    public PipelineColorBlendAttachmentState[] PAttachments { get; set; }
    public float[] BlendConstants { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (LogicOpEnable != (uint)default)
        {
            _internal.logicOpEnable = LogicOpEnable;
        }
        if (LogicOp != default)
        {
            _internal.logicOp = LogicOp;
        }
        if (AttachmentCount != default)
        {
            _internal.attachmentCount = AttachmentCount;
        }
        _pAttachments.Dispose();
        if (PAttachments != default)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState[PAttachments.Length];
            for (int i = 0; i < PAttachments.Length; ++i)
            {
                tmpArray0[i] = PAttachments[i].ToNative();
            }
            _pAttachments = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkPipelineColorBlendAttachmentState>(tmpArray0);
            _internal.pAttachments = _pAttachments.Handle;
        }
        if (BlendConstants != default)
        {
            if (BlendConstants.Length > 4)
                throw new System.ArgumentOutOfRangeException(nameof(BlendConstants), "Array is out of bounds. Size should not be more than 4");

            NativeUtils.PrimitiveToFixedArray(_internal.blendConstants, 4, BlendConstants);
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pAttachments.Dispose();
    }


    public static implicit operator PipelineColorBlendStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineColorBlendStateCreateInfo p)
    {
        return new PipelineColorBlendStateCreateInfo(p);
    }

}



