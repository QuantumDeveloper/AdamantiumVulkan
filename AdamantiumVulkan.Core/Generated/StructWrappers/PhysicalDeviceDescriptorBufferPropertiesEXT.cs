// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceDescriptorBufferPropertiesEXT : QBDisposableObject
{
    public PhysicalDeviceDescriptorBufferPropertiesEXT()
    {
    }

    public PhysicalDeviceDescriptorBufferPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorBufferPropertiesEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        CombinedImageSamplerDescriptorSingleArray = _internal.combinedImageSamplerDescriptorSingleArray;
        BufferlessPushDescriptors = _internal.bufferlessPushDescriptors;
        AllowSamplerImageViewPostSubmitCreation = _internal.allowSamplerImageViewPostSubmitCreation;
        DescriptorBufferOffsetAlignment = _internal.descriptorBufferOffsetAlignment;
        MaxDescriptorBufferBindings = _internal.maxDescriptorBufferBindings;
        MaxResourceDescriptorBufferBindings = _internal.maxResourceDescriptorBufferBindings;
        MaxSamplerDescriptorBufferBindings = _internal.maxSamplerDescriptorBufferBindings;
        MaxEmbeddedImmutableSamplerBindings = _internal.maxEmbeddedImmutableSamplerBindings;
        MaxEmbeddedImmutableSamplers = _internal.maxEmbeddedImmutableSamplers;
        BufferCaptureReplayDescriptorDataSize = _internal.bufferCaptureReplayDescriptorDataSize;
        ImageCaptureReplayDescriptorDataSize = _internal.imageCaptureReplayDescriptorDataSize;
        ImageViewCaptureReplayDescriptorDataSize = _internal.imageViewCaptureReplayDescriptorDataSize;
        SamplerCaptureReplayDescriptorDataSize = _internal.samplerCaptureReplayDescriptorDataSize;
        AccelerationStructureCaptureReplayDescriptorDataSize = _internal.accelerationStructureCaptureReplayDescriptorDataSize;
        SamplerDescriptorSize = _internal.samplerDescriptorSize;
        CombinedImageSamplerDescriptorSize = _internal.combinedImageSamplerDescriptorSize;
        SampledImageDescriptorSize = _internal.sampledImageDescriptorSize;
        StorageImageDescriptorSize = _internal.storageImageDescriptorSize;
        UniformTexelBufferDescriptorSize = _internal.uniformTexelBufferDescriptorSize;
        RobustUniformTexelBufferDescriptorSize = _internal.robustUniformTexelBufferDescriptorSize;
        StorageTexelBufferDescriptorSize = _internal.storageTexelBufferDescriptorSize;
        RobustStorageTexelBufferDescriptorSize = _internal.robustStorageTexelBufferDescriptorSize;
        UniformBufferDescriptorSize = _internal.uniformBufferDescriptorSize;
        RobustUniformBufferDescriptorSize = _internal.robustUniformBufferDescriptorSize;
        StorageBufferDescriptorSize = _internal.storageBufferDescriptorSize;
        RobustStorageBufferDescriptorSize = _internal.robustStorageBufferDescriptorSize;
        InputAttachmentDescriptorSize = _internal.inputAttachmentDescriptorSize;
        AccelerationStructureDescriptorSize = _internal.accelerationStructureDescriptorSize;
        MaxSamplerDescriptorBufferRange = _internal.maxSamplerDescriptorBufferRange;
        MaxResourceDescriptorBufferRange = _internal.maxResourceDescriptorBufferRange;
        SamplerDescriptorBufferAddressSpaceSize = _internal.samplerDescriptorBufferAddressSpaceSize;
        ResourceDescriptorBufferAddressSpaceSize = _internal.resourceDescriptorBufferAddressSpaceSize;
        DescriptorBufferAddressSpaceSize = _internal.descriptorBufferAddressSpaceSize;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 CombinedImageSamplerDescriptorSingleArray { get; set; }
    public VkBool32 BufferlessPushDescriptors { get; set; }
    public VkBool32 AllowSamplerImageViewPostSubmitCreation { get; set; }
    public VkDeviceSize DescriptorBufferOffsetAlignment { get; set; }
    public uint MaxDescriptorBufferBindings { get; set; }
    public uint MaxResourceDescriptorBufferBindings { get; set; }
    public uint MaxSamplerDescriptorBufferBindings { get; set; }
    public uint MaxEmbeddedImmutableSamplerBindings { get; set; }
    public uint MaxEmbeddedImmutableSamplers { get; set; }
    public ulong BufferCaptureReplayDescriptorDataSize { get; set; }
    public ulong ImageCaptureReplayDescriptorDataSize { get; set; }
    public ulong ImageViewCaptureReplayDescriptorDataSize { get; set; }
    public ulong SamplerCaptureReplayDescriptorDataSize { get; set; }
    public ulong AccelerationStructureCaptureReplayDescriptorDataSize { get; set; }
    public ulong SamplerDescriptorSize { get; set; }
    public ulong CombinedImageSamplerDescriptorSize { get; set; }
    public ulong SampledImageDescriptorSize { get; set; }
    public ulong StorageImageDescriptorSize { get; set; }
    public ulong UniformTexelBufferDescriptorSize { get; set; }
    public ulong RobustUniformTexelBufferDescriptorSize { get; set; }
    public ulong StorageTexelBufferDescriptorSize { get; set; }
    public ulong RobustStorageTexelBufferDescriptorSize { get; set; }
    public ulong UniformBufferDescriptorSize { get; set; }
    public ulong RobustUniformBufferDescriptorSize { get; set; }
    public ulong StorageBufferDescriptorSize { get; set; }
    public ulong RobustStorageBufferDescriptorSize { get; set; }
    public ulong InputAttachmentDescriptorSize { get; set; }
    public ulong AccelerationStructureDescriptorSize { get; set; }
    public VkDeviceSize MaxSamplerDescriptorBufferRange { get; set; }
    public VkDeviceSize MaxResourceDescriptorBufferRange { get; set; }
    public VkDeviceSize SamplerDescriptorBufferAddressSpaceSize { get; set; }
    public VkDeviceSize ResourceDescriptorBufferAddressSpaceSize { get; set; }
    public VkDeviceSize DescriptorBufferAddressSpaceSize { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorBufferPropertiesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorBufferPropertiesEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (CombinedImageSamplerDescriptorSingleArray != (uint)default)
        {
            _internal.combinedImageSamplerDescriptorSingleArray = CombinedImageSamplerDescriptorSingleArray;
        }
        if (BufferlessPushDescriptors != (uint)default)
        {
            _internal.bufferlessPushDescriptors = BufferlessPushDescriptors;
        }
        if (AllowSamplerImageViewPostSubmitCreation != (uint)default)
        {
            _internal.allowSamplerImageViewPostSubmitCreation = AllowSamplerImageViewPostSubmitCreation;
        }
        if (DescriptorBufferOffsetAlignment != (ulong)default)
        {
            _internal.descriptorBufferOffsetAlignment = DescriptorBufferOffsetAlignment;
        }
        if (MaxDescriptorBufferBindings != default)
        {
            _internal.maxDescriptorBufferBindings = MaxDescriptorBufferBindings;
        }
        if (MaxResourceDescriptorBufferBindings != default)
        {
            _internal.maxResourceDescriptorBufferBindings = MaxResourceDescriptorBufferBindings;
        }
        if (MaxSamplerDescriptorBufferBindings != default)
        {
            _internal.maxSamplerDescriptorBufferBindings = MaxSamplerDescriptorBufferBindings;
        }
        if (MaxEmbeddedImmutableSamplerBindings != default)
        {
            _internal.maxEmbeddedImmutableSamplerBindings = MaxEmbeddedImmutableSamplerBindings;
        }
        if (MaxEmbeddedImmutableSamplers != default)
        {
            _internal.maxEmbeddedImmutableSamplers = MaxEmbeddedImmutableSamplers;
        }
        if (BufferCaptureReplayDescriptorDataSize != default)
        {
            _internal.bufferCaptureReplayDescriptorDataSize = BufferCaptureReplayDescriptorDataSize;
        }
        if (ImageCaptureReplayDescriptorDataSize != default)
        {
            _internal.imageCaptureReplayDescriptorDataSize = ImageCaptureReplayDescriptorDataSize;
        }
        if (ImageViewCaptureReplayDescriptorDataSize != default)
        {
            _internal.imageViewCaptureReplayDescriptorDataSize = ImageViewCaptureReplayDescriptorDataSize;
        }
        if (SamplerCaptureReplayDescriptorDataSize != default)
        {
            _internal.samplerCaptureReplayDescriptorDataSize = SamplerCaptureReplayDescriptorDataSize;
        }
        if (AccelerationStructureCaptureReplayDescriptorDataSize != default)
        {
            _internal.accelerationStructureCaptureReplayDescriptorDataSize = AccelerationStructureCaptureReplayDescriptorDataSize;
        }
        if (SamplerDescriptorSize != default)
        {
            _internal.samplerDescriptorSize = SamplerDescriptorSize;
        }
        if (CombinedImageSamplerDescriptorSize != default)
        {
            _internal.combinedImageSamplerDescriptorSize = CombinedImageSamplerDescriptorSize;
        }
        if (SampledImageDescriptorSize != default)
        {
            _internal.sampledImageDescriptorSize = SampledImageDescriptorSize;
        }
        if (StorageImageDescriptorSize != default)
        {
            _internal.storageImageDescriptorSize = StorageImageDescriptorSize;
        }
        if (UniformTexelBufferDescriptorSize != default)
        {
            _internal.uniformTexelBufferDescriptorSize = UniformTexelBufferDescriptorSize;
        }
        if (RobustUniformTexelBufferDescriptorSize != default)
        {
            _internal.robustUniformTexelBufferDescriptorSize = RobustUniformTexelBufferDescriptorSize;
        }
        if (StorageTexelBufferDescriptorSize != default)
        {
            _internal.storageTexelBufferDescriptorSize = StorageTexelBufferDescriptorSize;
        }
        if (RobustStorageTexelBufferDescriptorSize != default)
        {
            _internal.robustStorageTexelBufferDescriptorSize = RobustStorageTexelBufferDescriptorSize;
        }
        if (UniformBufferDescriptorSize != default)
        {
            _internal.uniformBufferDescriptorSize = UniformBufferDescriptorSize;
        }
        if (RobustUniformBufferDescriptorSize != default)
        {
            _internal.robustUniformBufferDescriptorSize = RobustUniformBufferDescriptorSize;
        }
        if (StorageBufferDescriptorSize != default)
        {
            _internal.storageBufferDescriptorSize = StorageBufferDescriptorSize;
        }
        if (RobustStorageBufferDescriptorSize != default)
        {
            _internal.robustStorageBufferDescriptorSize = RobustStorageBufferDescriptorSize;
        }
        if (InputAttachmentDescriptorSize != default)
        {
            _internal.inputAttachmentDescriptorSize = InputAttachmentDescriptorSize;
        }
        if (AccelerationStructureDescriptorSize != default)
        {
            _internal.accelerationStructureDescriptorSize = AccelerationStructureDescriptorSize;
        }
        if (MaxSamplerDescriptorBufferRange != (ulong)default)
        {
            _internal.maxSamplerDescriptorBufferRange = MaxSamplerDescriptorBufferRange;
        }
        if (MaxResourceDescriptorBufferRange != (ulong)default)
        {
            _internal.maxResourceDescriptorBufferRange = MaxResourceDescriptorBufferRange;
        }
        if (SamplerDescriptorBufferAddressSpaceSize != (ulong)default)
        {
            _internal.samplerDescriptorBufferAddressSpaceSize = SamplerDescriptorBufferAddressSpaceSize;
        }
        if (ResourceDescriptorBufferAddressSpaceSize != (ulong)default)
        {
            _internal.resourceDescriptorBufferAddressSpaceSize = ResourceDescriptorBufferAddressSpaceSize;
        }
        if (DescriptorBufferAddressSpaceSize != (ulong)default)
        {
            _internal.descriptorBufferAddressSpaceSize = DescriptorBufferAddressSpaceSize;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceDescriptorBufferPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorBufferPropertiesEXT p)
    {
        return new PhysicalDeviceDescriptorBufferPropertiesEXT(p);
    }

}



