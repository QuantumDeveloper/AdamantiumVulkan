// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceShaderAtomicFloat2FeaturesEXT : QBDisposableObject
{
    public PhysicalDeviceShaderAtomicFloat2FeaturesEXT()
    {
    }

    public PhysicalDeviceShaderAtomicFloat2FeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        ShaderBufferFloat16Atomics = _internal.shaderBufferFloat16Atomics;
        ShaderBufferFloat16AtomicAdd = _internal.shaderBufferFloat16AtomicAdd;
        ShaderBufferFloat16AtomicMinMax = _internal.shaderBufferFloat16AtomicMinMax;
        ShaderBufferFloat32AtomicMinMax = _internal.shaderBufferFloat32AtomicMinMax;
        ShaderBufferFloat64AtomicMinMax = _internal.shaderBufferFloat64AtomicMinMax;
        ShaderSharedFloat16Atomics = _internal.shaderSharedFloat16Atomics;
        ShaderSharedFloat16AtomicAdd = _internal.shaderSharedFloat16AtomicAdd;
        ShaderSharedFloat16AtomicMinMax = _internal.shaderSharedFloat16AtomicMinMax;
        ShaderSharedFloat32AtomicMinMax = _internal.shaderSharedFloat32AtomicMinMax;
        ShaderSharedFloat64AtomicMinMax = _internal.shaderSharedFloat64AtomicMinMax;
        ShaderImageFloat32AtomicMinMax = _internal.shaderImageFloat32AtomicMinMax;
        SparseImageFloat32AtomicMinMax = _internal.sparseImageFloat32AtomicMinMax;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 ShaderBufferFloat16Atomics { get; set; }
    public VkBool32 ShaderBufferFloat16AtomicAdd { get; set; }
    public VkBool32 ShaderBufferFloat16AtomicMinMax { get; set; }
    public VkBool32 ShaderBufferFloat32AtomicMinMax { get; set; }
    public VkBool32 ShaderBufferFloat64AtomicMinMax { get; set; }
    public VkBool32 ShaderSharedFloat16Atomics { get; set; }
    public VkBool32 ShaderSharedFloat16AtomicAdd { get; set; }
    public VkBool32 ShaderSharedFloat16AtomicMinMax { get; set; }
    public VkBool32 ShaderSharedFloat32AtomicMinMax { get; set; }
    public VkBool32 ShaderSharedFloat64AtomicMinMax { get; set; }
    public VkBool32 ShaderImageFloat32AtomicMinMax { get; set; }
    public VkBool32 SparseImageFloat32AtomicMinMax { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (ShaderBufferFloat16Atomics != (uint)default)
        {
            _internal.shaderBufferFloat16Atomics = ShaderBufferFloat16Atomics;
        }
        if (ShaderBufferFloat16AtomicAdd != (uint)default)
        {
            _internal.shaderBufferFloat16AtomicAdd = ShaderBufferFloat16AtomicAdd;
        }
        if (ShaderBufferFloat16AtomicMinMax != (uint)default)
        {
            _internal.shaderBufferFloat16AtomicMinMax = ShaderBufferFloat16AtomicMinMax;
        }
        if (ShaderBufferFloat32AtomicMinMax != (uint)default)
        {
            _internal.shaderBufferFloat32AtomicMinMax = ShaderBufferFloat32AtomicMinMax;
        }
        if (ShaderBufferFloat64AtomicMinMax != (uint)default)
        {
            _internal.shaderBufferFloat64AtomicMinMax = ShaderBufferFloat64AtomicMinMax;
        }
        if (ShaderSharedFloat16Atomics != (uint)default)
        {
            _internal.shaderSharedFloat16Atomics = ShaderSharedFloat16Atomics;
        }
        if (ShaderSharedFloat16AtomicAdd != (uint)default)
        {
            _internal.shaderSharedFloat16AtomicAdd = ShaderSharedFloat16AtomicAdd;
        }
        if (ShaderSharedFloat16AtomicMinMax != (uint)default)
        {
            _internal.shaderSharedFloat16AtomicMinMax = ShaderSharedFloat16AtomicMinMax;
        }
        if (ShaderSharedFloat32AtomicMinMax != (uint)default)
        {
            _internal.shaderSharedFloat32AtomicMinMax = ShaderSharedFloat32AtomicMinMax;
        }
        if (ShaderSharedFloat64AtomicMinMax != (uint)default)
        {
            _internal.shaderSharedFloat64AtomicMinMax = ShaderSharedFloat64AtomicMinMax;
        }
        if (ShaderImageFloat32AtomicMinMax != (uint)default)
        {
            _internal.shaderImageFloat32AtomicMinMax = ShaderImageFloat32AtomicMinMax;
        }
        if (SparseImageFloat32AtomicMinMax != (uint)default)
        {
            _internal.sparseImageFloat32AtomicMinMax = SparseImageFloat32AtomicMinMax;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceShaderAtomicFloat2FeaturesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT p)
    {
        return new PhysicalDeviceShaderAtomicFloat2FeaturesEXT(p);
    }

}



