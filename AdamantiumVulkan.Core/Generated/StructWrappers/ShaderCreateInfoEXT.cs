// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class ShaderCreateInfoEXT : QBDisposableObject
{
    private NativeStructArray<byte> _pCode;

    private MarshaledString _pName;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T> _pSetLayouts;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkPushConstantRange> _pPushConstantRanges;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkSpecializationInfo> _pSpecializationInfo;

    public ShaderCreateInfoEXT()
    {
    }

    public ShaderCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkShaderCreateInfoEXT _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        Stage = _internal.stage;
        NextStage = _internal.nextStage;
        CodeType = _internal.codeType;
        CodeSize = _internal.codeSize;
        PName = new string(_internal.pName);
        SetLayoutCount = _internal.setLayoutCount;
        PSetLayouts = new DescriptorSetLayout[_internal.setLayoutCount];
        var nativeTmpArray1 = NativeUtils.PointerToManagedArray(_internal.pSetLayouts, _internal.setLayoutCount);
        for (int i = 0; i < nativeTmpArray1.Length; ++i)
        {
            PSetLayouts[i] = new DescriptorSetLayout(nativeTmpArray1[i]);
        }
        NativeUtils.Free(_internal.pSetLayouts);
        PushConstantRangeCount = _internal.pushConstantRangeCount;
        PushConstantRanges = new PushConstantRange[_internal.pushConstantRangeCount];
        var nativeTmpArray2 = NativeUtils.PointerToManagedArray(_internal.pPushConstantRanges, _internal.pushConstantRangeCount);
        for (int i = 0; i < nativeTmpArray2.Length; ++i)
        {
            PushConstantRanges[i] = new PushConstantRange(nativeTmpArray2[i]);
        }
        NativeUtils.Free(_internal.pPushConstantRanges);
        PSpecializationInfo = new SpecializationInfo(*_internal.pSpecializationInfo);
        NativeUtils.Free(_internal.pSpecializationInfo);
    }

    public StructureType SType => StructureType.ShaderCreateInfoExt;
    public void* PNext { get; set; }
    public VkShaderCreateFlagsEXT Flags { get; set; }
    public ShaderStageFlagBits Stage { get; set; }
    public VkShaderStageFlags NextStage { get; set; }
    public ShaderCodeTypeEXT CodeType { get; set; }
    public ulong CodeSize { get; set; }
    public byte[] PCode { get; set; }
    public string PName { get; set; }
    public uint SetLayoutCount { get; set; }
    public DescriptorSetLayout[] PSetLayouts { get; set; }
    public uint PushConstantRangeCount { get; set; }
    public PushConstantRange[] PushConstantRanges { get; set; }
    public SpecializationInfo PSpecializationInfo { get; set; }

    public AdamantiumVulkan.Core.Interop.VkShaderCreateInfoEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkShaderCreateInfoEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.stage = Stage;
        _internal.nextStage = NextStage;
        _internal.codeType = CodeType;
        _internal.codeSize = CodeSize;
        _pCode.Dispose();
        if (PCode != null)
        {
            var tmpArray0 = new byte[PCode.Length];
            for (int i = 0; i < PCode.Length; ++i)
            {
                tmpArray0[i] = PCode[i];
            }
            _pCode = new NativeStructArray<byte>(tmpArray0);
            _internal.pCode = _pCode.Handle;
        }
        _pName.Dispose();
        if (PName != null)
        {
            _pName = new MarshaledString(PName, false);
            _internal.pName = (sbyte*)_pName;
        }
        _internal.setLayoutCount = SetLayoutCount;
        _pSetLayouts.Dispose();
        if (PSetLayouts != null)
        {
            var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T[PSetLayouts.Length];
            for (int i = 0; i < PSetLayouts.Length; ++i)
            {
                tmpArray1[i] = PSetLayouts[i];
            }
            _pSetLayouts = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T>(tmpArray1);
            _internal.pSetLayouts = _pSetLayouts.Handle;
        }
        _internal.pushConstantRangeCount = PushConstantRangeCount;
        _pPushConstantRanges.Dispose();
        if (PushConstantRanges != null)
        {
            var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkPushConstantRange[PushConstantRanges.Length];
            for (int i = 0; i < PushConstantRanges.Length; ++i)
            {
                tmpArray2[i] = PushConstantRanges[i].ToNative();
            }
            _pPushConstantRanges = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkPushConstantRange>(tmpArray2);
            _internal.pPushConstantRanges = _pPushConstantRanges.Handle;
        }
        _pSpecializationInfo.Dispose();
        if (PSpecializationInfo != null)
        {
            var struct0 = PSpecializationInfo.ToNative();
            _pSpecializationInfo = new NativeStruct<AdamantiumVulkan.Core.Interop.VkSpecializationInfo>(struct0);
            _internal.pSpecializationInfo = _pSpecializationInfo.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pCode.Dispose();
        _pName.Dispose();
        _pSetLayouts.Dispose();
        _pPushConstantRanges.Dispose();
        _pSpecializationInfo.Dispose();
    }


    public static implicit operator ShaderCreateInfoEXT(AdamantiumVulkan.Core.Interop.VkShaderCreateInfoEXT s)
    {
        return new ShaderCreateInfoEXT(s);
    }

}



