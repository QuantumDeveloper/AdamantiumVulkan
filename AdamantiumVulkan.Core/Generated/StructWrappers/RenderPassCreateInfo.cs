// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class RenderPassCreateInfo : QBDisposableObject
{
    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentDescription> pAttachments;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkSubpassDescription> pSubpasses;

    private NativeStructArray<AdamantiumVulkan.Core.Interop.VkSubpassDependency> pDependencies;

    public RenderPassCreateInfo()
    {
    }

    public RenderPassCreateInfo(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        AttachmentCount = _internal.attachmentCount;
        PAttachments = new AttachmentDescription[_internal.attachmentCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pAttachments, _internal.attachmentCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PAttachments[i] = new AttachmentDescription(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pAttachments);
        SubpassCount = _internal.subpassCount;
        PSubpasses = new SubpassDescription[_internal.subpassCount];
        var nativeTmpArray1 = NativeUtils.PointerToManagedArray(_internal.pSubpasses, _internal.subpassCount);
        for (int i = 0; i < nativeTmpArray1.Length; ++i)
        {
            PSubpasses[i] = new SubpassDescription(nativeTmpArray1[i]);
        }
        NativeUtils.Free(_internal.pSubpasses);
        DependencyCount = _internal.dependencyCount;
        PDependencies = new SubpassDependency[_internal.dependencyCount];
        var nativeTmpArray2 = NativeUtils.PointerToManagedArray(_internal.pDependencies, _internal.dependencyCount);
        for (int i = 0; i < nativeTmpArray2.Length; ++i)
        {
            PDependencies[i] = new SubpassDependency(nativeTmpArray2[i]);
        }
        NativeUtils.Free(_internal.pDependencies);
    }

    public StructureType SType => StructureType.RenderPassCreateInfo;
    public void* PNext { get; set; }
    public VkRenderPassCreateFlags Flags { get; set; }
    public uint AttachmentCount { get; set; }
    public AttachmentDescription[] PAttachments { get; set; }
    public uint SubpassCount { get; set; }
    public SubpassDescription[] PSubpasses { get; set; }
    public uint DependencyCount { get; set; }
    public SubpassDependency[] PDependencies { get; set; }

    public AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.attachmentCount = AttachmentCount;
        pAttachments.Dispose();
        if (PAttachments != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkAttachmentDescription[PAttachments.Length];
            for (int i = 0; i < PAttachments.Length; ++i)
            {
                tmpArray0[i] = PAttachments[i].ToNative();
            }
            pAttachments = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkAttachmentDescription>(tmpArray0);
            _internal.pAttachments = pAttachments.Handle;
        }
        _internal.subpassCount = SubpassCount;
        pSubpasses.Dispose();
        if (PSubpasses != null)
        {
            var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkSubpassDescription[PSubpasses.Length];
            for (int i = 0; i < PSubpasses.Length; ++i)
            {
                tmpArray1[i] = PSubpasses[i].ToNative();
            }
            pSubpasses = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkSubpassDescription>(tmpArray1);
            _internal.pSubpasses = pSubpasses.Handle;
        }
        _internal.dependencyCount = DependencyCount;
        pDependencies.Dispose();
        if (PDependencies != null)
        {
            var tmpArray2 = new AdamantiumVulkan.Core.Interop.VkSubpassDependency[PDependencies.Length];
            for (int i = 0; i < PDependencies.Length; ++i)
            {
                tmpArray2[i] = PDependencies[i].ToNative();
            }
            pDependencies = new NativeStructArray<AdamantiumVulkan.Core.Interop.VkSubpassDependency>(tmpArray2);
            _internal.pDependencies = pDependencies.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pAttachments.Dispose();
        pSubpasses.Dispose();
        pDependencies.Dispose();
    }


    public static implicit operator RenderPassCreateInfo(AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo r)
    {
        return new RenderPassCreateInfo(r);
    }

}



