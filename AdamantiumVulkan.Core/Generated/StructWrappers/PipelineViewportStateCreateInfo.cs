// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineViewportStateCreateInfo : QBDisposableObject
{
    private NativeStructArray<VkViewport> pViewports;

    private NativeStructArray<VkRect2D> pScissors;

    public PipelineViewportStateCreateInfo()
    {
    }

    public PipelineViewportStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        ViewportCount = _internal.viewportCount;
        PViewports = new Viewport[_internal.viewportCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pViewports, _internal.viewportCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PViewports[i] = new Viewport(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pViewports);
        ScissorCount = _internal.scissorCount;
        PScissors = new Rect2D[_internal.scissorCount];
        var nativeTmpArray1 = NativeUtils.PointerToManagedArray(_internal.pScissors, _internal.scissorCount);
        for (int i = 0; i < nativeTmpArray1.Length; ++i)
        {
            PScissors[i] = new Rect2D(nativeTmpArray1[i]);
        }
        NativeUtils.Free(_internal.pScissors);
    }

    public StructureType SType => StructureType.PipelineViewportStateCreateInfo;
    public void* PNext { get; set; }
    public VkPipelineViewportStateCreateFlags Flags { get; set; }
    public uint ViewportCount { get; set; }
    public Viewport[] PViewports { get; set; }
    public uint ScissorCount { get; set; }
    public Rect2D[] PScissors { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.viewportCount = ViewportCount;
        pViewports.Dispose();
        if (PViewports != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkViewport[PViewports.Length];
            for (int i = 0; i < PViewports.Length; ++i)
            {
                tmpArray0[i] = PViewports[i].ToNative();
            }
            pViewports = new NativeStructArray<VkViewport>(tmpArray0);
            _internal.pViewports = pViewports.Handle;
        }
        _internal.scissorCount = ScissorCount;
        pScissors.Dispose();
        if (PScissors != null)
        {
            var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkRect2D[PScissors.Length];
            for (int i = 0; i < PScissors.Length; ++i)
            {
                tmpArray1[i] = PScissors[i].ToNative();
            }
            pScissors = new NativeStructArray<VkRect2D>(tmpArray1);
            _internal.pScissors = pScissors.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pViewports.Dispose();
        pScissors.Dispose();
    }


    public static implicit operator PipelineViewportStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineViewportStateCreateInfo p)
    {
        return new PipelineViewportStateCreateInfo(p);
    }

}



