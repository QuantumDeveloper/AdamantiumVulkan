// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class SubmitInfo2 : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkSemaphoreSubmitInfo> _pWaitSemaphoreInfos;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkCommandBufferSubmitInfo> _pCommandBufferInfos;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkSemaphoreSubmitInfo> _pSignalSemaphoreInfos;

    public SubmitInfo2()
    {
    }

    public SubmitInfo2(AdamantiumVulkan.Core.Interop.VkSubmitInfo2 _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        WaitSemaphoreInfoCount = _internal.waitSemaphoreInfoCount;
        PWaitSemaphoreInfos = new SemaphoreSubmitInfo(*_internal.pWaitSemaphoreInfos);
        NativeUtils.Free(_internal.pWaitSemaphoreInfos);
        CommandBufferInfoCount = _internal.commandBufferInfoCount;
        PCommandBufferInfos = new CommandBufferSubmitInfo(*_internal.pCommandBufferInfos);
        NativeUtils.Free(_internal.pCommandBufferInfos);
        SignalSemaphoreInfoCount = _internal.signalSemaphoreInfoCount;
        PSignalSemaphoreInfos = new SemaphoreSubmitInfo(*_internal.pSignalSemaphoreInfos);
        NativeUtils.Free(_internal.pSignalSemaphoreInfos);
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkSubmitFlags Flags { get; set; }
    public uint WaitSemaphoreInfoCount { get; set; }
    public SemaphoreSubmitInfo PWaitSemaphoreInfos { get; set; }
    public uint CommandBufferInfoCount { get; set; }
    public CommandBufferSubmitInfo PCommandBufferInfos { get; set; }
    public uint SignalSemaphoreInfoCount { get; set; }
    public SemaphoreSubmitInfo PSignalSemaphoreInfos { get; set; }

    public AdamantiumVulkan.Core.Interop.VkSubmitInfo2 ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkSubmitInfo2();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (WaitSemaphoreInfoCount != default)
        {
            _internal.waitSemaphoreInfoCount = WaitSemaphoreInfoCount;
        }
        _pWaitSemaphoreInfos.Dispose();
        if (PWaitSemaphoreInfos != default)
        {
            var struct0 = PWaitSemaphoreInfos.ToNative();
            _pWaitSemaphoreInfos = new NativeStruct<AdamantiumVulkan.Core.Interop.VkSemaphoreSubmitInfo>(struct0);
            _internal.pWaitSemaphoreInfos = _pWaitSemaphoreInfos.Handle;
        }
        if (CommandBufferInfoCount != default)
        {
            _internal.commandBufferInfoCount = CommandBufferInfoCount;
        }
        _pCommandBufferInfos.Dispose();
        if (PCommandBufferInfos != default)
        {
            var struct1 = PCommandBufferInfos.ToNative();
            _pCommandBufferInfos = new NativeStruct<AdamantiumVulkan.Core.Interop.VkCommandBufferSubmitInfo>(struct1);
            _internal.pCommandBufferInfos = _pCommandBufferInfos.Handle;
        }
        if (SignalSemaphoreInfoCount != default)
        {
            _internal.signalSemaphoreInfoCount = SignalSemaphoreInfoCount;
        }
        _pSignalSemaphoreInfos.Dispose();
        if (PSignalSemaphoreInfos != default)
        {
            var struct2 = PSignalSemaphoreInfos.ToNative();
            _pSignalSemaphoreInfos = new NativeStruct<AdamantiumVulkan.Core.Interop.VkSemaphoreSubmitInfo>(struct2);
            _internal.pSignalSemaphoreInfos = _pSignalSemaphoreInfos.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pWaitSemaphoreInfos.Dispose();
        _pCommandBufferInfos.Dispose();
        _pSignalSemaphoreInfos.Dispose();
    }


    public static implicit operator SubmitInfo2(AdamantiumVulkan.Core.Interop.VkSubmitInfo2 s)
    {
        return new SubmitInfo2(s);
    }

}



