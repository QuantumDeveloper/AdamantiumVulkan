// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineVertexInputStateCreateInfo : QBDisposableObject
{
    private NativeStructArray<VkVertexInputBindingDescription> pVertexBindingDescriptions;

    private NativeStructArray<VkVertexInputAttributeDescription> pVertexAttributeDescriptions;

    public PipelineVertexInputStateCreateInfo()
    {
    }

    public PipelineVertexInputStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        VertexBindingDescriptionCount = _internal.vertexBindingDescriptionCount;
        PVertexBindingDescriptions = new VertexInputBindingDescription[_internal.vertexBindingDescriptionCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pVertexBindingDescriptions, _internal.vertexBindingDescriptionCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PVertexBindingDescriptions[i] = new VertexInputBindingDescription(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pVertexBindingDescriptions);
        VertexAttributeDescriptionCount = _internal.vertexAttributeDescriptionCount;
        PVertexAttributeDescriptions = new VertexInputAttributeDescription[_internal.vertexAttributeDescriptionCount];
        var nativeTmpArray1 = NativeUtils.PointerToManagedArray(_internal.pVertexAttributeDescriptions, _internal.vertexAttributeDescriptionCount);
        for (int i = 0; i < nativeTmpArray1.Length; ++i)
        {
            PVertexAttributeDescriptions[i] = new VertexInputAttributeDescription(nativeTmpArray1[i]);
        }
        NativeUtils.Free(_internal.pVertexAttributeDescriptions);
    }

    public StructureType SType => StructureType.PipelineVertexInputStateCreateInfo;
    public void* PNext { get; set; }
    public VkPipelineVertexInputStateCreateFlags Flags { get; set; }
    public uint VertexBindingDescriptionCount { get; set; }
    public VertexInputBindingDescription[] PVertexBindingDescriptions { get; set; }
    public uint VertexAttributeDescriptionCount { get; set; }
    public VertexInputAttributeDescription[] PVertexAttributeDescriptions { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.vertexBindingDescriptionCount = VertexBindingDescriptionCount;
        pVertexBindingDescriptions.Dispose();
        if (PVertexBindingDescriptions != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription[PVertexBindingDescriptions.Length];
            for (int i = 0; i < PVertexBindingDescriptions.Length; ++i)
            {
                tmpArray0[i] = PVertexBindingDescriptions[i].ToNative();
            }
            pVertexBindingDescriptions = new NativeStructArray<VkVertexInputBindingDescription>(tmpArray0);
            _internal.pVertexBindingDescriptions = pVertexBindingDescriptions.Handle;
        }
        _internal.vertexAttributeDescriptionCount = VertexAttributeDescriptionCount;
        pVertexAttributeDescriptions.Dispose();
        if (PVertexAttributeDescriptions != null)
        {
            var tmpArray1 = new AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription[PVertexAttributeDescriptions.Length];
            for (int i = 0; i < PVertexAttributeDescriptions.Length; ++i)
            {
                tmpArray1[i] = PVertexAttributeDescriptions[i].ToNative();
            }
            pVertexAttributeDescriptions = new NativeStructArray<VkVertexInputAttributeDescription>(tmpArray1);
            _internal.pVertexAttributeDescriptions = pVertexAttributeDescriptions.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pVertexBindingDescriptions.Dispose();
        pVertexAttributeDescriptions.Dispose();
    }


    public static implicit operator PipelineVertexInputStateCreateInfo(AdamantiumVulkan.Core.Interop.VkPipelineVertexInputStateCreateInfo p)
    {
        return new PipelineVertexInputStateCreateInfo(p);
    }

}



