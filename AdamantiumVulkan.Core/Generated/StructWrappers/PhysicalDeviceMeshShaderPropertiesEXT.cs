// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceMeshShaderPropertiesEXT : QBDisposableObject
{
    public PhysicalDeviceMeshShaderPropertiesEXT()
    {
    }

    public PhysicalDeviceMeshShaderPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        MaxTaskWorkGroupTotalCount = _internal.maxTaskWorkGroupTotalCount;
        MaxTaskWorkGroupCount = NativeUtils.PointerToManagedArray(_internal.maxTaskWorkGroupCount, 3);
        MaxTaskWorkGroupInvocations = _internal.maxTaskWorkGroupInvocations;
        MaxTaskWorkGroupSize = NativeUtils.PointerToManagedArray(_internal.maxTaskWorkGroupSize, 3);
        MaxTaskPayloadSize = _internal.maxTaskPayloadSize;
        MaxTaskSharedMemorySize = _internal.maxTaskSharedMemorySize;
        MaxTaskPayloadAndSharedMemorySize = _internal.maxTaskPayloadAndSharedMemorySize;
        MaxMeshWorkGroupTotalCount = _internal.maxMeshWorkGroupTotalCount;
        MaxMeshWorkGroupCount = NativeUtils.PointerToManagedArray(_internal.maxMeshWorkGroupCount, 3);
        MaxMeshWorkGroupInvocations = _internal.maxMeshWorkGroupInvocations;
        MaxMeshWorkGroupSize = NativeUtils.PointerToManagedArray(_internal.maxMeshWorkGroupSize, 3);
        MaxMeshSharedMemorySize = _internal.maxMeshSharedMemorySize;
        MaxMeshPayloadAndSharedMemorySize = _internal.maxMeshPayloadAndSharedMemorySize;
        MaxMeshOutputMemorySize = _internal.maxMeshOutputMemorySize;
        MaxMeshPayloadAndOutputMemorySize = _internal.maxMeshPayloadAndOutputMemorySize;
        MaxMeshOutputComponents = _internal.maxMeshOutputComponents;
        MaxMeshOutputVertices = _internal.maxMeshOutputVertices;
        MaxMeshOutputPrimitives = _internal.maxMeshOutputPrimitives;
        MaxMeshOutputLayers = _internal.maxMeshOutputLayers;
        MaxMeshMultiviewViewCount = _internal.maxMeshMultiviewViewCount;
        MeshOutputPerVertexGranularity = _internal.meshOutputPerVertexGranularity;
        MeshOutputPerPrimitiveGranularity = _internal.meshOutputPerPrimitiveGranularity;
        MaxPreferredTaskWorkGroupInvocations = _internal.maxPreferredTaskWorkGroupInvocations;
        MaxPreferredMeshWorkGroupInvocations = _internal.maxPreferredMeshWorkGroupInvocations;
        PrefersLocalInvocationVertexOutput = _internal.prefersLocalInvocationVertexOutput;
        PrefersLocalInvocationPrimitiveOutput = _internal.prefersLocalInvocationPrimitiveOutput;
        PrefersCompactVertexOutput = _internal.prefersCompactVertexOutput;
        PrefersCompactPrimitiveOutput = _internal.prefersCompactPrimitiveOutput;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint MaxTaskWorkGroupTotalCount { get; set; }
    public uint[] MaxTaskWorkGroupCount { get; set; }
    public uint MaxTaskWorkGroupInvocations { get; set; }
    public uint[] MaxTaskWorkGroupSize { get; set; }
    public uint MaxTaskPayloadSize { get; set; }
    public uint MaxTaskSharedMemorySize { get; set; }
    public uint MaxTaskPayloadAndSharedMemorySize { get; set; }
    public uint MaxMeshWorkGroupTotalCount { get; set; }
    public uint[] MaxMeshWorkGroupCount { get; set; }
    public uint MaxMeshWorkGroupInvocations { get; set; }
    public uint[] MaxMeshWorkGroupSize { get; set; }
    public uint MaxMeshSharedMemorySize { get; set; }
    public uint MaxMeshPayloadAndSharedMemorySize { get; set; }
    public uint MaxMeshOutputMemorySize { get; set; }
    public uint MaxMeshPayloadAndOutputMemorySize { get; set; }
    public uint MaxMeshOutputComponents { get; set; }
    public uint MaxMeshOutputVertices { get; set; }
    public uint MaxMeshOutputPrimitives { get; set; }
    public uint MaxMeshOutputLayers { get; set; }
    public uint MaxMeshMultiviewViewCount { get; set; }
    public uint MeshOutputPerVertexGranularity { get; set; }
    public uint MeshOutputPerPrimitiveGranularity { get; set; }
    public uint MaxPreferredTaskWorkGroupInvocations { get; set; }
    public uint MaxPreferredMeshWorkGroupInvocations { get; set; }
    public VkBool32 PrefersLocalInvocationVertexOutput { get; set; }
    public VkBool32 PrefersLocalInvocationPrimitiveOutput { get; set; }
    public VkBool32 PrefersCompactVertexOutput { get; set; }
    public VkBool32 PrefersCompactPrimitiveOutput { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (MaxTaskWorkGroupTotalCount != default)
        {
            _internal.maxTaskWorkGroupTotalCount = MaxTaskWorkGroupTotalCount;
        }
        if (MaxTaskWorkGroupCount != default)
        {
            if (MaxTaskWorkGroupCount.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxTaskWorkGroupCount), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxTaskWorkGroupCount, 3, MaxTaskWorkGroupCount);
        }
        if (MaxTaskWorkGroupInvocations != default)
        {
            _internal.maxTaskWorkGroupInvocations = MaxTaskWorkGroupInvocations;
        }
        if (MaxTaskWorkGroupSize != default)
        {
            if (MaxTaskWorkGroupSize.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxTaskWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxTaskWorkGroupSize, 3, MaxTaskWorkGroupSize);
        }
        if (MaxTaskPayloadSize != default)
        {
            _internal.maxTaskPayloadSize = MaxTaskPayloadSize;
        }
        if (MaxTaskSharedMemorySize != default)
        {
            _internal.maxTaskSharedMemorySize = MaxTaskSharedMemorySize;
        }
        if (MaxTaskPayloadAndSharedMemorySize != default)
        {
            _internal.maxTaskPayloadAndSharedMemorySize = MaxTaskPayloadAndSharedMemorySize;
        }
        if (MaxMeshWorkGroupTotalCount != default)
        {
            _internal.maxMeshWorkGroupTotalCount = MaxMeshWorkGroupTotalCount;
        }
        if (MaxMeshWorkGroupCount != default)
        {
            if (MaxMeshWorkGroupCount.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxMeshWorkGroupCount), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxMeshWorkGroupCount, 3, MaxMeshWorkGroupCount);
        }
        if (MaxMeshWorkGroupInvocations != default)
        {
            _internal.maxMeshWorkGroupInvocations = MaxMeshWorkGroupInvocations;
        }
        if (MaxMeshWorkGroupSize != default)
        {
            if (MaxMeshWorkGroupSize.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(MaxMeshWorkGroupSize), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.maxMeshWorkGroupSize, 3, MaxMeshWorkGroupSize);
        }
        if (MaxMeshSharedMemorySize != default)
        {
            _internal.maxMeshSharedMemorySize = MaxMeshSharedMemorySize;
        }
        if (MaxMeshPayloadAndSharedMemorySize != default)
        {
            _internal.maxMeshPayloadAndSharedMemorySize = MaxMeshPayloadAndSharedMemorySize;
        }
        if (MaxMeshOutputMemorySize != default)
        {
            _internal.maxMeshOutputMemorySize = MaxMeshOutputMemorySize;
        }
        if (MaxMeshPayloadAndOutputMemorySize != default)
        {
            _internal.maxMeshPayloadAndOutputMemorySize = MaxMeshPayloadAndOutputMemorySize;
        }
        if (MaxMeshOutputComponents != default)
        {
            _internal.maxMeshOutputComponents = MaxMeshOutputComponents;
        }
        if (MaxMeshOutputVertices != default)
        {
            _internal.maxMeshOutputVertices = MaxMeshOutputVertices;
        }
        if (MaxMeshOutputPrimitives != default)
        {
            _internal.maxMeshOutputPrimitives = MaxMeshOutputPrimitives;
        }
        if (MaxMeshOutputLayers != default)
        {
            _internal.maxMeshOutputLayers = MaxMeshOutputLayers;
        }
        if (MaxMeshMultiviewViewCount != default)
        {
            _internal.maxMeshMultiviewViewCount = MaxMeshMultiviewViewCount;
        }
        if (MeshOutputPerVertexGranularity != default)
        {
            _internal.meshOutputPerVertexGranularity = MeshOutputPerVertexGranularity;
        }
        if (MeshOutputPerPrimitiveGranularity != default)
        {
            _internal.meshOutputPerPrimitiveGranularity = MeshOutputPerPrimitiveGranularity;
        }
        if (MaxPreferredTaskWorkGroupInvocations != default)
        {
            _internal.maxPreferredTaskWorkGroupInvocations = MaxPreferredTaskWorkGroupInvocations;
        }
        if (MaxPreferredMeshWorkGroupInvocations != default)
        {
            _internal.maxPreferredMeshWorkGroupInvocations = MaxPreferredMeshWorkGroupInvocations;
        }
        if (PrefersLocalInvocationVertexOutput != (uint)default)
        {
            _internal.prefersLocalInvocationVertexOutput = PrefersLocalInvocationVertexOutput;
        }
        if (PrefersLocalInvocationPrimitiveOutput != (uint)default)
        {
            _internal.prefersLocalInvocationPrimitiveOutput = PrefersLocalInvocationPrimitiveOutput;
        }
        if (PrefersCompactVertexOutput != (uint)default)
        {
            _internal.prefersCompactVertexOutput = PrefersCompactVertexOutput;
        }
        if (PrefersCompactPrimitiveOutput != (uint)default)
        {
            _internal.prefersCompactPrimitiveOutput = PrefersCompactPrimitiveOutput;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceMeshShaderPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMeshShaderPropertiesEXT p)
    {
        return new PhysicalDeviceMeshShaderPropertiesEXT(p);
    }

}



