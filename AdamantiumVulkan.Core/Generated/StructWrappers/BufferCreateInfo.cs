// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class BufferCreateInfo : QBDisposableObject
{
    private NativeStruct<uint> pQueueFamilyIndices;

    public BufferCreateInfo()
    {
    }

    public BufferCreateInfo(AdamantiumVulkan.Core.Interop.VkBufferCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        Size = _internal.size;
        Usage = _internal.usage;
        SharingMode = _internal.sharingMode;
        QueueFamilyIndexCount = _internal.queueFamilyIndexCount;
        if (_internal.pQueueFamilyIndices != null)
        {
            PQueueFamilyIndices = *_internal.pQueueFamilyIndices;
            NativeUtils.Free(_internal.pQueueFamilyIndices);
        }
    }

    public StructureType SType => StructureType.BufferCreateInfo;
    public void* PNext { get; set; }
    public BufferCreateFlagBits Flags { get; set; }
    public VkDeviceSize Size { get; set; }
    public BufferUsageFlagBits Usage { get; set; }
    public SharingMode SharingMode { get; set; }
    public uint QueueFamilyIndexCount { get; set; }
    public uint? PQueueFamilyIndices { get; set; }

    public AdamantiumVulkan.Core.Interop.VkBufferCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkBufferCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.size = Size;
        _internal.usage = Usage;
        _internal.sharingMode = SharingMode;
        _internal.queueFamilyIndexCount = QueueFamilyIndexCount;
        pQueueFamilyIndices.Dispose();
        if (PQueueFamilyIndices.HasValue)
        {
            pQueueFamilyIndices = new NativeStruct<uint>(PQueueFamilyIndices.Value);
            _internal.pQueueFamilyIndices = pQueueFamilyIndices.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pQueueFamilyIndices.Dispose();
    }


    public static implicit operator BufferCreateInfo(AdamantiumVulkan.Core.Interop.VkBufferCreateInfo b)
    {
        return new BufferCreateInfo(b);
    }

}



