// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DescriptorSetVariableDescriptorCountAllocateInfo : QBDisposableObject
{
    private NativeStruct<uint> _pDescriptorCounts;

    public DescriptorSetVariableDescriptorCountAllocateInfo()
    {
    }

    public DescriptorSetVariableDescriptorCountAllocateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfo _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        DescriptorSetCount = _internal.descriptorSetCount;
        if (_internal.pDescriptorCounts != null)
        {
            PDescriptorCounts = *_internal.pDescriptorCounts;
            NativeUtils.Free(_internal.pDescriptorCounts);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint DescriptorSetCount { get; set; }
    public uint? PDescriptorCounts { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfo();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (DescriptorSetCount != default)
        {
            _internal.descriptorSetCount = DescriptorSetCount;
        }
        _pDescriptorCounts.Dispose();
        if (PDescriptorCounts.HasValue)
        {
            _pDescriptorCounts = new NativeStruct<uint>(PDescriptorCounts.Value);
            _internal.pDescriptorCounts = _pDescriptorCounts.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pDescriptorCounts.Dispose();
    }


    public static implicit operator DescriptorSetVariableDescriptorCountAllocateInfo(AdamantiumVulkan.Core.Interop.VkDescriptorSetVariableDescriptorCountAllocateInfo d)
    {
        return new DescriptorSetVariableDescriptorCountAllocateInfo(d);
    }

}



