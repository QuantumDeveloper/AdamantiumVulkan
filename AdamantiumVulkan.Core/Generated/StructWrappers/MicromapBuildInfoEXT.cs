// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class MicromapBuildInfoEXT : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkMicromapUsageEXT> pUsageCounts;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkMicromapUsageEXT> ppUsageCounts;

    public MicromapBuildInfoEXT()
    {
    }

    public MicromapBuildInfoEXT(AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Type = _internal.type;
        Flags = _internal.flags;
        Mode = _internal.mode;
        DstMicromap = new MicromapEXT(_internal.dstMicromap);
        UsageCountsCount = _internal.usageCountsCount;
        PUsageCounts = new MicromapUsageEXT(*_internal.pUsageCounts);
        NativeUtils.Free(_internal.pUsageCounts);
        Data = new DeviceOrHostAddressConstKHR(_internal.data);
        ScratchData = new DeviceOrHostAddressKHR(_internal.scratchData);
        TriangleArray = new DeviceOrHostAddressConstKHR(_internal.triangleArray);
        TriangleArrayStride = _internal.triangleArrayStride;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public MicromapTypeEXT Type { get; set; }
    public VkBuildMicromapFlagsEXT Flags { get; set; }
    public BuildMicromapModeEXT Mode { get; set; }
    public MicromapEXT DstMicromap { get; set; }
    public uint UsageCountsCount { get; set; }
    public MicromapUsageEXT PUsageCounts { get; set; }
    public DeviceOrHostAddressConstKHR Data { get; set; }
    public DeviceOrHostAddressKHR ScratchData { get; set; }
    public DeviceOrHostAddressConstKHR TriangleArray { get; set; }
    public VkDeviceSize TriangleArrayStride { get; set; }

    public AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.type = Type;
        _internal.flags = Flags;
        _internal.mode = Mode;
        _internal.dstMicromap = DstMicromap;
        _internal.usageCountsCount = UsageCountsCount;
        pUsageCounts.Dispose();
        if (PUsageCounts != null)
        {
            var struct0 = PUsageCounts.ToNative();
            pUsageCounts = new NativeStruct<AdamantiumVulkan.Core.Interop.VkMicromapUsageEXT>(struct0);
            _internal.pUsageCounts = pUsageCounts.Handle;
        }
        if (Data != null)
        {
            _internal.data = Data.ToNative();
        }
        if (ScratchData != null)
        {
            _internal.scratchData = ScratchData.ToNative();
        }
        if (TriangleArray != null)
        {
            _internal.triangleArray = TriangleArray.ToNative();
        }
        _internal.triangleArrayStride = TriangleArrayStride;
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pUsageCounts.Dispose();
        ppUsageCounts.Dispose();
    }


    public static implicit operator MicromapBuildInfoEXT(AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT m)
    {
        return new MicromapBuildInfoEXT(m);
    }

}



