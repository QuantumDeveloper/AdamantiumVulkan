// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class DeviceCreateInfo : QBDisposableObject
{
    private NativeStructArray<VkDeviceQueueCreateInfo> pQueueCreateInfos;

    private MarshaledStringArray ppEnabledLayerNames;

    private MarshaledStringArray ppEnabledExtensionNames;

    private NativeStruct<VkPhysicalDeviceFeatures> pEnabledFeatures;

    public DeviceCreateInfo()
    {
    }

    public DeviceCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        QueueCreateInfoCount = _internal.queueCreateInfoCount;
        PQueueCreateInfos = new DeviceQueueCreateInfo[_internal.queueCreateInfoCount];
        var nativeTmpArray0 = NativeUtils.PointerToManagedArray(_internal.pQueueCreateInfos, _internal.queueCreateInfoCount);
        for (int i = 0; i < nativeTmpArray0.Length; ++i)
        {
            PQueueCreateInfos[i] = new DeviceQueueCreateInfo(nativeTmpArray0[i]);
        }
        NativeUtils.Free(_internal.pQueueCreateInfos);
        EnabledLayerCount = _internal.enabledLayerCount;
        PEnabledLayerNames = NativeUtils.PointerToStringArray(_internal.ppEnabledLayerNames, (uint)_internal.enabledLayerCount);
        EnabledExtensionCount = _internal.enabledExtensionCount;
        PEnabledExtensionNames = NativeUtils.PointerToStringArray(_internal.ppEnabledExtensionNames, (uint)_internal.enabledExtensionCount);
        PEnabledFeatures = new PhysicalDeviceFeatures(*_internal.pEnabledFeatures);
        NativeUtils.Free(_internal.pEnabledFeatures);
    }

    public StructureType SType => StructureType.DeviceCreateInfo;
    public void* PNext { get; set; }
    public VkDeviceCreateFlags Flags { get; set; }
    public uint QueueCreateInfoCount { get; set; }
    public DeviceQueueCreateInfo[] PQueueCreateInfos { get; set; }
    public uint EnabledLayerCount { get; set; }
    public string[] PEnabledLayerNames { get; set; }
    public uint EnabledExtensionCount { get; set; }
    public string[] PEnabledExtensionNames { get; set; }
    public PhysicalDeviceFeatures PEnabledFeatures { get; set; }

    public AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.flags = Flags;
        _internal.queueCreateInfoCount = QueueCreateInfoCount;
        pQueueCreateInfos.Dispose();
        if (PQueueCreateInfos != null)
        {
            var tmpArray0 = new AdamantiumVulkan.Core.Interop.VkDeviceQueueCreateInfo[PQueueCreateInfos.Length];
            for (int i = 0; i < PQueueCreateInfos.Length; ++i)
            {
                tmpArray0[i] = PQueueCreateInfos[i].ToNative();
            }
            pQueueCreateInfos = new NativeStructArray<VkDeviceQueueCreateInfo>(tmpArray0);
            _internal.pQueueCreateInfos = pQueueCreateInfos.Handle;
        }
        _internal.enabledLayerCount = EnabledLayerCount;
        ppEnabledLayerNames.Dispose();
        if (PEnabledLayerNames != null)
        {
            ppEnabledLayerNames = new MarshaledStringArray(PEnabledLayerNames, false);
            _internal.ppEnabledLayerNames = (sbyte**)NativeUtils.GetPointerToStringArray((uint)PEnabledLayerNames.Length, false);
            ppEnabledLayerNames.Fill(_internal.ppEnabledLayerNames);
        }
        _internal.enabledExtensionCount = EnabledExtensionCount;
        ppEnabledExtensionNames.Dispose();
        if (PEnabledExtensionNames != null)
        {
            ppEnabledExtensionNames = new MarshaledStringArray(PEnabledExtensionNames, false);
            _internal.ppEnabledExtensionNames = (sbyte**)NativeUtils.GetPointerToStringArray((uint)PEnabledExtensionNames.Length, false);
            ppEnabledExtensionNames.Fill(_internal.ppEnabledExtensionNames);
        }
        pEnabledFeatures.Dispose();
        if (PEnabledFeatures != null)
        {
            var struct0 = PEnabledFeatures.ToNative();
            pEnabledFeatures = new NativeStruct<VkPhysicalDeviceFeatures>(struct0);
            _internal.pEnabledFeatures = pEnabledFeatures.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pQueueCreateInfos.Dispose();
        ppEnabledLayerNames.Dispose();
        ppEnabledExtensionNames.Dispose();
        pEnabledFeatures.Dispose();
    }


    public static implicit operator DeviceCreateInfo(AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo d)
    {
        return new DeviceCreateInfo(d);
    }

}



