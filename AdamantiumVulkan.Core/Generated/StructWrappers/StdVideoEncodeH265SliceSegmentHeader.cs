// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265SliceSegmentHeader : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable> _pWeightTable;

    public StdVideoEncodeH265SliceSegmentHeader()
    {
    }

    public StdVideoEncodeH265SliceSegmentHeader(AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeader _internal)
    {
        Flags = new StdVideoEncodeH265SliceSegmentHeaderFlags(_internal.flags);
        Slice_type = _internal.slice_type;
        Slice_segment_address = _internal.slice_segment_address;
        Collocated_ref_idx = _internal.collocated_ref_idx;
        MaxNumMergeCand = _internal.MaxNumMergeCand;
        Slice_cb_qp_offset = _internal.slice_cb_qp_offset;
        Slice_cr_qp_offset = _internal.slice_cr_qp_offset;
        Slice_beta_offset_div2 = _internal.slice_beta_offset_div2;
        Slice_tc_offset_div2 = _internal.slice_tc_offset_div2;
        Slice_act_y_qp_offset = _internal.slice_act_y_qp_offset;
        Slice_act_cb_qp_offset = _internal.slice_act_cb_qp_offset;
        Slice_act_cr_qp_offset = _internal.slice_act_cr_qp_offset;
        Slice_qp_delta = _internal.slice_qp_delta;
        Reserved1 = _internal.reserved1;
        PWeightTable = new StdVideoEncodeH265WeightTable(*_internal.pWeightTable);
        NativeUtils.Free(_internal.pWeightTable);
    }

    public StdVideoEncodeH265SliceSegmentHeaderFlags Flags { get; set; }
    public StdVideoH265SliceType Slice_type { get; set; }
    public uint Slice_segment_address { get; set; }
    public byte Collocated_ref_idx { get; set; }
    public byte MaxNumMergeCand { get; set; }
    public sbyte Slice_cb_qp_offset { get; set; }
    public sbyte Slice_cr_qp_offset { get; set; }
    public sbyte Slice_beta_offset_div2 { get; set; }
    public sbyte Slice_tc_offset_div2 { get; set; }
    public sbyte Slice_act_y_qp_offset { get; set; }
    public sbyte Slice_act_cb_qp_offset { get; set; }
    public sbyte Slice_act_cr_qp_offset { get; set; }
    public sbyte Slice_qp_delta { get; set; }
    public ushort Reserved1 { get; set; }
    public StdVideoEncodeH265WeightTable PWeightTable { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeader ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeader();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Slice_type != default)
        {
            _internal.slice_type = Slice_type;
        }
        if (Slice_segment_address != default)
        {
            _internal.slice_segment_address = Slice_segment_address;
        }
        if (Collocated_ref_idx != default)
        {
            _internal.collocated_ref_idx = Collocated_ref_idx;
        }
        if (MaxNumMergeCand != default)
        {
            _internal.MaxNumMergeCand = MaxNumMergeCand;
        }
        if (Slice_cb_qp_offset != default)
        {
            _internal.slice_cb_qp_offset = Slice_cb_qp_offset;
        }
        if (Slice_cr_qp_offset != default)
        {
            _internal.slice_cr_qp_offset = Slice_cr_qp_offset;
        }
        if (Slice_beta_offset_div2 != default)
        {
            _internal.slice_beta_offset_div2 = Slice_beta_offset_div2;
        }
        if (Slice_tc_offset_div2 != default)
        {
            _internal.slice_tc_offset_div2 = Slice_tc_offset_div2;
        }
        if (Slice_act_y_qp_offset != default)
        {
            _internal.slice_act_y_qp_offset = Slice_act_y_qp_offset;
        }
        if (Slice_act_cb_qp_offset != default)
        {
            _internal.slice_act_cb_qp_offset = Slice_act_cb_qp_offset;
        }
        if (Slice_act_cr_qp_offset != default)
        {
            _internal.slice_act_cr_qp_offset = Slice_act_cr_qp_offset;
        }
        if (Slice_qp_delta != default)
        {
            _internal.slice_qp_delta = Slice_qp_delta;
        }
        if (Reserved1 != default)
        {
            _internal.reserved1 = Reserved1;
        }
        _pWeightTable.Dispose();
        if (PWeightTable != default)
        {
            var struct0 = PWeightTable.ToNative();
            _pWeightTable = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH265WeightTable>(struct0);
            _internal.pWeightTable = _pWeightTable.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pWeightTable.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoEncodeH265SliceSegmentHeader(AdamantiumVulkan.Interop.StdVideoEncodeH265SliceSegmentHeader s)
    {
        return new StdVideoEncodeH265SliceSegmentHeader(s);
    }

}



