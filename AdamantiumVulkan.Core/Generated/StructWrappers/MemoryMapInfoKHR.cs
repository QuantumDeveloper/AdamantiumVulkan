// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class MemoryMapInfoKHR : QBDisposableObject
{
    public MemoryMapInfoKHR()
    {
    }

    public MemoryMapInfoKHR(AdamantiumVulkan.Core.Interop.VkMemoryMapInfoKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        Flags = _internal.flags;
        Memory = new DeviceMemory(_internal.memory);
        Offset = _internal.offset;
        Size = _internal.size;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkMemoryMapFlags Flags { get; set; }
    public DeviceMemory Memory { get; set; }
    public VkDeviceSize Offset { get; set; }
    public VkDeviceSize Size { get; set; }

    public AdamantiumVulkan.Core.Interop.VkMemoryMapInfoKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkMemoryMapInfoKHR();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (Memory != default)
        {
            _internal.memory = Memory;
        }
        if (Offset != (ulong)default)
        {
            _internal.offset = Offset;
        }
        if (Size != (ulong)default)
        {
            _internal.size = Size;
        }
        return _internal;
    }

    public static implicit operator MemoryMapInfoKHR(AdamantiumVulkan.Core.Interop.VkMemoryMapInfoKHR m)
    {
        return new MemoryMapInfoKHR(m);
    }

}



