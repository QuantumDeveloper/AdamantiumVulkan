// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoDecodeAV1PictureInfo : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1TileInfo> _pTileInfo;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1Quantization> _pQuantization;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1Segmentation> _pSegmentation;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1LoopFilter> _pLoopFilter;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1CDEF> _pCDEF;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1LoopRestoration> _pLoopRestoration;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1GlobalMotion> _pGlobalMotion;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1FilmGrain> _pFilmGrain;

    public StdVideoDecodeAV1PictureInfo()
    {
    }

    public StdVideoDecodeAV1PictureInfo(AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo _internal)
    {
        Flags = new StdVideoDecodeAV1PictureInfoFlags(_internal.flags);
        Frame_type = _internal.frame_type;
        Current_frame_id = _internal.current_frame_id;
        OrderHint = _internal.OrderHint;
        Primary_ref_frame = _internal.primary_ref_frame;
        Refresh_frame_flags = _internal.refresh_frame_flags;
        Reserved1 = _internal.reserved1;
        Interpolation_filter = _internal.interpolation_filter;
        TxMode = _internal.TxMode;
        Delta_q_res = _internal.delta_q_res;
        Delta_lf_res = _internal.delta_lf_res;
        SkipModeFrame = NativeUtils.PointerToManagedArray(_internal.SkipModeFrame, 2);
        Coded_denom = _internal.coded_denom;
        Reserved2 = NativeUtils.PointerToManagedArray(_internal.reserved2, 3);
        OrderHints = NativeUtils.PointerToManagedArray(_internal.OrderHints, 8);
        ExpectedFrameId = NativeUtils.PointerToManagedArray(_internal.expectedFrameId, 8);
        PTileInfo = new StdVideoAV1TileInfo(*_internal.pTileInfo);
        NativeUtils.Free(_internal.pTileInfo);
        PQuantization = new StdVideoAV1Quantization(*_internal.pQuantization);
        NativeUtils.Free(_internal.pQuantization);
        PSegmentation = new StdVideoAV1Segmentation(*_internal.pSegmentation);
        NativeUtils.Free(_internal.pSegmentation);
        PLoopFilter = new StdVideoAV1LoopFilter(*_internal.pLoopFilter);
        NativeUtils.Free(_internal.pLoopFilter);
        PCDEF = new StdVideoAV1CDEF(*_internal.pCDEF);
        NativeUtils.Free(_internal.pCDEF);
        PLoopRestoration = new StdVideoAV1LoopRestoration(*_internal.pLoopRestoration);
        NativeUtils.Free(_internal.pLoopRestoration);
        PGlobalMotion = new StdVideoAV1GlobalMotion(*_internal.pGlobalMotion);
        NativeUtils.Free(_internal.pGlobalMotion);
        PFilmGrain = new StdVideoAV1FilmGrain(*_internal.pFilmGrain);
        NativeUtils.Free(_internal.pFilmGrain);
    }

    public StdVideoDecodeAV1PictureInfoFlags Flags { get; set; }
    public StdVideoAV1FrameType Frame_type { get; set; }
    public uint Current_frame_id { get; set; }
    public byte OrderHint { get; set; }
    public byte Primary_ref_frame { get; set; }
    public byte Refresh_frame_flags { get; set; }
    public byte Reserved1 { get; set; }
    public StdVideoAV1InterpolationFilter Interpolation_filter { get; set; }
    public StdVideoAV1TxMode TxMode { get; set; }
    public byte Delta_q_res { get; set; }
    public byte Delta_lf_res { get; set; }
    public byte[] SkipModeFrame { get; set; }
    public byte Coded_denom { get; set; }
    public byte[] Reserved2 { get; set; }
    public byte[] OrderHints { get; set; }
    public uint[] ExpectedFrameId { get; set; }
    public StdVideoAV1TileInfo PTileInfo { get; set; }
    public StdVideoAV1Quantization PQuantization { get; set; }
    public StdVideoAV1Segmentation PSegmentation { get; set; }
    public StdVideoAV1LoopFilter PLoopFilter { get; set; }
    public StdVideoAV1CDEF PCDEF { get; set; }
    public StdVideoAV1LoopRestoration PLoopRestoration { get; set; }
    public StdVideoAV1GlobalMotion PGlobalMotion { get; set; }
    public StdVideoAV1FilmGrain PFilmGrain { get; set; }

    public AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo();
        if (Flags != default)
        {
            _internal.flags = Flags.ToNative();
        }
        if (Frame_type != default)
        {
            _internal.frame_type = Frame_type;
        }
        if (Current_frame_id != default)
        {
            _internal.current_frame_id = Current_frame_id;
        }
        if (OrderHint != default)
        {
            _internal.OrderHint = OrderHint;
        }
        if (Primary_ref_frame != default)
        {
            _internal.primary_ref_frame = Primary_ref_frame;
        }
        if (Refresh_frame_flags != default)
        {
            _internal.refresh_frame_flags = Refresh_frame_flags;
        }
        if (Reserved1 != default)
        {
            _internal.reserved1 = Reserved1;
        }
        if (Interpolation_filter != default)
        {
            _internal.interpolation_filter = Interpolation_filter;
        }
        if (TxMode != default)
        {
            _internal.TxMode = TxMode;
        }
        if (Delta_q_res != default)
        {
            _internal.delta_q_res = Delta_q_res;
        }
        if (Delta_lf_res != default)
        {
            _internal.delta_lf_res = Delta_lf_res;
        }
        if (SkipModeFrame != default)
        {
            if (SkipModeFrame.Length > 2)
                throw new System.ArgumentOutOfRangeException(nameof(SkipModeFrame), "Array is out of bounds. Size should not be more than 2");

            NativeUtils.PrimitiveToFixedArray(_internal.SkipModeFrame, 2, SkipModeFrame);
        }
        if (Coded_denom != default)
        {
            _internal.coded_denom = Coded_denom;
        }
        if (Reserved2 != default)
        {
            if (Reserved2.Length > 3)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved2), "Array is out of bounds. Size should not be more than 3");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved2, 3, Reserved2);
        }
        if (OrderHints != default)
        {
            if (OrderHints.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(OrderHints), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.OrderHints, 8, OrderHints);
        }
        if (ExpectedFrameId != default)
        {
            if (ExpectedFrameId.Length > 8)
                throw new System.ArgumentOutOfRangeException(nameof(ExpectedFrameId), "Array is out of bounds. Size should not be more than 8");

            NativeUtils.PrimitiveToFixedArray(_internal.expectedFrameId, 8, ExpectedFrameId);
        }
        _pTileInfo.Dispose();
        if (PTileInfo != default)
        {
            var struct0 = PTileInfo.ToNative();
            _pTileInfo = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1TileInfo>(struct0);
            _internal.pTileInfo = _pTileInfo.Handle;
        }
        _pQuantization.Dispose();
        if (PQuantization != default)
        {
            var struct1 = PQuantization.ToNative();
            _pQuantization = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1Quantization>(struct1);
            _internal.pQuantization = _pQuantization.Handle;
        }
        _pSegmentation.Dispose();
        if (PSegmentation != default)
        {
            var struct2 = PSegmentation.ToNative();
            _pSegmentation = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1Segmentation>(struct2);
            _internal.pSegmentation = _pSegmentation.Handle;
        }
        _pLoopFilter.Dispose();
        if (PLoopFilter != default)
        {
            var struct3 = PLoopFilter.ToNative();
            _pLoopFilter = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1LoopFilter>(struct3);
            _internal.pLoopFilter = _pLoopFilter.Handle;
        }
        _pCDEF.Dispose();
        if (PCDEF != default)
        {
            var struct4 = PCDEF.ToNative();
            _pCDEF = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1CDEF>(struct4);
            _internal.pCDEF = _pCDEF.Handle;
        }
        _pLoopRestoration.Dispose();
        if (PLoopRestoration != default)
        {
            var struct5 = PLoopRestoration.ToNative();
            _pLoopRestoration = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1LoopRestoration>(struct5);
            _internal.pLoopRestoration = _pLoopRestoration.Handle;
        }
        _pGlobalMotion.Dispose();
        if (PGlobalMotion != default)
        {
            var struct6 = PGlobalMotion.ToNative();
            _pGlobalMotion = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1GlobalMotion>(struct6);
            _internal.pGlobalMotion = _pGlobalMotion.Handle;
        }
        _pFilmGrain.Dispose();
        if (PFilmGrain != default)
        {
            var struct7 = PFilmGrain.ToNative();
            _pFilmGrain = new NativeStruct<AdamantiumVulkan.Interop.StdVideoAV1FilmGrain>(struct7);
            _internal.pFilmGrain = _pFilmGrain.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pTileInfo.Dispose();
        _pQuantization.Dispose();
        _pSegmentation.Dispose();
        _pLoopFilter.Dispose();
        _pCDEF.Dispose();
        _pLoopRestoration.Dispose();
        _pGlobalMotion.Dispose();
        _pFilmGrain.Dispose();
        Flags?.Dispose();
    }


    public static implicit operator StdVideoDecodeAV1PictureInfo(AdamantiumVulkan.Interop.StdVideoDecodeAV1PictureInfo s)
    {
        return new StdVideoDecodeAV1PictureInfo(s);
    }

}



