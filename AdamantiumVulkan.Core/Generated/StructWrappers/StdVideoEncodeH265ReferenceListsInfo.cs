// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH265ReferenceListsInfo
{
    public StdVideoEncodeH265ReferenceListsInfo()
    {
    }

    public StdVideoEncodeH265ReferenceListsInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo _internal)
    {
        Flags = new StdVideoEncodeH265ReferenceListsInfoFlags(_internal.flags);
        Num_ref_idx_l0_active_minus1 = _internal.num_ref_idx_l0_active_minus1;
        Num_ref_idx_l1_active_minus1 = _internal.num_ref_idx_l1_active_minus1;
        RefPicList0 = NativeUtils.PointerToManagedArray(_internal.RefPicList0, 15);
        RefPicList1 = NativeUtils.PointerToManagedArray(_internal.RefPicList1, 15);
        List_entry_l0 = NativeUtils.PointerToManagedArray(_internal.list_entry_l0, 15);
        List_entry_l1 = NativeUtils.PointerToManagedArray(_internal.list_entry_l1, 15);
    }

    public StdVideoEncodeH265ReferenceListsInfoFlags Flags { get; set; }
    public byte Num_ref_idx_l0_active_minus1 { get; set; }
    public byte Num_ref_idx_l1_active_minus1 { get; set; }
    public byte[] RefPicList0 { get; set; }
    public byte[] RefPicList1 { get; set; }
    public byte[] List_entry_l0 { get; set; }
    public byte[] List_entry_l1 { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.num_ref_idx_l0_active_minus1 = Num_ref_idx_l0_active_minus1;
        _internal.num_ref_idx_l1_active_minus1 = Num_ref_idx_l1_active_minus1;
        if(RefPicList0 != null)
        {
            if (RefPicList0.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicList0), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicList0, 15, RefPicList0);
        }
        if(RefPicList1 != null)
        {
            if (RefPicList1.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicList1), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicList1, 15, RefPicList1);
        }
        if(List_entry_l0 != null)
        {
            if (List_entry_l0.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(List_entry_l0), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.PrimitiveToFixedArray(_internal.list_entry_l0, 15, List_entry_l0);
        }
        if(List_entry_l1 != null)
        {
            if (List_entry_l1.Length > 15)
                throw new System.ArgumentOutOfRangeException(nameof(List_entry_l1), "Array is out of bounds. Size should not be more than 15");

            NativeUtils.PrimitiveToFixedArray(_internal.list_entry_l1, 15, List_entry_l1);
        }
        return _internal;
    }

    public static implicit operator StdVideoEncodeH265ReferenceListsInfo(AdamantiumVulkan.Interop.StdVideoEncodeH265ReferenceListsInfo s)
    {
        return new StdVideoEncodeH265ReferenceListsInfo(s);
    }

}



