// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceSampleLocationsPropertiesEXT : QBDisposableObject
{
    public PhysicalDeviceSampleLocationsPropertiesEXT()
    {
    }

    public PhysicalDeviceSampleLocationsPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT _internal)
    {
        PNext = _internal.pNext;
        SampleLocationSampleCounts = _internal.sampleLocationSampleCounts;
        MaxSampleLocationGridSize = new Extent2D(_internal.maxSampleLocationGridSize);
        SampleLocationCoordinateRange = NativeUtils.PointerToManagedArray(_internal.sampleLocationCoordinateRange, 2);
        SampleLocationSubPixelBits = _internal.sampleLocationSubPixelBits;
        VariableSampleLocations = _internal.variableSampleLocations;
    }

    public StructureType SType => StructureType.PhysicalDeviceSampleLocationsPropertiesExt;
    public void* PNext { get; set; }
    public VkSampleCountFlags SampleLocationSampleCounts { get; set; }
    public Extent2D MaxSampleLocationGridSize { get; set; }
    public float[] SampleLocationCoordinateRange { get; set; }
    public uint SampleLocationSubPixelBits { get; set; }
    public VkBool32 VariableSampleLocations { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (SampleLocationSampleCounts != (uint)default)
        {
            _internal.sampleLocationSampleCounts = SampleLocationSampleCounts;
        }
        if (MaxSampleLocationGridSize != default)
        {
            _internal.maxSampleLocationGridSize = MaxSampleLocationGridSize.ToNative();
        }
        if (SampleLocationCoordinateRange != default)
        {
            if (SampleLocationCoordinateRange.Length > 2)
                throw new System.ArgumentOutOfRangeException(nameof(SampleLocationCoordinateRange), "Array is out of bounds. Size should not be more than 2");

            NativeUtils.PrimitiveToFixedArray(_internal.sampleLocationCoordinateRange, 2, SampleLocationCoordinateRange);
        }
        if (SampleLocationSubPixelBits != default)
        {
            _internal.sampleLocationSubPixelBits = SampleLocationSubPixelBits;
        }
        if (VariableSampleLocations != (uint)default)
        {
            _internal.variableSampleLocations = VariableSampleLocations;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        MaxSampleLocationGridSize?.Dispose();
    }


    public static implicit operator PhysicalDeviceSampleLocationsPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSampleLocationsPropertiesEXT p)
    {
        return new PhysicalDeviceSampleLocationsPropertiesEXT(p);
    }

}



