// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoH265SpsFlags
{
    public StdVideoH265SpsFlags()
    {
    }

    public StdVideoH265SpsFlags(AdamantiumVulkan.Interop.StdVideoH265SpsFlags _internal)
    {
        Sps_temporal_id_nesting_flag = _internal.sps_temporal_id_nesting_flag;
        Separate_colour_plane_flag = _internal.separate_colour_plane_flag;
        Conformance_window_flag = _internal.conformance_window_flag;
        Sps_sub_layer_ordering_info_present_flag = _internal.sps_sub_layer_ordering_info_present_flag;
        Scaling_list_enabled_flag = _internal.scaling_list_enabled_flag;
        Sps_scaling_list_data_present_flag = _internal.sps_scaling_list_data_present_flag;
        Amp_enabled_flag = _internal.amp_enabled_flag;
        Sample_adaptive_offset_enabled_flag = _internal.sample_adaptive_offset_enabled_flag;
        Pcm_enabled_flag = _internal.pcm_enabled_flag;
        Pcm_loop_filter_disabled_flag = _internal.pcm_loop_filter_disabled_flag;
        Long_term_ref_pics_present_flag = _internal.long_term_ref_pics_present_flag;
        Sps_temporal_mvp_enabled_flag = _internal.sps_temporal_mvp_enabled_flag;
        Strong_intra_smoothing_enabled_flag = _internal.strong_intra_smoothing_enabled_flag;
        Vui_parameters_present_flag = _internal.vui_parameters_present_flag;
        Sps_extension_present_flag = _internal.sps_extension_present_flag;
        Sps_range_extension_flag = _internal.sps_range_extension_flag;
        Transform_skip_rotation_enabled_flag = _internal.transform_skip_rotation_enabled_flag;
        Transform_skip_context_enabled_flag = _internal.transform_skip_context_enabled_flag;
        Implicit_rdpcm_enabled_flag = _internal.implicit_rdpcm_enabled_flag;
        Explicit_rdpcm_enabled_flag = _internal.explicit_rdpcm_enabled_flag;
        Extended_precision_processing_flag = _internal.extended_precision_processing_flag;
        Intra_smoothing_disabled_flag = _internal.intra_smoothing_disabled_flag;
        High_precision_offsets_enabled_flag = _internal.high_precision_offsets_enabled_flag;
        Persistent_rice_adaptation_enabled_flag = _internal.persistent_rice_adaptation_enabled_flag;
        Cabac_bypass_alignment_enabled_flag = _internal.cabac_bypass_alignment_enabled_flag;
        Sps_scc_extension_flag = _internal.sps_scc_extension_flag;
        Sps_curr_pic_ref_enabled_flag = _internal.sps_curr_pic_ref_enabled_flag;
        Palette_mode_enabled_flag = _internal.palette_mode_enabled_flag;
        Sps_palette_predictor_initializers_present_flag = _internal.sps_palette_predictor_initializers_present_flag;
        Intra_boundary_filtering_disabled_flag = _internal.intra_boundary_filtering_disabled_flag;
    }

    public uint Sps_temporal_id_nesting_flag { get; set; }
    public uint Separate_colour_plane_flag { get; set; }
    public uint Conformance_window_flag { get; set; }
    public uint Sps_sub_layer_ordering_info_present_flag { get; set; }
    public uint Scaling_list_enabled_flag { get; set; }
    public uint Sps_scaling_list_data_present_flag { get; set; }
    public uint Amp_enabled_flag { get; set; }
    public uint Sample_adaptive_offset_enabled_flag { get; set; }
    public uint Pcm_enabled_flag { get; set; }
    public uint Pcm_loop_filter_disabled_flag { get; set; }
    public uint Long_term_ref_pics_present_flag { get; set; }
    public uint Sps_temporal_mvp_enabled_flag { get; set; }
    public uint Strong_intra_smoothing_enabled_flag { get; set; }
    public uint Vui_parameters_present_flag { get; set; }
    public uint Sps_extension_present_flag { get; set; }
    public uint Sps_range_extension_flag { get; set; }
    public uint Transform_skip_rotation_enabled_flag { get; set; }
    public uint Transform_skip_context_enabled_flag { get; set; }
    public uint Implicit_rdpcm_enabled_flag { get; set; }
    public uint Explicit_rdpcm_enabled_flag { get; set; }
    public uint Extended_precision_processing_flag { get; set; }
    public uint Intra_smoothing_disabled_flag { get; set; }
    public uint High_precision_offsets_enabled_flag { get; set; }
    public uint Persistent_rice_adaptation_enabled_flag { get; set; }
    public uint Cabac_bypass_alignment_enabled_flag { get; set; }
    public uint Sps_scc_extension_flag { get; set; }
    public uint Sps_curr_pic_ref_enabled_flag { get; set; }
    public uint Palette_mode_enabled_flag { get; set; }
    public uint Sps_palette_predictor_initializers_present_flag { get; set; }
    public uint Intra_boundary_filtering_disabled_flag { get; set; }

    public AdamantiumVulkan.Interop.StdVideoH265SpsFlags ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoH265SpsFlags();
        _internal.sps_temporal_id_nesting_flag = Sps_temporal_id_nesting_flag;
        _internal.separate_colour_plane_flag = Separate_colour_plane_flag;
        _internal.conformance_window_flag = Conformance_window_flag;
        _internal.sps_sub_layer_ordering_info_present_flag = Sps_sub_layer_ordering_info_present_flag;
        _internal.scaling_list_enabled_flag = Scaling_list_enabled_flag;
        _internal.sps_scaling_list_data_present_flag = Sps_scaling_list_data_present_flag;
        _internal.amp_enabled_flag = Amp_enabled_flag;
        _internal.sample_adaptive_offset_enabled_flag = Sample_adaptive_offset_enabled_flag;
        _internal.pcm_enabled_flag = Pcm_enabled_flag;
        _internal.pcm_loop_filter_disabled_flag = Pcm_loop_filter_disabled_flag;
        _internal.long_term_ref_pics_present_flag = Long_term_ref_pics_present_flag;
        _internal.sps_temporal_mvp_enabled_flag = Sps_temporal_mvp_enabled_flag;
        _internal.strong_intra_smoothing_enabled_flag = Strong_intra_smoothing_enabled_flag;
        _internal.vui_parameters_present_flag = Vui_parameters_present_flag;
        _internal.sps_extension_present_flag = Sps_extension_present_flag;
        _internal.sps_range_extension_flag = Sps_range_extension_flag;
        _internal.transform_skip_rotation_enabled_flag = Transform_skip_rotation_enabled_flag;
        _internal.transform_skip_context_enabled_flag = Transform_skip_context_enabled_flag;
        _internal.implicit_rdpcm_enabled_flag = Implicit_rdpcm_enabled_flag;
        _internal.explicit_rdpcm_enabled_flag = Explicit_rdpcm_enabled_flag;
        _internal.extended_precision_processing_flag = Extended_precision_processing_flag;
        _internal.intra_smoothing_disabled_flag = Intra_smoothing_disabled_flag;
        _internal.high_precision_offsets_enabled_flag = High_precision_offsets_enabled_flag;
        _internal.persistent_rice_adaptation_enabled_flag = Persistent_rice_adaptation_enabled_flag;
        _internal.cabac_bypass_alignment_enabled_flag = Cabac_bypass_alignment_enabled_flag;
        _internal.sps_scc_extension_flag = Sps_scc_extension_flag;
        _internal.sps_curr_pic_ref_enabled_flag = Sps_curr_pic_ref_enabled_flag;
        _internal.palette_mode_enabled_flag = Palette_mode_enabled_flag;
        _internal.sps_palette_predictor_initializers_present_flag = Sps_palette_predictor_initializers_present_flag;
        _internal.intra_boundary_filtering_disabled_flag = Intra_boundary_filtering_disabled_flag;
        return _internal;
    }

    public static implicit operator StdVideoH265SpsFlags(AdamantiumVulkan.Interop.StdVideoH265SpsFlags s)
    {
        return new StdVideoH265SpsFlags(s);
    }

}



