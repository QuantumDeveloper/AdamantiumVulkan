// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PhysicalDeviceDescriptorIndexingFeatures : QBDisposableObject
{
    public PhysicalDeviceDescriptorIndexingFeatures()
    {
    }

    public PhysicalDeviceDescriptorIndexingFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeatures _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        ShaderInputAttachmentArrayDynamicIndexing = _internal.shaderInputAttachmentArrayDynamicIndexing;
        ShaderUniformTexelBufferArrayDynamicIndexing = _internal.shaderUniformTexelBufferArrayDynamicIndexing;
        ShaderStorageTexelBufferArrayDynamicIndexing = _internal.shaderStorageTexelBufferArrayDynamicIndexing;
        ShaderUniformBufferArrayNonUniformIndexing = _internal.shaderUniformBufferArrayNonUniformIndexing;
        ShaderSampledImageArrayNonUniformIndexing = _internal.shaderSampledImageArrayNonUniformIndexing;
        ShaderStorageBufferArrayNonUniformIndexing = _internal.shaderStorageBufferArrayNonUniformIndexing;
        ShaderStorageImageArrayNonUniformIndexing = _internal.shaderStorageImageArrayNonUniformIndexing;
        ShaderInputAttachmentArrayNonUniformIndexing = _internal.shaderInputAttachmentArrayNonUniformIndexing;
        ShaderUniformTexelBufferArrayNonUniformIndexing = _internal.shaderUniformTexelBufferArrayNonUniformIndexing;
        ShaderStorageTexelBufferArrayNonUniformIndexing = _internal.shaderStorageTexelBufferArrayNonUniformIndexing;
        DescriptorBindingUniformBufferUpdateAfterBind = _internal.descriptorBindingUniformBufferUpdateAfterBind;
        DescriptorBindingSampledImageUpdateAfterBind = _internal.descriptorBindingSampledImageUpdateAfterBind;
        DescriptorBindingStorageImageUpdateAfterBind = _internal.descriptorBindingStorageImageUpdateAfterBind;
        DescriptorBindingStorageBufferUpdateAfterBind = _internal.descriptorBindingStorageBufferUpdateAfterBind;
        DescriptorBindingUniformTexelBufferUpdateAfterBind = _internal.descriptorBindingUniformTexelBufferUpdateAfterBind;
        DescriptorBindingStorageTexelBufferUpdateAfterBind = _internal.descriptorBindingStorageTexelBufferUpdateAfterBind;
        DescriptorBindingUpdateUnusedWhilePending = _internal.descriptorBindingUpdateUnusedWhilePending;
        DescriptorBindingPartiallyBound = _internal.descriptorBindingPartiallyBound;
        DescriptorBindingVariableDescriptorCount = _internal.descriptorBindingVariableDescriptorCount;
        RuntimeDescriptorArray = _internal.runtimeDescriptorArray;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 ShaderInputAttachmentArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderUniformTexelBufferArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderStorageTexelBufferArrayDynamicIndexing { get; set; }
    public VkBool32 ShaderUniformBufferArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderSampledImageArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderStorageBufferArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderStorageImageArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderInputAttachmentArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderUniformTexelBufferArrayNonUniformIndexing { get; set; }
    public VkBool32 ShaderStorageTexelBufferArrayNonUniformIndexing { get; set; }
    public VkBool32 DescriptorBindingUniformBufferUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingSampledImageUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingStorageImageUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingStorageBufferUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingUniformTexelBufferUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingStorageTexelBufferUpdateAfterBind { get; set; }
    public VkBool32 DescriptorBindingUpdateUnusedWhilePending { get; set; }
    public VkBool32 DescriptorBindingPartiallyBound { get; set; }
    public VkBool32 DescriptorBindingVariableDescriptorCount { get; set; }
    public VkBool32 RuntimeDescriptorArray { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeatures ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeatures();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (ShaderInputAttachmentArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderInputAttachmentArrayDynamicIndexing = ShaderInputAttachmentArrayDynamicIndexing;
        }
        if (ShaderUniformTexelBufferArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderUniformTexelBufferArrayDynamicIndexing = ShaderUniformTexelBufferArrayDynamicIndexing;
        }
        if (ShaderStorageTexelBufferArrayDynamicIndexing != (uint)default)
        {
            _internal.shaderStorageTexelBufferArrayDynamicIndexing = ShaderStorageTexelBufferArrayDynamicIndexing;
        }
        if (ShaderUniformBufferArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderUniformBufferArrayNonUniformIndexing = ShaderUniformBufferArrayNonUniformIndexing;
        }
        if (ShaderSampledImageArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderSampledImageArrayNonUniformIndexing = ShaderSampledImageArrayNonUniformIndexing;
        }
        if (ShaderStorageBufferArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderStorageBufferArrayNonUniformIndexing = ShaderStorageBufferArrayNonUniformIndexing;
        }
        if (ShaderStorageImageArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderStorageImageArrayNonUniformIndexing = ShaderStorageImageArrayNonUniformIndexing;
        }
        if (ShaderInputAttachmentArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderInputAttachmentArrayNonUniformIndexing = ShaderInputAttachmentArrayNonUniformIndexing;
        }
        if (ShaderUniformTexelBufferArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderUniformTexelBufferArrayNonUniformIndexing = ShaderUniformTexelBufferArrayNonUniformIndexing;
        }
        if (ShaderStorageTexelBufferArrayNonUniformIndexing != (uint)default)
        {
            _internal.shaderStorageTexelBufferArrayNonUniformIndexing = ShaderStorageTexelBufferArrayNonUniformIndexing;
        }
        if (DescriptorBindingUniformBufferUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingUniformBufferUpdateAfterBind = DescriptorBindingUniformBufferUpdateAfterBind;
        }
        if (DescriptorBindingSampledImageUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingSampledImageUpdateAfterBind = DescriptorBindingSampledImageUpdateAfterBind;
        }
        if (DescriptorBindingStorageImageUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingStorageImageUpdateAfterBind = DescriptorBindingStorageImageUpdateAfterBind;
        }
        if (DescriptorBindingStorageBufferUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingStorageBufferUpdateAfterBind = DescriptorBindingStorageBufferUpdateAfterBind;
        }
        if (DescriptorBindingUniformTexelBufferUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingUniformTexelBufferUpdateAfterBind = DescriptorBindingUniformTexelBufferUpdateAfterBind;
        }
        if (DescriptorBindingStorageTexelBufferUpdateAfterBind != (uint)default)
        {
            _internal.descriptorBindingStorageTexelBufferUpdateAfterBind = DescriptorBindingStorageTexelBufferUpdateAfterBind;
        }
        if (DescriptorBindingUpdateUnusedWhilePending != (uint)default)
        {
            _internal.descriptorBindingUpdateUnusedWhilePending = DescriptorBindingUpdateUnusedWhilePending;
        }
        if (DescriptorBindingPartiallyBound != (uint)default)
        {
            _internal.descriptorBindingPartiallyBound = DescriptorBindingPartiallyBound;
        }
        if (DescriptorBindingVariableDescriptorCount != (uint)default)
        {
            _internal.descriptorBindingVariableDescriptorCount = DescriptorBindingVariableDescriptorCount;
        }
        if (RuntimeDescriptorArray != (uint)default)
        {
            _internal.runtimeDescriptorArray = RuntimeDescriptorArray;
        }
        return _internal;
    }

    public static implicit operator PhysicalDeviceDescriptorIndexingFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDeviceDescriptorIndexingFeatures p)
    {
        return new PhysicalDeviceDescriptorIndexingFeatures(p);
    }

}



