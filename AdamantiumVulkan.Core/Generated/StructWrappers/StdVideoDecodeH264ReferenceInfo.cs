// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoDecodeH264ReferenceInfo
{
    public StdVideoDecodeH264ReferenceInfo()
    {
    }

    public StdVideoDecodeH264ReferenceInfo(AdamantiumVulkan.Interop.StdVideoDecodeH264ReferenceInfo _internal)
    {
        Flags = new StdVideoDecodeH264ReferenceInfoFlags(_internal.flags);
        FrameNum = _internal.FrameNum;
        Reserved = _internal.reserved;
        PicOrderCnt = NativeUtils.PointerToManagedArray(_internal.PicOrderCnt, 2);
    }

    public StdVideoDecodeH264ReferenceInfoFlags Flags { get; set; }
    public ushort FrameNum { get; set; }
    public ushort Reserved { get; set; }
    public int[] PicOrderCnt { get; set; }

    public AdamantiumVulkan.Interop.StdVideoDecodeH264ReferenceInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoDecodeH264ReferenceInfo();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.FrameNum = FrameNum;
        _internal.reserved = Reserved;
        if(PicOrderCnt != null)
        {
            if (PicOrderCnt.Length > 2)
                throw new System.ArgumentOutOfRangeException(nameof(PicOrderCnt), "Array is out of bounds. Size should not be more than 2");

            NativeUtils.PrimitiveToFixedArray(_internal.PicOrderCnt, 2, PicOrderCnt);
        }
        return _internal;
    }

    public static implicit operator StdVideoDecodeH264ReferenceInfo(AdamantiumVulkan.Interop.StdVideoDecodeH264ReferenceInfo s)
    {
        return new StdVideoDecodeH264ReferenceInfo(s);
    }

}



