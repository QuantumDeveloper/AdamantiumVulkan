// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class PipelineCoverageModulationStateCreateInfoNV : QBDisposableObject
{
    private NativeStruct<float> _pCoverageModulationTable;

    public PipelineCoverageModulationStateCreateInfoNV()
    {
    }

    public PipelineCoverageModulationStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV _internal)
    {
        PNext = _internal.pNext;
        Flags = _internal.flags;
        CoverageModulationMode = _internal.coverageModulationMode;
        CoverageModulationTableEnable = _internal.coverageModulationTableEnable;
        CoverageModulationTableCount = _internal.coverageModulationTableCount;
        if (_internal.pCoverageModulationTable != null)
        {
            PCoverageModulationTable = *_internal.pCoverageModulationTable;
            NativeUtils.Free(_internal.pCoverageModulationTable);
        }
    }

    public StructureType SType => StructureType.PipelineCoverageModulationStateCreateInfoNv;
    public void* PNext { get; set; }
    public VkPipelineCoverageModulationStateCreateFlagsNV Flags { get; set; }
    public CoverageModulationModeNV CoverageModulationMode { get; set; }
    public VkBool32 CoverageModulationTableEnable { get; set; }
    public uint CoverageModulationTableCount { get; set; }
    public float? PCoverageModulationTable { get; set; }

    public AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (Flags != (uint)default)
        {
            _internal.flags = Flags;
        }
        if (CoverageModulationMode != default)
        {
            _internal.coverageModulationMode = CoverageModulationMode;
        }
        if (CoverageModulationTableEnable != (uint)default)
        {
            _internal.coverageModulationTableEnable = CoverageModulationTableEnable;
        }
        if (CoverageModulationTableCount != default)
        {
            _internal.coverageModulationTableCount = CoverageModulationTableCount;
        }
        _pCoverageModulationTable.Dispose();
        if (PCoverageModulationTable.HasValue)
        {
            _pCoverageModulationTable = new NativeStruct<float>(PCoverageModulationTable.Value);
            _internal.pCoverageModulationTable = _pCoverageModulationTable.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pCoverageModulationTable.Dispose();
    }


    public static implicit operator PipelineCoverageModulationStateCreateInfoNV(AdamantiumVulkan.Core.Interop.VkPipelineCoverageModulationStateCreateInfoNV p)
    {
        return new PipelineCoverageModulationStateCreateInfoNV(p);
    }

}



