// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Interop;

namespace AdamantiumVulkan;

public unsafe partial class StdVideoEncodeH264ReferenceListsInfo : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefListModEntry> _pRefList0ModOperations;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefListModEntry> _pRefList1ModOperations;

    private NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefPicMarkingEntry> _pRefPicMarkingOperations;

    public StdVideoEncodeH264ReferenceListsInfo()
    {
    }

    public StdVideoEncodeH264ReferenceListsInfo(AdamantiumVulkan.Interop.StdVideoEncodeH264ReferenceListsInfo _internal)
    {
        Flags = new StdVideoEncodeH264ReferenceListsInfoFlags(_internal.flags);
        Num_ref_idx_l0_active_minus1 = _internal.num_ref_idx_l0_active_minus1;
        Num_ref_idx_l1_active_minus1 = _internal.num_ref_idx_l1_active_minus1;
        RefPicList0 = NativeUtils.PointerToManagedArray(_internal.RefPicList0, 32);
        RefPicList1 = NativeUtils.PointerToManagedArray(_internal.RefPicList1, 32);
        RefList0ModOpCount = _internal.refList0ModOpCount;
        RefList1ModOpCount = _internal.refList1ModOpCount;
        RefPicMarkingOpCount = _internal.refPicMarkingOpCount;
        Reserved1 = NativeUtils.PointerToManagedArray(_internal.reserved1, 7);
        PRefList0ModOperations = new StdVideoEncodeH264RefListModEntry(*_internal.pRefList0ModOperations);
        NativeUtils.Free(_internal.pRefList0ModOperations);
        PRefList1ModOperations = new StdVideoEncodeH264RefListModEntry(*_internal.pRefList1ModOperations);
        NativeUtils.Free(_internal.pRefList1ModOperations);
        PRefPicMarkingOperations = new StdVideoEncodeH264RefPicMarkingEntry(*_internal.pRefPicMarkingOperations);
        NativeUtils.Free(_internal.pRefPicMarkingOperations);
    }

    public StdVideoEncodeH264ReferenceListsInfoFlags Flags { get; set; }
    public byte Num_ref_idx_l0_active_minus1 { get; set; }
    public byte Num_ref_idx_l1_active_minus1 { get; set; }
    public byte[] RefPicList0 { get; set; }
    public byte[] RefPicList1 { get; set; }
    public byte RefList0ModOpCount { get; set; }
    public byte RefList1ModOpCount { get; set; }
    public byte RefPicMarkingOpCount { get; set; }
    public byte[] Reserved1 { get; set; }
    public StdVideoEncodeH264RefListModEntry PRefList0ModOperations { get; set; }
    public StdVideoEncodeH264RefListModEntry PRefList1ModOperations { get; set; }
    public StdVideoEncodeH264RefPicMarkingEntry PRefPicMarkingOperations { get; set; }

    public AdamantiumVulkan.Interop.StdVideoEncodeH264ReferenceListsInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Interop.StdVideoEncodeH264ReferenceListsInfo();
        if (Flags != null)
        {
            _internal.flags = Flags.ToNative();
        }
        _internal.num_ref_idx_l0_active_minus1 = Num_ref_idx_l0_active_minus1;
        _internal.num_ref_idx_l1_active_minus1 = Num_ref_idx_l1_active_minus1;
        if(RefPicList0 != null)
        {
            if (RefPicList0.Length > 32)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicList0), "Array is out of bounds. Size should not be more than 32");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicList0, 32, RefPicList0);
        }
        if(RefPicList1 != null)
        {
            if (RefPicList1.Length > 32)
                throw new System.ArgumentOutOfRangeException(nameof(RefPicList1), "Array is out of bounds. Size should not be more than 32");

            NativeUtils.PrimitiveToFixedArray(_internal.RefPicList1, 32, RefPicList1);
        }
        _internal.refList0ModOpCount = RefList0ModOpCount;
        _internal.refList1ModOpCount = RefList1ModOpCount;
        _internal.refPicMarkingOpCount = RefPicMarkingOpCount;
        if(Reserved1 != null)
        {
            if (Reserved1.Length > 7)
                throw new System.ArgumentOutOfRangeException(nameof(Reserved1), "Array is out of bounds. Size should not be more than 7");

            NativeUtils.PrimitiveToFixedArray(_internal.reserved1, 7, Reserved1);
        }
        _pRefList0ModOperations.Dispose();
        if (PRefList0ModOperations != null)
        {
            var struct0 = PRefList0ModOperations.ToNative();
            _pRefList0ModOperations = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefListModEntry>(struct0);
            _internal.pRefList0ModOperations = _pRefList0ModOperations.Handle;
        }
        _pRefList1ModOperations.Dispose();
        if (PRefList1ModOperations != null)
        {
            var struct1 = PRefList1ModOperations.ToNative();
            _pRefList1ModOperations = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefListModEntry>(struct1);
            _internal.pRefList1ModOperations = _pRefList1ModOperations.Handle;
        }
        _pRefPicMarkingOperations.Dispose();
        if (PRefPicMarkingOperations != null)
        {
            var struct2 = PRefPicMarkingOperations.ToNative();
            _pRefPicMarkingOperations = new NativeStruct<AdamantiumVulkan.Interop.StdVideoEncodeH264RefPicMarkingEntry>(struct2);
            _internal.pRefPicMarkingOperations = _pRefPicMarkingOperations.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pRefList0ModOperations.Dispose();
        _pRefList1ModOperations.Dispose();
        _pRefPicMarkingOperations.Dispose();
    }


    public static implicit operator StdVideoEncodeH264ReferenceListsInfo(AdamantiumVulkan.Interop.StdVideoEncodeH264ReferenceListsInfo s)
    {
        return new StdVideoEncodeH264ReferenceListsInfo(s);
    }

}



