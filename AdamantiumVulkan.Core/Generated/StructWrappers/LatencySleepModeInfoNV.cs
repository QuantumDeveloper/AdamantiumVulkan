// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class LatencySleepModeInfoNV : QBDisposableObject
{
    public LatencySleepModeInfoNV()
    {
    }

    public LatencySleepModeInfoNV(AdamantiumVulkan.Core.Interop.VkLatencySleepModeInfoNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        LowLatencyMode = _internal.lowLatencyMode;
        LowLatencyBoost = _internal.lowLatencyBoost;
        MinimumIntervalUs = _internal.minimumIntervalUs;
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public VkBool32 LowLatencyMode { get; set; }
    public VkBool32 LowLatencyBoost { get; set; }
    public uint MinimumIntervalUs { get; set; }

    public AdamantiumVulkan.Core.Interop.VkLatencySleepModeInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkLatencySleepModeInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (LowLatencyMode != (uint)default)
        {
            _internal.lowLatencyMode = LowLatencyMode;
        }
        if (LowLatencyBoost != (uint)default)
        {
            _internal.lowLatencyBoost = LowLatencyBoost;
        }
        if (MinimumIntervalUs != default)
        {
            _internal.minimumIntervalUs = MinimumIntervalUs;
        }
        return _internal;
    }

    public static implicit operator LatencySleepModeInfoNV(AdamantiumVulkan.Core.Interop.VkLatencySleepModeInfoNV l)
    {
        return new LatencySleepModeInfoNV(l);
    }

}



