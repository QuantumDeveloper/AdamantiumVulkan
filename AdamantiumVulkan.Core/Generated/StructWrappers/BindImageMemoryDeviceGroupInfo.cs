// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Core;

public unsafe partial class BindImageMemoryDeviceGroupInfo : QBDisposableObject
{
    private NativeStruct<uint> pDeviceIndices;

    private NativeStruct<VkRect2D> pSplitInstanceBindRegions;

    public BindImageMemoryDeviceGroupInfo()
    {
    }

    public BindImageMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo _internal)
    {
        PNext = _internal.pNext;
        DeviceIndexCount = _internal.deviceIndexCount;
        if (_internal.pDeviceIndices != null)
        {
            PDeviceIndices = *_internal.pDeviceIndices;
            NativeUtils.Free(_internal.pDeviceIndices);
        }
        SplitInstanceBindRegionCount = _internal.splitInstanceBindRegionCount;
        PSplitInstanceBindRegions = new Rect2D(*_internal.pSplitInstanceBindRegions);
        NativeUtils.Free(_internal.pSplitInstanceBindRegions);
    }

    public StructureType SType => StructureType.BindImageMemoryDeviceGroupInfo;
    public void* PNext { get; set; }
    public uint DeviceIndexCount { get; set; }
    public uint? PDeviceIndices { get; set; }
    public uint SplitInstanceBindRegionCount { get; set; }
    public Rect2D PSplitInstanceBindRegions { get; set; }

    public AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo ToNative()
    {
        var _internal = new AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.deviceIndexCount = DeviceIndexCount;
        pDeviceIndices.Dispose();
        if (PDeviceIndices.HasValue)
        {
            pDeviceIndices = new NativeStruct<uint>(PDeviceIndices.Value);
            _internal.pDeviceIndices = pDeviceIndices.Handle;
        }
        _internal.splitInstanceBindRegionCount = SplitInstanceBindRegionCount;
        pSplitInstanceBindRegions.Dispose();
        if (PSplitInstanceBindRegions != null)
        {
            var struct1 = PSplitInstanceBindRegions.ToNative();
            pSplitInstanceBindRegions = new NativeStruct<VkRect2D>(struct1);
            _internal.pSplitInstanceBindRegions = pSplitInstanceBindRegions.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pDeviceIndices.Dispose();
        pSplitInstanceBindRegions.Dispose();
    }


    public static implicit operator BindImageMemoryDeviceGroupInfo(AdamantiumVulkan.Core.Interop.VkBindImageMemoryDeviceGroupInfo b)
    {
        return new BindImageMemoryDeviceGroupInfo(b);
    }

}



