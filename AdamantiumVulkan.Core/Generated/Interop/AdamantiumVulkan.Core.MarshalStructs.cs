// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Core.Interop
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Core;

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBool32
    {
        public uint value;


        public static implicit operator uint(VkBool32 v)
        {
            return v.value;
        }

        public static implicit operator VkBool32(uint v)
        {
            return new VkBool32(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceAddress
    {
        public ulong value;


        public static implicit operator ulong(VkDeviceAddress v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceAddress(ulong v)
        {
            return new VkDeviceAddress(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceSize
    {
        public ulong value;


        public static implicit operator ulong(VkDeviceSize v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceSize(ulong v)
        {
            return new VkDeviceSize(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFlags
    {
        public uint value;


        public static implicit operator uint(VkFlags v)
        {
            return v.value;
        }

        public static implicit operator VkFlags(uint v)
        {
            return new VkFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSampleMask
    {
        public uint value;


        public static implicit operator uint(VkSampleMask v)
        {
            return v.value;
        }

        public static implicit operator VkSampleMask(uint v)
        {
            return new VkSampleMask(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBuffer_T
    {
        public System.IntPtr pointer;

        public VkBuffer_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImage_T
    {
        public System.IntPtr pointer;

        public VkImage_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkInstance_T
    {
        public System.IntPtr pointer;

        public VkInstance_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevice_T
    {
        public System.IntPtr pointer;

        public VkPhysicalDevice_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDevice_T
    {
        public System.IntPtr pointer;

        public VkDevice_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueue_T
    {
        public System.IntPtr pointer;

        public VkQueue_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphore_T
    {
        public System.IntPtr pointer;

        public VkSemaphore_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBuffer_T
    {
        public System.IntPtr pointer;

        public VkCommandBuffer_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFence_T
    {
        public System.IntPtr pointer;

        public VkFence_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceMemory_T
    {
        public System.IntPtr pointer;

        public VkDeviceMemory_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkEvent_T
    {
        public System.IntPtr pointer;

        public VkEvent_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPool_T
    {
        public System.IntPtr pointer;

        public VkQueryPool_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferView_T
    {
        public System.IntPtr pointer;

        public VkBufferView_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageView_T
    {
        public System.IntPtr pointer;

        public VkImageView_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderModule_T
    {
        public System.IntPtr pointer;

        public VkShaderModule_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCache_T
    {
        public System.IntPtr pointer;

        public VkPipelineCache_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineLayout_T
    {
        public System.IntPtr pointer;

        public VkPipelineLayout_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipeline_T
    {
        public System.IntPtr pointer;

        public VkPipeline_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPass_T
    {
        public System.IntPtr pointer;

        public VkRenderPass_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayout_T
    {
        public System.IntPtr pointer;

        public VkDescriptorSetLayout_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSampler_T
    {
        public System.IntPtr pointer;

        public VkSampler_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSet_T
    {
        public System.IntPtr pointer;

        public VkDescriptorSet_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPool_T
    {
        public System.IntPtr pointer;

        public VkDescriptorPool_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebuffer_T
    {
        public System.IntPtr pointer;

        public VkFramebuffer_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPool_T
    {
        public System.IntPtr pointer;

        public VkCommandPool_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccessFlags
    {
        public uint value;


        public static implicit operator uint(VkAccessFlags v)
        {
            return v.value;
        }

        public static implicit operator VkAccessFlags(uint v)
        {
            return new VkAccessFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageAspectFlags
    {
        public uint value;


        public static implicit operator uint(VkImageAspectFlags v)
        {
            return v.value;
        }

        public static implicit operator VkImageAspectFlags(uint v)
        {
            return new VkImageAspectFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFormatFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkFormatFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkFormatFeatureFlags(uint v)
        {
            return new VkFormatFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkImageCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkImageCreateFlags(uint v)
        {
            return new VkImageCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSampleCountFlags
    {
        public uint value;


        public static implicit operator uint(VkSampleCountFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSampleCountFlags(uint v)
        {
            return new VkSampleCountFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageUsageFlags
    {
        public uint value;


        public static implicit operator uint(VkImageUsageFlags v)
        {
            return v.value;
        }

        public static implicit operator VkImageUsageFlags(uint v)
        {
            return new VkImageUsageFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkInstanceCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkInstanceCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkInstanceCreateFlags(uint v)
        {
            return new VkInstanceCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryHeapFlags
    {
        public uint value;


        public static implicit operator uint(VkMemoryHeapFlags v)
        {
            return v.value;
        }

        public static implicit operator VkMemoryHeapFlags(uint v)
        {
            return new VkMemoryHeapFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryPropertyFlags
    {
        public uint value;


        public static implicit operator uint(VkMemoryPropertyFlags v)
        {
            return v.value;
        }

        public static implicit operator VkMemoryPropertyFlags(uint v)
        {
            return new VkMemoryPropertyFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueueFlags
    {
        public uint value;


        public static implicit operator uint(VkQueueFlags v)
        {
            return v.value;
        }

        public static implicit operator VkQueueFlags(uint v)
        {
            return new VkQueueFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkDeviceCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceCreateFlags(uint v)
        {
            return new VkDeviceCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceQueueCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkDeviceQueueCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceQueueCreateFlags(uint v)
        {
            return new VkDeviceQueueCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineStageFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineStageFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineStageFlags(uint v)
        {
            return new VkPipelineStageFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryMapFlags
    {
        public uint value;


        public static implicit operator uint(VkMemoryMapFlags v)
        {
            return v.value;
        }

        public static implicit operator VkMemoryMapFlags(uint v)
        {
            return new VkMemoryMapFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseMemoryBindFlags
    {
        public uint value;


        public static implicit operator uint(VkSparseMemoryBindFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSparseMemoryBindFlags(uint v)
        {
            return new VkSparseMemoryBindFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageFormatFlags
    {
        public uint value;


        public static implicit operator uint(VkSparseImageFormatFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSparseImageFormatFlags(uint v)
        {
            return new VkSparseImageFormatFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkFenceCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkFenceCreateFlags(uint v)
        {
            return new VkFenceCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkSemaphoreCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSemaphoreCreateFlags(uint v)
        {
            return new VkSemaphoreCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkEventCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkEventCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkEventCreateFlags(uint v)
        {
            return new VkEventCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPipelineStatisticFlags
    {
        public uint value;


        public static implicit operator uint(VkQueryPipelineStatisticFlags v)
        {
            return v.value;
        }

        public static implicit operator VkQueryPipelineStatisticFlags(uint v)
        {
            return new VkQueryPipelineStatisticFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPoolCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkQueryPoolCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkQueryPoolCreateFlags(uint v)
        {
            return new VkQueryPoolCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryResultFlags
    {
        public uint value;


        public static implicit operator uint(VkQueryResultFlags v)
        {
            return v.value;
        }

        public static implicit operator VkQueryResultFlags(uint v)
        {
            return new VkQueryResultFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkBufferCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkBufferCreateFlags(uint v)
        {
            return new VkBufferCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferUsageFlags
    {
        public uint value;


        public static implicit operator uint(VkBufferUsageFlags v)
        {
            return v.value;
        }

        public static implicit operator VkBufferUsageFlags(uint v)
        {
            return new VkBufferUsageFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferViewCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkBufferViewCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkBufferViewCreateFlags(uint v)
        {
            return new VkBufferViewCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkImageViewCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkImageViewCreateFlags(uint v)
        {
            return new VkImageViewCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderModuleCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkShaderModuleCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkShaderModuleCreateFlags(uint v)
        {
            return new VkShaderModuleCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCacheCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineCacheCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCacheCreateFlags(uint v)
        {
            return new VkPipelineCacheCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkColorComponentFlags
    {
        public uint value;


        public static implicit operator uint(VkColorComponentFlags v)
        {
            return v.value;
        }

        public static implicit operator VkColorComponentFlags(uint v)
        {
            return new VkColorComponentFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCreateFlags(uint v)
        {
            return new VkPipelineCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineShaderStageCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineShaderStageCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineShaderStageCreateFlags(uint v)
        {
            return new VkPipelineShaderStageCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCullModeFlags
    {
        public uint value;


        public static implicit operator uint(VkCullModeFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCullModeFlags(uint v)
        {
            return new VkCullModeFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineVertexInputStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineVertexInputStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineVertexInputStateCreateFlags(uint v)
        {
            return new VkPipelineVertexInputStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineInputAssemblyStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineInputAssemblyStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineInputAssemblyStateCreateFlags(uint v)
        {
            return new VkPipelineInputAssemblyStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineTessellationStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineTessellationStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineTessellationStateCreateFlags(uint v)
        {
            return new VkPipelineTessellationStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineViewportStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineViewportStateCreateFlags(uint v)
        {
            return new VkPipelineViewportStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineRasterizationStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineRasterizationStateCreateFlags(uint v)
        {
            return new VkPipelineRasterizationStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineMultisampleStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineMultisampleStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineMultisampleStateCreateFlags(uint v)
        {
            return new VkPipelineMultisampleStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDepthStencilStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineDepthStencilStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineDepthStencilStateCreateFlags(uint v)
        {
            return new VkPipelineDepthStencilStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineColorBlendStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineColorBlendStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineColorBlendStateCreateFlags(uint v)
        {
            return new VkPipelineColorBlendStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDynamicStateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineDynamicStateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineDynamicStateCreateFlags(uint v)
        {
            return new VkPipelineDynamicStateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineLayoutCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkPipelineLayoutCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineLayoutCreateFlags(uint v)
        {
            return new VkPipelineLayoutCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderStageFlags
    {
        public uint value;


        public static implicit operator uint(VkShaderStageFlags v)
        {
            return v.value;
        }

        public static implicit operator VkShaderStageFlags(uint v)
        {
            return new VkShaderStageFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkSamplerCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSamplerCreateFlags(uint v)
        {
            return new VkSamplerCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPoolCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkDescriptorPoolCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorPoolCreateFlags(uint v)
        {
            return new VkDescriptorPoolCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPoolResetFlags
    {
        public uint value;


        public static implicit operator uint(VkDescriptorPoolResetFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorPoolResetFlags(uint v)
        {
            return new VkDescriptorPoolResetFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayoutCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkDescriptorSetLayoutCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorSetLayoutCreateFlags(uint v)
        {
            return new VkDescriptorSetLayoutCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentDescriptionFlags
    {
        public uint value;


        public static implicit operator uint(VkAttachmentDescriptionFlags v)
        {
            return v.value;
        }

        public static implicit operator VkAttachmentDescriptionFlags(uint v)
        {
            return new VkAttachmentDescriptionFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDependencyFlags
    {
        public uint value;


        public static implicit operator uint(VkDependencyFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDependencyFlags(uint v)
        {
            return new VkDependencyFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebufferCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkFramebufferCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkFramebufferCreateFlags(uint v)
        {
            return new VkFramebufferCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkRenderPassCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkRenderPassCreateFlags(uint v)
        {
            return new VkRenderPassCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDescriptionFlags
    {
        public uint value;


        public static implicit operator uint(VkSubpassDescriptionFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSubpassDescriptionFlags(uint v)
        {
            return new VkSubpassDescriptionFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPoolCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkCommandPoolCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCommandPoolCreateFlags(uint v)
        {
            return new VkCommandPoolCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPoolResetFlags
    {
        public uint value;


        public static implicit operator uint(VkCommandPoolResetFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCommandPoolResetFlags(uint v)
        {
            return new VkCommandPoolResetFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferUsageFlags
    {
        public uint value;


        public static implicit operator uint(VkCommandBufferUsageFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCommandBufferUsageFlags(uint v)
        {
            return new VkCommandBufferUsageFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryControlFlags
    {
        public uint value;


        public static implicit operator uint(VkQueryControlFlags v)
        {
            return v.value;
        }

        public static implicit operator VkQueryControlFlags(uint v)
        {
            return new VkQueryControlFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferResetFlags
    {
        public uint value;


        public static implicit operator uint(VkCommandBufferResetFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCommandBufferResetFlags(uint v)
        {
            return new VkCommandBufferResetFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkStencilFaceFlags
    {
        public uint value;


        public static implicit operator uint(VkStencilFaceFlags v)
        {
            return v.value;
        }

        public static implicit operator VkStencilFaceFlags(uint v)
        {
            return new VkStencilFaceFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExtent2D
    {
        public uint width;

        public uint height;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExtent3D
    {
        public uint width;

        public uint height;

        public uint depth;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkOffset2D
    {
        public int x;

        public int y;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkOffset3D
    {
        public int x;

        public int y;

        public int z;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRect2D
    {
        public VkOffset2D offset;

        public VkExtent2D extent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBaseInStructure
    {
        public uint sType;

        public System.IntPtr pNext;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBaseOutStructure
    {
        public uint sType;

        public System.IntPtr pNext;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferMemoryBarrier
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint srcAccessMask;

        public uint dstAccessMask;

        public uint srcQueueFamilyIndex;

        public uint dstQueueFamilyIndex;

        public VkBuffer_T buffer;

        public ulong offset;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDispatchIndirectCommand
    {
        public uint x;

        public uint y;

        public uint z;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDrawIndexedIndirectCommand
    {
        public uint indexCount;

        public uint instanceCount;

        public uint firstIndex;

        public int vertexOffset;

        public uint firstInstance;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDrawIndirectCommand
    {
        public uint vertexCount;

        public uint instanceCount;

        public uint firstVertex;

        public uint firstInstance;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageSubresourceRange
    {
        public uint aspectMask;

        public uint baseMipLevel;

        public uint levelCount;

        public uint baseArrayLayer;

        public uint layerCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageMemoryBarrier
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint srcAccessMask;

        public uint dstAccessMask;

        public uint oldLayout;

        public uint newLayout;

        public uint srcQueueFamilyIndex;

        public uint dstQueueFamilyIndex;

        public VkImage_T image;

        public VkImageSubresourceRange subresourceRange;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryBarrier
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint srcAccessMask;

        public uint dstAccessMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAllocationCallbacks
    {
        public System.IntPtr pUserData;

        public System.IntPtr pfnAllocation;

        public System.IntPtr pfnReallocation;

        public System.IntPtr pfnFree;

        public System.IntPtr pfnInternalAllocation;

        public System.IntPtr pfnInternalFree;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkApplicationInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pApplicationName;

        public uint applicationVersion;

        public System.IntPtr pEngineName;

        public uint engineVersion;

        public uint apiVersion;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFormatProperties
    {
        public uint linearTilingFeatures;

        public uint optimalTilingFeatures;

        public uint bufferFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageFormatProperties
    {
        public VkExtent3D maxExtent;

        public uint maxMipLevels;

        public uint maxArrayLayers;

        public uint sampleCounts;

        public ulong maxResourceSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkInstanceCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr pApplicationInfo;

        public uint enabledLayerCount;

        public System.IntPtr ppEnabledLayerNames;

        public uint enabledExtensionCount;

        public System.IntPtr ppEnabledExtensionNames;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryHeap
    {
        public ulong size;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryType
    {
        public uint propertyFlags;

        public uint heapIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFeatures
    {
        public uint robustBufferAccess;

        public uint fullDrawIndexUint32;

        public uint imageCubeArray;

        public uint independentBlend;

        public uint geometryShader;

        public uint tessellationShader;

        public uint sampleRateShading;

        public uint dualSrcBlend;

        public uint logicOp;

        public uint multiDrawIndirect;

        public uint drawIndirectFirstInstance;

        public uint depthClamp;

        public uint depthBiasClamp;

        public uint fillModeNonSolid;

        public uint depthBounds;

        public uint wideLines;

        public uint largePoints;

        public uint alphaToOne;

        public uint multiViewport;

        public uint samplerAnisotropy;

        public uint textureCompressionETC2;

        public uint textureCompressionASTC_LDR;

        public uint textureCompressionBC;

        public uint occlusionQueryPrecise;

        public uint pipelineStatisticsQuery;

        public uint vertexPipelineStoresAndAtomics;

        public uint fragmentStoresAndAtomics;

        public uint shaderTessellationAndGeometryPointSize;

        public uint shaderImageGatherExtended;

        public uint shaderStorageImageExtendedFormats;

        public uint shaderStorageImageMultisample;

        public uint shaderStorageImageReadWithoutFormat;

        public uint shaderStorageImageWriteWithoutFormat;

        public uint shaderUniformBufferArrayDynamicIndexing;

        public uint shaderSampledImageArrayDynamicIndexing;

        public uint shaderStorageBufferArrayDynamicIndexing;

        public uint shaderStorageImageArrayDynamicIndexing;

        public uint shaderClipDistance;

        public uint shaderCullDistance;

        public uint shaderFloat64;

        public uint shaderInt64;

        public uint shaderInt16;

        public uint shaderResourceResidency;

        public uint shaderResourceMinLod;

        public uint sparseBinding;

        public uint sparseResidencyBuffer;

        public uint sparseResidencyImage2D;

        public uint sparseResidencyImage3D;

        public uint sparseResidency2Samples;

        public uint sparseResidency4Samples;

        public uint sparseResidency8Samples;

        public uint sparseResidency16Samples;

        public uint sparseResidencyAliased;

        public uint variableMultisampleRate;

        public uint inheritedQueries;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceLimits
    {
        public uint maxImageDimension1D;

        public uint maxImageDimension2D;

        public uint maxImageDimension3D;

        public uint maxImageDimensionCube;

        public uint maxImageArrayLayers;

        public uint maxTexelBufferElements;

        public uint maxUniformBufferRange;

        public uint maxStorageBufferRange;

        public uint maxPushConstantsSize;

        public uint maxMemoryAllocationCount;

        public uint maxSamplerAllocationCount;

        public ulong bufferImageGranularity;

        public ulong sparseAddressSpaceSize;

        public uint maxBoundDescriptorSets;

        public uint maxPerStageDescriptorSamplers;

        public uint maxPerStageDescriptorUniformBuffers;

        public uint maxPerStageDescriptorStorageBuffers;

        public uint maxPerStageDescriptorSampledImages;

        public uint maxPerStageDescriptorStorageImages;

        public uint maxPerStageDescriptorInputAttachments;

        public uint maxPerStageResources;

        public uint maxDescriptorSetSamplers;

        public uint maxDescriptorSetUniformBuffers;

        public uint maxDescriptorSetUniformBuffersDynamic;

        public uint maxDescriptorSetStorageBuffers;

        public uint maxDescriptorSetStorageBuffersDynamic;

        public uint maxDescriptorSetSampledImages;

        public uint maxDescriptorSetStorageImages;

        public uint maxDescriptorSetInputAttachments;

        public uint maxVertexInputAttributes;

        public uint maxVertexInputBindings;

        public uint maxVertexInputAttributeOffset;

        public uint maxVertexInputBindingStride;

        public uint maxVertexOutputComponents;

        public uint maxTessellationGenerationLevel;

        public uint maxTessellationPatchSize;

        public uint maxTessellationControlPerVertexInputComponents;

        public uint maxTessellationControlPerVertexOutputComponents;

        public uint maxTessellationControlPerPatchOutputComponents;

        public uint maxTessellationControlTotalOutputComponents;

        public uint maxTessellationEvaluationInputComponents;

        public uint maxTessellationEvaluationOutputComponents;

        public uint maxGeometryShaderInvocations;

        public uint maxGeometryInputComponents;

        public uint maxGeometryOutputComponents;

        public uint maxGeometryOutputVertices;

        public uint maxGeometryTotalOutputComponents;

        public uint maxFragmentInputComponents;

        public uint maxFragmentOutputAttachments;

        public uint maxFragmentDualSrcAttachments;

        public uint maxFragmentCombinedOutputResources;

        public uint maxComputeSharedMemorySize;

        public unsafe fixed uint maxComputeWorkGroupCount[3];

        public uint maxComputeWorkGroupInvocations;

        public unsafe fixed uint maxComputeWorkGroupSize[3];

        public uint subPixelPrecisionBits;

        public uint subTexelPrecisionBits;

        public uint mipmapPrecisionBits;

        public uint maxDrawIndexedIndexValue;

        public uint maxDrawIndirectCount;

        public float maxSamplerLodBias;

        public float maxSamplerAnisotropy;

        public uint maxViewports;

        public unsafe fixed uint maxViewportDimensions[2];

        public unsafe fixed float viewportBoundsRange[2];

        public uint viewportSubPixelBits;

        public ulong minMemoryMapAlignment;

        public ulong minTexelBufferOffsetAlignment;

        public ulong minUniformBufferOffsetAlignment;

        public ulong minStorageBufferOffsetAlignment;

        public int minTexelOffset;

        public uint maxTexelOffset;

        public int minTexelGatherOffset;

        public uint maxTexelGatherOffset;

        public float minInterpolationOffset;

        public float maxInterpolationOffset;

        public uint subPixelInterpolationOffsetBits;

        public uint maxFramebufferWidth;

        public uint maxFramebufferHeight;

        public uint maxFramebufferLayers;

        public uint framebufferColorSampleCounts;

        public uint framebufferDepthSampleCounts;

        public uint framebufferStencilSampleCounts;

        public uint framebufferNoAttachmentsSampleCounts;

        public uint maxColorAttachments;

        public uint sampledImageColorSampleCounts;

        public uint sampledImageIntegerSampleCounts;

        public uint sampledImageDepthSampleCounts;

        public uint sampledImageStencilSampleCounts;

        public uint storageImageSampleCounts;

        public uint maxSampleMaskWords;

        public uint timestampComputeAndGraphics;

        public float timestampPeriod;

        public uint maxClipDistances;

        public uint maxCullDistances;

        public uint maxCombinedClipAndCullDistances;

        public uint discreteQueuePriorities;

        public unsafe fixed float pointSizeRange[2];

        public unsafe fixed float lineWidthRange[2];

        public float pointSizeGranularity;

        public float lineWidthGranularity;

        public uint strictLines;

        public uint standardSampleLocations;

        public ulong optimalBufferCopyOffsetAlignment;

        public ulong optimalBufferCopyRowPitchAlignment;

        public ulong nonCoherentAtomSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMemoryProperties
    {
        public uint memoryTypeCount;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public VkMemoryType[] memoryTypes;

        public uint memoryHeapCount;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
        public VkMemoryHeap[] memoryHeaps;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSparseProperties
    {
        public uint residencyStandard2DBlockShape;

        public uint residencyStandard2DMultisampleBlockShape;

        public uint residencyStandard3DBlockShape;

        public uint residencyAlignedMipSize;

        public uint residencyNonResidentStrict;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceProperties
    {
        public uint apiVersion;

        public uint driverVersion;

        public uint vendorID;

        public uint deviceID;

        public uint deviceType;

        public unsafe fixed sbyte deviceName[256];

        public unsafe fixed byte pipelineCacheUUID[16];

        public VkPhysicalDeviceLimits limits;

        public VkPhysicalDeviceSparseProperties sparseProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueueFamilyProperties
    {
        public uint queueFlags;

        public uint queueCount;

        public uint timestampValidBits;

        public VkExtent3D minImageTransferGranularity;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceQueueCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint queueFamilyIndex;

        public uint queueCount;

        public System.IntPtr pQueuePriorities;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint queueCreateInfoCount;

        public System.IntPtr pQueueCreateInfos;

        public uint enabledLayerCount;

        public System.IntPtr ppEnabledLayerNames;

        public uint enabledExtensionCount;

        public System.IntPtr ppEnabledExtensionNames;

        public System.IntPtr pEnabledFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExtensionProperties
    {
        public unsafe fixed sbyte extensionName[256];

        public uint specVersion;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkLayerProperties
    {
        public unsafe fixed sbyte layerName[256];

        public uint specVersion;

        public uint implementationVersion;

        public unsafe fixed sbyte description[256];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubmitInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreCount;

        public System.IntPtr pWaitSemaphores;

        public System.IntPtr pWaitDstStageMask;

        public uint commandBufferCount;

        public System.IntPtr pCommandBuffers;

        public uint signalSemaphoreCount;

        public System.IntPtr pSignalSemaphores;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMappedMemoryRange
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceMemory_T memory;

        public ulong offset;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong allocationSize;

        public uint memoryTypeIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryRequirements
    {
        public ulong size;

        public ulong alignment;

        public uint memoryTypeBits;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseMemoryBind
    {
        public ulong resourceOffset;

        public ulong size;

        public VkDeviceMemory_T memory;

        public ulong memoryOffset;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseBufferMemoryBindInfo
    {
        public VkBuffer_T buffer;

        public uint bindCount;

        public System.IntPtr pBinds;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageOpaqueMemoryBindInfo
    {
        public VkImage_T image;

        public uint bindCount;

        public System.IntPtr pBinds;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageSubresource
    {
        public uint aspectMask;

        public uint mipLevel;

        public uint arrayLayer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageMemoryBind
    {
        public VkImageSubresource subresource;

        public VkOffset3D offset;

        public VkExtent3D extent;

        public VkDeviceMemory_T memory;

        public ulong memoryOffset;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageMemoryBindInfo
    {
        public VkImage_T image;

        public uint bindCount;

        public System.IntPtr pBinds;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindSparseInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreCount;

        public System.IntPtr pWaitSemaphores;

        public uint bufferBindCount;

        public System.IntPtr pBufferBinds;

        public uint imageOpaqueBindCount;

        public System.IntPtr pImageOpaqueBinds;

        public uint imageBindCount;

        public System.IntPtr pImageBinds;

        public uint signalSemaphoreCount;

        public System.IntPtr pSignalSemaphores;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageFormatProperties
    {
        public uint aspectMask;

        public VkExtent3D imageGranularity;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageMemoryRequirements
    {
        public VkSparseImageFormatProperties formatProperties;

        public uint imageMipTailFirstLod;

        public ulong imageMipTailSize;

        public ulong imageMipTailOffset;

        public ulong imageMipTailStride;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkEventCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPoolCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint queryType;

        public uint queryCount;

        public uint pipelineStatistics;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public ulong size;

        public uint usage;

        public uint sharingMode;

        public uint queueFamilyIndexCount;

        public System.IntPtr pQueueFamilyIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferViewCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkBuffer_T buffer;

        public uint format;

        public ulong offset;

        public ulong range;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint imageType;

        public uint format;

        public VkExtent3D extent;

        public uint mipLevels;

        public uint arrayLayers;

        public uint samples;

        public uint tiling;

        public uint usage;

        public uint sharingMode;

        public uint queueFamilyIndexCount;

        public System.IntPtr pQueueFamilyIndices;

        public uint initialLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubresourceLayout
    {
        public ulong offset;

        public ulong size;

        public ulong rowPitch;

        public ulong arrayPitch;

        public ulong depthPitch;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkComponentMapping
    {
        public uint r;

        public uint g;

        public uint b;

        public uint a;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkImage_T image;

        public uint viewType;

        public uint format;

        public VkComponentMapping components;

        public VkImageSubresourceRange subresourceRange;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderModuleCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public ulong codeSize;

        public System.IntPtr pCode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCacheCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public ulong initialDataSize;

        public System.IntPtr pInitialData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSpecializationMapEntry
    {
        public uint constantID;

        public uint offset;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSpecializationInfo
    {
        public uint mapEntryCount;

        public System.IntPtr pMapEntries;

        public ulong dataSize;

        public System.IntPtr pData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineShaderStageCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint stage;

        public VkShaderModule_T module;

        public System.IntPtr pName;

        public System.IntPtr pSpecializationInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkComputePipelineCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkPipelineShaderStageCreateInfo stage;

        public VkPipelineLayout_T layout;

        public VkPipeline_T basePipelineHandle;

        public int basePipelineIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkVertexInputBindingDescription
    {
        public uint binding;

        public uint stride;

        public uint inputRate;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkVertexInputAttributeDescription
    {
        public uint location;

        public uint binding;

        public uint format;

        public uint offset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineVertexInputStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint vertexBindingDescriptionCount;

        public System.IntPtr pVertexBindingDescriptions;

        public uint vertexAttributeDescriptionCount;

        public System.IntPtr pVertexAttributeDescriptions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineInputAssemblyStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint topology;

        public uint primitiveRestartEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineTessellationStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint patchControlPoints;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkViewport
    {
        public float x;

        public float y;

        public float width;

        public float height;

        public float minDepth;

        public float maxDepth;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint viewportCount;

        public System.IntPtr pViewports;

        public uint scissorCount;

        public System.IntPtr pScissors;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint depthClampEnable;

        public uint rasterizerDiscardEnable;

        public uint polygonMode;

        public uint cullMode;

        public uint frontFace;

        public uint depthBiasEnable;

        public float depthBiasConstantFactor;

        public float depthBiasClamp;

        public float depthBiasSlopeFactor;

        public float lineWidth;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineMultisampleStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint rasterizationSamples;

        public uint sampleShadingEnable;

        public float minSampleShading;

        public System.IntPtr pSampleMask;

        public uint alphaToCoverageEnable;

        public uint alphaToOneEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkStencilOpState
    {
        public uint failOp;

        public uint passOp;

        public uint depthFailOp;

        public uint compareOp;

        public uint compareMask;

        public uint writeMask;

        public uint reference;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDepthStencilStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint depthTestEnable;

        public uint depthWriteEnable;

        public uint depthCompareOp;

        public uint depthBoundsTestEnable;

        public uint stencilTestEnable;

        public VkStencilOpState front;

        public VkStencilOpState back;

        public float minDepthBounds;

        public float maxDepthBounds;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineColorBlendAttachmentState
    {
        public uint blendEnable;

        public uint srcColorBlendFactor;

        public uint dstColorBlendFactor;

        public uint colorBlendOp;

        public uint srcAlphaBlendFactor;

        public uint dstAlphaBlendFactor;

        public uint alphaBlendOp;

        public uint colorWriteMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineColorBlendStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint logicOpEnable;

        public uint logicOp;

        public uint attachmentCount;

        public System.IntPtr pAttachments;

        public unsafe fixed float blendConstants[4];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDynamicStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint dynamicStateCount;

        public System.IntPtr pDynamicStates;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGraphicsPipelineCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint stageCount;

        public System.IntPtr pStages;

        public System.IntPtr pVertexInputState;

        public System.IntPtr pInputAssemblyState;

        public System.IntPtr pTessellationState;

        public System.IntPtr pViewportState;

        public System.IntPtr pRasterizationState;

        public System.IntPtr pMultisampleState;

        public System.IntPtr pDepthStencilState;

        public System.IntPtr pColorBlendState;

        public System.IntPtr pDynamicState;

        public VkPipelineLayout_T layout;

        public VkRenderPass_T renderPass;

        public uint subpass;

        public VkPipeline_T basePipelineHandle;

        public int basePipelineIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPushConstantRange
    {
        public uint stageFlags;

        public uint offset;

        public uint size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineLayoutCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint setLayoutCount;

        public System.IntPtr pSetLayouts;

        public uint pushConstantRangeCount;

        public System.IntPtr pPushConstantRanges;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint magFilter;

        public uint minFilter;

        public uint mipmapMode;

        public uint addressModeU;

        public uint addressModeV;

        public uint addressModeW;

        public float mipLodBias;

        public uint anisotropyEnable;

        public float maxAnisotropy;

        public uint compareEnable;

        public uint compareOp;

        public float minLod;

        public float maxLod;

        public uint borderColor;

        public uint unnormalizedCoordinates;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyDescriptorSet
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDescriptorSet_T srcSet;

        public uint srcBinding;

        public uint srcArrayElement;

        public VkDescriptorSet_T dstSet;

        public uint dstBinding;

        public uint dstArrayElement;

        public uint descriptorCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorBufferInfo
    {
        public VkBuffer_T buffer;

        public ulong offset;

        public ulong range;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorImageInfo
    {
        public VkSampler_T sampler;

        public VkImageView_T imageView;

        public uint imageLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPoolSize
    {
        public uint type;

        public uint descriptorCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPoolCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint maxSets;

        public uint poolSizeCount;

        public System.IntPtr pPoolSizes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDescriptorPool_T descriptorPool;

        public uint descriptorSetCount;

        public System.IntPtr pSetLayouts;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayoutBinding
    {
        public uint binding;

        public uint descriptorType;

        public uint descriptorCount;

        public uint stageFlags;

        public System.IntPtr pImmutableSamplers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayoutCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint bindingCount;

        public System.IntPtr pBindings;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWriteDescriptorSet
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDescriptorSet_T dstSet;

        public uint dstBinding;

        public uint dstArrayElement;

        public uint descriptorCount;

        public uint descriptorType;

        public System.IntPtr pImageInfo;

        public System.IntPtr pBufferInfo;

        public System.IntPtr pTexelBufferView;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentDescription
    {
        public uint flags;

        public uint format;

        public uint samples;

        public uint loadOp;

        public uint storeOp;

        public uint stencilLoadOp;

        public uint stencilStoreOp;

        public uint initialLayout;

        public uint finalLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentReference
    {
        public uint attachment;

        public uint layout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebufferCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkRenderPass_T renderPass;

        public uint attachmentCount;

        public System.IntPtr pAttachments;

        public uint width;

        public uint height;

        public uint layers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDescription
    {
        public uint flags;

        public uint pipelineBindPoint;

        public uint inputAttachmentCount;

        public System.IntPtr pInputAttachments;

        public uint colorAttachmentCount;

        public System.IntPtr pColorAttachments;

        public System.IntPtr pResolveAttachments;

        public System.IntPtr pDepthStencilAttachment;

        public uint preserveAttachmentCount;

        public System.IntPtr pPreserveAttachments;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDependency
    {
        public uint srcSubpass;

        public uint dstSubpass;

        public uint srcStageMask;

        public uint dstStageMask;

        public uint srcAccessMask;

        public uint dstAccessMask;

        public uint dependencyFlags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint attachmentCount;

        public System.IntPtr pAttachments;

        public uint subpassCount;

        public System.IntPtr pSubpasses;

        public uint dependencyCount;

        public System.IntPtr pDependencies;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPoolCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint queueFamilyIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkCommandPool_T commandPool;

        public uint level;

        public uint commandBufferCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferInheritanceInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkRenderPass_T renderPass;

        public uint subpass;

        public VkFramebuffer_T framebuffer;

        public uint occlusionQueryEnable;

        public uint queryFlags;

        public uint pipelineStatistics;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr pInheritanceInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferCopy
    {
        public ulong srcOffset;

        public ulong dstOffset;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageSubresourceLayers
    {
        public uint aspectMask;

        public uint mipLevel;

        public uint baseArrayLayer;

        public uint layerCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferImageCopy
    {
        public ulong bufferOffset;

        public uint bufferRowLength;

        public uint bufferImageHeight;

        public VkImageSubresourceLayers imageSubresource;

        public VkOffset3D imageOffset;

        public VkExtent3D imageExtent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkClearDepthStencilValue
    {
        public float depth;

        public uint stencil;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkClearAttachment
    {
        public uint aspectMask;

        public uint colorAttachment;

        public VkClearValue clearValue;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkClearRect
    {
        public VkRect2D rect;

        public uint baseArrayLayer;

        public uint layerCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageBlit
    {
        public VkImageSubresourceLayers srcSubresource;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public VkOffset3D[] srcOffsets;

        public VkImageSubresourceLayers dstSubresource;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public VkOffset3D[] dstOffsets;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageCopy
    {
        public VkImageSubresourceLayers srcSubresource;

        public VkOffset3D srcOffset;

        public VkImageSubresourceLayers dstSubresource;

        public VkOffset3D dstOffset;

        public VkExtent3D extent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageResolve
    {
        public VkImageSubresourceLayers srcSubresource;

        public VkOffset3D srcOffset;

        public VkImageSubresourceLayers dstSubresource;

        public VkOffset3D dstOffset;

        public VkExtent3D extent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkRenderPass_T renderPass;

        public VkFramebuffer_T framebuffer;

        public VkRect2D renderArea;

        public uint clearValueCount;

        public System.IntPtr pClearValues;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerYcbcrConversion_T
    {
        public System.IntPtr pointer;

        public VkSamplerYcbcrConversion_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorUpdateTemplate_T
    {
        public System.IntPtr pointer;

        public VkDescriptorUpdateTemplate_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubgroupFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkSubgroupFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSubgroupFeatureFlags(uint v)
        {
            return new VkSubgroupFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPeerMemoryFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkPeerMemoryFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkPeerMemoryFeatureFlags(uint v)
        {
            return new VkPeerMemoryFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryAllocateFlags
    {
        public uint value;


        public static implicit operator uint(VkMemoryAllocateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkMemoryAllocateFlags(uint v)
        {
            return new VkMemoryAllocateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPoolTrimFlags
    {
        public uint value;


        public static implicit operator uint(VkCommandPoolTrimFlags v)
        {
            return v.value;
        }

        public static implicit operator VkCommandPoolTrimFlags(uint v)
        {
            return new VkCommandPoolTrimFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorUpdateTemplateCreateFlags
    {
        public uint value;


        public static implicit operator uint(VkDescriptorUpdateTemplateCreateFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorUpdateTemplateCreateFlags(uint v)
        {
            return new VkDescriptorUpdateTemplateCreateFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryHandleTypeFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryHandleTypeFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryHandleTypeFlags(uint v)
        {
            return new VkExternalMemoryHandleTypeFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryFeatureFlags(uint v)
        {
            return new VkExternalMemoryFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalFenceHandleTypeFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalFenceHandleTypeFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalFenceHandleTypeFlags(uint v)
        {
            return new VkExternalFenceHandleTypeFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalFenceFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalFenceFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalFenceFeatureFlags(uint v)
        {
            return new VkExternalFenceFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceImportFlags
    {
        public uint value;


        public static implicit operator uint(VkFenceImportFlags v)
        {
            return v.value;
        }

        public static implicit operator VkFenceImportFlags(uint v)
        {
            return new VkFenceImportFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreImportFlags
    {
        public uint value;


        public static implicit operator uint(VkSemaphoreImportFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSemaphoreImportFlags(uint v)
        {
            return new VkSemaphoreImportFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalSemaphoreHandleTypeFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalSemaphoreHandleTypeFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalSemaphoreHandleTypeFlags(uint v)
        {
            return new VkExternalSemaphoreHandleTypeFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalSemaphoreFeatureFlags
    {
        public uint value;


        public static implicit operator uint(VkExternalSemaphoreFeatureFlags v)
        {
            return v.value;
        }

        public static implicit operator VkExternalSemaphoreFeatureFlags(uint v)
        {
            return new VkExternalSemaphoreFeatureFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSubgroupProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint subgroupSize;

        public uint supportedStages;

        public uint supportedOperations;

        public uint quadOperationsInAllStages;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindBufferMemoryInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T buffer;

        public VkDeviceMemory_T memory;

        public ulong memoryOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindImageMemoryInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T image;

        public VkDeviceMemory_T memory;

        public ulong memoryOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevice16BitStorageFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint storageBuffer16BitAccess;

        public uint uniformAndStorageBuffer16BitAccess;

        public uint storagePushConstant16;

        public uint storageInputOutput16;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryDedicatedRequirements
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint prefersDedicatedAllocation;

        public uint requiresDedicatedAllocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryDedicatedAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T image;

        public VkBuffer_T buffer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryAllocateFlagsInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint deviceMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupRenderPassBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceMask;

        public uint deviceRenderAreaCount;

        public System.IntPtr pDeviceRenderAreas;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupCommandBufferBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupSubmitInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreCount;

        public System.IntPtr pWaitSemaphoreDeviceIndices;

        public uint commandBufferCount;

        public System.IntPtr pCommandBufferDeviceMasks;

        public uint signalSemaphoreCount;

        public System.IntPtr pSignalSemaphoreDeviceIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupBindSparseInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint resourceDeviceIndex;

        public uint memoryDeviceIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindBufferMemoryDeviceGroupInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceIndexCount;

        public System.IntPtr pDeviceIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindImageMemoryDeviceGroupInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceIndexCount;

        public System.IntPtr pDeviceIndices;

        public uint splitInstanceBindRegionCount;

        public System.IntPtr pSplitInstanceBindRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceGroupProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint physicalDeviceCount;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public VkPhysicalDevice_T[] physicalDevices;

        public uint subsetAllocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupDeviceCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint physicalDeviceCount;

        public System.IntPtr pPhysicalDevices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferMemoryRequirementsInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T buffer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageMemoryRequirementsInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T image;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageSparseMemoryRequirementsInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T image;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryRequirements2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkMemoryRequirements memoryRequirements;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageMemoryRequirements2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSparseImageMemoryRequirements memoryRequirements;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFeatures2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkPhysicalDeviceFeatures features;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkPhysicalDeviceProperties properties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFormatProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkFormatProperties formatProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageFormatProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImageFormatProperties imageFormatProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceImageFormatInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint format;

        public uint type;

        public uint tiling;

        public uint usage;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueueFamilyProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkQueueFamilyProperties queueFamilyProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMemoryProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkPhysicalDeviceMemoryProperties memoryProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSparseImageFormatProperties2
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSparseImageFormatProperties properties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSparseImageFormatInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint format;

        public uint type;

        public uint samples;

        public uint usage;

        public uint tiling;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePointClippingProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pointClippingBehavior;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkInputAttachmentAspectReference
    {
        public uint subpass;

        public uint inputAttachmentIndex;

        public uint aspectMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassInputAttachmentAspectCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint aspectReferenceCount;

        public System.IntPtr pAspectReferences;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewUsageCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint usage;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineTessellationDomainOriginStateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint domainOrigin;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassMultiviewCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint subpassCount;

        public System.IntPtr pViewMasks;

        public uint dependencyCount;

        public System.IntPtr pViewOffsets;

        public uint correlationMaskCount;

        public System.IntPtr pCorrelationMasks;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMultiviewFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint multiview;

        public uint multiviewGeometryShader;

        public uint multiviewTessellationShader;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMultiviewProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxMultiviewViewCount;

        public uint maxMultiviewInstanceIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVariablePointersFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint variablePointersStorageBuffer;

        public uint variablePointers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceProtectedMemoryFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint protectedMemory;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceProtectedMemoryProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint protectedNoFault;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceQueueInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint queueFamilyIndex;

        public uint queueIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkProtectedSubmitInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint protectedSubmit;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerYcbcrConversionCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint format;

        public uint ycbcrModel;

        public uint ycbcrRange;

        public VkComponentMapping components;

        public uint xChromaOffset;

        public uint yChromaOffset;

        public uint chromaFilter;

        public uint forceExplicitReconstruction;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerYcbcrConversionInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSamplerYcbcrConversion_T conversion;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindImagePlaneMemoryInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint planeAspect;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImagePlaneMemoryRequirementsInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint planeAspect;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint samplerYcbcrConversion;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerYcbcrConversionImageFormatProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint combinedImageSamplerDescriptorCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorUpdateTemplateEntry
    {
        public uint dstBinding;

        public uint dstArrayElement;

        public uint descriptorCount;

        public uint descriptorType;

        public ulong offset;

        public ulong stride;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorUpdateTemplateCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint descriptorUpdateEntryCount;

        public System.IntPtr pDescriptorUpdateEntries;

        public uint templateType;

        public VkDescriptorSetLayout_T descriptorSetLayout;

        public uint pipelineBindPoint;

        public VkPipelineLayout_T pipelineLayout;

        public uint set;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryProperties
    {
        public uint externalMemoryFeatures;

        public uint exportFromImportedHandleTypes;

        public uint compatibleHandleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExternalImageFormatInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalImageFormatProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExternalMemoryProperties externalMemoryProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExternalBufferInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint usage;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalBufferProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExternalMemoryProperties externalMemoryProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceIDProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed byte deviceUUID[16];

        public unsafe fixed byte driverUUID[16];

        public unsafe fixed byte deviceLUID[8];

        public uint deviceNodeMask;

        public uint deviceLUIDValid;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryImageCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryBufferCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportMemoryAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExternalFenceInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalFenceProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint exportFromImportedHandleTypes;

        public uint compatibleHandleTypes;

        public uint externalFenceFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportFenceCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportSemaphoreCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExternalSemaphoreInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalSemaphoreProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint exportFromImportedHandleTypes;

        public uint compatibleHandleTypes;

        public uint externalSemaphoreFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMaintenance3Properties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxPerSetDescriptors;

        public ulong maxMemoryAllocationSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayoutSupport
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint supported;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderDrawParametersFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderDrawParameters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkResolveModeFlags
    {
        public uint value;


        public static implicit operator uint(VkResolveModeFlags v)
        {
            return v.value;
        }

        public static implicit operator VkResolveModeFlags(uint v)
        {
            return new VkResolveModeFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorBindingFlags
    {
        public uint value;


        public static implicit operator uint(VkDescriptorBindingFlags v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorBindingFlags(uint v)
        {
            return new VkDescriptorBindingFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreWaitFlags
    {
        public uint value;


        public static implicit operator uint(VkSemaphoreWaitFlags v)
        {
            return v.value;
        }

        public static implicit operator VkSemaphoreWaitFlags(uint v)
        {
            return new VkSemaphoreWaitFlags(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVulkan11Features
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint storageBuffer16BitAccess;

        public uint uniformAndStorageBuffer16BitAccess;

        public uint storagePushConstant16;

        public uint storageInputOutput16;

        public uint multiview;

        public uint multiviewGeometryShader;

        public uint multiviewTessellationShader;

        public uint variablePointersStorageBuffer;

        public uint variablePointers;

        public uint protectedMemory;

        public uint samplerYcbcrConversion;

        public uint shaderDrawParameters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVulkan11Properties
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed byte deviceUUID[16];

        public unsafe fixed byte driverUUID[16];

        public unsafe fixed byte deviceLUID[8];

        public uint deviceNodeMask;

        public uint deviceLUIDValid;

        public uint subgroupSize;

        public uint subgroupSupportedStages;

        public uint subgroupSupportedOperations;

        public uint subgroupQuadOperationsInAllStages;

        public uint pointClippingBehavior;

        public uint maxMultiviewViewCount;

        public uint maxMultiviewInstanceIndex;

        public uint protectedNoFault;

        public uint maxPerSetDescriptors;

        public ulong maxMemoryAllocationSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVulkan12Features
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint samplerMirrorClampToEdge;

        public uint drawIndirectCount;

        public uint storageBuffer8BitAccess;

        public uint uniformAndStorageBuffer8BitAccess;

        public uint storagePushConstant8;

        public uint shaderBufferInt64Atomics;

        public uint shaderSharedInt64Atomics;

        public uint shaderFloat16;

        public uint shaderInt8;

        public uint descriptorIndexing;

        public uint shaderInputAttachmentArrayDynamicIndexing;

        public uint shaderUniformTexelBufferArrayDynamicIndexing;

        public uint shaderStorageTexelBufferArrayDynamicIndexing;

        public uint shaderUniformBufferArrayNonUniformIndexing;

        public uint shaderSampledImageArrayNonUniformIndexing;

        public uint shaderStorageBufferArrayNonUniformIndexing;

        public uint shaderStorageImageArrayNonUniformIndexing;

        public uint shaderInputAttachmentArrayNonUniformIndexing;

        public uint shaderUniformTexelBufferArrayNonUniformIndexing;

        public uint shaderStorageTexelBufferArrayNonUniformIndexing;

        public uint descriptorBindingUniformBufferUpdateAfterBind;

        public uint descriptorBindingSampledImageUpdateAfterBind;

        public uint descriptorBindingStorageImageUpdateAfterBind;

        public uint descriptorBindingStorageBufferUpdateAfterBind;

        public uint descriptorBindingUniformTexelBufferUpdateAfterBind;

        public uint descriptorBindingStorageTexelBufferUpdateAfterBind;

        public uint descriptorBindingUpdateUnusedWhilePending;

        public uint descriptorBindingPartiallyBound;

        public uint descriptorBindingVariableDescriptorCount;

        public uint runtimeDescriptorArray;

        public uint samplerFilterMinmax;

        public uint scalarBlockLayout;

        public uint imagelessFramebuffer;

        public uint uniformBufferStandardLayout;

        public uint shaderSubgroupExtendedTypes;

        public uint separateDepthStencilLayouts;

        public uint hostQueryReset;

        public uint timelineSemaphore;

        public uint bufferDeviceAddress;

        public uint bufferDeviceAddressCaptureReplay;

        public uint bufferDeviceAddressMultiDevice;

        public uint vulkanMemoryModel;

        public uint vulkanMemoryModelDeviceScope;

        public uint vulkanMemoryModelAvailabilityVisibilityChains;

        public uint shaderOutputViewportIndex;

        public uint shaderOutputLayer;

        public uint subgroupBroadcastDynamicId;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkConformanceVersion
    {
        public byte major;

        public byte minor;

        public byte subminor;

        public byte patch;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVulkan12Properties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint driverID;

        public unsafe fixed sbyte driverName[256];

        public unsafe fixed sbyte driverInfo[256];

        public VkConformanceVersion conformanceVersion;

        public uint denormBehaviorIndependence;

        public uint roundingModeIndependence;

        public uint shaderSignedZeroInfNanPreserveFloat16;

        public uint shaderSignedZeroInfNanPreserveFloat32;

        public uint shaderSignedZeroInfNanPreserveFloat64;

        public uint shaderDenormPreserveFloat16;

        public uint shaderDenormPreserveFloat32;

        public uint shaderDenormPreserveFloat64;

        public uint shaderDenormFlushToZeroFloat16;

        public uint shaderDenormFlushToZeroFloat32;

        public uint shaderDenormFlushToZeroFloat64;

        public uint shaderRoundingModeRTEFloat16;

        public uint shaderRoundingModeRTEFloat32;

        public uint shaderRoundingModeRTEFloat64;

        public uint shaderRoundingModeRTZFloat16;

        public uint shaderRoundingModeRTZFloat32;

        public uint shaderRoundingModeRTZFloat64;

        public uint maxUpdateAfterBindDescriptorsInAllPools;

        public uint shaderUniformBufferArrayNonUniformIndexingNative;

        public uint shaderSampledImageArrayNonUniformIndexingNative;

        public uint shaderStorageBufferArrayNonUniformIndexingNative;

        public uint shaderStorageImageArrayNonUniformIndexingNative;

        public uint shaderInputAttachmentArrayNonUniformIndexingNative;

        public uint robustBufferAccessUpdateAfterBind;

        public uint quadDivergentImplicitLod;

        public uint maxPerStageDescriptorUpdateAfterBindSamplers;

        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;

        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;

        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;

        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;

        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;

        public uint maxPerStageUpdateAfterBindResources;

        public uint maxDescriptorSetUpdateAfterBindSamplers;

        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;

        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;

        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;

        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;

        public uint maxDescriptorSetUpdateAfterBindSampledImages;

        public uint maxDescriptorSetUpdateAfterBindStorageImages;

        public uint maxDescriptorSetUpdateAfterBindInputAttachments;

        public uint supportedDepthResolveModes;

        public uint supportedStencilResolveModes;

        public uint independentResolveNone;

        public uint independentResolve;

        public uint filterMinmaxSingleComponentFormats;

        public uint filterMinmaxImageComponentMapping;

        public ulong maxTimelineSemaphoreValueDifference;

        public uint framebufferIntegerColorSampleCounts;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageFormatListCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint viewFormatCount;

        public System.IntPtr pViewFormats;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentDescription2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint format;

        public uint samples;

        public uint loadOp;

        public uint storeOp;

        public uint stencilLoadOp;

        public uint stencilStoreOp;

        public uint initialLayout;

        public uint finalLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentReference2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint attachment;

        public uint layout;

        public uint aspectMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDescription2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint pipelineBindPoint;

        public uint viewMask;

        public uint inputAttachmentCount;

        public System.IntPtr pInputAttachments;

        public uint colorAttachmentCount;

        public System.IntPtr pColorAttachments;

        public System.IntPtr pResolveAttachments;

        public System.IntPtr pDepthStencilAttachment;

        public uint preserveAttachmentCount;

        public System.IntPtr pPreserveAttachments;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDependency2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint srcSubpass;

        public uint dstSubpass;

        public uint srcStageMask;

        public uint dstStageMask;

        public uint srcAccessMask;

        public uint dstAccessMask;

        public uint dependencyFlags;

        public int viewOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassCreateInfo2
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint attachmentCount;

        public System.IntPtr pAttachments;

        public uint subpassCount;

        public System.IntPtr pSubpasses;

        public uint dependencyCount;

        public System.IntPtr pDependencies;

        public uint correlatedViewMaskCount;

        public System.IntPtr pCorrelatedViewMasks;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint contents;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassEndInfo
    {
        public uint sType;

        public System.IntPtr pNext;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevice8BitStorageFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint storageBuffer8BitAccess;

        public uint uniformAndStorageBuffer8BitAccess;

        public uint storagePushConstant8;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDriverProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint driverID;

        public unsafe fixed sbyte driverName[256];

        public unsafe fixed sbyte driverInfo[256];

        public VkConformanceVersion conformanceVersion;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderAtomicInt64Features
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderBufferInt64Atomics;

        public uint shaderSharedInt64Atomics;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderFloat16Int8Features
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderFloat16;

        public uint shaderInt8;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFloatControlsProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint denormBehaviorIndependence;

        public uint roundingModeIndependence;

        public uint shaderSignedZeroInfNanPreserveFloat16;

        public uint shaderSignedZeroInfNanPreserveFloat32;

        public uint shaderSignedZeroInfNanPreserveFloat64;

        public uint shaderDenormPreserveFloat16;

        public uint shaderDenormPreserveFloat32;

        public uint shaderDenormPreserveFloat64;

        public uint shaderDenormFlushToZeroFloat16;

        public uint shaderDenormFlushToZeroFloat32;

        public uint shaderDenormFlushToZeroFloat64;

        public uint shaderRoundingModeRTEFloat16;

        public uint shaderRoundingModeRTEFloat32;

        public uint shaderRoundingModeRTEFloat64;

        public uint shaderRoundingModeRTZFloat16;

        public uint shaderRoundingModeRTZFloat32;

        public uint shaderRoundingModeRTZFloat64;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint bindingCount;

        public System.IntPtr pBindingFlags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDescriptorIndexingFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderInputAttachmentArrayDynamicIndexing;

        public uint shaderUniformTexelBufferArrayDynamicIndexing;

        public uint shaderStorageTexelBufferArrayDynamicIndexing;

        public uint shaderUniformBufferArrayNonUniformIndexing;

        public uint shaderSampledImageArrayNonUniformIndexing;

        public uint shaderStorageBufferArrayNonUniformIndexing;

        public uint shaderStorageImageArrayNonUniformIndexing;

        public uint shaderInputAttachmentArrayNonUniformIndexing;

        public uint shaderUniformTexelBufferArrayNonUniformIndexing;

        public uint shaderStorageTexelBufferArrayNonUniformIndexing;

        public uint descriptorBindingUniformBufferUpdateAfterBind;

        public uint descriptorBindingSampledImageUpdateAfterBind;

        public uint descriptorBindingStorageImageUpdateAfterBind;

        public uint descriptorBindingStorageBufferUpdateAfterBind;

        public uint descriptorBindingUniformTexelBufferUpdateAfterBind;

        public uint descriptorBindingStorageTexelBufferUpdateAfterBind;

        public uint descriptorBindingUpdateUnusedWhilePending;

        public uint descriptorBindingPartiallyBound;

        public uint descriptorBindingVariableDescriptorCount;

        public uint runtimeDescriptorArray;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDescriptorIndexingProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxUpdateAfterBindDescriptorsInAllPools;

        public uint shaderUniformBufferArrayNonUniformIndexingNative;

        public uint shaderSampledImageArrayNonUniformIndexingNative;

        public uint shaderStorageBufferArrayNonUniformIndexingNative;

        public uint shaderStorageImageArrayNonUniformIndexingNative;

        public uint shaderInputAttachmentArrayNonUniformIndexingNative;

        public uint robustBufferAccessUpdateAfterBind;

        public uint quadDivergentImplicitLod;

        public uint maxPerStageDescriptorUpdateAfterBindSamplers;

        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;

        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;

        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;

        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;

        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;

        public uint maxPerStageUpdateAfterBindResources;

        public uint maxDescriptorSetUpdateAfterBindSamplers;

        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;

        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;

        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;

        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;

        public uint maxDescriptorSetUpdateAfterBindSampledImages;

        public uint maxDescriptorSetUpdateAfterBindStorageImages;

        public uint maxDescriptorSetUpdateAfterBindInputAttachments;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint descriptorSetCount;

        public System.IntPtr pDescriptorCounts;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxVariableDescriptorCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassDescriptionDepthStencilResolve
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint depthResolveMode;

        public uint stencilResolveMode;

        public System.IntPtr pDepthStencilResolveAttachment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDepthStencilResolveProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint supportedDepthResolveModes;

        public uint supportedStencilResolveModes;

        public uint independentResolveNone;

        public uint independentResolve;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint scalarBlockLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageStencilUsageCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stencilUsage;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerReductionModeCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint reductionMode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint filterMinmaxSingleComponentFormats;

        public uint filterMinmaxImageComponentMapping;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint vulkanMemoryModel;

        public uint vulkanMemoryModelDeviceScope;

        public uint vulkanMemoryModelAvailabilityVisibilityChains;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceImagelessFramebufferFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint imagelessFramebuffer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebufferAttachmentImageInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint usage;

        public uint width;

        public uint height;

        public uint layerCount;

        public uint viewFormatCount;

        public System.IntPtr pViewFormats;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebufferAttachmentsCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint attachmentImageInfoCount;

        public System.IntPtr pAttachmentImageInfos;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassAttachmentBeginInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint attachmentCount;

        public System.IntPtr pAttachments;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint uniformBufferStandardLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderSubgroupExtendedTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint separateDepthStencilLayouts;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentReferenceStencilLayout
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stencilLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentDescriptionStencilLayout
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stencilInitialLayout;

        public uint stencilFinalLayout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceHostQueryResetFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint hostQueryReset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint timelineSemaphore;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTimelineSemaphoreProperties
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong maxTimelineSemaphoreValueDifference;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreTypeCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint semaphoreType;

        public ulong initialValue;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkTimelineSemaphoreSubmitInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreValueCount;

        public System.IntPtr pWaitSemaphoreValues;

        public uint signalSemaphoreValueCount;

        public System.IntPtr pSignalSemaphoreValues;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreWaitInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint semaphoreCount;

        public System.IntPtr pSemaphores;

        public System.IntPtr pValues;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreSignalInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSemaphore_T semaphore;

        public ulong value;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint bufferDeviceAddress;

        public uint bufferDeviceAddressCaptureReplay;

        public uint bufferDeviceAddressMultiDevice;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferDeviceAddressInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T buffer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferOpaqueCaptureAddressCreateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong opaqueCaptureAddress;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong opaqueCaptureAddress;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceMemory_T memory;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceKHR_T
    {
        public System.IntPtr pointer;

        public VkSurfaceKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCompositeAlphaFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkCompositeAlphaFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkCompositeAlphaFlagsKHR(uint v)
        {
            return new VkCompositeAlphaFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceTransformFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkSurfaceTransformFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkSurfaceTransformFlagsKHR(uint v)
        {
            return new VkSurfaceTransformFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceCapabilitiesKHR
    {
        public uint minImageCount;

        public uint maxImageCount;

        public VkExtent2D currentExtent;

        public VkExtent2D minImageExtent;

        public VkExtent2D maxImageExtent;

        public uint maxImageArrayLayers;

        public uint supportedTransforms;

        public uint currentTransform;

        public uint supportedCompositeAlpha;

        public uint supportedUsageFlags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceFormatKHR
    {
        public uint format;

        public uint colorSpace;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSwapchainKHR_T
    {
        public System.IntPtr pointer;

        public VkSwapchainKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSwapchainCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkSwapchainCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkSwapchainCreateFlagsKHR(uint v)
        {
            return new VkSwapchainCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupPresentModeFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkDeviceGroupPresentModeFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceGroupPresentModeFlagsKHR(uint v)
        {
            return new VkDeviceGroupPresentModeFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSwapchainCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkSurfaceKHR_T surface;

        public uint minImageCount;

        public uint imageFormat;

        public uint imageColorSpace;

        public VkExtent2D imageExtent;

        public uint imageArrayLayers;

        public uint imageUsage;

        public uint imageSharingMode;

        public uint queueFamilyIndexCount;

        public System.IntPtr pQueueFamilyIndices;

        public uint preTransform;

        public uint compositeAlpha;

        public uint presentMode;

        public uint clipped;

        public VkSwapchainKHR_T oldSwapchain;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPresentInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreCount;

        public System.IntPtr pWaitSemaphores;

        public uint swapchainCount;

        public System.IntPtr pSwapchains;

        public System.IntPtr pImageIndices;

        public System.IntPtr pResults;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageSwapchainCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSwapchainKHR_T swapchain;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindImageMemorySwapchainInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSwapchainKHR_T swapchain;

        public uint imageIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAcquireNextImageInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSwapchainKHR_T swapchain;

        public ulong timeout;

        public VkSemaphore_T semaphore;

        public VkFence_T fence;

        public uint deviceMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupPresentCapabilitiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed uint presentMask[32];

        public uint modes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupPresentInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint swapchainCount;

        public System.IntPtr pDeviceMasks;

        public uint mode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceGroupSwapchainCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint modes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayKHR_T
    {
        public System.IntPtr pointer;

        public VkDisplayKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModeKHR_T
    {
        public System.IntPtr pointer;

        public VkDisplayModeKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModeCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkDisplayModeCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkDisplayModeCreateFlagsKHR(uint v)
        {
            return new VkDisplayModeCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlaneAlphaFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkDisplayPlaneAlphaFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkDisplayPlaneAlphaFlagsKHR(uint v)
        {
            return new VkDisplayPlaneAlphaFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplaySurfaceCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkDisplaySurfaceCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkDisplaySurfaceCreateFlagsKHR(uint v)
        {
            return new VkDisplaySurfaceCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModeParametersKHR
    {
        public VkExtent2D visibleRegion;

        public uint refreshRate;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModeCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkDisplayModeParametersKHR parameters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModePropertiesKHR
    {
        public VkDisplayModeKHR_T displayMode;

        public VkDisplayModeParametersKHR parameters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlaneCapabilitiesKHR
    {
        public uint supportedAlpha;

        public VkOffset2D minSrcPosition;

        public VkOffset2D maxSrcPosition;

        public VkExtent2D minSrcExtent;

        public VkExtent2D maxSrcExtent;

        public VkOffset2D minDstPosition;

        public VkOffset2D maxDstPosition;

        public VkExtent2D minDstExtent;

        public VkExtent2D maxDstExtent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlanePropertiesKHR
    {
        public VkDisplayKHR_T currentDisplay;

        public uint currentStackIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPropertiesKHR
    {
        public VkDisplayKHR_T display;

        public System.IntPtr displayName;

        public VkExtent2D physicalDimensions;

        public VkExtent2D physicalResolution;

        public uint supportedTransforms;

        public uint planeReorderPossible;

        public uint persistentContent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplaySurfaceCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public VkDisplayModeKHR_T displayMode;

        public uint planeIndex;

        public uint planeStackIndex;

        public uint transform;

        public float globalAlpha;

        public uint alphaMode;

        public VkExtent2D imageExtent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPresentInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkRect2D srcRect;

        public VkRect2D dstRect;

        public uint persistent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPeerMemoryFeatureFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkPeerMemoryFeatureFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkPeerMemoryFeatureFlagsKHR(uint v)
        {
            return new VkPeerMemoryFeatureFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryAllocateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkMemoryAllocateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkMemoryAllocateFlagsKHR(uint v)
        {
            return new VkMemoryAllocateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandPoolTrimFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkCommandPoolTrimFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkCommandPoolTrimFlagsKHR(uint v)
        {
            return new VkCommandPoolTrimFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryHandleTypeFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryHandleTypeFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryHandleTypeFlagsKHR(uint v)
        {
            return new VkExternalMemoryHandleTypeFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryFeatureFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryFeatureFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryFeatureFlagsKHR(uint v)
        {
            return new VkExternalMemoryFeatureFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportMemoryFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

        public int fd;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryFdPropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint memoryTypeBits;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryGetFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceMemory_T memory;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalSemaphoreHandleTypeFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalSemaphoreHandleTypeFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalSemaphoreHandleTypeFlagsKHR(uint v)
        {
            return new VkExternalSemaphoreHandleTypeFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalSemaphoreFeatureFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalSemaphoreFeatureFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalSemaphoreFeatureFlagsKHR(uint v)
        {
            return new VkExternalSemaphoreFeatureFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreImportFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkSemaphoreImportFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkSemaphoreImportFlagsKHR(uint v)
        {
            return new VkSemaphoreImportFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportSemaphoreFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSemaphore_T semaphore;

        public uint flags;

        public uint handleType;

        public int fd;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreGetFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSemaphore_T semaphore;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxPushDescriptors;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRectLayerKHR
    {
        public VkOffset2D offset;

        public VkExtent2D extent;

        public uint layer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPresentRegionKHR
    {
        public uint rectangleCount;

        public System.IntPtr pRectangles;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPresentRegionsKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint swapchainCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorUpdateTemplateCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkDescriptorUpdateTemplateCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorUpdateTemplateCreateFlagsKHR(uint v)
        {
            return new VkDescriptorUpdateTemplateCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSharedPresentSurfaceCapabilitiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sharedPresentSupportedUsageFlags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalFenceHandleTypeFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalFenceHandleTypeFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalFenceHandleTypeFlagsKHR(uint v)
        {
            return new VkExternalFenceHandleTypeFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalFenceFeatureFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkExternalFenceFeatureFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkExternalFenceFeatureFlagsKHR(uint v)
        {
            return new VkExternalFenceFeatureFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceImportFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkFenceImportFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkFenceImportFlagsKHR(uint v)
        {
            return new VkFenceImportFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportFenceFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkFence_T fence;

        public uint flags;

        public uint handleType;

        public int fd;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceGetFdInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkFence_T fence;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceCounterDescriptionFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkPerformanceCounterDescriptionFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkPerformanceCounterDescriptionFlagsKHR(uint v)
        {
            return new VkPerformanceCounterDescriptionFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAcquireProfilingLockFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkAcquireProfilingLockFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkAcquireProfilingLockFlagsKHR(uint v)
        {
            return new VkAcquireProfilingLockFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint performanceCounterQueryPools;

        public uint performanceCounterMultipleQueryPools;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint allowCommandBufferQueryCopies;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceCounterKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint unit;

        public uint scope;

        public uint storage;

        public unsafe fixed byte uuid[16];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceCounterDescriptionKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public unsafe fixed sbyte name[256];

        public unsafe fixed sbyte category[256];

        public unsafe fixed sbyte description[256];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPoolPerformanceCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint queueFamilyIndex;

        public uint counterIndexCount;

        public System.IntPtr pCounterIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAcquireProfilingLockInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public ulong timeout;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceQuerySubmitInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint counterPassIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSurfaceInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSurfaceKHR_T surface;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceCapabilities2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSurfaceCapabilitiesKHR surfaceCapabilities;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceFormat2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSurfaceFormatKHR surfaceFormat;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayProperties2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDisplayPropertiesKHR displayProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlaneProperties2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDisplayPlanePropertiesKHR displayPlaneProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayModeProperties2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDisplayModePropertiesKHR displayModeProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlaneInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDisplayModeKHR_T mode;

        public uint planeIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPlaneCapabilities2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDisplayPlaneCapabilitiesKHR capabilities;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderClockFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderSubgroupClock;

        public uint shaderDeviceClock;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkResolveModeFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkResolveModeFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkResolveModeFlagsKHR(uint v)
        {
            return new VkResolveModeFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreWaitFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkSemaphoreWaitFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkSemaphoreWaitFlagsKHR(uint v)
        {
            return new VkSemaphoreWaitFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderTerminateInvocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFragmentShadingRateAttachmentInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pFragmentShadingRateAttachment;

        public VkExtent2D shadingRateAttachmentTexelSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExtent2D fragmentSize;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public uint[] combinerOps;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pipelineFragmentShadingRate;

        public uint primitiveFragmentShadingRate;

        public uint attachmentFragmentShadingRate;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExtent2D minFragmentShadingRateAttachmentTexelSize;

        public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;

        public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;

        public uint primitiveFragmentShadingRateWithMultipleViewports;

        public uint layeredShadingRateAttachments;

        public uint fragmentShadingRateNonTrivialCombinerOps;

        public VkExtent2D maxFragmentSize;

        public uint maxFragmentSizeAspectRatio;

        public uint maxFragmentShadingRateCoverageSamples;

        public uint maxFragmentShadingRateRasterizationSamples;

        public uint fragmentShadingRateWithShaderDepthStencilWrites;

        public uint fragmentShadingRateWithSampleMask;

        public uint fragmentShadingRateWithShaderSampleMask;

        public uint fragmentShadingRateWithConservativeRasterization;

        public uint fragmentShadingRateWithFragmentShaderInterlock;

        public uint fragmentShadingRateWithCustomSampleLocations;

        public uint fragmentShadingRateStrictMultiplyCombiner;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShadingRateKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sampleCounts;

        public VkExtent2D fragmentSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceProtectedCapabilitiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint supportsProtected;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeferredOperationKHR_T
    {
        public System.IntPtr pointer;

        public VkDeferredOperationKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pipelineExecutableInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkPipeline_T pipeline;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineExecutablePropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stages;

        public unsafe fixed sbyte name[256];

        public unsafe fixed sbyte description[256];

        public uint subgroupSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineExecutableInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkPipeline_T pipeline;

        public uint executableIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineExecutableStatisticKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed sbyte name[256];

        public unsafe fixed sbyte description[256];

        public uint format;

        public VkPipelineExecutableStatisticValueKHR value;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineExecutableInternalRepresentationKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed sbyte name[256];

        public unsafe fixed sbyte description[256];

        public uint isText;

        public ulong dataSize;

        public System.IntPtr pData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineLibraryCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint libraryCount;

        public System.IntPtr pLibraries;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferCopy2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong srcOffset;

        public ulong dstOffset;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyBufferInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T srcBuffer;

        public VkBuffer_T dstBuffer;

        public uint regionCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageCopy2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImageSubresourceLayers srcSubresource;

        public VkOffset3D srcOffset;

        public VkImageSubresourceLayers dstSubresource;

        public VkOffset3D dstOffset;

        public VkExtent3D extent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyImageInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T srcImage;

        public uint srcImageLayout;

        public VkImage_T dstImage;

        public uint dstImageLayout;

        public uint regionCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferImageCopy2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong bufferOffset;

        public uint bufferRowLength;

        public uint bufferImageHeight;

        public VkImageSubresourceLayers imageSubresource;

        public VkOffset3D imageOffset;

        public VkExtent3D imageExtent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyBufferToImageInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T srcBuffer;

        public VkImage_T dstImage;

        public uint dstImageLayout;

        public uint regionCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyImageToBufferInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T srcImage;

        public uint srcImageLayout;

        public VkBuffer_T dstBuffer;

        public uint regionCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageBlit2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImageSubresourceLayers srcSubresource;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public VkOffset3D[] srcOffsets;

        public VkImageSubresourceLayers dstSubresource;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public VkOffset3D[] dstOffsets;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBlitImageInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T srcImage;

        public uint srcImageLayout;

        public VkImage_T dstImage;

        public uint dstImageLayout;

        public uint regionCount;

        public System.IntPtr pRegions;

        public uint filter;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageResolve2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImageSubresourceLayers srcSubresource;

        public VkOffset3D srcOffset;

        public VkImageSubresourceLayers dstSubresource;

        public VkOffset3D dstOffset;

        public VkExtent3D extent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkResolveImageInfo2KHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T srcImage;

        public uint srcImageLayout;

        public VkImage_T dstImage;

        public uint dstImageLayout;

        public uint regionCount;

        public System.IntPtr pRegions;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugReportCallbackEXT_T
    {
        public System.IntPtr pointer;

        public VkDebugReportCallbackEXT_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugReportFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDebugReportFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDebugReportFlagsEXT(uint v)
        {
            return new VkDebugReportFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugReportCallbackCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr pfnCallback;

        public System.IntPtr pUserData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationStateRasterizationOrderAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint rasterizationOrder;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugMarkerObjectNameInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint objectType;

        public ulong @object;

        public System.IntPtr pObjectName;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugMarkerObjectTagInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint objectType;

        public ulong @object;

        public ulong tagName;

        public ulong tagSize;

        public System.IntPtr pTag;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugMarkerMarkerInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pMarkerName;

        public unsafe fixed float color[4];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDedicatedAllocationImageCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint dedicatedAllocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDedicatedAllocationBufferCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint dedicatedAllocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDedicatedAllocationMemoryAllocateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImage_T image;

        public VkBuffer_T buffer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationStateStreamCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPipelineRasterizationStateStreamCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineRasterizationStateStreamCreateFlagsEXT(uint v)
        {
            return new VkPipelineRasterizationStateStreamCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint transformFeedback;

        public uint geometryStreams;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxTransformFeedbackStreams;

        public uint maxTransformFeedbackBuffers;

        public ulong maxTransformFeedbackBufferSize;

        public uint maxTransformFeedbackStreamDataSize;

        public uint maxTransformFeedbackBufferDataSize;

        public uint maxTransformFeedbackBufferDataStride;

        public uint transformFeedbackQueries;

        public uint transformFeedbackStreamsLinesTriangles;

        public uint transformFeedbackRasterizationStreamSelect;

        public uint transformFeedbackDraw;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint rasterizationStream;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewHandleInfoNVX
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkImageView_T imageView;

        public uint descriptorType;

        public VkSampler_T sampler;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewAddressPropertiesNVX
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong deviceAddress;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkTextureLODGatherFormatPropertiesAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint supportsTextureGatherLODBiasAMD;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderResourceUsageAMD
    {
        public uint numUsedVgprs;

        public uint numUsedSgprs;

        public uint ldsSizePerLocalWorkGroup;

        public ulong ldsUsageSizeInBytes;

        public ulong scratchMemUsageInBytes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderStatisticsInfoAMD
    {
        public uint shaderStageMask;

        public VkShaderResourceUsageAMD resourceUsage;

        public uint numPhysicalVgprs;

        public uint numPhysicalSgprs;

        public uint numAvailableVgprs;

        public uint numAvailableSgprs;

        public unsafe fixed uint computeWorkGroupSize[3];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint cornerSampledImage;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryHandleTypeFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryHandleTypeFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryHandleTypeFlagsNV(uint v)
        {
            return new VkExternalMemoryHandleTypeFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryFeatureFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkExternalMemoryFeatureFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkExternalMemoryFeatureFlagsNV(uint v)
        {
            return new VkExternalMemoryFeatureFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalImageFormatPropertiesNV
    {
        public VkImageFormatProperties imageFormatProperties;

        public uint externalMemoryFeatures;

        public uint exportFromImportedHandleTypes;

        public uint compatibleHandleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExternalMemoryImageCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportMemoryAllocateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleTypes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkValidationFlagsEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint disabledValidationCheckCount;

        public System.IntPtr pDisabledValidationChecks;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint textureCompressionASTC_HDR;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageViewASTCDecodeModeEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint decodeMode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint decodeModeSharedExponent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkConditionalRenderingFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkConditionalRenderingFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkConditionalRenderingFlagsEXT(uint v)
        {
            return new VkConditionalRenderingFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkConditionalRenderingBeginInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T buffer;

        public ulong offset;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint conditionalRendering;

        public uint inheritedConditionalRendering;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint conditionalRenderingEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkViewportWScalingNV
    {
        public float xcoeff;

        public float ycoeff;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportWScalingStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint viewportWScalingEnable;

        public uint viewportCount;

        public System.IntPtr pViewportWScalings;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceCounterFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkSurfaceCounterFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkSurfaceCounterFlagsEXT(uint v)
        {
            return new VkSurfaceCounterFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceCapabilities2EXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint minImageCount;

        public uint maxImageCount;

        public VkExtent2D currentExtent;

        public VkExtent2D minImageExtent;

        public VkExtent2D maxImageExtent;

        public uint maxImageArrayLayers;

        public uint supportedTransforms;

        public uint currentTransform;

        public uint supportedCompositeAlpha;

        public uint supportedUsageFlags;

        public uint supportedSurfaceCounters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayPowerInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint powerState;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceEventInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceEvent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayEventInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint displayEvent;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSwapchainCounterCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint surfaceCounters;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRefreshCycleDurationGOOGLE
    {
        public ulong refreshDuration;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPastPresentationTimingGOOGLE
    {
        public uint presentID;

        public ulong desiredPresentTime;

        public ulong actualPresentTime;

        public ulong earliestPresentTime;

        public ulong presentMargin;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPresentTimeGOOGLE
    {
        public uint presentID;

        public ulong desiredPresentTime;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPresentTimesInfoGOOGLE
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint swapchainCount;

        public System.IntPtr pTimes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint perViewPositionAllComponents;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportSwizzleStateCreateFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkPipelineViewportSwizzleStateCreateFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineViewportSwizzleStateCreateFlagsNV(uint v)
        {
            return new VkPipelineViewportSwizzleStateCreateFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkViewportSwizzleNV
    {
        public uint x;

        public uint y;

        public uint z;

        public uint w;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportSwizzleStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint viewportCount;

        public System.IntPtr pViewportSwizzles;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDiscardRectangleStateCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPipelineDiscardRectangleStateCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineDiscardRectangleStateCreateFlagsEXT(uint v)
        {
            return new VkPipelineDiscardRectangleStateCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxDiscardRectangles;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint discardRectangleMode;

        public uint discardRectangleCount;

        public System.IntPtr pDiscardRectangles;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationConservativeStateCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPipelineRasterizationConservativeStateCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineRasterizationConservativeStateCreateFlagsEXT(uint v)
        {
            return new VkPipelineRasterizationConservativeStateCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public float primitiveOverestimationSize;

        public float maxExtraPrimitiveOverestimationSize;

        public float extraPrimitiveOverestimationSizeGranularity;

        public uint primitiveUnderestimation;

        public uint conservativePointAndLineRasterization;

        public uint degenerateTrianglesRasterized;

        public uint degenerateLinesRasterized;

        public uint fullyCoveredFragmentShaderInputVariable;

        public uint conservativeRasterizationPostDepthCoverage;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint conservativeRasterizationMode;

        public float extraPrimitiveOverestimationSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPipelineRasterizationDepthClipStateCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineRasterizationDepthClipStateCreateFlagsEXT(uint v)
        {
            return new VkPipelineRasterizationDepthClipStateCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint depthClipEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint depthClipEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkXYColorEXT
    {
        public float x;

        public float y;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkHdrMetadataEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkXYColorEXT displayPrimaryRed;

        public VkXYColorEXT displayPrimaryGreen;

        public VkXYColorEXT displayPrimaryBlue;

        public VkXYColorEXT whitePoint;

        public float maxLuminance;

        public float minLuminance;

        public float maxContentLightLevel;

        public float maxFrameAverageLightLevel;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessengerEXT_T
    {
        public System.IntPtr pointer;

        public VkDebugUtilsMessengerEXT_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessengerCallbackDataFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDebugUtilsMessengerCallbackDataFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDebugUtilsMessengerCallbackDataFlagsEXT(uint v)
        {
            return new VkDebugUtilsMessengerCallbackDataFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessageTypeFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDebugUtilsMessageTypeFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDebugUtilsMessageTypeFlagsEXT(uint v)
        {
            return new VkDebugUtilsMessageTypeFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessageSeverityFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDebugUtilsMessageSeverityFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDebugUtilsMessageSeverityFlagsEXT(uint v)
        {
            return new VkDebugUtilsMessageSeverityFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessengerCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDebugUtilsMessengerCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDebugUtilsMessengerCreateFlagsEXT(uint v)
        {
            return new VkDebugUtilsMessengerCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsLabelEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pLabelName;

        public unsafe fixed float color[4];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsObjectNameInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint objectType;

        public ulong objectHandle;

        public System.IntPtr pObjectName;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessengerCallbackDataEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr pMessageIdName;

        public int messageIdNumber;

        public System.IntPtr pMessage;

        public uint queueLabelCount;

        public System.IntPtr pQueueLabels;

        public uint cmdBufLabelCount;

        public System.IntPtr pCmdBufLabels;

        public uint objectCount;

        public System.IntPtr pObjects;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsMessengerCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint messageSeverity;

        public uint messageType;

        public System.IntPtr pfnUserCallback;

        public System.IntPtr pUserData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDebugUtilsObjectTagInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint objectType;

        public ulong objectHandle;

        public ulong tagName;

        public ulong tagSize;

        public System.IntPtr pTag;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceInlineUniformBlockFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint inlineUniformBlock;

        public uint descriptorBindingInlineUniformBlockUpdateAfterBind;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceInlineUniformBlockPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxInlineUniformBlockSize;

        public uint maxPerStageDescriptorInlineUniformBlocks;

        public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;

        public uint maxDescriptorSetInlineUniformBlocks;

        public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWriteDescriptorSetInlineUniformBlockEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint dataSize;

        public System.IntPtr pData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorPoolInlineUniformBlockCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxInlineUniformBlockBindings;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSampleLocationEXT
    {
        public float x;

        public float y;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSampleLocationsInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sampleLocationsPerPixel;

        public VkExtent2D sampleLocationGridSize;

        public uint sampleLocationsCount;

        public System.IntPtr pSampleLocations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAttachmentSampleLocationsEXT
    {
        public uint attachmentIndex;

        public VkSampleLocationsInfoEXT sampleLocationsInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSubpassSampleLocationsEXT
    {
        public uint subpassIndex;

        public VkSampleLocationsInfoEXT sampleLocationsInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassSampleLocationsBeginInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint attachmentInitialSampleLocationsCount;

        public System.IntPtr pAttachmentInitialSampleLocations;

        public uint postSubpassSampleLocationsCount;

        public System.IntPtr pPostSubpassSampleLocations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineSampleLocationsStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sampleLocationsEnable;

        public VkSampleLocationsInfoEXT sampleLocationsInfo;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sampleLocationSampleCounts;

        public VkExtent2D maxSampleLocationGridSize;

        public unsafe fixed float sampleLocationCoordinateRange[2];

        public uint sampleLocationSubPixelBits;

        public uint variableSampleLocations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMultisamplePropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExtent2D maxSampleLocationGridSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint advancedBlendCoherentOperations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint advancedBlendMaxColorAttachments;

        public uint advancedBlendIndependentBlend;

        public uint advancedBlendNonPremultipliedSrcColor;

        public uint advancedBlendNonPremultipliedDstColor;

        public uint advancedBlendCorrelatedOverlap;

        public uint advancedBlendAllOperations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint srcPremultiplied;

        public uint dstPremultiplied;

        public uint blendOverlap;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageToColorStateCreateFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkPipelineCoverageToColorStateCreateFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCoverageToColorStateCreateFlagsNV(uint v)
        {
            return new VkPipelineCoverageToColorStateCreateFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageToColorStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint coverageToColorEnable;

        public uint coverageToColorLocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageModulationStateCreateFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkPipelineCoverageModulationStateCreateFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCoverageModulationStateCreateFlagsNV(uint v)
        {
            return new VkPipelineCoverageModulationStateCreateFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageModulationStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint coverageModulationMode;

        public uint coverageModulationTableEnable;

        public uint coverageModulationTableCount;

        public System.IntPtr pCoverageModulationTable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderSMCount;

        public uint shaderWarpsPerSM;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderSMBuiltins;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDrmFormatModifierPropertiesEXT
    {
        public ulong drmFormatModifier;

        public uint drmFormatModifierPlaneCount;

        public uint drmFormatModifierTilingFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDrmFormatModifierPropertiesListEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint drmFormatModifierCount;

        public System.IntPtr pDrmFormatModifierProperties;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong drmFormatModifier;

        public uint sharingMode;

        public uint queueFamilyIndexCount;

        public System.IntPtr pQueueFamilyIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageDrmFormatModifierListCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint drmFormatModifierCount;

        public System.IntPtr pDrmFormatModifiers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong drmFormatModifier;

        public uint drmFormatModifierPlaneCount;

        public System.IntPtr pPlaneLayouts;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImageDrmFormatModifierPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong drmFormatModifier;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkValidationCacheEXT_T
    {
        public System.IntPtr pointer;

        public VkValidationCacheEXT_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkValidationCacheCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkValidationCacheCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkValidationCacheCreateFlagsEXT(uint v)
        {
            return new VkValidationCacheCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkValidationCacheCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public ulong initialDataSize;

        public System.IntPtr pInitialData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderModuleValidationCacheCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkValidationCacheEXT_T validationCache;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDescriptorBindingFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDescriptorBindingFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDescriptorBindingFlagsEXT(uint v)
        {
            return new VkDescriptorBindingFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShadingRatePaletteNV
    {
        public uint shadingRatePaletteEntryCount;

        public System.IntPtr pShadingRatePaletteEntries;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shadingRateImageEnable;

        public uint viewportCount;

        public System.IntPtr pShadingRatePalettes;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shadingRateImage;

        public uint shadingRateCoarseSampleOrder;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExtent2D shadingRateTexelSize;

        public uint shadingRatePaletteSize;

        public uint shadingRateMaxCoarseSamples;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCoarseSampleLocationNV
    {
        public uint pixelX;

        public uint pixelY;

        public uint sample;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCoarseSampleOrderCustomNV
    {
        public uint shadingRate;

        public uint sampleCount;

        public uint sampleLocationCount;

        public System.IntPtr pSampleLocations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint sampleOrderType;

        public uint customSampleOrderCount;

        public System.IntPtr pCustomSampleOrders;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureNV_T
    {
        public System.IntPtr pointer;

        public VkAccelerationStructureNV_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkGeometryFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkGeometryFlagsKHR(uint v)
        {
            return new VkGeometryFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkGeometryFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkGeometryFlagsNV(uint v)
        {
            return new VkGeometryFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryInstanceFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkGeometryInstanceFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkGeometryInstanceFlagsKHR(uint v)
        {
            return new VkGeometryInstanceFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryInstanceFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkGeometryInstanceFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkGeometryInstanceFlagsNV(uint v)
        {
            return new VkGeometryInstanceFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBuildAccelerationStructureFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkBuildAccelerationStructureFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkBuildAccelerationStructureFlagsKHR(uint v)
        {
            return new VkBuildAccelerationStructureFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBuildAccelerationStructureFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkBuildAccelerationStructureFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkBuildAccelerationStructureFlagsNV(uint v)
        {
            return new VkBuildAccelerationStructureFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRayTracingShaderGroupCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public uint generalShader;

        public uint closestHitShader;

        public uint anyHitShader;

        public uint intersectionShader;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRayTracingPipelineCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint stageCount;

        public System.IntPtr pStages;

        public uint groupCount;

        public System.IntPtr pGroups;

        public uint maxRecursionDepth;

        public VkPipelineLayout_T layout;

        public VkPipeline_T basePipelineHandle;

        public int basePipelineIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryTrianglesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T vertexData;

        public ulong vertexOffset;

        public uint vertexCount;

        public ulong vertexStride;

        public uint vertexFormat;

        public VkBuffer_T indexData;

        public ulong indexOffset;

        public uint indexCount;

        public uint indexType;

        public VkBuffer_T transformData;

        public ulong transformOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryAABBNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkBuffer_T aabbData;

        public uint numAABBs;

        public uint stride;

        public ulong offset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryDataNV
    {
        public VkGeometryTrianglesNV triangles;

        public VkGeometryAABBNV aabbs;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeometryNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint geometryType;

        public VkGeometryDataNV geometry;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public uint flags;

        public uint instanceCount;

        public uint geometryCount;

        public System.IntPtr pGeometries;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong compactedSize;

        public VkAccelerationStructureInfoNV info;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindAccelerationStructureMemoryInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkAccelerationStructureNV_T accelerationStructure;

        public VkDeviceMemory_T memory;

        public ulong memoryOffset;

        public uint deviceIndexCount;

        public System.IntPtr pDeviceIndices;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWriteDescriptorSetAccelerationStructureNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint accelerationStructureCount;

        public System.IntPtr pAccelerationStructures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureMemoryRequirementsInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public VkAccelerationStructureNV_T accelerationStructure;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRayTracingPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderGroupHandleSize;

        public uint maxRecursionDepth;

        public uint maxShaderGroupStride;

        public uint shaderGroupBaseAlignment;

        public ulong maxGeometryCount;

        public ulong maxInstanceCount;

        public ulong maxTriangleCount;

        public uint maxDescriptorSetAccelerationStructures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkTransformMatrixKHR
    {
        public unsafe fixed float matrix[12];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAabbPositionsKHR
    {
        public float minX;

        public float minY;

        public float minZ;

        public float maxX;

        public float maxY;

        public float maxZ;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureInstanceKHR
    {
        public VkTransformMatrixKHR transform;

        public uint instanceCustomIndex;

        public uint mask;

        public uint instanceShaderBindingTableRecordOffset;

        public uint flags;

        public ulong accelerationStructureReference;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint representativeFragmentTest;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint representativeFragmentTestEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint imageViewType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint filterCubic;

        public uint filterCubicMinmax;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceQueueGlobalPriorityCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint globalPriority;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportMemoryHostPointerInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

        public System.IntPtr pHostPointer;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryHostPointerPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint memoryTypeBits;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong minImportedHostPointerAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCompilerControlFlagsAMD
    {
        public uint value;


        public static implicit operator uint(VkPipelineCompilerControlFlagsAMD v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCompilerControlFlagsAMD(uint v)
        {
            return new VkPipelineCompilerControlFlagsAMD(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCompilerControlCreateInfoAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint compilerControlFlags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCalibratedTimestampInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint timeDomain;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderCorePropertiesAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderEngineCount;

        public uint shaderArraysPerEngineCount;

        public uint computeUnitsPerShaderArray;

        public uint simdPerComputeUnit;

        public uint wavefrontsPerSimd;

        public uint wavefrontSize;

        public uint sgprsPerSimd;

        public uint minSgprAllocation;

        public uint maxSgprAllocation;

        public uint sgprAllocationGranularity;

        public uint vgprsPerSimd;

        public uint minVgprAllocation;

        public uint maxVgprAllocation;

        public uint vgprAllocationGranularity;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceMemoryOverallocationCreateInfoAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint overallocationBehavior;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxVertexAttribDivisor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkVertexInputBindingDivisorDescriptionEXT
    {
        public uint binding;

        public uint divisor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint vertexBindingDivisorCount;

        public System.IntPtr pVertexBindingDivisors;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint vertexAttributeInstanceRateDivisor;

        public uint vertexAttributeInstanceRateZeroDivisor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCreationFeedbackFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPipelineCreationFeedbackFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCreationFeedbackFlagsEXT(uint v)
        {
            return new VkPipelineCreationFeedbackFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCreationFeedbackEXT
    {
        public uint flags;

        public ulong duration;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCreationFeedbackCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pPipelineCreationFeedback;

        public uint pipelineStageCreationFeedbackCount;

        public System.IntPtr pPipelineStageCreationFeedbacks;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint computeDerivativeGroupQuads;

        public uint computeDerivativeGroupLinear;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMeshShaderFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint taskShader;

        public uint meshShader;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMeshShaderPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxDrawMeshTasksCount;

        public uint maxTaskWorkGroupInvocations;

        public unsafe fixed uint maxTaskWorkGroupSize[3];

        public uint maxTaskTotalMemorySize;

        public uint maxTaskOutputCount;

        public uint maxMeshWorkGroupInvocations;

        public unsafe fixed uint maxMeshWorkGroupSize[3];

        public uint maxMeshTotalMemorySize;

        public uint maxMeshOutputVertices;

        public uint maxMeshOutputPrimitives;

        public uint maxMeshMultiviewViewCount;

        public uint meshOutputPerVertexGranularity;

        public uint meshOutputPerPrimitiveGranularity;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDrawMeshTasksIndirectCommandNV
    {
        public uint taskCount;

        public uint firstTask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fragmentShaderBarycentric;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint imageFootprint;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint exclusiveScissorCount;

        public System.IntPtr pExclusiveScissors;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint exclusiveScissor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueueFamilyCheckpointPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint checkpointExecutionStageMask;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCheckpointDataNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stage;

        public System.IntPtr pCheckpointMarker;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderIntegerFunctions2;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceConfigurationINTEL_T
    {
        public System.IntPtr pointer;

        public VkPerformanceConfigurationINTEL_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceValueINTEL
    {
        public uint type;

        public VkPerformanceValueDataINTEL data;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkInitializePerformanceApiInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pUserData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint performanceCountersSampling;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceMarkerInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong marker;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceStreamMarkerInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint marker;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceOverrideInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public uint enable;

        public ulong parameter;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPerformanceConfigurationAcquireInfoINTEL
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pciDomain;

        public uint pciBus;

        public uint pciDevice;

        public uint pciFunction;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint localDimmingSupport;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint localDimmingEnable;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fragmentDensityMap;

        public uint fragmentDensityMapDynamic;

        public uint fragmentDensityMapNonSubsampledImages;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkExtent2D minFragmentDensityTexelSize;

        public VkExtent2D maxFragmentDensityTexelSize;

        public uint fragmentDensityInvocations;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkAttachmentReference fragmentDensityMapAttachment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSubgroupSizeControlFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint subgroupSizeControl;

        public uint computeFullSubgroups;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceSubgroupSizeControlPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint minSubgroupSize;

        public uint maxSubgroupSize;

        public uint maxComputeWorkgroupSubgroups;

        public uint requiredSubgroupSizeStages;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint requiredSubgroupSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkShaderCorePropertiesFlagsAMD
    {
        public uint value;


        public static implicit operator uint(VkShaderCorePropertiesFlagsAMD v)
        {
            return v.value;
        }

        public static implicit operator VkShaderCorePropertiesFlagsAMD(uint v)
        {
            return new VkShaderCorePropertiesFlagsAMD(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderCoreProperties2AMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderCoreFeatures;

        public uint activeComputeUnitCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceCoherentMemory;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderImageInt64Atomics;

        public uint sparseImageInt64Atomics;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed ulong heapBudget[16];

        public unsafe fixed ulong heapUsage[16];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint memoryPriority;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryPriorityAllocateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public float priority;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint dedicatedAllocationImageAliasing;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint bufferDeviceAddress;

        public uint bufferDeviceAddressCaptureReplay;

        public uint bufferDeviceAddressMultiDevice;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBufferDeviceAddressCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong deviceAddress;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkToolPurposeFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkToolPurposeFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkToolPurposeFlagsEXT(uint v)
        {
            return new VkToolPurposeFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceToolPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public unsafe fixed sbyte name[256];

        public unsafe fixed sbyte version[256];

        public uint purposes;

        public unsafe fixed sbyte description[256];

        public unsafe fixed sbyte layer[256];

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkValidationFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint enabledValidationFeatureCount;

        public System.IntPtr pEnabledValidationFeatures;

        public uint disabledValidationFeatureCount;

        public System.IntPtr pDisabledValidationFeatures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCooperativeMatrixPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint MSize;

        public uint NSize;

        public uint KSize;

        public uint AType;

        public uint BType;

        public uint CType;

        public uint DType;

        public uint scope;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint cooperativeMatrix;

        public uint cooperativeMatrixRobustBufferAccess;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint cooperativeMatrixSupportedStages;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageReductionStateCreateFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkPipelineCoverageReductionStateCreateFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkPipelineCoverageReductionStateCreateFlagsNV(uint v)
        {
            return new VkPipelineCoverageReductionStateCreateFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint coverageReductionMode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineCoverageReductionStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint coverageReductionMode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFramebufferMixedSamplesCombinationNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint coverageReductionMode;

        public uint rasterizationSamples;

        public uint depthStencilSamples;

        public uint colorSamples;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fragmentShaderSampleInterlock;

        public uint fragmentShaderPixelInterlock;

        public uint fragmentShaderShadingRateInterlock;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint ycbcrImageArrays;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkHeadlessSurfaceCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkHeadlessSurfaceCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkHeadlessSurfaceCreateFlagsEXT(uint v)
        {
            return new VkHeadlessSurfaceCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkHeadlessSurfaceCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint rectangularLines;

        public uint bresenhamLines;

        public uint smoothLines;

        public uint stippledRectangularLines;

        public uint stippledBresenhamLines;

        public uint stippledSmoothLines;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint lineSubPixelPrecisionBits;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineRasterizationLineStateCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint lineRasterizationMode;

        public uint stippledLineEnable;

        public uint lineStippleFactor;

        public ushort lineStipplePattern;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderBufferFloat32Atomics;

        public uint shaderBufferFloat32AtomicAdd;

        public uint shaderBufferFloat64Atomics;

        public uint shaderBufferFloat64AtomicAdd;

        public uint shaderSharedFloat32Atomics;

        public uint shaderSharedFloat32AtomicAdd;

        public uint shaderSharedFloat64Atomics;

        public uint shaderSharedFloat64AtomicAdd;

        public uint shaderImageFloat32Atomics;

        public uint shaderImageFloat32AtomicAdd;

        public uint sparseImageFloat32Atomics;

        public uint sparseImageFloat32AtomicAdd;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint indexTypeUint8;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint extendedDynamicState;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderDemoteToHelperInvocation;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectCommandsLayoutNV_T
    {
        public System.IntPtr pointer;

        public VkIndirectCommandsLayoutNV_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectStateFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkIndirectStateFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkIndirectStateFlagsNV(uint v)
        {
            return new VkIndirectStateFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectCommandsLayoutUsageFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkIndirectCommandsLayoutUsageFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkIndirectCommandsLayoutUsageFlagsNV(uint v)
        {
            return new VkIndirectCommandsLayoutUsageFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxGraphicsShaderGroupCount;

        public uint maxIndirectSequenceCount;

        public uint maxIndirectCommandsTokenCount;

        public uint maxIndirectCommandsStreamCount;

        public uint maxIndirectCommandsTokenOffset;

        public uint maxIndirectCommandsStreamStride;

        public uint minSequencesCountBufferOffsetAlignment;

        public uint minSequencesIndexBufferOffsetAlignment;

        public uint minIndirectCommandsBufferOffsetAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceGeneratedCommands;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGraphicsShaderGroupCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint stageCount;

        public System.IntPtr pStages;

        public System.IntPtr pVertexInputState;

        public System.IntPtr pTessellationState;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint groupCount;

        public System.IntPtr pGroups;

        public uint pipelineCount;

        public System.IntPtr pPipelines;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindShaderGroupIndirectCommandNV
    {
        public uint groupIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindIndexBufferIndirectCommandNV
    {
        public ulong bufferAddress;

        public uint size;

        public uint indexType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkBindVertexBufferIndirectCommandNV
    {
        public ulong bufferAddress;

        public uint size;

        public uint stride;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSetStateFlagsIndirectCommandNV
    {
        public uint data;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectCommandsStreamNV
    {
        public VkBuffer_T buffer;

        public ulong offset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectCommandsLayoutTokenNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint tokenType;

        public uint stream;

        public uint offset;

        public uint vertexBindingUnit;

        public uint vertexDynamicStride;

        public VkPipelineLayout_T pushconstantPipelineLayout;

        public uint pushconstantShaderStageFlags;

        public uint pushconstantOffset;

        public uint pushconstantSize;

        public uint indirectStateFlags;

        public uint indexTypeCount;

        public System.IntPtr pIndexTypes;

        public System.IntPtr pIndexTypeValues;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkIndirectCommandsLayoutCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint pipelineBindPoint;

        public uint tokenCount;

        public System.IntPtr pTokens;

        public uint streamCount;

        public System.IntPtr pStreamStrides;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeneratedCommandsInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pipelineBindPoint;

        public VkPipeline_T pipeline;

        public VkIndirectCommandsLayoutNV_T indirectCommandsLayout;

        public uint streamCount;

        public System.IntPtr pStreams;

        public uint sequencesCount;

        public VkBuffer_T preprocessBuffer;

        public ulong preprocessOffset;

        public ulong preprocessSize;

        public VkBuffer_T sequencesCountBuffer;

        public ulong sequencesCountOffset;

        public VkBuffer_T sequencesIndexBuffer;

        public ulong sequencesIndexOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pipelineBindPoint;

        public VkPipeline_T pipeline;

        public VkIndirectCommandsLayoutNV_T indirectCommandsLayout;

        public uint maxSequencesCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint texelBufferAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong storageTexelBufferOffsetAlignmentBytes;

        public uint storageTexelBufferOffsetSingleTexelAlignment;

        public ulong uniformTexelBufferOffsetAlignmentBytes;

        public uint uniformTexelBufferOffsetSingleTexelAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRenderPassTransformBeginInfoQCOM
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint transform;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint transform;

        public VkRect2D renderArea;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceMemoryReportFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkDeviceMemoryReportFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceMemoryReportFlagsEXT(uint v)
        {
            return new VkDeviceMemoryReportFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint deviceMemoryReport;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceMemoryReportCallbackDataEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint type;

        public ulong memoryObjectId;

        public ulong size;

        public uint objectType;

        public ulong objectHandle;

        public uint heapIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr pfnUserCallback;

        public System.IntPtr pUserData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRobustness2FeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint robustBufferAccess2;

        public uint robustImageAccess2;

        public uint nullDescriptor;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRobustness2PropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong robustStorageBufferAccessSizeAlignment;

        public ulong robustUniformBufferAccessSizeAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSamplerCustomBorderColorCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkClearColorValue customBorderColor;

        public uint format;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxCustomBorderColorSamplers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint customBorderColors;

        public uint customBorderColorWithoutFormat;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPrivateDataSlotEXT_T
    {
        public System.IntPtr pointer;

        public VkPrivateDataSlotEXT_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPrivateDataSlotCreateFlagsEXT
    {
        public uint value;


        public static implicit operator uint(VkPrivateDataSlotCreateFlagsEXT v)
        {
            return v.value;
        }

        public static implicit operator VkPrivateDataSlotCreateFlagsEXT(uint v)
        {
            return new VkPrivateDataSlotCreateFlagsEXT(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePrivateDataFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint privateData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDevicePrivateDataCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint privateDataSlotRequestCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPrivateDataSlotCreateInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint pipelineCreationCacheControl;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceDiagnosticsConfigFlagsNV
    {
        public uint value;


        public static implicit operator uint(VkDeviceDiagnosticsConfigFlagsNV v)
        {
            return v.value;
        }

        public static implicit operator VkDeviceDiagnosticsConfigFlagsNV(uint v)
        {
            return new VkDeviceDiagnosticsConfigFlagsNV(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint diagnosticsConfig;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkDeviceDiagnosticsConfigCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fragmentShadingRateEnums;

        public uint supersampleFragmentShadingRates;

        public uint noInvocationFragmentShadingRates;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxFragmentShadingRateInvocationCount;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shadingRateType;

        public uint shadingRate;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 2)]
        public uint[] combinerOps;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fragmentDensityMapDeferred;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint subsampledLoads;

        public uint subsampledCoarseReconstructionEarlyAccess;

        public uint maxSubsampledArrayLayers;

        public uint maxDescriptorSetSubsampledSamplers;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyCommandTransformInfoQCOM
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint transform;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceImageRobustnessFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint robustImageAccess;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDevice4444FormatsFeaturesEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint formatA4R4G4B4;

        public uint formatA4B4G4R4;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureKHR_T
    {
        public System.IntPtr pointer;

        public VkAccelerationStructureKHR_T(System.IntPtr pointer)
        {
            this.pointer = pointer;
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkAccelerationStructureCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkAccelerationStructureCreateFlagsKHR(uint v)
        {
            return new VkAccelerationStructureCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureBuildRangeInfoKHR
    {
        public uint primitiveCount;

        public uint primitiveOffset;

        public uint firstVertex;

        public uint transformOffset;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureGeometryTrianglesDataKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint vertexFormat;

        public VkDeviceOrHostAddressConstKHR vertexData;

        public ulong vertexStride;

        public uint maxVertex;

        public uint indexType;

        public VkDeviceOrHostAddressConstKHR indexData;

        public VkDeviceOrHostAddressConstKHR transformData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureGeometryAabbsDataKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceOrHostAddressConstKHR data;

        public ulong stride;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureGeometryInstancesDataKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint arrayOfPointers;

        public VkDeviceOrHostAddressConstKHR data;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureGeometryKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint geometryType;

        public VkAccelerationStructureGeometryDataKHR geometry;

        public uint flags;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureBuildGeometryInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public uint flags;

        public uint mode;

        public VkAccelerationStructureKHR_T srcAccelerationStructure;

        public VkAccelerationStructureKHR_T dstAccelerationStructure;

        public uint geometryCount;

        public System.IntPtr pGeometries;

        public System.IntPtr ppGeometries;

        public VkDeviceOrHostAddressKHR scratchData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint createFlags;

        public VkBuffer_T buffer;

        public ulong offset;

        public ulong size;

        public uint type;

        public ulong deviceAddress;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWriteDescriptorSetAccelerationStructureKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint accelerationStructureCount;

        public System.IntPtr pAccelerationStructures;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint accelerationStructure;

        public uint accelerationStructureCaptureReplay;

        public uint accelerationStructureIndirectBuild;

        public uint accelerationStructureHostCommands;

        public uint descriptorBindingAccelerationStructureUpdateAfterBind;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong maxGeometryCount;

        public ulong maxInstanceCount;

        public ulong maxPrimitiveCount;

        public uint maxPerStageDescriptorAccelerationStructures;

        public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;

        public uint maxDescriptorSetAccelerationStructures;

        public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;

        public uint minAccelerationStructureScratchOffsetAlignment;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureDeviceAddressInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkAccelerationStructureKHR_T accelerationStructure;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureVersionInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pVersionData;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyAccelerationStructureToMemoryInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkAccelerationStructureKHR_T src;

        public VkDeviceOrHostAddressKHR dst;

        public uint mode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyMemoryToAccelerationStructureInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceOrHostAddressConstKHR src;

        public VkAccelerationStructureKHR_T dst;

        public uint mode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkCopyAccelerationStructureInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkAccelerationStructureKHR_T src;

        public VkAccelerationStructureKHR_T dst;

        public uint mode;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkAccelerationStructureBuildSizesInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public ulong accelerationStructureSize;

        public ulong updateScratchSize;

        public ulong buildScratchSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRayTracingShaderGroupCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint type;

        public uint generalShader;

        public uint closestHitShader;

        public uint anyHitShader;

        public uint intersectionShader;

        public System.IntPtr pShaderGroupCaptureReplayHandle;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint maxPipelineRayPayloadSize;

        public uint maxPipelineRayHitAttributeSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkRayTracingPipelineCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public uint stageCount;

        public System.IntPtr pStages;

        public uint groupCount;

        public System.IntPtr pGroups;

        public uint maxPipelineRayRecursionDepth;

        public System.IntPtr pLibraryInfo;

        public System.IntPtr pLibraryInterface;

        public System.IntPtr pDynamicState;

        public VkPipelineLayout_T layout;

        public VkPipeline_T basePipelineHandle;

        public int basePipelineIndex;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint rayTracingPipeline;

        public uint rayTracingPipelineShaderGroupHandleCaptureReplay;

        public uint rayTracingPipelineShaderGroupHandleCaptureReplayMixed;

        public uint rayTracingPipelineTraceRaysIndirect;

        public uint rayTraversalPrimitiveCulling;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint shaderGroupHandleSize;

        public uint maxRayRecursionDepth;

        public uint maxShaderGroupStride;

        public uint shaderGroupBaseAlignment;

        public uint shaderGroupHandleCaptureReplaySize;

        public uint maxRayDispatchInvocationCount;

        public uint shaderGroupHandleAlignment;

        public uint maxRayHitAttributeSize;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkStridedDeviceAddressRegionKHR
    {
        public ulong deviceAddress;

        public ulong stride;

        public ulong size;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkTraceRaysIndirectCommandKHR
    {
        public uint width;

        public uint height;

        public uint depth;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkPhysicalDeviceRayQueryFeaturesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint rayQuery;

    }


}

