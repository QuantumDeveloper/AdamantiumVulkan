// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Interop
{
    using System;
    using System.Runtime.InteropServices;

    [StructLayout(LayoutKind.Sequential)]
    public partial struct int8_t
    {
        public sbyte value;


        public static implicit operator sbyte(int8_t i)
        {
            return i.value;
        }

        public static implicit operator int8_t(sbyte i)
        {
            return new int8_t(){value = i};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct uint8_t
    {
        public byte value;


        public static implicit operator byte(uint8_t u)
        {
            return u.value;
        }

        public static implicit operator uint8_t(byte u)
        {
            return new uint8_t(){value = u};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct int16_t
    {
        public short value;


        public static implicit operator short(int16_t i)
        {
            return i.value;
        }

        public static implicit operator int16_t(short i)
        {
            return new int16_t(){value = i};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct uint16_t
    {
        public ushort value;


        public static implicit operator ushort(uint16_t u)
        {
            return u.value;
        }

        public static implicit operator uint16_t(ushort u)
        {
            return new uint16_t(){value = u};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct int32_t
    {
        public int value;


        public static implicit operator int(int32_t i)
        {
            return i.value;
        }

        public static implicit operator int32_t(int i)
        {
            return new int32_t(){value = i};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct uint32_t
    {
        public uint value;


        public static implicit operator uint(uint32_t u)
        {
            return u.value;
        }

        public static implicit operator uint32_t(uint u)
        {
            return new uint32_t(){value = u};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct int64_t
    {
        public long value;


        public static implicit operator long(int64_t i)
        {
            return i.value;
        }

        public static implicit operator int64_t(long i)
        {
            return new int64_t(){value = i};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct uint64_t
    {
        public ulong value;


        public static implicit operator ulong(uint64_t u)
        {
            return u.value;
        }

        public static implicit operator uint64_t(ulong u)
        {
            return new uint64_t(){value = u};
        }

    }


}

