// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Security;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Core;

namespace AdamantiumVulkan.Core.Interop;

internal static unsafe partial class VulkanInterop
{
    public const string LibraryPath = "vulkan-1";

    [DllImport(LibraryPath, EntryPoint = "vkAcquireDrmDisplayEXT", ExactSpelling = true)]
    internal static extern Result vkAcquireDrmDisplayEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, int drmFd, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display);

    [DllImport(LibraryPath, EntryPoint = "vkAcquireNextImage2KHR", ExactSpelling = true)]
    internal static extern Result vkAcquireNextImage2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAcquireNextImageInfoKHR* pAcquireInfo, uint* pImageIndex);

    [DllImport(LibraryPath, EntryPoint = "vkAcquireNextImageKHR", ExactSpelling = true)]
    internal static extern Result vkAcquireNextImageKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, ulong timeout, AdamantiumVulkan.Core.Interop.VkSemaphore_T semaphore, AdamantiumVulkan.Core.Interop.VkFence_T fence, uint* pImageIndex);

    [DllImport(LibraryPath, EntryPoint = "vkAcquirePerformanceConfigurationINTEL", ExactSpelling = true)]
    internal static extern Result vkAcquirePerformanceConfigurationINTEL(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, out AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T pConfiguration);

    [DllImport(LibraryPath, EntryPoint = "vkAcquireProfilingLockKHR", ExactSpelling = true)]
    internal static extern Result vkAcquireProfilingLockKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAcquireProfilingLockInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkAllocateCommandBuffers", ExactSpelling = true)]
    internal static extern Result vkAllocateCommandBuffers(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandBufferAllocateInfo* pAllocateInfo, AdamantiumVulkan.Core.Interop.VkCommandBuffer_T* pCommandBuffers);

    [DllImport(LibraryPath, EntryPoint = "vkAllocateDescriptorSets", ExactSpelling = true)]
    internal static extern Result vkAllocateDescriptorSets(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetAllocateInfo* pAllocateInfo, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T* pDescriptorSets);

    [DllImport(LibraryPath, EntryPoint = "vkAllocateMemory", ExactSpelling = true)]
    internal static extern Result vkAllocateMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMemoryAllocateInfo* pAllocateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDeviceMemory_T pMemory);

    [DllImport(LibraryPath, EntryPoint = "vkBeginCommandBuffer", ExactSpelling = true)]
    internal static extern Result vkBeginCommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCommandBufferBeginInfo* pBeginInfo);

    [DllImport(LibraryPath, EntryPoint = "vkBindAccelerationStructureMemoryNV", ExactSpelling = true)]
    internal static extern Result vkBindAccelerationStructureMemoryNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindAccelerationStructureMemoryInfoNV* pBindInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBindBufferMemory", ExactSpelling = true)]
    internal static extern Result vkBindBufferMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, VkDeviceSize memoryOffset);

    [DllImport(LibraryPath, EntryPoint = "vkBindBufferMemory2", ExactSpelling = true)]
    internal static extern Result vkBindBufferMemory2(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindBufferMemoryInfo* pBindInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBindBufferMemory2KHR", ExactSpelling = true)]
    internal static extern Result vkBindBufferMemory2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindBufferMemoryInfo* pBindInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBindImageMemory", ExactSpelling = true)]
    internal static extern Result vkBindImageMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, VkDeviceSize memoryOffset);

    [DllImport(LibraryPath, EntryPoint = "vkBindImageMemory2", ExactSpelling = true)]
    internal static extern Result vkBindImageMemory2(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindImageMemoryInfo* pBindInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBindImageMemory2KHR", ExactSpelling = true)]
    internal static extern Result vkBindImageMemory2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindImageMemoryInfo* pBindInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBindOpticalFlowSessionImageNV", ExactSpelling = true)]
    internal static extern Result vkBindOpticalFlowSessionImageNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkOpticalFlowSessionNV_T session, OpticalFlowSessionBindingPointNV bindingPoint, AdamantiumVulkan.Core.Interop.VkImageView_T view, ImageLayout layout);

    [DllImport(LibraryPath, EntryPoint = "vkBuildAccelerationStructuresKHR", ExactSpelling = true)]
    internal static extern Result vkBuildAccelerationStructuresKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, uint infoCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildGeometryInfoKHR* pInfos, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);

    [DllImport(LibraryPath, EntryPoint = "vkBuildMicromapsEXT", ExactSpelling = true)]
    internal static extern Result vkBuildMicromapsEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, uint infoCount, AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT* pInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginConditionalRenderingEXT", ExactSpelling = true)]
    internal static extern void vkCmdBeginConditionalRenderingEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkCmdBeginDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT* pLabelInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginQuery", ExactSpelling = true)]
    internal static extern void vkCmdBeginQuery(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query, VkQueryControlFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginQueryIndexedEXT", ExactSpelling = true)]
    internal static extern void vkCmdBeginQueryIndexedEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query, VkQueryControlFlags flags, uint index);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginRendering", ExactSpelling = true)]
    internal static extern void vkCmdBeginRendering(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkRenderingInfo* pRenderingInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginRenderingKHR", ExactSpelling = true)]
    internal static extern void vkCmdBeginRenderingKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkRenderingInfo* pRenderingInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginRenderPass", ExactSpelling = true)]
    internal static extern void vkCmdBeginRenderPass(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo* pRenderPassBegin, SubpassContents contents);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginRenderPass2", ExactSpelling = true)]
    internal static extern void vkCmdBeginRenderPass2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo* pRenderPassBegin, AdamantiumVulkan.Core.Interop.VkSubpassBeginInfo* pSubpassBeginInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginRenderPass2KHR", ExactSpelling = true)]
    internal static extern void vkCmdBeginRenderPass2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkRenderPassBeginInfo* pRenderPassBegin, AdamantiumVulkan.Core.Interop.VkSubpassBeginInfo* pSubpassBeginInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBeginTransformFeedbackEXT", ExactSpelling = true)]
    internal static extern void vkCmdBeginTransformFeedbackEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstCounterBuffer, uint counterBufferCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pCounterBuffers, ulong* pCounterBufferOffsets);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindDescriptorBufferEmbeddedSamplersEXT", ExactSpelling = true)]
    internal static extern void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, uint set);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindDescriptorBuffersEXT", ExactSpelling = true)]
    internal static extern void vkCmdBindDescriptorBuffersEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint bufferCount, AdamantiumVulkan.Core.Interop.VkDescriptorBufferBindingInfoEXT* pBindingInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindDescriptorSets", ExactSpelling = true)]
    internal static extern void vkCmdBindDescriptorSets(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, uint firstSet, uint descriptorSetCount, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindIndexBuffer", ExactSpelling = true)]
    internal static extern void vkCmdBindIndexBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, IndexType indexType);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindInvocationMaskHUAWEI", ExactSpelling = true)]
    internal static extern void vkCmdBindInvocationMaskHUAWEI(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImageView_T imageView, ImageLayout imageLayout);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindPipeline", ExactSpelling = true)]
    internal static extern void vkCmdBindPipeline(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindPipelineShaderGroupNV", ExactSpelling = true)]
    internal static extern void vkCmdBindPipelineShaderGroupNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint groupIndex);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindShadingRateImageNV", ExactSpelling = true)]
    internal static extern void vkCmdBindShadingRateImageNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImageView_T imageView, ImageLayout imageLayout);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindTransformFeedbackBuffersEXT", ExactSpelling = true)]
    internal static extern void vkCmdBindTransformFeedbackBuffersEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pBuffers, ulong* pOffsets, ulong* pSizes);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindVertexBuffers", ExactSpelling = true)]
    internal static extern void vkCmdBindVertexBuffers(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pBuffers, ulong* pOffsets);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindVertexBuffers2", ExactSpelling = true)]
    internal static extern void vkCmdBindVertexBuffers2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBindVertexBuffers2EXT", ExactSpelling = true)]
    internal static extern void vkCmdBindVertexBuffers2EXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstBinding, uint bindingCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBlitImage", ExactSpelling = true)]
    internal static extern void vkCmdBlitImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Interop.VkImage_T dstImage, ImageLayout dstImageLayout, uint regionCount, AdamantiumVulkan.Core.Interop.VkImageBlit* pRegions, Filter filter);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBlitImage2", ExactSpelling = true)]
    internal static extern void vkCmdBlitImage2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBlitImageInfo2* pBlitImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBlitImage2KHR", ExactSpelling = true)]
    internal static extern void vkCmdBlitImage2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBlitImageInfo2* pBlitImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBuildAccelerationStructureNV", ExactSpelling = true)]
    internal static extern void vkCmdBuildAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkAccelerationStructureInfoNV* pInfo, AdamantiumVulkan.Core.Interop.VkBuffer_T instanceData, VkDeviceSize instanceOffset, VkBool32 update, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T dst, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T src, AdamantiumVulkan.Core.Interop.VkBuffer_T scratch, VkDeviceSize scratchOffset);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBuildAccelerationStructuresIndirectKHR", ExactSpelling = true)]
    internal static extern void vkCmdBuildAccelerationStructuresIndirectKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint infoCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkDeviceAddress* pIndirectDeviceAddresses, uint* pIndirectStrides, uint** ppMaxPrimitiveCounts);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBuildAccelerationStructuresKHR", ExactSpelling = true)]
    internal static extern void vkCmdBuildAccelerationStructuresKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint infoCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildGeometryInfoKHR* pInfos, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdBuildMicromapsEXT", ExactSpelling = true)]
    internal static extern void vkCmdBuildMicromapsEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint infoCount, AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT* pInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdClearAttachments", ExactSpelling = true)]
    internal static extern void vkCmdClearAttachments(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint attachmentCount, AdamantiumVulkan.Core.Interop.VkClearAttachment* pAttachments, uint rectCount, AdamantiumVulkan.Core.Interop.VkClearRect* pRects);

    [DllImport(LibraryPath, EntryPoint = "vkCmdClearColorImage", ExactSpelling = true)]
    internal static extern void vkCmdClearColorImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T image, ImageLayout imageLayout, AdamantiumVulkan.Core.Interop.VkClearColorValue* pColor, uint rangeCount, AdamantiumVulkan.Core.Interop.VkImageSubresourceRange* pRanges);

    [DllImport(LibraryPath, EntryPoint = "vkCmdClearDepthStencilImage", ExactSpelling = true)]
    internal static extern void vkCmdClearDepthStencilImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T image, ImageLayout imageLayout, AdamantiumVulkan.Core.Interop.VkClearDepthStencilValue* pDepthStencil, uint rangeCount, AdamantiumVulkan.Core.Interop.VkImageSubresourceRange* pRanges);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyAccelerationStructureInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyAccelerationStructureNV", ExactSpelling = true)]
    internal static extern void vkCmdCopyAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T dst, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T src, CopyAccelerationStructureModeKHR mode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyAccelerationStructureToMemoryKHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyAccelerationStructureToMemoryKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBuffer", ExactSpelling = true)]
    internal static extern void vkCmdCopyBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T srcBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, uint regionCount, AdamantiumVulkan.Core.Interop.VkBufferCopy* pRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBuffer2", ExactSpelling = true)]
    internal static extern void vkCmdCopyBuffer2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyBufferInfo2* pCopyBufferInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBuffer2KHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyBuffer2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyBufferInfo2* pCopyBufferInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBufferToImage", ExactSpelling = true)]
    internal static extern void vkCmdCopyBufferToImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T srcBuffer, AdamantiumVulkan.Core.Interop.VkImage_T dstImage, ImageLayout dstImageLayout, uint regionCount, AdamantiumVulkan.Core.Interop.VkBufferImageCopy* pRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBufferToImage2", ExactSpelling = true)]
    internal static extern void vkCmdCopyBufferToImage2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyBufferToImage2KHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyBufferToImage2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyBufferToImageInfo2* pCopyBufferToImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImage", ExactSpelling = true)]
    internal static extern void vkCmdCopyImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Interop.VkImage_T dstImage, ImageLayout dstImageLayout, uint regionCount, AdamantiumVulkan.Core.Interop.VkImageCopy* pRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImage2", ExactSpelling = true)]
    internal static extern void vkCmdCopyImage2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyImageInfo2* pCopyImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImage2KHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyImage2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyImageInfo2* pCopyImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImageToBuffer", ExactSpelling = true)]
    internal static extern void vkCmdCopyImageToBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, uint regionCount, AdamantiumVulkan.Core.Interop.VkBufferImageCopy* pRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImageToBuffer2", ExactSpelling = true)]
    internal static extern void vkCmdCopyImageToBuffer2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyImageToBuffer2KHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyImageToBuffer2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyImageToBufferInfo2* pCopyImageToBufferInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMemoryIndirectNV", ExactSpelling = true)]
    internal static extern void vkCmdCopyMemoryIndirectNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkDeviceAddress copyBufferAddress, uint copyCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMemoryToAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern void vkCmdCopyMemoryToAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMemoryToImageIndirectNV", ExactSpelling = true)]
    internal static extern void vkCmdCopyMemoryToImageIndirectNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkDeviceAddress copyBufferAddress, uint copyCount, uint stride, AdamantiumVulkan.Core.Interop.VkImage_T dstImage, ImageLayout dstImageLayout, AdamantiumVulkan.Core.Interop.VkImageSubresourceLayers* pImageSubresources);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMemoryToMicromapEXT", ExactSpelling = true)]
    internal static extern void vkCmdCopyMemoryToMicromapEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyMemoryToMicromapInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMicromapEXT", ExactSpelling = true)]
    internal static extern void vkCmdCopyMicromapEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyMicromapInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyMicromapToMemoryEXT", ExactSpelling = true)]
    internal static extern void vkCmdCopyMicromapToMemoryEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCopyMicromapToMemoryInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCopyQueryPoolResults", ExactSpelling = true)]
    internal static extern void vkCmdCopyQueryPoolResults(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery, uint queryCount, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkCmdCuLaunchKernelNVX", ExactSpelling = true)]
    internal static extern void vkCmdCuLaunchKernelNVX(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkCuLaunchInfoNVX* pLaunchInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDebugMarkerBeginEXT", ExactSpelling = true)]
    internal static extern void vkCmdDebugMarkerBeginEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDebugMarkerEndEXT", ExactSpelling = true)]
    internal static extern void vkCmdDebugMarkerEndEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDebugMarkerInsertEXT", ExactSpelling = true)]
    internal static extern void vkCmdDebugMarkerInsertEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDecompressMemoryIndirectCountNV", ExactSpelling = true)]
    internal static extern void vkCmdDecompressMemoryIndirectCountNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDecompressMemoryNV", ExactSpelling = true)]
    internal static extern void vkCmdDecompressMemoryNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint decompressRegionCount, AdamantiumVulkan.Core.Interop.VkDecompressMemoryRegionNV* pDecompressMemoryRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDispatch", ExactSpelling = true)]
    internal static extern void vkCmdDispatch(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDispatchBase", ExactSpelling = true)]
    internal static extern void vkCmdDispatchBase(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDispatchBaseKHR", ExactSpelling = true)]
    internal static extern void vkCmdDispatchBaseKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDispatchIndirect", ExactSpelling = true)]
    internal static extern void vkCmdDispatchIndirect(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDraw", ExactSpelling = true)]
    internal static extern void vkCmdDraw(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndexed", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndexed(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndexedIndirect", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndexedIndirect(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, uint drawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndexedIndirectCount", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndexedIndirectCount(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndexedIndirectCountAMD", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndexedIndirectCountAMD(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndexedIndirectCountKHR", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndexedIndirectCountKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndirect", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndirect(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, uint drawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndirectByteCountEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndirectByteCountEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint instanceCount, uint firstInstance, AdamantiumVulkan.Core.Interop.VkBuffer_T counterBuffer, VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndirectCount", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndirectCount(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndirectCountAMD", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndirectCountAMD(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawIndirectCountKHR", ExactSpelling = true)]
    internal static extern void vkCmdDrawIndirectCountKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksIndirectCountEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksIndirectCountEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksIndirectCountNV", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksIndirectCountNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, AdamantiumVulkan.Core.Interop.VkBuffer_T countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksIndirectEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksIndirectEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, uint drawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksIndirectNV", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksIndirectNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, VkDeviceSize offset, uint drawCount, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMeshTasksNV", ExactSpelling = true)]
    internal static extern void vkCmdDrawMeshTasksNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint taskCount, uint firstTask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMultiEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawMultiEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint drawCount, AdamantiumVulkan.Core.Interop.VkMultiDrawInfoEXT* pVertexInfo, uint instanceCount, uint firstInstance, uint stride);

    [DllImport(LibraryPath, EntryPoint = "vkCmdDrawMultiIndexedEXT", ExactSpelling = true)]
    internal static extern void vkCmdDrawMultiIndexedEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint drawCount, AdamantiumVulkan.Core.Interop.VkMultiDrawIndexedInfoEXT* pIndexInfo, uint instanceCount, uint firstInstance, uint stride, int* pVertexOffset);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndConditionalRenderingEXT", ExactSpelling = true)]
    internal static extern void vkCmdEndConditionalRenderingEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkCmdEndDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndQuery", ExactSpelling = true)]
    internal static extern void vkCmdEndQuery(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndQueryIndexedEXT", ExactSpelling = true)]
    internal static extern void vkCmdEndQueryIndexedEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query, uint index);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndRendering", ExactSpelling = true)]
    internal static extern void vkCmdEndRendering(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndRenderingKHR", ExactSpelling = true)]
    internal static extern void vkCmdEndRenderingKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndRenderPass", ExactSpelling = true)]
    internal static extern void vkCmdEndRenderPass(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndRenderPass2", ExactSpelling = true)]
    internal static extern void vkCmdEndRenderPass2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkSubpassEndInfo* pSubpassEndInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndRenderPass2KHR", ExactSpelling = true)]
    internal static extern void vkCmdEndRenderPass2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkSubpassEndInfo* pSubpassEndInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdEndTransformFeedbackEXT", ExactSpelling = true)]
    internal static extern void vkCmdEndTransformFeedbackEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstCounterBuffer, uint counterBufferCount, AdamantiumVulkan.Core.Interop.VkBuffer_T* pCounterBuffers, ulong* pCounterBufferOffsets);

    [DllImport(LibraryPath, EntryPoint = "vkCmdExecuteCommands", ExactSpelling = true)]
    internal static extern void vkCmdExecuteCommands(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint commandBufferCount, AdamantiumVulkan.Core.Interop.VkCommandBuffer_T* pCommandBuffers);

    [DllImport(LibraryPath, EntryPoint = "vkCmdExecuteGeneratedCommandsNV", ExactSpelling = true)]
    internal static extern void vkCmdExecuteGeneratedCommandsNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 isPreprocessed, AdamantiumVulkan.Core.Interop.VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdFillBuffer", ExactSpelling = true)]
    internal static extern void vkCmdFillBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data);

    [DllImport(LibraryPath, EntryPoint = "vkCmdInsertDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkCmdInsertDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT* pLabelInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdNextSubpass", ExactSpelling = true)]
    internal static extern void vkCmdNextSubpass(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, SubpassContents contents);

    [DllImport(LibraryPath, EntryPoint = "vkCmdNextSubpass2", ExactSpelling = true)]
    internal static extern void vkCmdNextSubpass2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkSubpassBeginInfo* pSubpassBeginInfo, AdamantiumVulkan.Core.Interop.VkSubpassEndInfo* pSubpassEndInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdNextSubpass2KHR", ExactSpelling = true)]
    internal static extern void vkCmdNextSubpass2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkSubpassBeginInfo* pSubpassBeginInfo, AdamantiumVulkan.Core.Interop.VkSubpassEndInfo* pSubpassEndInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdOpticalFlowExecuteNV", ExactSpelling = true)]
    internal static extern void vkCmdOpticalFlowExecuteNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkOpticalFlowSessionNV_T session, AdamantiumVulkan.Core.Interop.VkOpticalFlowExecuteInfoNV* pExecuteInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPipelineBarrier", ExactSpelling = true)]
    internal static extern void vkCmdPipelineBarrier(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, AdamantiumVulkan.Core.Interop.VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier* pImageMemoryBarriers);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPipelineBarrier2", ExactSpelling = true)]
    internal static extern void vkCmdPipelineBarrier2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPipelineBarrier2KHR", ExactSpelling = true)]
    internal static extern void vkCmdPipelineBarrier2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPreprocessGeneratedCommandsNV", ExactSpelling = true)]
    internal static extern void vkCmdPreprocessGeneratedCommandsNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPushConstants", ExactSpelling = true)]
    internal static extern void vkCmdPushConstants(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPushDescriptorSetKHR", ExactSpelling = true)]
    internal static extern void vkCmdPushDescriptorSetKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, uint set, uint descriptorWriteCount, AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet* pDescriptorWrites);

    [DllImport(LibraryPath, EntryPoint = "vkCmdPushDescriptorSetWithTemplateKHR", ExactSpelling = true)]
    internal static extern void vkCmdPushDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T descriptorUpdateTemplate, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, uint set, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResetEvent", ExactSpelling = true)]
    internal static extern void vkCmdResetEvent(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, VkPipelineStageFlags stageMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResetEvent2", ExactSpelling = true)]
    internal static extern void vkCmdResetEvent2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, VkPipelineStageFlags2 stageMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResetEvent2KHR", ExactSpelling = true)]
    internal static extern void vkCmdResetEvent2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, VkPipelineStageFlags2 stageMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResetQueryPool", ExactSpelling = true)]
    internal static extern void vkCmdResetQueryPool(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery, uint queryCount);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResolveImage", ExactSpelling = true)]
    internal static extern void vkCmdResolveImage(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkImage_T srcImage, ImageLayout srcImageLayout, AdamantiumVulkan.Core.Interop.VkImage_T dstImage, ImageLayout dstImageLayout, uint regionCount, AdamantiumVulkan.Core.Interop.VkImageResolve* pRegions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResolveImage2", ExactSpelling = true)]
    internal static extern void vkCmdResolveImage2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkResolveImageInfo2* pResolveImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdResolveImage2KHR", ExactSpelling = true)]
    internal static extern void vkCmdResolveImage2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkResolveImageInfo2* pResolveImageInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetAlphaToCoverageEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetAlphaToCoverageEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 alphaToCoverageEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetAlphaToOneEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetAlphaToOneEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 alphaToOneEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetBlendConstants", ExactSpelling = true)]
    internal static extern void vkCmdSetBlendConstants(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, float[] blendConstants);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCheckpointNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCheckpointNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, void* pCheckpointMarker);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoarseSampleOrderNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoarseSampleOrderNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, CoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, AdamantiumVulkan.Core.Interop.VkCoarseSampleOrderCustomNV* pCustomSampleOrders);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetColorBlendAdvancedEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetColorBlendAdvancedEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstAttachment, uint attachmentCount, AdamantiumVulkan.Core.Interop.VkColorBlendAdvancedEXT* pColorBlendAdvanced);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetColorBlendEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetColorBlendEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstAttachment, uint attachmentCount, VkBool32* pColorBlendEnables);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetColorBlendEquationEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetColorBlendEquationEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstAttachment, uint attachmentCount, AdamantiumVulkan.Core.Interop.VkColorBlendEquationEXT* pColorBlendEquations);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetColorWriteEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetColorWriteEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint attachmentCount, VkBool32* pColorWriteEnables);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetColorWriteMaskEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetColorWriteMaskEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstAttachment, uint attachmentCount, VkColorComponentFlags* pColorWriteMasks);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetConservativeRasterizationModeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetConservativeRasterizationModeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, ConservativeRasterizationModeEXT conservativeRasterizationMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageModulationModeNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageModulationModeNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, CoverageModulationModeNV coverageModulationMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageModulationTableEnableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageModulationTableEnableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 coverageModulationTableEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageModulationTableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageModulationTableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint coverageModulationTableCount, float* pCoverageModulationTable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageReductionModeNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageReductionModeNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, CoverageReductionModeNV coverageReductionMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageToColorEnableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageToColorEnableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 coverageToColorEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCoverageToColorLocationNV", ExactSpelling = true)]
    internal static extern void vkCmdSetCoverageToColorLocationNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint coverageToColorLocation);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCullMode", ExactSpelling = true)]
    internal static extern void vkCmdSetCullMode(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkCullModeFlags cullMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetCullModeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetCullModeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkCullModeFlags cullMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBias", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBias(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBiasEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBiasEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthBiasEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBiasEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBiasEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthBiasEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBounds", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBounds(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, float minDepthBounds, float maxDepthBounds);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBoundsTestEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBoundsTestEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthBoundsTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthBoundsTestEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthBoundsTestEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthBoundsTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthClampEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthClampEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthClampEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthClipEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthClipEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthClipEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthClipNegativeOneToOneEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthClipNegativeOneToOneEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 negativeOneToOne);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthCompareOp", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthCompareOp(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, CompareOp depthCompareOp);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthCompareOpEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthCompareOpEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, CompareOp depthCompareOp);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthTestEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthTestEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthTestEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthTestEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthWriteEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthWriteEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthWriteEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDepthWriteEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDepthWriteEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 depthWriteEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDescriptorBufferOffsetsEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDescriptorBufferOffsetsEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineBindPoint pipelineBindPoint, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T layout, uint firstSet, uint setCount, uint* pBufferIndices, VkDeviceSize* pOffsets);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDeviceMask", ExactSpelling = true)]
    internal static extern void vkCmdSetDeviceMask(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint deviceMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDeviceMaskKHR", ExactSpelling = true)]
    internal static extern void vkCmdSetDeviceMaskKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint deviceMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetDiscardRectangleEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetDiscardRectangleEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, AdamantiumVulkan.Core.Interop.VkRect2D* pDiscardRectangles);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetEvent", ExactSpelling = true)]
    internal static extern void vkCmdSetEvent(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, VkPipelineStageFlags stageMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetEvent2", ExactSpelling = true)]
    internal static extern void vkCmdSetEvent2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetEvent2KHR", ExactSpelling = true)]
    internal static extern void vkCmdSetEvent2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkEvent_T @event, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetExclusiveScissorNV", ExactSpelling = true)]
    internal static extern void vkCmdSetExclusiveScissorNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, AdamantiumVulkan.Core.Interop.VkRect2D* pExclusiveScissors);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetExtraPrimitiveOverestimationSizeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetExtraPrimitiveOverestimationSizeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, float extraPrimitiveOverestimationSize);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetFragmentShadingRateEnumNV", ExactSpelling = true)]
    internal static extern void vkCmdSetFragmentShadingRateEnumNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, FragmentShadingRateNV shadingRate, FragmentShadingRateCombinerOpKHR[] combinerOps);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetFragmentShadingRateKHR", ExactSpelling = true)]
    internal static extern void vkCmdSetFragmentShadingRateKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkExtent2D* pFragmentSize, FragmentShadingRateCombinerOpKHR[] combinerOps);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetFrontFace", ExactSpelling = true)]
    internal static extern void vkCmdSetFrontFace(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, FrontFace frontFace);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetFrontFaceEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetFrontFaceEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, FrontFace frontFace);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLineRasterizationModeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetLineRasterizationModeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, LineRasterizationModeEXT lineRasterizationMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLineStippleEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetLineStippleEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 stippledLineEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLineStippleEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetLineStippleEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLineWidth", ExactSpelling = true)]
    internal static extern void vkCmdSetLineWidth(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, float lineWidth);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLogicOpEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetLogicOpEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 logicOpEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetLogicOpEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetLogicOpEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, LogicOp logicOp);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPatchControlPointsEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetPatchControlPointsEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint patchControlPoints);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPerformanceMarkerINTEL", ExactSpelling = true)]
    internal static extern Result vkCmdSetPerformanceMarkerINTEL(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkPerformanceMarkerInfoINTEL* pMarkerInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPerformanceOverrideINTEL", ExactSpelling = true)]
    internal static extern Result vkCmdSetPerformanceOverrideINTEL(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkPerformanceOverrideInfoINTEL* pOverrideInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPerformanceStreamMarkerINTEL", ExactSpelling = true)]
    internal static extern Result vkCmdSetPerformanceStreamMarkerINTEL(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPolygonModeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetPolygonModeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PolygonMode polygonMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPrimitiveRestartEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetPrimitiveRestartEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 primitiveRestartEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPrimitiveRestartEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetPrimitiveRestartEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 primitiveRestartEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPrimitiveTopology", ExactSpelling = true)]
    internal static extern void vkCmdSetPrimitiveTopology(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PrimitiveTopology primitiveTopology);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetPrimitiveTopologyEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetPrimitiveTopologyEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PrimitiveTopology primitiveTopology);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetProvokingVertexModeEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetProvokingVertexModeEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, ProvokingVertexModeEXT provokingVertexMode);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRasterizationSamplesEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetRasterizationSamplesEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, SampleCountFlagBits rasterizationSamples);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRasterizationStreamEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetRasterizationStreamEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint rasterizationStream);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRasterizerDiscardEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetRasterizerDiscardEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 rasterizerDiscardEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRasterizerDiscardEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetRasterizerDiscardEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 rasterizerDiscardEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRayTracingPipelineStackSizeKHR", ExactSpelling = true)]
    internal static extern void vkCmdSetRayTracingPipelineStackSizeKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint pipelineStackSize);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetRepresentativeFragmentTestEnableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetRepresentativeFragmentTestEnableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 representativeFragmentTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetSampleLocationsEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetSampleLocationsEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 sampleLocationsEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetSampleLocationsEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetSampleLocationsEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkSampleLocationsInfoEXT* pSampleLocationsInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetSampleMaskEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetSampleMaskEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, SampleCountFlagBits samples, VkSampleMask* pSampleMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetScissor", ExactSpelling = true)]
    internal static extern void vkCmdSetScissor(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstScissor, uint scissorCount, AdamantiumVulkan.Core.Interop.VkRect2D* pScissors);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetScissorWithCount", ExactSpelling = true)]
    internal static extern void vkCmdSetScissorWithCount(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint scissorCount, AdamantiumVulkan.Core.Interop.VkRect2D* pScissors);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetScissorWithCountEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetScissorWithCountEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint scissorCount, AdamantiumVulkan.Core.Interop.VkRect2D* pScissors);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetShadingRateImageEnableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetShadingRateImageEnableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 shadingRateImageEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilCompareMask", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilCompareMask(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilOp", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilOp(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkStencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilOpEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilOpEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkStencilFaceFlags faceMask, StencilOp failOp, StencilOp passOp, StencilOp depthFailOp, CompareOp compareOp);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilReference", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilReference(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkStencilFaceFlags faceMask, uint reference);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilTestEnable", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilTestEnable(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 stencilTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilTestEnableEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilTestEnableEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 stencilTestEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetStencilWriteMask", ExactSpelling = true)]
    internal static extern void vkCmdSetStencilWriteMask(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetTessellationDomainOriginEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetTessellationDomainOriginEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, TessellationDomainOrigin domainOrigin);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetVertexInputEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetVertexInputEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint vertexBindingDescriptionCount, AdamantiumVulkan.Core.Interop.VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, AdamantiumVulkan.Core.Interop.VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewport", ExactSpelling = true)]
    internal static extern void vkCmdSetViewport(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstViewport, uint viewportCount, AdamantiumVulkan.Core.Interop.VkViewport* pViewports);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportShadingRatePaletteNV", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportShadingRatePaletteNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstViewport, uint viewportCount, AdamantiumVulkan.Core.Interop.VkShadingRatePaletteNV* pShadingRatePalettes);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportSwizzleNV", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportSwizzleNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstViewport, uint viewportCount, AdamantiumVulkan.Core.Interop.VkViewportSwizzleNV* pViewportSwizzles);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportWithCount", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportWithCount(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint viewportCount, AdamantiumVulkan.Core.Interop.VkViewport* pViewports);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportWithCountEXT", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportWithCountEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint viewportCount, AdamantiumVulkan.Core.Interop.VkViewport* pViewports);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportWScalingEnableNV", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportWScalingEnableNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkBool32 viewportWScalingEnable);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSetViewportWScalingNV", ExactSpelling = true)]
    internal static extern void vkCmdSetViewportWScalingNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint firstViewport, uint viewportCount, AdamantiumVulkan.Core.Interop.VkViewportWScalingNV* pViewportWScalings);

    [DllImport(LibraryPath, EntryPoint = "vkCmdSubpassShadingHUAWEI", ExactSpelling = true)]
    internal static extern void vkCmdSubpassShadingHUAWEI(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCmdTraceRaysIndirect2KHR", ExactSpelling = true)]
    internal static extern void vkCmdTraceRaysIndirect2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkDeviceAddress indirectDeviceAddress);

    [DllImport(LibraryPath, EntryPoint = "vkCmdTraceRaysIndirectKHR", ExactSpelling = true)]
    internal static extern void vkCmdTraceRaysIndirectKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);

    [DllImport(LibraryPath, EntryPoint = "vkCmdTraceRaysKHR", ExactSpelling = true)]
    internal static extern void vkCmdTraceRaysKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, AdamantiumVulkan.Core.Interop.VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint width, uint height, uint depth);

    [DllImport(LibraryPath, EntryPoint = "vkCmdTraceRaysNV", ExactSpelling = true)]
    internal static extern void vkCmdTraceRaysNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, AdamantiumVulkan.Core.Interop.VkBuffer_T missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, AdamantiumVulkan.Core.Interop.VkBuffer_T hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, AdamantiumVulkan.Core.Interop.VkBuffer_T callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth);

    [DllImport(LibraryPath, EntryPoint = "vkCmdUpdateBuffer", ExactSpelling = true)]
    internal static extern void vkCmdUpdateBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWaitEvents", ExactSpelling = true)]
    internal static extern void vkCmdWaitEvents(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint eventCount, AdamantiumVulkan.Core.Interop.VkEvent_T* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, AdamantiumVulkan.Core.Interop.VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, AdamantiumVulkan.Core.Interop.VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, AdamantiumVulkan.Core.Interop.VkImageMemoryBarrier* pImageMemoryBarriers);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWaitEvents2", ExactSpelling = true)]
    internal static extern void vkCmdWaitEvents2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint eventCount, AdamantiumVulkan.Core.Interop.VkEvent_T* pEvents, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWaitEvents2KHR", ExactSpelling = true)]
    internal static extern void vkCmdWaitEvents2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint eventCount, AdamantiumVulkan.Core.Interop.VkEvent_T* pEvents, AdamantiumVulkan.Core.Interop.VkDependencyInfo* pDependencyInfos);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesKHR", ExactSpelling = true)]
    internal static extern void vkCmdWriteAccelerationStructuresPropertiesKHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint accelerationStructureCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureKHR_T* pAccelerationStructures, QueryType queryType, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteAccelerationStructuresPropertiesNV", ExactSpelling = true)]
    internal static extern void vkCmdWriteAccelerationStructuresPropertiesNV(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint accelerationStructureCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T* pAccelerationStructures, QueryType queryType, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteBufferMarker2AMD", ExactSpelling = true)]
    internal static extern void vkCmdWriteBufferMarker2AMD(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, VkDeviceSize dstOffset, uint marker);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteBufferMarkerAMD", ExactSpelling = true)]
    internal static extern void vkCmdWriteBufferMarkerAMD(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.Interop.VkBuffer_T dstBuffer, VkDeviceSize dstOffset, uint marker);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteMicromapsPropertiesEXT", ExactSpelling = true)]
    internal static extern void vkCmdWriteMicromapsPropertiesEXT(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, uint micromapCount, AdamantiumVulkan.Core.Interop.VkMicromapEXT_T* pMicromaps, QueryType queryType, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteTimestamp", ExactSpelling = true)]
    internal static extern void vkCmdWriteTimestamp(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, PipelineStageFlagBits pipelineStage, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteTimestamp2", ExactSpelling = true)]
    internal static extern void vkCmdWriteTimestamp2(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query);

    [DllImport(LibraryPath, EntryPoint = "vkCmdWriteTimestamp2KHR", ExactSpelling = true)]
    internal static extern void vkCmdWriteTimestamp2KHR(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkPipelineStageFlags2 stage, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint query);

    [DllImport(LibraryPath, EntryPoint = "vkCompileDeferredNV", ExactSpelling = true)]
    internal static extern Result vkCompileDeferredNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint shader);

    [DllImport(LibraryPath, EntryPoint = "vkCopyAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern Result vkCopyAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyAccelerationStructureInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCopyAccelerationStructureToMemoryKHR", ExactSpelling = true)]
    internal static extern Result vkCopyAccelerationStructureToMemoryKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyAccelerationStructureToMemoryInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCopyMemoryToAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern Result vkCopyMemoryToAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyMemoryToAccelerationStructureInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCopyMemoryToMicromapEXT", ExactSpelling = true)]
    internal static extern Result vkCopyMemoryToMicromapEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyMemoryToMicromapInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCopyMicromapEXT", ExactSpelling = true)]
    internal static extern Result vkCopyMicromapEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyMicromapInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCopyMicromapToMemoryEXT", ExactSpelling = true)]
    internal static extern Result vkCopyMicromapToMemoryEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkCopyMicromapToMemoryInfoEXT* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkCreateAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern Result vkCreateAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureCreateInfoKHR* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkAccelerationStructureKHR_T pAccelerationStructure);

    [DllImport(LibraryPath, EntryPoint = "vkCreateAccelerationStructureNV", ExactSpelling = true)]
    internal static extern Result vkCreateAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureCreateInfoNV* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T pAccelerationStructure);

    [DllImport(LibraryPath, EntryPoint = "vkCreateBuffer", ExactSpelling = true)]
    internal static extern Result vkCreateBuffer(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkBuffer_T pBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCreateBufferView", ExactSpelling = true)]
    internal static extern Result vkCreateBufferView(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferViewCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkBufferView_T pView);

    [DllImport(LibraryPath, EntryPoint = "vkCreateCommandPool", ExactSpelling = true)]
    internal static extern Result vkCreateCommandPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPoolCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkCommandPool_T pCommandPool);

    [DllImport(LibraryPath, EntryPoint = "vkCreateComputePipelines", ExactSpelling = true)]
    internal static extern Result vkCreateComputePipelines(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, uint createInfoCount, AdamantiumVulkan.Core.Interop.VkComputePipelineCreateInfo* pCreateInfos, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, AdamantiumVulkan.Core.Interop.VkPipeline_T* pPipelines);

    [DllImport(LibraryPath, EntryPoint = "vkCreateCuFunctionNVX", ExactSpelling = true)]
    internal static extern Result vkCreateCuFunctionNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCuFunctionCreateInfoNVX* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkCuFunctionNVX_T pFunction);

    [DllImport(LibraryPath, EntryPoint = "vkCreateCuModuleNVX", ExactSpelling = true)]
    internal static extern Result vkCreateCuModuleNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCuModuleCreateInfoNVX* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkCuModuleNVX_T pModule);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDebugReportCallbackEXT", ExactSpelling = true)]
    internal static extern Result vkCreateDebugReportCallbackEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkDebugReportCallbackCreateInfoEXT* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T pCallback);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDebugUtilsMessengerEXT", ExactSpelling = true)]
    internal static extern Result vkCreateDebugUtilsMessengerEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T pMessenger);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDeferredOperationKHR", ExactSpelling = true)]
    internal static extern Result vkCreateDeferredOperationKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T pDeferredOperation);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDescriptorPool", ExactSpelling = true)]
    internal static extern Result vkCreateDescriptorPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorPoolCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDescriptorPool_T pDescriptorPool);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDescriptorSetLayout", ExactSpelling = true)]
    internal static extern Result vkCreateDescriptorSetLayout(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T pSetLayout);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDescriptorUpdateTemplate", ExactSpelling = true)]
    internal static extern Result vkCreateDescriptorUpdateTemplate(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T pDescriptorUpdateTemplate);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDescriptorUpdateTemplateKHR", ExactSpelling = true)]
    internal static extern Result vkCreateDescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T pDescriptorUpdateTemplate);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDevice", ExactSpelling = true)]
    internal static extern Result vkCreateDevice(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDeviceCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDevice_T pDevice);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDisplayModeKHR", ExactSpelling = true)]
    internal static extern Result vkCreateDisplayModeKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display, AdamantiumVulkan.Core.Interop.VkDisplayModeCreateInfoKHR* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T pMode);

    [DllImport(LibraryPath, EntryPoint = "vkCreateDisplayPlaneSurfaceKHR", ExactSpelling = true)]
    internal static extern Result vkCreateDisplayPlaneSurfaceKHR(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkDisplaySurfaceCreateInfoKHR* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T pSurface);

    [DllImport(LibraryPath, EntryPoint = "vkCreateEvent", ExactSpelling = true)]
    internal static extern Result vkCreateEvent(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkEventCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkEvent_T pEvent);

    [DllImport(LibraryPath, EntryPoint = "vkCreateFence", ExactSpelling = true)]
    internal static extern Result vkCreateFence(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFenceCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkFence_T pFence);

    [DllImport(LibraryPath, EntryPoint = "vkCreateFramebuffer", ExactSpelling = true)]
    internal static extern Result vkCreateFramebuffer(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFramebufferCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkFramebuffer_T pFramebuffer);

    [DllImport(LibraryPath, EntryPoint = "vkCreateGraphicsPipelines", ExactSpelling = true)]
    internal static extern Result vkCreateGraphicsPipelines(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, uint createInfoCount, AdamantiumVulkan.Core.Interop.VkGraphicsPipelineCreateInfo* pCreateInfos, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, AdamantiumVulkan.Core.Interop.VkPipeline_T* pPipelines);

    [DllImport(LibraryPath, EntryPoint = "vkCreateHeadlessSurfaceEXT", ExactSpelling = true)]
    internal static extern Result vkCreateHeadlessSurfaceEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T pSurface);

    [DllImport(LibraryPath, EntryPoint = "vkCreateImage", ExactSpelling = true)]
    internal static extern Result vkCreateImage(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkImage_T pImage);

    [DllImport(LibraryPath, EntryPoint = "vkCreateImageView", ExactSpelling = true)]
    internal static extern Result vkCreateImageView(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageViewCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkImageView_T pView);

    [DllImport(LibraryPath, EntryPoint = "vkCreateIndirectCommandsLayoutNV", ExactSpelling = true)]
    internal static extern Result vkCreateIndirectCommandsLayoutNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNV_T pIndirectCommandsLayout);

    [DllImport(LibraryPath, EntryPoint = "vkCreateInstance", ExactSpelling = true)]
    internal static extern Result vkCreateInstance(AdamantiumVulkan.Core.Interop.VkInstanceCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkInstance_T pInstance);

    [DllImport(LibraryPath, EntryPoint = "vkCreateMicromapEXT", ExactSpelling = true)]
    internal static extern Result vkCreateMicromapEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMicromapCreateInfoEXT* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkMicromapEXT_T pMicromap);

    [DllImport(LibraryPath, EntryPoint = "vkCreateOpticalFlowSessionNV", ExactSpelling = true)]
    internal static extern Result vkCreateOpticalFlowSessionNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkOpticalFlowSessionCreateInfoNV* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkOpticalFlowSessionNV_T pSession);

    [DllImport(LibraryPath, EntryPoint = "vkCreatePipelineCache", ExactSpelling = true)]
    internal static extern Result vkCreatePipelineCache(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCacheCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPipelineCache_T pPipelineCache);

    [DllImport(LibraryPath, EntryPoint = "vkCreatePipelineLayout", ExactSpelling = true)]
    internal static extern Result vkCreatePipelineLayout(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineLayoutCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPipelineLayout_T pPipelineLayout);

    [DllImport(LibraryPath, EntryPoint = "vkCreatePrivateDataSlot", ExactSpelling = true)]
    internal static extern Result vkCreatePrivateDataSlot(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPrivateDataSlotCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T pPrivateDataSlot);

    [DllImport(LibraryPath, EntryPoint = "vkCreatePrivateDataSlotEXT", ExactSpelling = true)]
    internal static extern Result vkCreatePrivateDataSlotEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPrivateDataSlotCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T pPrivateDataSlot);

    [DllImport(LibraryPath, EntryPoint = "vkCreateQueryPool", ExactSpelling = true)]
    internal static extern Result vkCreateQueryPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkQueryPoolCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkQueryPool_T pQueryPool);

    [DllImport(LibraryPath, EntryPoint = "vkCreateRayTracingPipelinesKHR", ExactSpelling = true)]
    internal static extern Result vkCreateRayTracingPipelinesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T deferredOperation, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, uint createInfoCount, AdamantiumVulkan.Core.Interop.VkRayTracingPipelineCreateInfoKHR* pCreateInfos, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPipeline_T pPipelines);

    [DllImport(LibraryPath, EntryPoint = "vkCreateRayTracingPipelinesNV", ExactSpelling = true)]
    internal static extern Result vkCreateRayTracingPipelinesNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, uint createInfoCount, AdamantiumVulkan.Core.Interop.VkRayTracingPipelineCreateInfoNV* pCreateInfos, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkPipeline_T pPipelines);

    [DllImport(LibraryPath, EntryPoint = "vkCreateRenderPass", ExactSpelling = true)]
    internal static extern Result vkCreateRenderPass(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkRenderPass_T pRenderPass);

    [DllImport(LibraryPath, EntryPoint = "vkCreateRenderPass2", ExactSpelling = true)]
    internal static extern Result vkCreateRenderPass2(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkRenderPass_T pRenderPass);

    [DllImport(LibraryPath, EntryPoint = "vkCreateRenderPass2KHR", ExactSpelling = true)]
    internal static extern Result vkCreateRenderPass2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPassCreateInfo2* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkRenderPass_T pRenderPass);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSampler", ExactSpelling = true)]
    internal static extern Result vkCreateSampler(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSampler_T pSampler);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSamplerYcbcrConversion", ExactSpelling = true)]
    internal static extern Result vkCreateSamplerYcbcrConversion(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T pYcbcrConversion);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSamplerYcbcrConversionKHR", ExactSpelling = true)]
    internal static extern Result vkCreateSamplerYcbcrConversionKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversionCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T pYcbcrConversion);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSemaphore", ExactSpelling = true)]
    internal static extern Result vkCreateSemaphore(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSemaphore_T pSemaphore);

    [DllImport(LibraryPath, EntryPoint = "vkCreateShaderModule", ExactSpelling = true)]
    internal static extern Result vkCreateShaderModule(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkShaderModuleCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkShaderModule_T pShaderModule);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSharedSwapchainsKHR", ExactSpelling = true)]
    internal static extern Result vkCreateSharedSwapchainsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint swapchainCount, AdamantiumVulkan.Core.Interop.VkSwapchainCreateInfoKHR* pCreateInfos, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T pSwapchains);

    [DllImport(LibraryPath, EntryPoint = "vkCreateSwapchainKHR", ExactSpelling = true)]
    internal static extern Result vkCreateSwapchainKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainCreateInfoKHR* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T pSwapchain);

    [DllImport(LibraryPath, EntryPoint = "vkCreateValidationCacheEXT", ExactSpelling = true)]
    internal static extern Result vkCreateValidationCacheEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkValidationCacheCreateInfoEXT* pCreateInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T pValidationCache);

    [DllImport(LibraryPath, EntryPoint = "vkDebugMarkerSetObjectNameEXT", ExactSpelling = true)]
    internal static extern Result vkDebugMarkerSetObjectNameEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectNameInfoEXT* pNameInfo);

    [DllImport(LibraryPath, EntryPoint = "vkDebugMarkerSetObjectTagEXT", ExactSpelling = true)]
    internal static extern Result vkDebugMarkerSetObjectTagEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDebugMarkerObjectTagInfoEXT* pTagInfo);

    [DllImport(LibraryPath, EntryPoint = "vkDebugReportMessageEXT", ExactSpelling = true)]
    internal static extern void vkDebugReportMessageEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, VkDebugReportFlagsEXT flags, DebugReportObjectTypeEXT objectType, ulong @object, ulong location, int messageCode, sbyte* pLayerPrefix, sbyte* pMessage);

    [DllImport(LibraryPath, EntryPoint = "vkDeferredOperationJoinKHR", ExactSpelling = true)]
    internal static extern Result vkDeferredOperationJoinKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T operation);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyAccelerationStructureKHR", ExactSpelling = true)]
    internal static extern void vkDestroyAccelerationStructureKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureKHR_T accelerationStructure, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyAccelerationStructureNV", ExactSpelling = true)]
    internal static extern void vkDestroyAccelerationStructureNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T accelerationStructure, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyBuffer", ExactSpelling = true)]
    internal static extern void vkDestroyBuffer(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyBufferView", ExactSpelling = true)]
    internal static extern void vkDestroyBufferView(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferView_T bufferView, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyCommandPool", ExactSpelling = true)]
    internal static extern void vkDestroyCommandPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPool_T commandPool, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyCuFunctionNVX", ExactSpelling = true)]
    internal static extern void vkDestroyCuFunctionNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCuFunctionNVX_T function, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyCuModuleNVX", ExactSpelling = true)]
    internal static extern void vkDestroyCuModuleNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCuModuleNVX_T module, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDebugReportCallbackEXT", ExactSpelling = true)]
    internal static extern void vkDestroyDebugReportCallbackEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkDebugReportCallbackEXT_T callback, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDebugUtilsMessengerEXT", ExactSpelling = true)]
    internal static extern void vkDestroyDebugUtilsMessengerEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerEXT_T messenger, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDeferredOperationKHR", ExactSpelling = true)]
    internal static extern void vkDestroyDeferredOperationKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T operation, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDescriptorPool", ExactSpelling = true)]
    internal static extern void vkDestroyDescriptorPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorPool_T descriptorPool, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDescriptorSetLayout", ExactSpelling = true)]
    internal static extern void vkDestroyDescriptorSetLayout(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T descriptorSetLayout, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDescriptorUpdateTemplate", ExactSpelling = true)]
    internal static extern void vkDestroyDescriptorUpdateTemplate(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T descriptorUpdateTemplate, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDescriptorUpdateTemplateKHR", ExactSpelling = true)]
    internal static extern void vkDestroyDescriptorUpdateTemplateKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T descriptorUpdateTemplate, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyDevice", ExactSpelling = true)]
    internal static extern void vkDestroyDevice(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyEvent", ExactSpelling = true)]
    internal static extern void vkDestroyEvent(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkEvent_T @event, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyFence", ExactSpelling = true)]
    internal static extern void vkDestroyFence(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFence_T fence, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyFramebuffer", ExactSpelling = true)]
    internal static extern void vkDestroyFramebuffer(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFramebuffer_T framebuffer, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyImage", ExactSpelling = true)]
    internal static extern void vkDestroyImage(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyImageView", ExactSpelling = true)]
    internal static extern void vkDestroyImageView(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageView_T imageView, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyIndirectCommandsLayoutNV", ExactSpelling = true)]
    internal static extern void vkDestroyIndirectCommandsLayoutNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkIndirectCommandsLayoutNV_T indirectCommandsLayout, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyInstance", ExactSpelling = true)]
    internal static extern void vkDestroyInstance(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyMicromapEXT", ExactSpelling = true)]
    internal static extern void vkDestroyMicromapEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMicromapEXT_T micromap, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyOpticalFlowSessionNV", ExactSpelling = true)]
    internal static extern void vkDestroyOpticalFlowSessionNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkOpticalFlowSessionNV_T session, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyPipeline", ExactSpelling = true)]
    internal static extern void vkDestroyPipeline(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyPipelineCache", ExactSpelling = true)]
    internal static extern void vkDestroyPipelineCache(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyPipelineLayout", ExactSpelling = true)]
    internal static extern void vkDestroyPipelineLayout(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineLayout_T pipelineLayout, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyPrivateDataSlot", ExactSpelling = true)]
    internal static extern void vkDestroyPrivateDataSlot(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyPrivateDataSlotEXT", ExactSpelling = true)]
    internal static extern void vkDestroyPrivateDataSlotEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyQueryPool", ExactSpelling = true)]
    internal static extern void vkDestroyQueryPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyRenderPass", ExactSpelling = true)]
    internal static extern void vkDestroyRenderPass(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPass_T renderPass, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySampler", ExactSpelling = true)]
    internal static extern void vkDestroySampler(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSampler_T sampler, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySamplerYcbcrConversion", ExactSpelling = true)]
    internal static extern void vkDestroySamplerYcbcrConversion(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T ycbcrConversion, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySamplerYcbcrConversionKHR", ExactSpelling = true)]
    internal static extern void vkDestroySamplerYcbcrConversionKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerYcbcrConversion_T ycbcrConversion, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySemaphore", ExactSpelling = true)]
    internal static extern void vkDestroySemaphore(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphore_T semaphore, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyShaderModule", ExactSpelling = true)]
    internal static extern void vkDestroyShaderModule(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkShaderModule_T shaderModule, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySurfaceKHR", ExactSpelling = true)]
    internal static extern void vkDestroySurfaceKHR(AdamantiumVulkan.Core.Interop.VkInstance_T instance, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroySwapchainKHR", ExactSpelling = true)]
    internal static extern void vkDestroySwapchainKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDestroyValidationCacheEXT", ExactSpelling = true)]
    internal static extern void vkDestroyValidationCacheEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T validationCache, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkDeviceWaitIdle", ExactSpelling = true)]
    internal static extern Result vkDeviceWaitIdle(AdamantiumVulkan.Core.Interop.VkDevice_T device);

    [DllImport(LibraryPath, EntryPoint = "vkDisplayPowerControlEXT", ExactSpelling = true)]
    internal static extern Result vkDisplayPowerControlEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display, AdamantiumVulkan.Core.Interop.VkDisplayPowerInfoEXT* pDisplayPowerInfo);

    [DllImport(LibraryPath, EntryPoint = "vkEndCommandBuffer", ExactSpelling = true)]
    internal static extern Result vkEndCommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer);

    [DllImport(LibraryPath, EntryPoint = "vkEnumerateDeviceExtensionProperties", ExactSpelling = true)]
    internal static extern Result vkEnumerateDeviceExtensionProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, sbyte* pLayerName, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkExtensionProperties* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumerateDeviceLayerProperties", ExactSpelling = true)]
    internal static extern Result vkEnumerateDeviceLayerProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkLayerProperties* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumerateInstanceExtensionProperties", ExactSpelling = true)]
    internal static extern Result vkEnumerateInstanceExtensionProperties(sbyte* pLayerName, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkExtensionProperties* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumerateInstanceLayerProperties", ExactSpelling = true)]
    internal static extern Result vkEnumerateInstanceLayerProperties(uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkLayerProperties* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumerateInstanceVersion", ExactSpelling = true)]
    internal static extern Result vkEnumerateInstanceVersion(uint* pApiVersion);

    [DllImport(LibraryPath, EntryPoint = "vkEnumeratePhysicalDeviceGroups", ExactSpelling = true)]
    internal static extern Result vkEnumeratePhysicalDeviceGroups(AdamantiumVulkan.Core.Interop.VkInstance_T instance, uint* pPhysicalDeviceGroupCount, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumeratePhysicalDeviceGroupsKHR", ExactSpelling = true)]
    internal static extern Result vkEnumeratePhysicalDeviceGroupsKHR(AdamantiumVulkan.Core.Interop.VkInstance_T instance, uint* pPhysicalDeviceGroupCount, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

    [DllImport(LibraryPath, EntryPoint = "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", ExactSpelling = true)]
    internal static extern Result vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint queueFamilyIndex, uint* pCounterCount, AdamantiumVulkan.Core.Interop.VkPerformanceCounterKHR* pCounters, AdamantiumVulkan.Core.Interop.VkPerformanceCounterDescriptionKHR* pCounterDescriptions);

    [DllImport(LibraryPath, EntryPoint = "vkEnumeratePhysicalDevices", ExactSpelling = true)]
    internal static extern Result vkEnumeratePhysicalDevices(AdamantiumVulkan.Core.Interop.VkInstance_T instance, uint* pPhysicalDeviceCount, AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T* pPhysicalDevices);

    [DllImport(LibraryPath, EntryPoint = "vkFlushMappedMemoryRanges", ExactSpelling = true)]
    internal static extern Result vkFlushMappedMemoryRanges(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint memoryRangeCount, AdamantiumVulkan.Core.Interop.VkMappedMemoryRange* pMemoryRanges);

    [DllImport(LibraryPath, EntryPoint = "vkFreeCommandBuffers", ExactSpelling = true)]
    internal static extern void vkFreeCommandBuffers(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPool_T commandPool, uint commandBufferCount, AdamantiumVulkan.Core.Interop.VkCommandBuffer_T* pCommandBuffers);

    [DllImport(LibraryPath, EntryPoint = "vkFreeDescriptorSets", ExactSpelling = true)]
    internal static extern Result vkFreeDescriptorSets(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorPool_T descriptorPool, uint descriptorSetCount, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T* pDescriptorSets);

    [DllImport(LibraryPath, EntryPoint = "vkFreeMemory", ExactSpelling = true)]
    internal static extern void vkFreeMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator);

    [DllImport(LibraryPath, EntryPoint = "vkGetAccelerationStructureBuildSizesKHR", ExactSpelling = true)]
    internal static extern void vkGetAccelerationStructureBuildSizesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AccelerationStructureBuildTypeKHR buildType, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint* pMaxPrimitiveCounts, AdamantiumVulkan.Core.Interop.VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetAccelerationStructureDeviceAddressKHR", ExactSpelling = true)]
    internal static extern VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureDeviceAddressInfoKHR* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetAccelerationStructureHandleNV", ExactSpelling = true)]
    internal static extern Result vkGetAccelerationStructureHandleNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureNV_T accelerationStructure, ulong dataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetAccelerationStructureMemoryRequirementsNV", ExactSpelling = true)]
    internal static extern void vkGetAccelerationStructureMemoryRequirementsNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferDeviceAddress", ExactSpelling = true)]
    internal static extern VkDeviceAddress vkGetBufferDeviceAddress(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferDeviceAddressEXT", ExactSpelling = true)]
    internal static extern VkDeviceAddress vkGetBufferDeviceAddressEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferDeviceAddressKHR", ExactSpelling = true)]
    internal static extern VkDeviceAddress vkGetBufferDeviceAddressKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetBufferMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBuffer_T buffer, out AdamantiumVulkan.Core.Interop.VkMemoryRequirements pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferMemoryRequirements2", ExactSpelling = true)]
    internal static extern void vkGetBufferMemoryRequirements2(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferMemoryRequirementsInfo2* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferMemoryRequirements2KHR", ExactSpelling = true)]
    internal static extern void vkGetBufferMemoryRequirements2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferMemoryRequirementsInfo2* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferOpaqueCaptureAddress", ExactSpelling = true)]
    internal static extern ulong vkGetBufferOpaqueCaptureAddress(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferOpaqueCaptureAddressKHR", ExactSpelling = true)]
    internal static extern ulong vkGetBufferOpaqueCaptureAddressKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferDeviceAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetBufferOpaqueCaptureDescriptorDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetBufferOpaqueCaptureDescriptorDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetCalibratedTimestampsEXT", ExactSpelling = true)]
    internal static extern Result vkGetCalibratedTimestampsEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint timestampCount, AdamantiumVulkan.Core.Interop.VkCalibratedTimestampInfoEXT* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeferredOperationMaxConcurrencyKHR", ExactSpelling = true)]
    internal static extern uint vkGetDeferredOperationMaxConcurrencyKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T operation);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeferredOperationResultKHR", ExactSpelling = true)]
    internal static extern Result vkGetDeferredOperationResultKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeferredOperationKHR_T operation);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorEXT", ExactSpelling = true)]
    internal static extern void vkGetDescriptorEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorGetInfoEXT* pDescriptorInfo, ulong dataSize, void* pDescriptor);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetHostMappingVALVE", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetHostMappingVALVE(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T descriptorSet, out void* ppData);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetLayoutBindingOffsetEXT", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetLayoutBindingOffsetEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T layout, uint binding, VkDeviceSize* pOffset);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetLayoutHostMappingInfoVALVE", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetLayoutHostMappingInfoVALVE(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetBindingReferenceVALVE* pBindingReference, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetLayoutSizeEXT", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetLayoutSizeEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayout_T layout, VkDeviceSize* pLayoutSizeInBytes);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetLayoutSupport", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetLayoutSupport(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutSupport* pSupport);

    [DllImport(LibraryPath, EntryPoint = "vkGetDescriptorSetLayoutSupportKHR", ExactSpelling = true)]
    internal static extern void vkGetDescriptorSetLayoutSupportKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkDescriptorSetLayoutSupport* pSupport);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceAccelerationStructureCompatibilityKHR", ExactSpelling = true)]
    internal static extern void vkGetDeviceAccelerationStructureCompatibilityKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkAccelerationStructureVersionInfoKHR* pVersionInfo, AccelerationStructureCompatibilityKHR* pCompatibility);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceBufferMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetDeviceBufferMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceBufferMemoryRequirements* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceBufferMemoryRequirementsKHR", ExactSpelling = true)]
    internal static extern void vkGetDeviceBufferMemoryRequirementsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceBufferMemoryRequirements* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceFaultInfoEXT", ExactSpelling = true)]
    internal static extern Result vkGetDeviceFaultInfoEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceFaultCountsEXT* pFaultCounts, AdamantiumVulkan.Core.Interop.VkDeviceFaultInfoEXT* pFaultInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceGroupPeerMemoryFeatures", ExactSpelling = true)]
    internal static extern void vkGetDeviceGroupPeerMemoryFeatures(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceGroupPeerMemoryFeaturesKHR", ExactSpelling = true)]
    internal static extern void vkGetDeviceGroupPeerMemoryFeaturesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceGroupPresentCapabilitiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetDeviceGroupPresentCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceGroupSurfacePresentModesKHR", ExactSpelling = true)]
    internal static extern Result vkGetDeviceGroupSurfacePresentModesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, VkDeviceGroupPresentModeFlagsKHR* pModes);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceImageMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetDeviceImageMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceImageMemoryRequirements* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceImageMemoryRequirementsKHR", ExactSpelling = true)]
    internal static extern void vkGetDeviceImageMemoryRequirementsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceImageMemoryRequirements* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceImageSparseMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetDeviceImageSparseMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceImageSparseMemoryRequirementsKHR", ExactSpelling = true)]
    internal static extern void vkGetDeviceImageSparseMemoryRequirementsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceMemoryCommitment", ExactSpelling = true)]
    internal static extern void vkGetDeviceMemoryCommitment(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, VkDeviceSize* pCommittedMemoryInBytes);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddress", ExactSpelling = true)]
    internal static extern ulong vkGetDeviceMemoryOpaqueCaptureAddress(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceMemoryOpaqueCaptureAddressKHR", ExactSpelling = true)]
    internal static extern ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceMicromapCompatibilityEXT", ExactSpelling = true)]
    internal static extern void vkGetDeviceMicromapCompatibilityEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMicromapVersionInfoEXT* pVersionInfo, AccelerationStructureCompatibilityKHR* pCompatibility);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceProcAddr", ExactSpelling = true)]
    internal static extern void* vkGetDeviceProcAddr(AdamantiumVulkan.Core.Interop.VkDevice_T device, sbyte* pName);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceQueue", ExactSpelling = true)]
    internal static extern void vkGetDeviceQueue(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint queueFamilyIndex, uint queueIndex, out AdamantiumVulkan.Core.Interop.VkQueue_T pQueue);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceQueue2", ExactSpelling = true)]
    internal static extern void vkGetDeviceQueue2(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceQueueInfo2* pQueueInfo, out AdamantiumVulkan.Core.Interop.VkQueue_T pQueue);

    [DllImport(LibraryPath, EntryPoint = "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", ExactSpelling = true)]
    internal static extern Result vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPass_T renderpass, AdamantiumVulkan.Core.Interop.VkExtent2D* pMaxWorkgroupSize);

    [DllImport(LibraryPath, EntryPoint = "vkGetDisplayModeProperties2KHR", ExactSpelling = true)]
    internal static extern Result vkGetDisplayModeProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayModeProperties2KHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetDisplayModePropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetDisplayModePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayModePropertiesKHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetDisplayPlaneCapabilities2KHR", ExactSpelling = true)]
    internal static extern Result vkGetDisplayPlaneCapabilities2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilities2KHR* pCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetDisplayPlaneCapabilitiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetDisplayPlaneCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayModeKHR_T mode, uint planeIndex, AdamantiumVulkan.Core.Interop.VkDisplayPlaneCapabilitiesKHR* pCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetDisplayPlaneSupportedDisplaysKHR", ExactSpelling = true)]
    internal static extern Result vkGetDisplayPlaneSupportedDisplaysKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint planeIndex, uint* pDisplayCount, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T* pDisplays);

    [DllImport(LibraryPath, EntryPoint = "vkGetDrmDisplayEXT", ExactSpelling = true)]
    internal static extern Result vkGetDrmDisplayEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, int drmFd, uint connectorId, out AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display);

    [DllImport(LibraryPath, EntryPoint = "vkGetDynamicRenderingTilePropertiesQCOM", ExactSpelling = true)]
    internal static extern Result vkGetDynamicRenderingTilePropertiesQCOM(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderingInfo* pRenderingInfo, AdamantiumVulkan.Core.Interop.VkTilePropertiesQCOM* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetEventStatus", ExactSpelling = true)]
    internal static extern Result vkGetEventStatus(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkEvent_T @event);

    [DllImport(LibraryPath, EntryPoint = "vkGetFenceFdKHR", ExactSpelling = true)]
    internal static extern Result vkGetFenceFdKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd);

    [DllImport(LibraryPath, EntryPoint = "vkGetFenceStatus", ExactSpelling = true)]
    internal static extern Result vkGetFenceStatus(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFence_T fence);

    [DllImport(LibraryPath, EntryPoint = "vkGetFramebufferTilePropertiesQCOM", ExactSpelling = true)]
    internal static extern Result vkGetFramebufferTilePropertiesQCOM(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkFramebuffer_T framebuffer, uint* pPropertiesCount, AdamantiumVulkan.Core.Interop.VkTilePropertiesQCOM* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetGeneratedCommandsMemoryRequirementsNV", ExactSpelling = true)]
    internal static extern void vkGetGeneratedCommandsMemoryRequirementsNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageDrmFormatModifierPropertiesEXT", ExactSpelling = true)]
    internal static extern Result vkGetImageDrmFormatModifierPropertiesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, AdamantiumVulkan.Core.Interop.VkImageDrmFormatModifierPropertiesEXT* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetImageMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, out AdamantiumVulkan.Core.Interop.VkMemoryRequirements pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageMemoryRequirements2", ExactSpelling = true)]
    internal static extern void vkGetImageMemoryRequirements2(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageMemoryRequirementsInfo2* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageMemoryRequirements2KHR", ExactSpelling = true)]
    internal static extern void vkGetImageMemoryRequirements2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageMemoryRequirementsInfo2* pInfo, AdamantiumVulkan.Core.Interop.VkMemoryRequirements2* pMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageOpaqueCaptureDescriptorDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetImageOpaqueCaptureDescriptorDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageSparseMemoryRequirements", ExactSpelling = true)]
    internal static extern void vkGetImageSparseMemoryRequirements(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, uint* pSparseMemoryRequirementCount, AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageSparseMemoryRequirements2", ExactSpelling = true)]
    internal static extern void vkGetImageSparseMemoryRequirements2(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageSparseMemoryRequirements2KHR", ExactSpelling = true)]
    internal static extern void vkGetImageSparseMemoryRequirements2KHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, AdamantiumVulkan.Core.Interop.VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageSubresourceLayout", ExactSpelling = true)]
    internal static extern void vkGetImageSubresourceLayout(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, AdamantiumVulkan.Core.Interop.VkImageSubresource* pSubresource, AdamantiumVulkan.Core.Interop.VkSubresourceLayout* pLayout);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageSubresourceLayout2EXT", ExactSpelling = true)]
    internal static extern void vkGetImageSubresourceLayout2EXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImage_T image, AdamantiumVulkan.Core.Interop.VkImageSubresource2EXT* pSubresource, AdamantiumVulkan.Core.Interop.VkSubresourceLayout2EXT* pLayout);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageViewAddressNVX", ExactSpelling = true)]
    internal static extern Result vkGetImageViewAddressNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageView_T imageView, AdamantiumVulkan.Core.Interop.VkImageViewAddressPropertiesNVX* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageViewHandleNVX", ExactSpelling = true)]
    internal static extern uint vkGetImageViewHandleNVX(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageViewHandleInfoNVX* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetImageViewOpaqueCaptureDescriptorDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetImageViewOpaqueCaptureDescriptorDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetInstanceProcAddr", ExactSpelling = true)]
    internal static extern void* vkGetInstanceProcAddr(AdamantiumVulkan.Core.Interop.VkInstance_T instance, sbyte* pName);

    [DllImport(LibraryPath, EntryPoint = "vkGetMemoryFdKHR", ExactSpelling = true)]
    internal static extern Result vkGetMemoryFdKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd);

    [DllImport(LibraryPath, EntryPoint = "vkGetMemoryFdPropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetMemoryFdPropertiesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, ExternalMemoryHandleTypeFlagBits handleType, int fd, AdamantiumVulkan.Core.Interop.VkMemoryFdPropertiesKHR* pMemoryFdProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetMemoryHostPointerPropertiesEXT", ExactSpelling = true)]
    internal static extern Result vkGetMemoryHostPointerPropertiesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, ExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, AdamantiumVulkan.Core.Interop.VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetMemoryRemoteAddressNV", ExactSpelling = true)]
    internal static extern Result vkGetMemoryRemoteAddressNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, out AdamantiumVulkan.Core.Interop.VkRemoteAddressNVImpl pAddress);

    [DllImport(LibraryPath, EntryPoint = "vkGetMicromapBuildSizesEXT", ExactSpelling = true)]
    internal static extern void vkGetMicromapBuildSizesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AccelerationStructureBuildTypeKHR buildType, AdamantiumVulkan.Core.Interop.VkMicromapBuildInfoEXT* pBuildInfo, AdamantiumVulkan.Core.Interop.VkMicromapBuildSizesInfoEXT* pSizeInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetPastPresentationTimingGOOGLE", ExactSpelling = true)]
    internal static extern Result vkGetPastPresentationTimingGOOGLE(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, uint* pPresentationTimingCount, AdamantiumVulkan.Core.Interop.VkPastPresentationTimingGOOGLE* pPresentationTimings);

    [DllImport(LibraryPath, EntryPoint = "vkGetPerformanceParameterINTEL", ExactSpelling = true)]
    internal static extern Result vkGetPerformanceParameterINTEL(AdamantiumVulkan.Core.Interop.VkDevice_T device, PerformanceParameterTypeINTEL parameter, AdamantiumVulkan.Core.Interop.VkPerformanceValueINTEL* pValue);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pTimeDomainCount, TimeDomainEXT* pTimeDomains);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkCooperativeMatrixPropertiesNV* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceDisplayPlaneProperties2KHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceDisplayPlaneProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayPlaneProperties2KHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceDisplayPlanePropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceDisplayPlanePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayPlanePropertiesKHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceDisplayProperties2KHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceDisplayProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayProperties2KHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceDisplayPropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceDisplayPropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkDisplayPropertiesKHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalBufferProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalBufferProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, AdamantiumVulkan.Core.Interop.VkExternalBufferProperties* pExternalBufferProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalBufferPropertiesKHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalBufferPropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, AdamantiumVulkan.Core.Interop.VkExternalBufferProperties* pExternalBufferProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalFenceProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalFenceProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, AdamantiumVulkan.Core.Interop.VkExternalFenceProperties* pExternalFenceProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalFencePropertiesKHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalFencePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, AdamantiumVulkan.Core.Interop.VkExternalFenceProperties* pExternalFenceProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalImageFormatPropertiesNV", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceExternalImageFormatPropertiesNV(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, ImageType type, ImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, AdamantiumVulkan.Core.Interop.VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalSemaphoreProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalSemaphoreProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, AdamantiumVulkan.Core.Interop.VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, AdamantiumVulkan.Core.Interop.VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFeatures", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFeatures(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures pFeatures);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFeatures2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFeatures2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 pFeatures);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFeatures2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFeatures2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFeatures2 pFeatures);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFormatProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFormatProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, AdamantiumVulkan.Core.Interop.VkFormatProperties* pFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFormatProperties2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFormatProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, AdamantiumVulkan.Core.Interop.VkFormatProperties2* pFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFormatProperties2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceFormatProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, AdamantiumVulkan.Core.Interop.VkFormatProperties2* pFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceFragmentShadingRatesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceFragmentShadingRatesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pFragmentShadingRateCount, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceImageFormatProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, ImageType type, ImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, AdamantiumVulkan.Core.Interop.VkImageFormatProperties* pImageFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceImageFormatProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, AdamantiumVulkan.Core.Interop.VkImageFormatProperties2* pImageFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceImageFormatProperties2KHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceImageFormatProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, AdamantiumVulkan.Core.Interop.VkImageFormatProperties2* pImageFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceMemoryProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceMemoryProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties pMemoryProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceMemoryProperties2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceMemoryProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 pMemoryProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceMemoryProperties2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceMemoryProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceMemoryProperties2 pMemoryProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceMultisamplePropertiesEXT", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceMultisamplePropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, SampleCountFlagBits samples, AdamantiumVulkan.Core.Interop.VkMultisamplePropertiesEXT* pMultisampleProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceOpticalFlowImageFormatsNV", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceOpticalFlowImageFormatsNV(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint* pFormatCount, AdamantiumVulkan.Core.Interop.VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDevicePresentRectanglesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDevicePresentRectanglesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, uint* pRectCount, AdamantiumVulkan.Core.Interop.VkRect2D* pRects);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, out AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceProperties2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties2* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceProperties2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceProperties2* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint* pNumPasses);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceQueueFamilyProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pQueueFamilyPropertyCount, AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties* pQueueFamilyProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceQueueFamilyProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pQueueFamilyPropertyCount, AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2* pQueueFamilyProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceQueueFamilyProperties2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceQueueFamilyProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pQueueFamilyPropertyCount, AdamantiumVulkan.Core.Interop.VkQueueFamilyProperties2* pQueueFamilyProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceSparseImageFormatProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, Format format, ImageType type, SampleCountFlagBits samples, VkImageUsageFlags usage, ImageTiling tiling, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceSparseImageFormatProperties2(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties2* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSparseImageFormatProperties2KHR", ExactSpelling = true)]
    internal static extern void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, AdamantiumVulkan.Core.Interop.VkSparseImageFormatProperties2* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pCombinationCount, AdamantiumVulkan.Core.Interop.VkFramebufferMixedSamplesCombinationNV* pCombinations);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2EXT", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceCapabilities2EXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2EXT* pSurfaceCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilities2KHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceCapabilities2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, AdamantiumVulkan.Core.Interop.VkSurfaceCapabilities2KHR* pSurfaceCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceCapabilitiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceCapabilitiesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, out AdamantiumVulkan.Core.Interop.VkSurfaceCapabilitiesKHR pSurfaceCapabilities);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceFormats2KHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceFormats2KHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pSurfaceFormatCount, AdamantiumVulkan.Core.Interop.VkSurfaceFormat2KHR* pSurfaceFormats);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceFormatsKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceFormatsKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, uint* pSurfaceFormatCount, AdamantiumVulkan.Core.Interop.VkSurfaceFormatKHR* pSurfaceFormats);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfacePresentModesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfacePresentModesKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, uint* pPresentModeCount, PresentModeKHR* pPresentModes);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceSurfaceSupportKHR", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceSurfaceSupportKHR(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint queueFamilyIndex, AdamantiumVulkan.Core.Interop.VkSurfaceKHR_T surface, out VkBool32 pSupported);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceToolProperties", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceToolProperties(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pToolCount, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceToolProperties* pToolProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPhysicalDeviceToolPropertiesEXT", ExactSpelling = true)]
    internal static extern Result vkGetPhysicalDeviceToolPropertiesEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, uint* pToolCount, AdamantiumVulkan.Core.Interop.VkPhysicalDeviceToolProperties* pToolProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPipelineCacheData", ExactSpelling = true)]
    internal static extern Result vkGetPipelineCacheData(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T pipelineCache, ulong* pDataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetPipelineExecutableInternalRepresentationsKHR", ExactSpelling = true)]
    internal static extern Result vkGetPipelineExecutableInternalRepresentationsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pInternalRepresentationCount, AdamantiumVulkan.Core.Interop.VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);

    [DllImport(LibraryPath, EntryPoint = "vkGetPipelineExecutablePropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkGetPipelineExecutablePropertiesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineInfoKHR* pPipelineInfo, uint* pExecutableCount, AdamantiumVulkan.Core.Interop.VkPipelineExecutablePropertiesKHR* pProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPipelineExecutableStatisticsKHR", ExactSpelling = true)]
    internal static extern Result vkGetPipelineExecutableStatisticsKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pStatisticCount, AdamantiumVulkan.Core.Interop.VkPipelineExecutableStatisticKHR* pStatistics);

    [DllImport(LibraryPath, EntryPoint = "vkGetPipelinePropertiesEXT", ExactSpelling = true)]
    internal static extern Result vkGetPipelinePropertiesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineInfoKHR* pPipelineInfo, AdamantiumVulkan.Core.Interop.VkBaseOutStructure* pPipelineProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetPrivateData", ExactSpelling = true)]
    internal static extern void vkGetPrivateData(AdamantiumVulkan.Core.Interop.VkDevice_T device, ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, ulong* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetPrivateDataEXT", ExactSpelling = true)]
    internal static extern void vkGetPrivateDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, ulong* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetQueryPoolResults", ExactSpelling = true)]
    internal static extern Result vkGetQueryPoolResults(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery, uint queryCount, ulong dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkGetQueueCheckpointData2NV", ExactSpelling = true)]
    internal static extern void vkGetQueueCheckpointData2NV(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint* pCheckpointDataCount, AdamantiumVulkan.Core.Interop.VkCheckpointData2NV* pCheckpointData);

    [DllImport(LibraryPath, EntryPoint = "vkGetQueueCheckpointDataNV", ExactSpelling = true)]
    internal static extern void vkGetQueueCheckpointDataNV(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint* pCheckpointDataCount, AdamantiumVulkan.Core.Interop.VkCheckpointDataNV* pCheckpointData);

    [DllImport(LibraryPath, EntryPoint = "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR", ExactSpelling = true)]
    internal static extern Result vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetRayTracingShaderGroupHandlesKHR", ExactSpelling = true)]
    internal static extern Result vkGetRayTracingShaderGroupHandlesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetRayTracingShaderGroupHandlesNV", ExactSpelling = true)]
    internal static extern Result vkGetRayTracingShaderGroupHandlesNV(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint firstGroup, uint groupCount, ulong dataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetRayTracingShaderGroupStackSizeKHR", ExactSpelling = true)]
    internal static extern VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, uint group, ShaderGroupShaderKHR groupShader);

    [DllImport(LibraryPath, EntryPoint = "vkGetRefreshCycleDurationGOOGLE", ExactSpelling = true)]
    internal static extern Result vkGetRefreshCycleDurationGOOGLE(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, AdamantiumVulkan.Core.Interop.VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);

    [DllImport(LibraryPath, EntryPoint = "vkGetRenderAreaGranularity", ExactSpelling = true)]
    internal static extern void vkGetRenderAreaGranularity(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkRenderPass_T renderPass, AdamantiumVulkan.Core.Interop.VkExtent2D* pGranularity);

    [DllImport(LibraryPath, EntryPoint = "vkGetSamplerOpaqueCaptureDescriptorDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetSamplerOpaqueCaptureDescriptorDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkGetSemaphoreCounterValue", ExactSpelling = true)]
    internal static extern Result vkGetSemaphoreCounterValue(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphore_T semaphore, ulong* pValue);

    [DllImport(LibraryPath, EntryPoint = "vkGetSemaphoreCounterValueKHR", ExactSpelling = true)]
    internal static extern Result vkGetSemaphoreCounterValueKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphore_T semaphore, ulong* pValue);

    [DllImport(LibraryPath, EntryPoint = "vkGetSemaphoreFdKHR", ExactSpelling = true)]
    internal static extern Result vkGetSemaphoreFdKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd);

    [DllImport(LibraryPath, EntryPoint = "vkGetShaderInfoAMD", ExactSpelling = true)]
    internal static extern Result vkGetShaderInfoAMD(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipeline_T pipeline, ShaderStageFlagBits shaderStage, ShaderInfoTypeAMD infoType, ulong* pInfoSize, void* pInfo);

    [DllImport(LibraryPath, EntryPoint = "vkGetShaderModuleCreateInfoIdentifierEXT", ExactSpelling = true)]
    internal static extern void vkGetShaderModuleCreateInfoIdentifierEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkShaderModuleCreateInfo* pCreateInfo, AdamantiumVulkan.Core.Interop.VkShaderModuleIdentifierEXT* pIdentifier);

    [DllImport(LibraryPath, EntryPoint = "vkGetShaderModuleIdentifierEXT", ExactSpelling = true)]
    internal static extern void vkGetShaderModuleIdentifierEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkShaderModule_T shaderModule, AdamantiumVulkan.Core.Interop.VkShaderModuleIdentifierEXT* pIdentifier);

    [DllImport(LibraryPath, EntryPoint = "vkGetSwapchainCounterEXT", ExactSpelling = true)]
    internal static extern Result vkGetSwapchainCounterEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, SurfaceCounterFlagBitsEXT counter, ulong* pCounterValue);

    [DllImport(LibraryPath, EntryPoint = "vkGetSwapchainImagesKHR", ExactSpelling = true)]
    internal static extern Result vkGetSwapchainImagesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, uint* pSwapchainImageCount, AdamantiumVulkan.Core.Interop.VkImage_T* pSwapchainImages);

    [DllImport(LibraryPath, EntryPoint = "vkGetSwapchainStatusKHR", ExactSpelling = true)]
    internal static extern Result vkGetSwapchainStatusKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain);

    [DllImport(LibraryPath, EntryPoint = "vkGetValidationCacheDataEXT", ExactSpelling = true)]
    internal static extern Result vkGetValidationCacheDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T validationCache, ulong* pDataSize, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkImportFenceFdKHR", ExactSpelling = true)]
    internal static extern Result vkImportFenceFdKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImportFenceFdInfoKHR* pImportFenceFdInfo);

    [DllImport(LibraryPath, EntryPoint = "vkImportSemaphoreFdKHR", ExactSpelling = true)]
    internal static extern Result vkImportSemaphoreFdKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);

    [DllImport(LibraryPath, EntryPoint = "vkInitializePerformanceApiINTEL", ExactSpelling = true)]
    internal static extern Result vkInitializePerformanceApiINTEL(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkInitializePerformanceApiInfoINTEL* pInitializeInfo);

    [DllImport(LibraryPath, EntryPoint = "vkInvalidateMappedMemoryRanges", ExactSpelling = true)]
    internal static extern Result vkInvalidateMappedMemoryRanges(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint memoryRangeCount, AdamantiumVulkan.Core.Interop.VkMappedMemoryRange* pMemoryRanges);

    [DllImport(LibraryPath, EntryPoint = "vkMapMemory", ExactSpelling = true)]
    internal static extern Result vkMapMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, out void* ppData);

    [DllImport(LibraryPath, EntryPoint = "vkMergePipelineCaches", ExactSpelling = true)]
    internal static extern Result vkMergePipelineCaches(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPipelineCache_T dstCache, uint srcCacheCount, AdamantiumVulkan.Core.Interop.VkPipelineCache_T* pSrcCaches);

    [DllImport(LibraryPath, EntryPoint = "vkMergeValidationCachesEXT", ExactSpelling = true)]
    internal static extern Result vkMergeValidationCachesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T dstCache, uint srcCacheCount, AdamantiumVulkan.Core.Interop.VkValidationCacheEXT_T* pSrcCaches);

    [DllImport(LibraryPath, EntryPoint = "vkQueueBeginDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkQueueBeginDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkQueue_T queue, AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT* pLabelInfo);

    [DllImport(LibraryPath, EntryPoint = "vkQueueBindSparse", ExactSpelling = true)]
    internal static extern Result vkQueueBindSparse(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint bindInfoCount, AdamantiumVulkan.Core.Interop.VkBindSparseInfo* pBindInfo, AdamantiumVulkan.Core.Interop.VkFence_T fence);

    [DllImport(LibraryPath, EntryPoint = "vkQueueEndDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkQueueEndDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkQueue_T queue);

    [DllImport(LibraryPath, EntryPoint = "vkQueueInsertDebugUtilsLabelEXT", ExactSpelling = true)]
    internal static extern void vkQueueInsertDebugUtilsLabelEXT(AdamantiumVulkan.Core.Interop.VkQueue_T queue, AdamantiumVulkan.Core.Interop.VkDebugUtilsLabelEXT* pLabelInfo);

    [DllImport(LibraryPath, EntryPoint = "vkQueuePresentKHR", ExactSpelling = true)]
    internal static extern Result vkQueuePresentKHR(AdamantiumVulkan.Core.Interop.VkQueue_T queue, AdamantiumVulkan.Core.Interop.VkPresentInfoKHR* pPresentInfo);

    [DllImport(LibraryPath, EntryPoint = "vkQueueSetPerformanceConfigurationINTEL", ExactSpelling = true)]
    internal static extern Result vkQueueSetPerformanceConfigurationINTEL(AdamantiumVulkan.Core.Interop.VkQueue_T queue, AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T configuration);

    [DllImport(LibraryPath, EntryPoint = "vkQueueSubmit", ExactSpelling = true)]
    internal static extern Result vkQueueSubmit(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint submitCount, AdamantiumVulkan.Core.Interop.VkSubmitInfo* pSubmits, AdamantiumVulkan.Core.Interop.VkFence_T fence);

    [DllImport(LibraryPath, EntryPoint = "vkQueueSubmit2", ExactSpelling = true)]
    internal static extern Result vkQueueSubmit2(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint submitCount, AdamantiumVulkan.Core.Interop.VkSubmitInfo2* pSubmits, AdamantiumVulkan.Core.Interop.VkFence_T fence);

    [DllImport(LibraryPath, EntryPoint = "vkQueueSubmit2KHR", ExactSpelling = true)]
    internal static extern Result vkQueueSubmit2KHR(AdamantiumVulkan.Core.Interop.VkQueue_T queue, uint submitCount, AdamantiumVulkan.Core.Interop.VkSubmitInfo2* pSubmits, AdamantiumVulkan.Core.Interop.VkFence_T fence);

    [DllImport(LibraryPath, EntryPoint = "vkQueueWaitIdle", ExactSpelling = true)]
    internal static extern Result vkQueueWaitIdle(AdamantiumVulkan.Core.Interop.VkQueue_T queue);

    [DllImport(LibraryPath, EntryPoint = "vkRegisterDeviceEventEXT", ExactSpelling = true)]
    internal static extern Result vkRegisterDeviceEventEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceEventInfoEXT* pDeviceEventInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkFence_T pFence);

    [DllImport(LibraryPath, EntryPoint = "vkRegisterDisplayEventEXT", ExactSpelling = true)]
    internal static extern Result vkRegisterDisplayEventEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display, AdamantiumVulkan.Core.Interop.VkDisplayEventInfoEXT* pDisplayEventInfo, AdamantiumVulkan.Core.Interop.VkAllocationCallbacks* pAllocator, out AdamantiumVulkan.Core.Interop.VkFence_T pFence);

    [DllImport(LibraryPath, EntryPoint = "vkReleaseDisplayEXT", ExactSpelling = true)]
    internal static extern Result vkReleaseDisplayEXT(AdamantiumVulkan.Core.Interop.VkPhysicalDevice_T physicalDevice, AdamantiumVulkan.Core.Interop.VkDisplayKHR_T display);

    [DllImport(LibraryPath, EntryPoint = "vkReleasePerformanceConfigurationINTEL", ExactSpelling = true)]
    internal static extern Result vkReleasePerformanceConfigurationINTEL(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkPerformanceConfigurationINTEL_T configuration);

    [DllImport(LibraryPath, EntryPoint = "vkReleaseProfilingLockKHR", ExactSpelling = true)]
    internal static extern void vkReleaseProfilingLockKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device);

    [DllImport(LibraryPath, EntryPoint = "vkResetCommandBuffer", ExactSpelling = true)]
    internal static extern Result vkResetCommandBuffer(AdamantiumVulkan.Core.Interop.VkCommandBuffer_T commandBuffer, VkCommandBufferResetFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkResetCommandPool", ExactSpelling = true)]
    internal static extern Result vkResetCommandPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPool_T commandPool, VkCommandPoolResetFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkResetDescriptorPool", ExactSpelling = true)]
    internal static extern Result vkResetDescriptorPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorPool_T descriptorPool, VkDescriptorPoolResetFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkResetEvent", ExactSpelling = true)]
    internal static extern Result vkResetEvent(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkEvent_T @event);

    [DllImport(LibraryPath, EntryPoint = "vkResetFences", ExactSpelling = true)]
    internal static extern Result vkResetFences(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint fenceCount, AdamantiumVulkan.Core.Interop.VkFence_T* pFences);

    [DllImport(LibraryPath, EntryPoint = "vkResetQueryPool", ExactSpelling = true)]
    internal static extern void vkResetQueryPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery, uint queryCount);

    [DllImport(LibraryPath, EntryPoint = "vkResetQueryPoolEXT", ExactSpelling = true)]
    internal static extern void vkResetQueryPoolEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkQueryPool_T queryPool, uint firstQuery, uint queryCount);

    [DllImport(LibraryPath, EntryPoint = "vkSetDebugUtilsObjectNameEXT", ExactSpelling = true)]
    internal static extern Result vkSetDebugUtilsObjectNameEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectNameInfoEXT* pNameInfo);

    [DllImport(LibraryPath, EntryPoint = "vkSetDebugUtilsObjectTagEXT", ExactSpelling = true)]
    internal static extern Result vkSetDebugUtilsObjectTagEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDebugUtilsObjectTagInfoEXT* pTagInfo);

    [DllImport(LibraryPath, EntryPoint = "vkSetDeviceMemoryPriorityEXT", ExactSpelling = true)]
    internal static extern void vkSetDeviceMemoryPriorityEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory, float priority);

    [DllImport(LibraryPath, EntryPoint = "vkSetEvent", ExactSpelling = true)]
    internal static extern Result vkSetEvent(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkEvent_T @event);

    [DllImport(LibraryPath, EntryPoint = "vkSetHdrMetadataEXT", ExactSpelling = true)]
    internal static extern void vkSetHdrMetadataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint swapchainCount, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T* pSwapchains, AdamantiumVulkan.Core.Interop.VkHdrMetadataEXT* pMetadata);

    [DllImport(LibraryPath, EntryPoint = "vkSetLocalDimmingAMD", ExactSpelling = true)]
    internal static extern void vkSetLocalDimmingAMD(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapChain, VkBool32 localDimmingEnable);

    [DllImport(LibraryPath, EntryPoint = "vkSetPrivateData", ExactSpelling = true)]
    internal static extern Result vkSetPrivateData(AdamantiumVulkan.Core.Interop.VkDevice_T device, ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, ulong data);

    [DllImport(LibraryPath, EntryPoint = "vkSetPrivateDataEXT", ExactSpelling = true)]
    internal static extern Result vkSetPrivateDataEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, ObjectType objectType, ulong objectHandle, AdamantiumVulkan.Core.Interop.VkPrivateDataSlot_T privateDataSlot, ulong data);

    [DllImport(LibraryPath, EntryPoint = "vkSignalSemaphore", ExactSpelling = true)]
    internal static extern Result vkSignalSemaphore(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreSignalInfo* pSignalInfo);

    [DllImport(LibraryPath, EntryPoint = "vkSignalSemaphoreKHR", ExactSpelling = true)]
    internal static extern Result vkSignalSemaphoreKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreSignalInfo* pSignalInfo);

    [DllImport(LibraryPath, EntryPoint = "vkSubmitDebugUtilsMessageEXT", ExactSpelling = true)]
    internal static extern void vkSubmitDebugUtilsMessageEXT(AdamantiumVulkan.Core.Interop.VkInstance_T instance, DebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, AdamantiumVulkan.Core.Interop.VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);

    [DllImport(LibraryPath, EntryPoint = "vkTrimCommandPool", ExactSpelling = true)]
    internal static extern void vkTrimCommandPool(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPool_T commandPool, VkCommandPoolTrimFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkTrimCommandPoolKHR", ExactSpelling = true)]
    internal static extern void vkTrimCommandPoolKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkCommandPool_T commandPool, VkCommandPoolTrimFlags flags);

    [DllImport(LibraryPath, EntryPoint = "vkUninitializePerformanceApiINTEL", ExactSpelling = true)]
    internal static extern void vkUninitializePerformanceApiINTEL(AdamantiumVulkan.Core.Interop.VkDevice_T device);

    [DllImport(LibraryPath, EntryPoint = "vkUnmapMemory", ExactSpelling = true)]
    internal static extern void vkUnmapMemory(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDeviceMemory_T memory);

    [DllImport(LibraryPath, EntryPoint = "vkUpdateDescriptorSets", ExactSpelling = true)]
    internal static extern void vkUpdateDescriptorSets(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint descriptorWriteCount, AdamantiumVulkan.Core.Interop.VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, AdamantiumVulkan.Core.Interop.VkCopyDescriptorSet* pDescriptorCopies);

    [DllImport(LibraryPath, EntryPoint = "vkUpdateDescriptorSetWithTemplate", ExactSpelling = true)]
    internal static extern void vkUpdateDescriptorSetWithTemplate(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T descriptorSet, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T descriptorUpdateTemplate, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkUpdateDescriptorSetWithTemplateKHR", ExactSpelling = true)]
    internal static extern void vkUpdateDescriptorSetWithTemplateKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkDescriptorSet_T descriptorSet, AdamantiumVulkan.Core.Interop.VkDescriptorUpdateTemplate_T descriptorUpdateTemplate, void* pData);

    [DllImport(LibraryPath, EntryPoint = "vkWaitForFences", ExactSpelling = true)]
    internal static extern Result vkWaitForFences(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint fenceCount, AdamantiumVulkan.Core.Interop.VkFence_T* pFences, VkBool32 waitAll, ulong timeout);

    [DllImport(LibraryPath, EntryPoint = "vkWaitForPresentKHR", ExactSpelling = true)]
    internal static extern Result vkWaitForPresentKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSwapchainKHR_T swapchain, ulong presentId, ulong timeout);

    [DllImport(LibraryPath, EntryPoint = "vkWaitSemaphores", ExactSpelling = true)]
    internal static extern Result vkWaitSemaphores(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreWaitInfo* pWaitInfo, ulong timeout);

    [DllImport(LibraryPath, EntryPoint = "vkWaitSemaphoresKHR", ExactSpelling = true)]
    internal static extern Result vkWaitSemaphoresKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, AdamantiumVulkan.Core.Interop.VkSemaphoreWaitInfo* pWaitInfo, ulong timeout);

    [DllImport(LibraryPath, EntryPoint = "vkWriteAccelerationStructuresPropertiesKHR", ExactSpelling = true)]
    internal static extern Result vkWriteAccelerationStructuresPropertiesKHR(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint accelerationStructureCount, AdamantiumVulkan.Core.Interop.VkAccelerationStructureKHR_T* pAccelerationStructures, QueryType queryType, ulong dataSize, void* pData, ulong stride);

    [DllImport(LibraryPath, EntryPoint = "vkWriteMicromapsPropertiesEXT", ExactSpelling = true)]
    internal static extern Result vkWriteMicromapsPropertiesEXT(AdamantiumVulkan.Core.Interop.VkDevice_T device, uint micromapCount, AdamantiumVulkan.Core.Interop.VkMicromapEXT_T* pMicromaps, QueryType queryType, ulong dataSize, void* pData, ulong stride);

}



