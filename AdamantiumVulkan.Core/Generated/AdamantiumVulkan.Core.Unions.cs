// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Core
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan;
    using AdamantiumVulkan.Core.Interop;

    public partial class ClearColorValue
    {
        private AdamantiumVulkan.Core.Interop.ClearColorValue _internal;

        private float[] float32;

        private int[] int32;

        private uint[] uint32;

        public ClearColorValue()
        {
        }

        public ClearColorValue(AdamantiumVulkan.Core.Interop.ClearColorValue _internal)
        {
            this._internal = _internal;
        }

        public float[] Float32
        {
            get
            {
                if(float32 != null)
                    return float32;

                var tmpArr = new float[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.float32[i];
                    }
                }
                float32 = tmpArr;
                return float32;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Float32), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.float32[i] = value[i];
                    }
                }
                float32 = value;
            }
        }

        public int[] Int32
        {
            get
            {
                if(int32 != null)
                    return int32;

                var tmpArr = new int[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.int32[i];
                    }
                }
                int32 = tmpArr;
                return int32;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Int32), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.int32[i] = value[i];
                    }
                }
                int32 = value;
            }
        }

        public uint[] Uint32
        {
            get
            {
                if(uint32 != null)
                    return uint32;

                var tmpArr = new uint[4];
                unsafe
                {
                    for(int i = 0; i < 4; ++i)
                    {
                        tmpArr[i] = _internal.uint32[i];
                    }
                }
                uint32 = tmpArr;
                return uint32;
            }
            set
            {
                if(value == null) return;

                if (value.Length > 4)
                    throw new System.ArgumentOutOfRangeException(nameof(Uint32), "Array is out of bounds. Size should not be more than 4");

                unsafe
                {
                    for(int i = 0; i < value.Length; ++i)
                    {
                        _internal.uint32[i] = value[i];
                    }
                }
                uint32 = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ClearColorValue(ClearColorValue c)
        {
            return c._internal;
        }

        public static implicit operator ClearColorValue(AdamantiumVulkan.Core.Interop.ClearColorValue c)
        {
            return new ClearColorValue(c);
        }

    }

    public partial class ClearValue
    {
        private AdamantiumVulkan.Core.Interop.ClearValue _internal;

        private ClearColorValue color;

        private ClearDepthStencilValue depthStencil;

        public ClearValue()
        {
        }

        public ClearValue(AdamantiumVulkan.Core.Interop.ClearValue _internal)
        {
            this._internal = _internal;
        }

        public ClearColorValue Color
        {
            get
            {
                if (color != null)
                {
                    return color;
                }
                color = _internal.color;
                return color;
            }
            set
            {
                color = value;
                _internal.color = value;
            }
        }

        public ClearDepthStencilValue DepthStencil
        {
            get
            {
                if (depthStencil != null)
                {
                    return depthStencil;
                }
                depthStencil = _internal.depthStencil;
                return depthStencil;
            }
            set
            {
                depthStencil = value;
                _internal.depthStencil = value;
            }
        }

        public static implicit operator AdamantiumVulkan.Core.Interop.ClearValue(ClearValue c)
        {
            if (c.Color != null)
            {
                c._internal.color = c.Color;
            }
            if (c.DepthStencil != null)
            {
                c._internal.depthStencil = c.DepthStencil;
            }
            return c._internal;
        }

        public static implicit operator ClearValue(AdamantiumVulkan.Core.Interop.ClearValue c)
        {
            return new ClearValue(c);
        }

    }


}
