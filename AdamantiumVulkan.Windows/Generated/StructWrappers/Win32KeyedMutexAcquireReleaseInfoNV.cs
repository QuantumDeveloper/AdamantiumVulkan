// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Windows.Interop;
using AdamantiumVulkan.Core;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Windows;

public unsafe partial class Win32KeyedMutexAcquireReleaseInfoNV : QBDisposableObject
{
    private NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceMemory_T> _pAcquireSyncs;

    private NativeStruct<ulong> _pAcquireKeys;

    private NativeStruct<uint> _pAcquireTimeoutMilliseconds;

    private NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceMemory_T> _pReleaseSyncs;

    private NativeStruct<ulong> _pReleaseKeys;

    public Win32KeyedMutexAcquireReleaseInfoNV()
    {
    }

    public Win32KeyedMutexAcquireReleaseInfoNV(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        AcquireCount = _internal.acquireCount;
        PAcquireSyncs = new DeviceMemory(*_internal.pAcquireSyncs);
        NativeUtils.Free(_internal.pAcquireSyncs);
        if (_internal.pAcquireKeys != null)
        {
            PAcquireKeys = *_internal.pAcquireKeys;
            NativeUtils.Free(_internal.pAcquireKeys);
        }
        if (_internal.pAcquireTimeoutMilliseconds != null)
        {
            PAcquireTimeoutMilliseconds = *_internal.pAcquireTimeoutMilliseconds;
            NativeUtils.Free(_internal.pAcquireTimeoutMilliseconds);
        }
        ReleaseCount = _internal.releaseCount;
        PReleaseSyncs = new DeviceMemory(*_internal.pReleaseSyncs);
        NativeUtils.Free(_internal.pReleaseSyncs);
        if (_internal.pReleaseKeys != null)
        {
            PReleaseKeys = *_internal.pReleaseKeys;
            NativeUtils.Free(_internal.pReleaseKeys);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint AcquireCount { get; set; }
    public DeviceMemory PAcquireSyncs { get; set; }
    public ulong? PAcquireKeys { get; set; }
    public uint? PAcquireTimeoutMilliseconds { get; set; }
    public uint ReleaseCount { get; set; }
    public DeviceMemory PReleaseSyncs { get; set; }
    public ulong? PReleaseKeys { get; set; }

    public AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV ToNative()
    {
        var _internal = new AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV();
        if (SType != default)
        {
            _internal.sType = SType;
        }
        _internal.pNext = PNext;
        if (AcquireCount != default)
        {
            _internal.acquireCount = AcquireCount;
        }
        _pAcquireSyncs.Dispose();
        if (PAcquireSyncs != default)
        {
            AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct0 = PAcquireSyncs;
            _pAcquireSyncs = new NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceMemory_T>(struct0);
            _internal.pAcquireSyncs = _pAcquireSyncs.Handle;
        }
        _pAcquireKeys.Dispose();
        if (PAcquireKeys.HasValue)
        {
            _pAcquireKeys = new NativeStruct<ulong>(PAcquireKeys.Value);
            _internal.pAcquireKeys = _pAcquireKeys.Handle;
        }
        _pAcquireTimeoutMilliseconds.Dispose();
        if (PAcquireTimeoutMilliseconds.HasValue)
        {
            _pAcquireTimeoutMilliseconds = new NativeStruct<uint>(PAcquireTimeoutMilliseconds.Value);
            _internal.pAcquireTimeoutMilliseconds = _pAcquireTimeoutMilliseconds.Handle;
        }
        if (ReleaseCount != default)
        {
            _internal.releaseCount = ReleaseCount;
        }
        _pReleaseSyncs.Dispose();
        if (PReleaseSyncs != default)
        {
            AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct3 = PReleaseSyncs;
            _pReleaseSyncs = new NativeStruct<AdamantiumVulkan.Core.Interop.VkDeviceMemory_T>(struct3);
            _internal.pReleaseSyncs = _pReleaseSyncs.Handle;
        }
        _pReleaseKeys.Dispose();
        if (PReleaseKeys.HasValue)
        {
            _pReleaseKeys = new NativeStruct<ulong>(PReleaseKeys.Value);
            _internal.pReleaseKeys = _pReleaseKeys.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pAcquireSyncs.Dispose();
        _pAcquireKeys.Dispose();
        _pAcquireTimeoutMilliseconds.Dispose();
        _pReleaseSyncs.Dispose();
        _pReleaseKeys.Dispose();
    }


    public static implicit operator Win32KeyedMutexAcquireReleaseInfoNV(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV w)
    {
        return new Win32KeyedMutexAcquireReleaseInfoNV(w);
    }

}



