// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Windows.Interop;
using AdamantiumVulkan.Core;

namespace AdamantiumVulkan.Windows;

public unsafe partial class D3D12FenceSubmitInfoKHR : QBDisposableObject
{
    private NativeStruct<ulong> _pWaitSemaphoreValues;

    private NativeStruct<ulong> _pSignalSemaphoreValues;

    public D3D12FenceSubmitInfoKHR()
    {
    }

    public D3D12FenceSubmitInfoKHR(AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        WaitSemaphoreValuesCount = _internal.waitSemaphoreValuesCount;
        if (_internal.pWaitSemaphoreValues != null)
        {
            PWaitSemaphoreValues = *_internal.pWaitSemaphoreValues;
            NativeUtils.Free(_internal.pWaitSemaphoreValues);
        }
        SignalSemaphoreValuesCount = _internal.signalSemaphoreValuesCount;
        if (_internal.pSignalSemaphoreValues != null)
        {
            PSignalSemaphoreValues = *_internal.pSignalSemaphoreValues;
            NativeUtils.Free(_internal.pSignalSemaphoreValues);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint WaitSemaphoreValuesCount { get; set; }
    public ulong? PWaitSemaphoreValues { get; set; }
    public uint SignalSemaphoreValuesCount { get; set; }
    public ulong? PSignalSemaphoreValues { get; set; }

    public AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.waitSemaphoreValuesCount = WaitSemaphoreValuesCount;
        _pWaitSemaphoreValues.Dispose();
        if (PWaitSemaphoreValues.HasValue)
        {
            _pWaitSemaphoreValues = new NativeStruct<ulong>(PWaitSemaphoreValues.Value);
            _internal.pWaitSemaphoreValues = _pWaitSemaphoreValues.Handle;
        }
        _internal.signalSemaphoreValuesCount = SignalSemaphoreValuesCount;
        _pSignalSemaphoreValues.Dispose();
        if (PSignalSemaphoreValues.HasValue)
        {
            _pSignalSemaphoreValues = new NativeStruct<ulong>(PSignalSemaphoreValues.Value);
            _internal.pSignalSemaphoreValues = _pSignalSemaphoreValues.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        _pWaitSemaphoreValues.Dispose();
        _pSignalSemaphoreValues.Dispose();
    }


    public static implicit operator D3D12FenceSubmitInfoKHR(AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR d)
    {
        return new D3D12FenceSubmitInfoKHR(d);
    }

}



