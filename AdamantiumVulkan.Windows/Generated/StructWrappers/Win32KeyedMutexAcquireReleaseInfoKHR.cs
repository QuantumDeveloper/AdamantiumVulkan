// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Windows.Interop;
using AdamantiumVulkan.Core;
using AdamantiumVulkan.Core.Interop;

namespace AdamantiumVulkan.Windows;

public unsafe partial class Win32KeyedMutexAcquireReleaseInfoKHR : QBDisposableObject
{
    private NativeStruct<VkDeviceMemory_T> pAcquireSyncs;

    private NativeStruct<ulong> pAcquireKeys;

    private NativeStruct<uint> pAcquireTimeouts;

    private NativeStruct<VkDeviceMemory_T> pReleaseSyncs;

    private NativeStruct<ulong> pReleaseKeys;

    public Win32KeyedMutexAcquireReleaseInfoKHR()
    {
    }

    public Win32KeyedMutexAcquireReleaseInfoKHR(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR _internal)
    {
        SType = _internal.sType;
        PNext = _internal.pNext;
        AcquireCount = _internal.acquireCount;
        PAcquireSyncs = new DeviceMemory(*_internal.pAcquireSyncs);
        NativeUtils.Free(_internal.pAcquireSyncs);
        if (_internal.pAcquireKeys != null)
        {
            PAcquireKeys = *_internal.pAcquireKeys;
            NativeUtils.Free(_internal.pAcquireKeys);
        }
        if (_internal.pAcquireTimeouts != null)
        {
            PAcquireTimeouts = *_internal.pAcquireTimeouts;
            NativeUtils.Free(_internal.pAcquireTimeouts);
        }
        ReleaseCount = _internal.releaseCount;
        PReleaseSyncs = new DeviceMemory(*_internal.pReleaseSyncs);
        NativeUtils.Free(_internal.pReleaseSyncs);
        if (_internal.pReleaseKeys != null)
        {
            PReleaseKeys = *_internal.pReleaseKeys;
            NativeUtils.Free(_internal.pReleaseKeys);
        }
    }

    public StructureType SType { get; set; }
    public void* PNext { get; set; }
    public uint AcquireCount { get; set; }
    public DeviceMemory PAcquireSyncs { get; set; }
    public ulong? PAcquireKeys { get; set; }
    public uint? PAcquireTimeouts { get; set; }
    public uint ReleaseCount { get; set; }
    public DeviceMemory PReleaseSyncs { get; set; }
    public ulong? PReleaseKeys { get; set; }

    public AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR ToNative()
    {
        var _internal = new AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR();
        _internal.sType = SType;
        _internal.pNext = PNext;
        _internal.acquireCount = AcquireCount;
        pAcquireSyncs.Dispose();
        if (PAcquireSyncs != null)
        {
            AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct0 = PAcquireSyncs;
            pAcquireSyncs = new NativeStruct<VkDeviceMemory_T>(struct0);
            _internal.pAcquireSyncs = pAcquireSyncs.Handle;
        }
        pAcquireKeys.Dispose();
        if (PAcquireKeys.HasValue)
        {
            pAcquireKeys = new NativeStruct<ulong>(PAcquireKeys.Value);
            _internal.pAcquireKeys = pAcquireKeys.Handle;
        }
        pAcquireTimeouts.Dispose();
        if (PAcquireTimeouts.HasValue)
        {
            pAcquireTimeouts = new NativeStruct<uint>(PAcquireTimeouts.Value);
            _internal.pAcquireTimeouts = pAcquireTimeouts.Handle;
        }
        _internal.releaseCount = ReleaseCount;
        pReleaseSyncs.Dispose();
        if (PReleaseSyncs != null)
        {
            AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct3 = PReleaseSyncs;
            pReleaseSyncs = new NativeStruct<VkDeviceMemory_T>(struct3);
            _internal.pReleaseSyncs = pReleaseSyncs.Handle;
        }
        pReleaseKeys.Dispose();
        if (PReleaseKeys.HasValue)
        {
            pReleaseKeys = new NativeStruct<ulong>(PReleaseKeys.Value);
            _internal.pReleaseKeys = pReleaseKeys.Handle;
        }
        return _internal;
    }

    protected override void UnmanagedDisposeOverride()
    {
        pAcquireSyncs.Dispose();
        pAcquireKeys.Dispose();
        pAcquireTimeouts.Dispose();
        pReleaseSyncs.Dispose();
        pReleaseKeys.Dispose();
    }


    public static implicit operator Win32KeyedMutexAcquireReleaseInfoKHR(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR w)
    {
        return new Win32KeyedMutexAcquireReleaseInfoKHR(w);
    }

}



