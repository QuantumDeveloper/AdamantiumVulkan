// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Windows
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Core;
    using AdamantiumVulkan.Windows.Interop;
    using AdamantiumVulkan.Core.Interop;

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 69 Column: 1
    public static partial class InstanceExtension
    {
        public static Result CreateWin32SurfaceKHR(this Instance instance, in AdamantiumVulkan.Windows.Win32SurfaceCreateInfoKHR pCreateInfo, in AdamantiumVulkan.Core.AllocationCallbacks pAllocator, out SurfaceKHR pSurface)
        {
            var arg0 = instance;
            var arg2 = ReferenceEquals(pAllocator, null) ? IntPtr.Zero : MarshalUtils.MarshalStructToPtr<AdamantiumVulkan.Core.Interop.AllocationCallbacks>(pAllocator);
            SurfaceKHR_T arg3;
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkCreateWin32SurfaceKHR(arg0, pCreateInfo, arg2, out arg3);
            Marshal.FreeHGlobal(arg2);
            pSurface = arg3;
            return result;
        }

    }

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 70 Column: 1
    public static class PhysicalDeviceExtension
    {
        public static Bool32 GetPhysicalDeviceWin32PresentationSupportKHR(this PhysicalDevice physicalDevice, uint queueFamilyIndex)
        {
            var arg0 = physicalDevice;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetPhysicalDeviceWin32PresentationSupportKHR(arg0, queueFamilyIndex);
        }

    }

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 71 Column: 1
    public static class DeviceExtension
    {
        public static Result GetMemoryWin32HandleKHR(this Device device, in AdamantiumVulkan.Windows.MemoryGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandleKHR(arg0, pGetWin32HandleInfo, ref pHandle);
        }

        public static Result GetMemoryWin32HandlePropertiesKHR(this Device device, ExternalMemoryHandleTypeFlagBits handleType, System.IntPtr handle, AdamantiumVulkan.Windows.MemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandlePropertiesKHR(arg0, handleType, handle, pMemoryWin32HandleProperties);
        }

        public static Result ImportSemaphoreWin32HandleKHR(this Device device, in AdamantiumVulkan.Windows.ImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkImportSemaphoreWin32HandleKHR(arg0, pImportSemaphoreWin32HandleInfo);
        }

        public static Result GetSemaphoreWin32HandleKHR(this Device device, in AdamantiumVulkan.Windows.SemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetSemaphoreWin32HandleKHR(arg0, pGetWin32HandleInfo, ref pHandle);
        }

        public static Result ImportFenceWin32HandleKHR(this Device device, in AdamantiumVulkan.Windows.ImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkImportFenceWin32HandleKHR(arg0, pImportFenceWin32HandleInfo);
        }

        public static Result GetFenceWin32HandleKHR(this Device device, in AdamantiumVulkan.Windows.FenceGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetFenceWin32HandleKHR(arg0, pGetWin32HandleInfo, ref pHandle);
        }

        public static Result GetMemoryWin32HandleNV(this Device device, DeviceMemory memory, uint handleType, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(memory, null) ? new DeviceMemory_T() : (DeviceMemory_T)memory;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandleNV(arg0, arg1, handleType, ref pHandle);
        }

    }


}

