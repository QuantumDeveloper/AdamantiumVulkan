// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Windows
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Core;
    using AdamantiumVulkan.Windows.Interop;
    using AdamantiumVulkan.Core.Interop;

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 69 Column: 1
    public static partial class InstanceExtension
    {
        public static Result CreateWin32SurfaceKHR(this AdamantiumVulkan.Core.Instance instance, in Win32SurfaceCreateInfoKHR pCreateInfo, in AllocationCallbacks pAllocator, out AdamantiumVulkan.Core.SurfaceKHR pSurface)
        {
            var arg0 = instance;
            var arg1 = ReferenceEquals(pCreateInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pCreateInfo.ToInternal());
            var arg2 = ReferenceEquals(pAllocator, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pAllocator.ToInternal());
            VkSurfaceKHR_T arg3;
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkCreateWin32SurfaceKHR(arg0, arg1, arg2, out arg3);
            pCreateInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            pAllocator?.Dispose();
            Marshal.FreeHGlobal(arg2);
            pSurface = new SurfaceKHR(arg3);
            return result;
        }

    }

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 70 Column: 1
    public static partial class PhysicalDeviceExtension
    {
        public static bool GetPhysicalDeviceWin32PresentationSupportKHR(this AdamantiumVulkan.Core.PhysicalDevice physicalDevice, uint queueFamilyIndex)
        {
            var arg0 = physicalDevice;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetPhysicalDeviceWin32PresentationSupportKHR(arg0, queueFamilyIndex);
        }

    }

    // File: C:\VulkanSDK\1.1.101.0\Include\vulkan/vulkan_core.h Line: 71 Column: 1
    public static partial class DeviceExtension
    {
        public static Result GetMemoryWin32HandleKHR(this AdamantiumVulkan.Core.Device device, in MemoryGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pGetWin32HandleInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetWin32HandleInfo.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandleKHR(arg0, arg1, pHandle);
            pGetWin32HandleInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result GetMemoryWin32HandlePropertiesKHR(this AdamantiumVulkan.Core.Device device, ExternalMemoryHandleTypeFlagBits handleType, System.IntPtr handle, MemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pMemoryWin32HandleProperties, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pMemoryWin32HandleProperties.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandlePropertiesKHR(arg0, handleType, handle, arg1);
            pMemoryWin32HandleProperties?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result ImportSemaphoreWin32HandleKHR(this AdamantiumVulkan.Core.Device device, in ImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pImportSemaphoreWin32HandleInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImportSemaphoreWin32HandleInfo.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkImportSemaphoreWin32HandleKHR(arg0, arg1);
            pImportSemaphoreWin32HandleInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result GetSemaphoreWin32HandleKHR(this AdamantiumVulkan.Core.Device device, in SemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pGetWin32HandleInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetWin32HandleInfo.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetSemaphoreWin32HandleKHR(arg0, arg1, pHandle);
            pGetWin32HandleInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result ImportFenceWin32HandleKHR(this AdamantiumVulkan.Core.Device device, in ImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pImportFenceWin32HandleInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pImportFenceWin32HandleInfo.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkImportFenceWin32HandleKHR(arg0, arg1);
            pImportFenceWin32HandleInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result GetFenceWin32HandleKHR(this AdamantiumVulkan.Core.Device device, in FenceGetWin32HandleInfoKHR pGetWin32HandleInfo, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(pGetWin32HandleInfo, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(pGetWin32HandleInfo.ToInternal());
            var result = AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetFenceWin32HandleKHR(arg0, arg1, pHandle);
            pGetWin32HandleInfo?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static Result GetMemoryWin32HandleNV(this AdamantiumVulkan.Core.Device device, AdamantiumVulkan.Core.DeviceMemory memory, uint handleType, ref System.IntPtr pHandle)
        {
            var arg0 = device;
            var arg1 = ReferenceEquals(memory, null) ? new VkDeviceMemory_T() : (VkDeviceMemory_T)memory;
            return AdamantiumVulkan.Windows.Interop.VulkanInterop.vkGetMemoryWin32HandleNV(arg0, arg1, handleType, pHandle);
        }

    }


}

