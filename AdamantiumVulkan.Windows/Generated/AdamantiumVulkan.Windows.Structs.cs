// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Windows
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan;
    using AdamantiumVulkan.Windows.Interop;
    using AdamantiumVulkan.Core;

    public partial class Win32SurfaceCreateInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.Win32SurfaceCreateInfoKHR _internal;

        private GCHandleReference refpNext;

        public Win32SurfaceCreateInfoKHR()
        {
        }

        public Win32SurfaceCreateInfoKHR(AdamantiumVulkan.Windows.Interop.Win32SurfaceCreateInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public System.IntPtr Hinstance
        {
            get => _internal.hinstance;
            set
            {
                _internal.hinstance = value;
            }
        }

        public System.IntPtr Hwnd
        {
            get => _internal.hwnd;
            set
            {
                _internal.hwnd = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.Win32SurfaceCreateInfoKHR(Win32SurfaceCreateInfoKHR w)
        {
            return w._internal;
        }

        public static implicit operator Win32SurfaceCreateInfoKHR(AdamantiumVulkan.Windows.Interop.Win32SurfaceCreateInfoKHR w)
        {
            return new Win32SurfaceCreateInfoKHR(w);
        }

    }

    public partial class ImportMemoryWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        public ImportMemoryWin32HandleInfoKHR()
        {
        }

        public ImportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public System.IntPtr Handle
        {
            get => _internal.handle;
            set
            {
                _internal.handle = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoKHR(ImportMemoryWin32HandleInfoKHR i)
        {
            return i._internal;
        }

        public static implicit operator ImportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoKHR i)
        {
            return new ImportMemoryWin32HandleInfoKHR(i);
        }

    }

    public partial class ExportMemoryWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttributes;

        public ExportMemoryWin32HandleInfoKHR()
        {
        }

        public ExportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private object pAttributes;
        public object PAttributes
        {
            get
            {
                if(pAttributes != null)
                    return pAttributes;

                pAttributes = _internal.pAttributes;
                return pAttributes;
            }
            set
            {
                refpAttributes?.Dispose();
                refpAttributes = new StructReference(value);
                pAttributes = value;
                _internal.pAttributes = refpAttributes.Handle;
            }
        }

        public uint DwAccess
        {
            get => _internal.dwAccess;
            set
            {
                _internal.dwAccess = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttributes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoKHR(ExportMemoryWin32HandleInfoKHR e)
        {
            return e._internal;
        }

        public static implicit operator ExportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoKHR e)
        {
            return new ExportMemoryWin32HandleInfoKHR(e);
        }

    }

    public partial class MemoryWin32HandlePropertiesKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.MemoryWin32HandlePropertiesKHR _internal;

        private GCHandleReference refpNext;

        public MemoryWin32HandlePropertiesKHR()
        {
        }

        public MemoryWin32HandlePropertiesKHR(AdamantiumVulkan.Windows.Interop.MemoryWin32HandlePropertiesKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint MemoryTypeBits
        {
            get => _internal.memoryTypeBits;
            set
            {
                _internal.memoryTypeBits = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.MemoryWin32HandlePropertiesKHR(MemoryWin32HandlePropertiesKHR m)
        {
            return m._internal;
        }

        public static implicit operator MemoryWin32HandlePropertiesKHR(AdamantiumVulkan.Windows.Interop.MemoryWin32HandlePropertiesKHR m)
        {
            return new MemoryWin32HandlePropertiesKHR(m);
        }

    }

    public partial class MemoryGetWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.MemoryGetWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private DeviceMemory memory;

        public MemoryGetWin32HandleInfoKHR()
        {
        }

        public MemoryGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.MemoryGetWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public DeviceMemory Memory
        {
            get
            {
                if (memory != null)
                {
                    return memory;
                }
                memory = _internal.memory;
                return memory;
            }
            set
            {
                memory = value;
                _internal.memory = value;
            }
        }

        public ExternalMemoryHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.MemoryGetWin32HandleInfoKHR(MemoryGetWin32HandleInfoKHR m)
        {
            if (m.Memory != null)
            {
                m._internal.memory = m.Memory;
            }
            return m._internal;
        }

        public static implicit operator MemoryGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.MemoryGetWin32HandleInfoKHR m)
        {
            return new MemoryGetWin32HandleInfoKHR(m);
        }

    }

    public partial class Win32KeyedMutexAcquireReleaseInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpAcquireSyncs;

        private StructReference refpAcquireKeys;

        private StructReference refpAcquireTimeouts;

        private StructReference refpReleaseSyncs;

        private StructReference refpReleaseKeys;

        public Win32KeyedMutexAcquireReleaseInfoKHR()
        {
        }

        public Win32KeyedMutexAcquireReleaseInfoKHR(AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AcquireCount
        {
            get => _internal.acquireCount;
            set
            {
                _internal.acquireCount = value;
            }
        }

        private DeviceMemory pAcquireSyncs;
        public DeviceMemory PAcquireSyncs
        {
            get
            {
                if(pAcquireSyncs != null)
                    return pAcquireSyncs;

                pAcquireSyncs = Marshal.PtrToStructure<DeviceMemory>(_internal.pAcquireSyncs);
                return pAcquireSyncs;
            }
            set
            {
                refpAcquireSyncs?.Dispose();
                AdamantiumVulkan.Core.Interop.DeviceMemory_T tmp = value;
                refpAcquireSyncs = new StructReference(tmp);
                pAcquireSyncs = value;
                _internal.pAcquireSyncs = refpAcquireSyncs.Handle;
            }
        }

        public ulong PAcquireKeys
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pAcquireKeys);
            }
            set
            {
                refpAcquireKeys?.Dispose();
                refpAcquireKeys = new StructReference(value);
                _internal.pAcquireKeys = refpAcquireKeys.Handle;
            }
        }

        public uint PAcquireTimeouts
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pAcquireTimeouts);
            }
            set
            {
                refpAcquireTimeouts?.Dispose();
                refpAcquireTimeouts = new StructReference(value);
                _internal.pAcquireTimeouts = refpAcquireTimeouts.Handle;
            }
        }

        public uint ReleaseCount
        {
            get => _internal.releaseCount;
            set
            {
                _internal.releaseCount = value;
            }
        }

        private DeviceMemory pReleaseSyncs;
        public DeviceMemory PReleaseSyncs
        {
            get
            {
                if(pReleaseSyncs != null)
                    return pReleaseSyncs;

                pReleaseSyncs = Marshal.PtrToStructure<DeviceMemory>(_internal.pReleaseSyncs);
                return pReleaseSyncs;
            }
            set
            {
                refpReleaseSyncs?.Dispose();
                AdamantiumVulkan.Core.Interop.DeviceMemory_T tmp = value;
                refpReleaseSyncs = new StructReference(tmp);
                pReleaseSyncs = value;
                _internal.pReleaseSyncs = refpReleaseSyncs.Handle;
            }
        }

        public ulong PReleaseKeys
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pReleaseKeys);
            }
            set
            {
                refpReleaseKeys?.Dispose();
                refpReleaseKeys = new StructReference(value);
                _internal.pReleaseKeys = refpReleaseKeys.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAcquireSyncs?.Dispose();
            refpAcquireKeys?.Dispose();
            refpAcquireTimeouts?.Dispose();
            refpReleaseSyncs?.Dispose();
            refpReleaseKeys?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoKHR(Win32KeyedMutexAcquireReleaseInfoKHR w)
        {
            return w._internal;
        }

        public static implicit operator Win32KeyedMutexAcquireReleaseInfoKHR(AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoKHR w)
        {
            return new Win32KeyedMutexAcquireReleaseInfoKHR(w);
        }

    }

    public partial class ImportSemaphoreWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ImportSemaphoreWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private Semaphore semaphore;

        public ImportSemaphoreWin32HandleInfoKHR()
        {
        }

        public ImportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportSemaphoreWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Semaphore Semaphore
        {
            get
            {
                if (semaphore != null)
                {
                    return semaphore;
                }
                semaphore = _internal.semaphore;
                return semaphore;
            }
            set
            {
                semaphore = value;
                _internal.semaphore = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ExternalSemaphoreHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public System.IntPtr Handle
        {
            get => _internal.handle;
            set
            {
                _internal.handle = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ImportSemaphoreWin32HandleInfoKHR(ImportSemaphoreWin32HandleInfoKHR i)
        {
            if (i.Semaphore != null)
            {
                i._internal.semaphore = i.Semaphore;
            }
            return i._internal;
        }

        public static implicit operator ImportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportSemaphoreWin32HandleInfoKHR i)
        {
            return new ImportSemaphoreWin32HandleInfoKHR(i);
        }

    }

    public partial class ExportSemaphoreWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ExportSemaphoreWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttributes;

        public ExportSemaphoreWin32HandleInfoKHR()
        {
        }

        public ExportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportSemaphoreWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private object pAttributes;
        public object PAttributes
        {
            get
            {
                if(pAttributes != null)
                    return pAttributes;

                pAttributes = _internal.pAttributes;
                return pAttributes;
            }
            set
            {
                refpAttributes?.Dispose();
                refpAttributes = new StructReference(value);
                pAttributes = value;
                _internal.pAttributes = refpAttributes.Handle;
            }
        }

        public uint DwAccess
        {
            get => _internal.dwAccess;
            set
            {
                _internal.dwAccess = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttributes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ExportSemaphoreWin32HandleInfoKHR(ExportSemaphoreWin32HandleInfoKHR e)
        {
            return e._internal;
        }

        public static implicit operator ExportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportSemaphoreWin32HandleInfoKHR e)
        {
            return new ExportSemaphoreWin32HandleInfoKHR(e);
        }

    }

    public partial class D3D12FenceSubmitInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.D3D12FenceSubmitInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpWaitSemaphoreValues;

        private StructReference refpSignalSemaphoreValues;

        public D3D12FenceSubmitInfoKHR()
        {
        }

        public D3D12FenceSubmitInfoKHR(AdamantiumVulkan.Windows.Interop.D3D12FenceSubmitInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint WaitSemaphoreValuesCount
        {
            get => _internal.waitSemaphoreValuesCount;
            set
            {
                _internal.waitSemaphoreValuesCount = value;
            }
        }

        public ulong PWaitSemaphoreValues
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pWaitSemaphoreValues);
            }
            set
            {
                refpWaitSemaphoreValues?.Dispose();
                refpWaitSemaphoreValues = new StructReference(value);
                _internal.pWaitSemaphoreValues = refpWaitSemaphoreValues.Handle;
            }
        }

        public uint SignalSemaphoreValuesCount
        {
            get => _internal.signalSemaphoreValuesCount;
            set
            {
                _internal.signalSemaphoreValuesCount = value;
            }
        }

        public ulong PSignalSemaphoreValues
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pSignalSemaphoreValues);
            }
            set
            {
                refpSignalSemaphoreValues?.Dispose();
                refpSignalSemaphoreValues = new StructReference(value);
                _internal.pSignalSemaphoreValues = refpSignalSemaphoreValues.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpWaitSemaphoreValues?.Dispose();
            refpSignalSemaphoreValues?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.D3D12FenceSubmitInfoKHR(D3D12FenceSubmitInfoKHR d)
        {
            return d._internal;
        }

        public static implicit operator D3D12FenceSubmitInfoKHR(AdamantiumVulkan.Windows.Interop.D3D12FenceSubmitInfoKHR d)
        {
            return new D3D12FenceSubmitInfoKHR(d);
        }

    }

    public partial class SemaphoreGetWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.SemaphoreGetWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private Semaphore semaphore;

        public SemaphoreGetWin32HandleInfoKHR()
        {
        }

        public SemaphoreGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.SemaphoreGetWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Semaphore Semaphore
        {
            get
            {
                if (semaphore != null)
                {
                    return semaphore;
                }
                semaphore = _internal.semaphore;
                return semaphore;
            }
            set
            {
                semaphore = value;
                _internal.semaphore = value;
            }
        }

        public ExternalSemaphoreHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.SemaphoreGetWin32HandleInfoKHR(SemaphoreGetWin32HandleInfoKHR s)
        {
            if (s.Semaphore != null)
            {
                s._internal.semaphore = s.Semaphore;
            }
            return s._internal;
        }

        public static implicit operator SemaphoreGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.SemaphoreGetWin32HandleInfoKHR s)
        {
            return new SemaphoreGetWin32HandleInfoKHR(s);
        }

    }

    public partial class ImportFenceWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ImportFenceWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private Fence fence;

        public ImportFenceWin32HandleInfoKHR()
        {
        }

        public ImportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportFenceWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Fence Fence
        {
            get
            {
                if (fence != null)
                {
                    return fence;
                }
                fence = _internal.fence;
                return fence;
            }
            set
            {
                fence = value;
                _internal.fence = value;
            }
        }

        public uint Flags
        {
            get => _internal.flags;
            set
            {
                _internal.flags = value;
            }
        }

        public ExternalFenceHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public System.IntPtr Handle
        {
            get => _internal.handle;
            set
            {
                _internal.handle = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ImportFenceWin32HandleInfoKHR(ImportFenceWin32HandleInfoKHR i)
        {
            if (i.Fence != null)
            {
                i._internal.fence = i.Fence;
            }
            return i._internal;
        }

        public static implicit operator ImportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ImportFenceWin32HandleInfoKHR i)
        {
            return new ImportFenceWin32HandleInfoKHR(i);
        }

    }

    public partial class ExportFenceWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ExportFenceWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttributes;

        public ExportFenceWin32HandleInfoKHR()
        {
        }

        public ExportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportFenceWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private object pAttributes;
        public object PAttributes
        {
            get
            {
                if(pAttributes != null)
                    return pAttributes;

                pAttributes = _internal.pAttributes;
                return pAttributes;
            }
            set
            {
                refpAttributes?.Dispose();
                refpAttributes = new StructReference(value);
                pAttributes = value;
                _internal.pAttributes = refpAttributes.Handle;
            }
        }

        public uint DwAccess
        {
            get => _internal.dwAccess;
            set
            {
                _internal.dwAccess = value;
            }
        }

        public char Name
        {
            get => _internal.name;
            set
            {
                _internal.name = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttributes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ExportFenceWin32HandleInfoKHR(ExportFenceWin32HandleInfoKHR e)
        {
            return e._internal;
        }

        public static implicit operator ExportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.ExportFenceWin32HandleInfoKHR e)
        {
            return new ExportFenceWin32HandleInfoKHR(e);
        }

    }

    public partial class FenceGetWin32HandleInfoKHR : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.FenceGetWin32HandleInfoKHR _internal;

        private GCHandleReference refpNext;

        private Fence fence;

        public FenceGetWin32HandleInfoKHR()
        {
        }

        public FenceGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.FenceGetWin32HandleInfoKHR _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public Fence Fence
        {
            get
            {
                if (fence != null)
                {
                    return fence;
                }
                fence = _internal.fence;
                return fence;
            }
            set
            {
                fence = value;
                _internal.fence = value;
            }
        }

        public ExternalFenceHandleTypeFlagBits HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.FenceGetWin32HandleInfoKHR(FenceGetWin32HandleInfoKHR f)
        {
            if (f.Fence != null)
            {
                f._internal.fence = f.Fence;
            }
            return f._internal;
        }

        public static implicit operator FenceGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.FenceGetWin32HandleInfoKHR f)
        {
            return new FenceGetWin32HandleInfoKHR(f);
        }

    }

    public partial class ImportMemoryWin32HandleInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoNV _internal;

        private GCHandleReference refpNext;

        public ImportMemoryWin32HandleInfoNV()
        {
        }

        public ImportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint HandleType
        {
            get => _internal.handleType;
            set
            {
                _internal.handleType = value;
            }
        }

        public System.IntPtr Handle
        {
            get => _internal.handle;
            set
            {
                _internal.handle = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoNV(ImportMemoryWin32HandleInfoNV i)
        {
            return i._internal;
        }

        public static implicit operator ImportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.ImportMemoryWin32HandleInfoNV i)
        {
            return new ImportMemoryWin32HandleInfoNV(i);
        }

    }

    public partial class ExportMemoryWin32HandleInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpAttributes;

        public ExportMemoryWin32HandleInfoNV()
        {
        }

        public ExportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        private object pAttributes;
        public object PAttributes
        {
            get
            {
                if(pAttributes != null)
                    return pAttributes;

                pAttributes = _internal.pAttributes;
                return pAttributes;
            }
            set
            {
                refpAttributes?.Dispose();
                refpAttributes = new StructReference(value);
                pAttributes = value;
                _internal.pAttributes = refpAttributes.Handle;
            }
        }

        public uint DwAccess
        {
            get => _internal.dwAccess;
            set
            {
                _internal.dwAccess = value;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAttributes?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoNV(ExportMemoryWin32HandleInfoNV e)
        {
            return e._internal;
        }

        public static implicit operator ExportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.ExportMemoryWin32HandleInfoNV e)
        {
            return new ExportMemoryWin32HandleInfoNV(e);
        }

    }

    public partial class Win32KeyedMutexAcquireReleaseInfoNV : DisposableObject
    {
        private AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoNV _internal;

        private GCHandleReference refpNext;

        private StructReference refpAcquireSyncs;

        private StructReference refpAcquireKeys;

        private StructReference refpAcquireTimeoutMilliseconds;

        private StructReference refpReleaseSyncs;

        private StructReference refpReleaseKeys;

        public Win32KeyedMutexAcquireReleaseInfoNV()
        {
        }

        public Win32KeyedMutexAcquireReleaseInfoNV(AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoNV _internal)
        {
            this._internal = _internal;
        }

        public StructureType SType
        {
            get => _internal.sType;
            set
            {
                _internal.sType = value;
            }
        }

        private System.IntPtr pNext;
        public System.IntPtr PNext
        {
            get
            {
                if(pNext != null)
                    return pNext;

                pNext = _internal.pNext;
                return pNext;
            }
            set
            {
                refpNext?.Dispose();
                refpNext = new GCHandleReference(value);
                pNext = value;
                _internal.pNext = refpNext.Handle;
            }
        }

        public uint AcquireCount
        {
            get => _internal.acquireCount;
            set
            {
                _internal.acquireCount = value;
            }
        }

        private DeviceMemory pAcquireSyncs;
        public DeviceMemory PAcquireSyncs
        {
            get
            {
                if(pAcquireSyncs != null)
                    return pAcquireSyncs;

                pAcquireSyncs = Marshal.PtrToStructure<DeviceMemory>(_internal.pAcquireSyncs);
                return pAcquireSyncs;
            }
            set
            {
                refpAcquireSyncs?.Dispose();
                AdamantiumVulkan.Core.Interop.DeviceMemory_T tmp = value;
                refpAcquireSyncs = new StructReference(tmp);
                pAcquireSyncs = value;
                _internal.pAcquireSyncs = refpAcquireSyncs.Handle;
            }
        }

        public ulong PAcquireKeys
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pAcquireKeys);
            }
            set
            {
                refpAcquireKeys?.Dispose();
                refpAcquireKeys = new StructReference(value);
                _internal.pAcquireKeys = refpAcquireKeys.Handle;
            }
        }

        public uint PAcquireTimeoutMilliseconds
        {
            get
            {
                return Marshal.PtrToStructure<uint>(_internal.pAcquireTimeoutMilliseconds);
            }
            set
            {
                refpAcquireTimeoutMilliseconds?.Dispose();
                refpAcquireTimeoutMilliseconds = new StructReference(value);
                _internal.pAcquireTimeoutMilliseconds = refpAcquireTimeoutMilliseconds.Handle;
            }
        }

        public uint ReleaseCount
        {
            get => _internal.releaseCount;
            set
            {
                _internal.releaseCount = value;
            }
        }

        private DeviceMemory pReleaseSyncs;
        public DeviceMemory PReleaseSyncs
        {
            get
            {
                if(pReleaseSyncs != null)
                    return pReleaseSyncs;

                pReleaseSyncs = Marshal.PtrToStructure<DeviceMemory>(_internal.pReleaseSyncs);
                return pReleaseSyncs;
            }
            set
            {
                refpReleaseSyncs?.Dispose();
                AdamantiumVulkan.Core.Interop.DeviceMemory_T tmp = value;
                refpReleaseSyncs = new StructReference(tmp);
                pReleaseSyncs = value;
                _internal.pReleaseSyncs = refpReleaseSyncs.Handle;
            }
        }

        public ulong PReleaseKeys
        {
            get
            {
                return Marshal.PtrToStructure<ulong>(_internal.pReleaseKeys);
            }
            set
            {
                refpReleaseKeys?.Dispose();
                refpReleaseKeys = new StructReference(value);
                _internal.pReleaseKeys = refpReleaseKeys.Handle;
            }
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpNext?.Dispose();
            refpAcquireSyncs?.Dispose();
            refpAcquireKeys?.Dispose();
            refpAcquireTimeoutMilliseconds?.Dispose();
            refpReleaseSyncs?.Dispose();
            refpReleaseKeys?.Dispose();
        }

        public static implicit operator AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoNV(Win32KeyedMutexAcquireReleaseInfoNV w)
        {
            return w._internal;
        }

        public static implicit operator Win32KeyedMutexAcquireReleaseInfoNV(AdamantiumVulkan.Windows.Interop.Win32KeyedMutexAcquireReleaseInfoNV w)
        {
            return new Win32KeyedMutexAcquireReleaseInfoNV(w);
        }

    }


}
