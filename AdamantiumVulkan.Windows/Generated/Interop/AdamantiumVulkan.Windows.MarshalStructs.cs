// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Windows.Interop
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Core;
    using AdamantiumVulkan.Core.Interop;
    using AdamantiumVulkan.Windows;

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWin32SurfaceCreateFlagsKHR
    {
        public uint value;


        public static implicit operator uint(VkWin32SurfaceCreateFlagsKHR v)
        {
            return v.value;
        }

        public static implicit operator VkWin32SurfaceCreateFlagsKHR(uint v)
        {
            return new VkWin32SurfaceCreateFlagsKHR(){value = v};
        }

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWin32SurfaceCreateInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint flags;

        public System.IntPtr hinstance;

        public System.IntPtr hwnd;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportMemoryWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

        public System.IntPtr handle;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportMemoryWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pAttributes;

        public uint dwAccess;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryWin32HandlePropertiesKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint memoryTypeBits;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkMemoryGetWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkDeviceMemory_T memory;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWin32KeyedMutexAcquireReleaseInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint acquireCount;

        public System.IntPtr pAcquireSyncs;

        public System.IntPtr pAcquireKeys;

        public System.IntPtr pAcquireTimeouts;

        public uint releaseCount;

        public System.IntPtr pReleaseSyncs;

        public System.IntPtr pReleaseKeys;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportSemaphoreWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSemaphore_T semaphore;

        public uint flags;

        public uint handleType;

        public System.IntPtr handle;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportSemaphoreWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pAttributes;

        public uint dwAccess;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkD3D12FenceSubmitInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint waitSemaphoreValuesCount;

        public System.IntPtr pWaitSemaphoreValues;

        public uint signalSemaphoreValuesCount;

        public System.IntPtr pSignalSemaphoreValues;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSemaphoreGetWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkSemaphore_T semaphore;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportFenceWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkFence_T fence;

        public uint flags;

        public uint handleType;

        public System.IntPtr handle;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportFenceWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pAttributes;

        public uint dwAccess;

        public char name;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkFenceGetWin32HandleInfoKHR
    {
        public uint sType;

        public System.IntPtr pNext;

        public VkFence_T fence;

        public uint handleType;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkImportMemoryWin32HandleInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint handleType;

        public System.IntPtr handle;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkExportMemoryWin32HandleInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr pAttributes;

        public uint dwAccess;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkWin32KeyedMutexAcquireReleaseInfoNV
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint acquireCount;

        public System.IntPtr pAcquireSyncs;

        public System.IntPtr pAcquireKeys;

        public System.IntPtr pAcquireTimeoutMilliseconds;

        public uint releaseCount;

        public System.IntPtr pReleaseSyncs;

        public System.IntPtr pReleaseKeys;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceFullScreenExclusiveInfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fullScreenExclusive;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceCapabilitiesFullScreenExclusiveEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public uint fullScreenExclusiveSupported;

    }

    [StructLayout(LayoutKind.Sequential)]
    public partial struct VkSurfaceFullScreenExclusiveWin32InfoEXT
    {
        public uint sType;

        public System.IntPtr pNext;

        public System.IntPtr hmonitor;

    }


}

