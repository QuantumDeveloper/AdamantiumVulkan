// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------


namespace AdamantiumVulkan.Windows
{
    using System.Runtime.InteropServices;
    using AdamantiumVulkan;
    using AdamantiumVulkan.Core;
    using AdamantiumVulkan.Windows.Interop;
    using AdamantiumVulkan.Core.Interop;

    public partial class Win32SurfaceCreateInfoKHR : QBDisposableObject
    {
        public Win32SurfaceCreateInfoKHR()
        {
        }

        public Win32SurfaceCreateInfoKHR(AdamantiumVulkan.Windows.Interop.VkWin32SurfaceCreateInfoKHR _internal)
        {
            PNext = _internal.pNext;
            Flags = _internal.flags;
            Hinstance = _internal.hinstance;
            Hwnd = _internal.hwnd;
        }

        public StructureType SType => StructureType.Win32SurfaceCreateInfoKhr;
        public System.IntPtr PNext { get; set; }
        public uint Flags { get; set; }
        public System.IntPtr Hinstance { get; set; }
        public System.IntPtr Hwnd { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkWin32SurfaceCreateInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkWin32SurfaceCreateInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.flags = Flags;
            _internal.hinstance = Hinstance;
            _internal.hwnd = Hwnd;
            return _internal;
        }
    }

    public partial class ImportMemoryWin32HandleInfoKHR : QBDisposableObject
    {
        public ImportMemoryWin32HandleInfoKHR()
        {
        }

        public ImportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            HandleType = (ExternalMemoryHandleTypeFlagBits)_internal.handleType;
            Handle = _internal.handle;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }
        public System.IntPtr Handle { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.handleType = (uint)HandleType;
            _internal.handle = Handle;
            _internal.name = Name;
            return _internal;
        }
    }

    public partial class ExportMemoryWin32HandleInfoKHR : QBDisposableObject
    {
        private StructReference refpAttributes;

        public ExportMemoryWin32HandleInfoKHR()
        {
        }

        public ExportMemoryWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            PAttributes = _internal.pAttributes;
            DwAccess = _internal.dwAccess;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public object PAttributes { get; set; }
        public uint DwAccess { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            refpAttributes?.Dispose();
            if (PAttributes != null)
            {
                refpAttributes = new StructReference(PAttributes);
                _internal.pAttributes = refpAttributes.Handle;
            }
            _internal.dwAccess = DwAccess;
            _internal.name = Name;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttributes?.Dispose();
        }

    }

    public partial class MemoryWin32HandlePropertiesKHR : QBDisposableObject
    {
        public MemoryWin32HandlePropertiesKHR()
        {
        }

        public MemoryWin32HandlePropertiesKHR(AdamantiumVulkan.Windows.Interop.VkMemoryWin32HandlePropertiesKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            MemoryTypeBits = _internal.memoryTypeBits;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint MemoryTypeBits { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkMemoryWin32HandlePropertiesKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkMemoryWin32HandlePropertiesKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.memoryTypeBits = MemoryTypeBits;
            return _internal;
        }
    }

    public partial class MemoryGetWin32HandleInfoKHR : QBDisposableObject
    {
        public MemoryGetWin32HandleInfoKHR()
        {
        }

        public MemoryGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkMemoryGetWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Memory = new DeviceMemory(_internal.memory);
            HandleType = (ExternalMemoryHandleTypeFlagBits)_internal.handleType;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public DeviceMemory Memory { get; set; }
        public ExternalMemoryHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkMemoryGetWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkMemoryGetWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.memory = Memory;
            _internal.handleType = (uint)HandleType;
            return _internal;
        }
    }

    public partial class Win32KeyedMutexAcquireReleaseInfoKHR : QBDisposableObject
    {
        private StructReference refpAcquireSyncs;

        private StructReference refpAcquireKeys;

        private StructReference refpAcquireTimeouts;

        private StructReference refpReleaseSyncs;

        private StructReference refpReleaseKeys;

        public Win32KeyedMutexAcquireReleaseInfoKHR()
        {
        }

        public Win32KeyedMutexAcquireReleaseInfoKHR(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            AcquireCount = _internal.acquireCount;
            PAcquireSyncs = new DeviceMemory(Marshal.PtrToStructure<DeviceMemory>(_internal.pAcquireSyncs));
            Marshal.FreeHGlobal(_internal.pAcquireSyncs);
            if(_internal.pAcquireKeys != System.IntPtr.Zero)
            {
                PAcquireKeys = (ulong?)_internal.pAcquireKeys;
                Marshal.FreeHGlobal(_internal.pAcquireKeys);
            }
            if(_internal.pAcquireTimeouts != System.IntPtr.Zero)
            {
                PAcquireTimeouts = (uint?)_internal.pAcquireTimeouts;
                Marshal.FreeHGlobal(_internal.pAcquireTimeouts);
            }
            ReleaseCount = _internal.releaseCount;
            PReleaseSyncs = new DeviceMemory(Marshal.PtrToStructure<DeviceMemory>(_internal.pReleaseSyncs));
            Marshal.FreeHGlobal(_internal.pReleaseSyncs);
            if(_internal.pReleaseKeys != System.IntPtr.Zero)
            {
                PReleaseKeys = (ulong?)_internal.pReleaseKeys;
                Marshal.FreeHGlobal(_internal.pReleaseKeys);
            }
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint AcquireCount { get; set; }
        public DeviceMemory PAcquireSyncs { get; set; }
        public ulong? PAcquireKeys { get; set; }
        public uint? PAcquireTimeouts { get; set; }
        public uint ReleaseCount { get; set; }
        public DeviceMemory PReleaseSyncs { get; set; }
        public ulong? PReleaseKeys { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.acquireCount = AcquireCount;
            refpAcquireSyncs?.Dispose();
            if (PAcquireSyncs != null)
            {
                AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct0 = PAcquireSyncs;
                refpAcquireSyncs = new StructReference(struct0);
                _internal.pAcquireSyncs = refpAcquireSyncs.Handle;
            }
            refpAcquireKeys?.Dispose();
            if (PAcquireKeys != null)
            {
                refpAcquireKeys = new StructReference(PAcquireKeys);
                _internal.pAcquireKeys = refpAcquireKeys.Handle;
            }
            refpAcquireTimeouts?.Dispose();
            if (PAcquireTimeouts != null)
            {
                refpAcquireTimeouts = new StructReference(PAcquireTimeouts);
                _internal.pAcquireTimeouts = refpAcquireTimeouts.Handle;
            }
            _internal.releaseCount = ReleaseCount;
            refpReleaseSyncs?.Dispose();
            if (PReleaseSyncs != null)
            {
                AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct3 = PReleaseSyncs;
                refpReleaseSyncs = new StructReference(struct3);
                _internal.pReleaseSyncs = refpReleaseSyncs.Handle;
            }
            refpReleaseKeys?.Dispose();
            if (PReleaseKeys != null)
            {
                refpReleaseKeys = new StructReference(PReleaseKeys);
                _internal.pReleaseKeys = refpReleaseKeys.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAcquireSyncs?.Dispose();
            refpAcquireKeys?.Dispose();
            refpAcquireTimeouts?.Dispose();
            refpReleaseSyncs?.Dispose();
            refpReleaseKeys?.Dispose();
        }

    }

    public partial class ImportSemaphoreWin32HandleInfoKHR : QBDisposableObject
    {
        public ImportSemaphoreWin32HandleInfoKHR()
        {
        }

        public ImportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkImportSemaphoreWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Semaphore = new Semaphore(_internal.semaphore);
            Flags = _internal.flags;
            HandleType = (ExternalSemaphoreHandleTypeFlagBits)_internal.handleType;
            Handle = _internal.handle;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public Semaphore Semaphore { get; set; }
        public uint Flags { get; set; }
        public ExternalSemaphoreHandleTypeFlagBits HandleType { get; set; }
        public System.IntPtr Handle { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkImportSemaphoreWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkImportSemaphoreWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.semaphore = Semaphore;
            _internal.flags = Flags;
            _internal.handleType = (uint)HandleType;
            _internal.handle = Handle;
            _internal.name = Name;
            return _internal;
        }
    }

    public partial class ExportSemaphoreWin32HandleInfoKHR : QBDisposableObject
    {
        private StructReference refpAttributes;

        public ExportSemaphoreWin32HandleInfoKHR()
        {
        }

        public ExportSemaphoreWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkExportSemaphoreWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            PAttributes = _internal.pAttributes;
            DwAccess = _internal.dwAccess;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public object PAttributes { get; set; }
        public uint DwAccess { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkExportSemaphoreWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkExportSemaphoreWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            refpAttributes?.Dispose();
            if (PAttributes != null)
            {
                refpAttributes = new StructReference(PAttributes);
                _internal.pAttributes = refpAttributes.Handle;
            }
            _internal.dwAccess = DwAccess;
            _internal.name = Name;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttributes?.Dispose();
        }

    }

    public partial class D3D12FenceSubmitInfoKHR : QBDisposableObject
    {
        private StructReference refpWaitSemaphoreValues;

        private StructReference refpSignalSemaphoreValues;

        public D3D12FenceSubmitInfoKHR()
        {
        }

        public D3D12FenceSubmitInfoKHR(AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            WaitSemaphoreValuesCount = _internal.waitSemaphoreValuesCount;
            if(_internal.pWaitSemaphoreValues != System.IntPtr.Zero)
            {
                PWaitSemaphoreValues = (ulong?)_internal.pWaitSemaphoreValues;
                Marshal.FreeHGlobal(_internal.pWaitSemaphoreValues);
            }
            SignalSemaphoreValuesCount = _internal.signalSemaphoreValuesCount;
            if(_internal.pSignalSemaphoreValues != System.IntPtr.Zero)
            {
                PSignalSemaphoreValues = (ulong?)_internal.pSignalSemaphoreValues;
                Marshal.FreeHGlobal(_internal.pSignalSemaphoreValues);
            }
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint WaitSemaphoreValuesCount { get; set; }
        public ulong? PWaitSemaphoreValues { get; set; }
        public uint SignalSemaphoreValuesCount { get; set; }
        public ulong? PSignalSemaphoreValues { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkD3D12FenceSubmitInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.waitSemaphoreValuesCount = WaitSemaphoreValuesCount;
            refpWaitSemaphoreValues?.Dispose();
            if (PWaitSemaphoreValues != null)
            {
                refpWaitSemaphoreValues = new StructReference(PWaitSemaphoreValues);
                _internal.pWaitSemaphoreValues = refpWaitSemaphoreValues.Handle;
            }
            _internal.signalSemaphoreValuesCount = SignalSemaphoreValuesCount;
            refpSignalSemaphoreValues?.Dispose();
            if (PSignalSemaphoreValues != null)
            {
                refpSignalSemaphoreValues = new StructReference(PSignalSemaphoreValues);
                _internal.pSignalSemaphoreValues = refpSignalSemaphoreValues.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpWaitSemaphoreValues?.Dispose();
            refpSignalSemaphoreValues?.Dispose();
        }

    }

    public partial class SemaphoreGetWin32HandleInfoKHR : QBDisposableObject
    {
        public SemaphoreGetWin32HandleInfoKHR()
        {
        }

        public SemaphoreGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkSemaphoreGetWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Semaphore = new Semaphore(_internal.semaphore);
            HandleType = (ExternalSemaphoreHandleTypeFlagBits)_internal.handleType;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public Semaphore Semaphore { get; set; }
        public ExternalSemaphoreHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkSemaphoreGetWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkSemaphoreGetWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.semaphore = Semaphore;
            _internal.handleType = (uint)HandleType;
            return _internal;
        }
    }

    public partial class ImportFenceWin32HandleInfoKHR : QBDisposableObject
    {
        public ImportFenceWin32HandleInfoKHR()
        {
        }

        public ImportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkImportFenceWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Fence = new Fence(_internal.fence);
            Flags = _internal.flags;
            HandleType = (ExternalFenceHandleTypeFlagBits)_internal.handleType;
            Handle = _internal.handle;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public Fence Fence { get; set; }
        public uint Flags { get; set; }
        public ExternalFenceHandleTypeFlagBits HandleType { get; set; }
        public System.IntPtr Handle { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkImportFenceWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkImportFenceWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.fence = Fence;
            _internal.flags = Flags;
            _internal.handleType = (uint)HandleType;
            _internal.handle = Handle;
            _internal.name = Name;
            return _internal;
        }
    }

    public partial class ExportFenceWin32HandleInfoKHR : QBDisposableObject
    {
        private StructReference refpAttributes;

        public ExportFenceWin32HandleInfoKHR()
        {
        }

        public ExportFenceWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkExportFenceWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            PAttributes = _internal.pAttributes;
            DwAccess = _internal.dwAccess;
            Name = _internal.name;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public object PAttributes { get; set; }
        public uint DwAccess { get; set; }
        public char Name { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkExportFenceWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkExportFenceWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            refpAttributes?.Dispose();
            if (PAttributes != null)
            {
                refpAttributes = new StructReference(PAttributes);
                _internal.pAttributes = refpAttributes.Handle;
            }
            _internal.dwAccess = DwAccess;
            _internal.name = Name;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttributes?.Dispose();
        }

    }

    public partial class FenceGetWin32HandleInfoKHR : QBDisposableObject
    {
        public FenceGetWin32HandleInfoKHR()
        {
        }

        public FenceGetWin32HandleInfoKHR(AdamantiumVulkan.Windows.Interop.VkFenceGetWin32HandleInfoKHR _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Fence = new Fence(_internal.fence);
            HandleType = (ExternalFenceHandleTypeFlagBits)_internal.handleType;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public Fence Fence { get; set; }
        public ExternalFenceHandleTypeFlagBits HandleType { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkFenceGetWin32HandleInfoKHR ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkFenceGetWin32HandleInfoKHR();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.fence = Fence;
            _internal.handleType = (uint)HandleType;
            return _internal;
        }
    }

    public partial class ImportMemoryWin32HandleInfoNV : QBDisposableObject
    {
        public ImportMemoryWin32HandleInfoNV()
        {
        }

        public ImportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoNV _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            HandleType = _internal.handleType;
            Handle = _internal.handle;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint HandleType { get; set; }
        public System.IntPtr Handle { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkImportMemoryWin32HandleInfoNV();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.handleType = HandleType;
            _internal.handle = Handle;
            return _internal;
        }
    }

    public partial class ExportMemoryWin32HandleInfoNV : QBDisposableObject
    {
        private StructReference refpAttributes;

        public ExportMemoryWin32HandleInfoNV()
        {
        }

        public ExportMemoryWin32HandleInfoNV(AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoNV _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            PAttributes = _internal.pAttributes;
            DwAccess = _internal.dwAccess;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public object PAttributes { get; set; }
        public uint DwAccess { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkExportMemoryWin32HandleInfoNV();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            refpAttributes?.Dispose();
            if (PAttributes != null)
            {
                refpAttributes = new StructReference(PAttributes);
                _internal.pAttributes = refpAttributes.Handle;
            }
            _internal.dwAccess = DwAccess;
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAttributes?.Dispose();
        }

    }

    public partial class Win32KeyedMutexAcquireReleaseInfoNV : QBDisposableObject
    {
        private StructReference refpAcquireSyncs;

        private StructReference refpAcquireKeys;

        private StructReference refpAcquireTimeoutMilliseconds;

        private StructReference refpReleaseSyncs;

        private StructReference refpReleaseKeys;

        public Win32KeyedMutexAcquireReleaseInfoNV()
        {
        }

        public Win32KeyedMutexAcquireReleaseInfoNV(AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            AcquireCount = _internal.acquireCount;
            PAcquireSyncs = new DeviceMemory(Marshal.PtrToStructure<DeviceMemory>(_internal.pAcquireSyncs));
            Marshal.FreeHGlobal(_internal.pAcquireSyncs);
            if(_internal.pAcquireKeys != System.IntPtr.Zero)
            {
                PAcquireKeys = (ulong?)_internal.pAcquireKeys;
                Marshal.FreeHGlobal(_internal.pAcquireKeys);
            }
            if(_internal.pAcquireTimeoutMilliseconds != System.IntPtr.Zero)
            {
                PAcquireTimeoutMilliseconds = (uint?)_internal.pAcquireTimeoutMilliseconds;
                Marshal.FreeHGlobal(_internal.pAcquireTimeoutMilliseconds);
            }
            ReleaseCount = _internal.releaseCount;
            PReleaseSyncs = new DeviceMemory(Marshal.PtrToStructure<DeviceMemory>(_internal.pReleaseSyncs));
            Marshal.FreeHGlobal(_internal.pReleaseSyncs);
            if(_internal.pReleaseKeys != System.IntPtr.Zero)
            {
                PReleaseKeys = (ulong?)_internal.pReleaseKeys;
                Marshal.FreeHGlobal(_internal.pReleaseKeys);
            }
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public uint AcquireCount { get; set; }
        public DeviceMemory PAcquireSyncs { get; set; }
        public ulong? PAcquireKeys { get; set; }
        public uint? PAcquireTimeoutMilliseconds { get; set; }
        public uint ReleaseCount { get; set; }
        public DeviceMemory PReleaseSyncs { get; set; }
        public ulong? PReleaseKeys { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkWin32KeyedMutexAcquireReleaseInfoNV();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.acquireCount = AcquireCount;
            refpAcquireSyncs?.Dispose();
            if (PAcquireSyncs != null)
            {
                AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct0 = PAcquireSyncs;
                refpAcquireSyncs = new StructReference(struct0);
                _internal.pAcquireSyncs = refpAcquireSyncs.Handle;
            }
            refpAcquireKeys?.Dispose();
            if (PAcquireKeys != null)
            {
                refpAcquireKeys = new StructReference(PAcquireKeys);
                _internal.pAcquireKeys = refpAcquireKeys.Handle;
            }
            refpAcquireTimeoutMilliseconds?.Dispose();
            if (PAcquireTimeoutMilliseconds != null)
            {
                refpAcquireTimeoutMilliseconds = new StructReference(PAcquireTimeoutMilliseconds);
                _internal.pAcquireTimeoutMilliseconds = refpAcquireTimeoutMilliseconds.Handle;
            }
            _internal.releaseCount = ReleaseCount;
            refpReleaseSyncs?.Dispose();
            if (PReleaseSyncs != null)
            {
                AdamantiumVulkan.Core.Interop.VkDeviceMemory_T struct3 = PReleaseSyncs;
                refpReleaseSyncs = new StructReference(struct3);
                _internal.pReleaseSyncs = refpReleaseSyncs.Handle;
            }
            refpReleaseKeys?.Dispose();
            if (PReleaseKeys != null)
            {
                refpReleaseKeys = new StructReference(PReleaseKeys);
                _internal.pReleaseKeys = refpReleaseKeys.Handle;
            }
            return _internal;
        }

        protected override void UnmanagedDisposeOverride()
        {
            refpAcquireSyncs?.Dispose();
            refpAcquireKeys?.Dispose();
            refpAcquireTimeoutMilliseconds?.Dispose();
            refpReleaseSyncs?.Dispose();
            refpReleaseKeys?.Dispose();
        }

    }

    public partial class SurfaceFullScreenExclusiveInfoEXT : QBDisposableObject
    {
        public SurfaceFullScreenExclusiveInfoEXT()
        {
        }

        public SurfaceFullScreenExclusiveInfoEXT(AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveInfoEXT _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            FullScreenExclusive = (FullScreenExclusiveEXT)_internal.fullScreenExclusive;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public FullScreenExclusiveEXT FullScreenExclusive { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveInfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveInfoEXT();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.fullScreenExclusive = (uint)FullScreenExclusive;
            return _internal;
        }
    }

    public partial class SurfaceCapabilitiesFullScreenExclusiveEXT : QBDisposableObject
    {
        public SurfaceCapabilitiesFullScreenExclusiveEXT()
        {
        }

        public SurfaceCapabilitiesFullScreenExclusiveEXT(AdamantiumVulkan.Windows.Interop.VkSurfaceCapabilitiesFullScreenExclusiveEXT _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            FullScreenExclusiveSupported = System.Convert.ToBoolean(_internal.fullScreenExclusiveSupported);
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public bool FullScreenExclusiveSupported { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkSurfaceCapabilitiesFullScreenExclusiveEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkSurfaceCapabilitiesFullScreenExclusiveEXT();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.fullScreenExclusiveSupported = System.Convert.ToUInt32(FullScreenExclusiveSupported);
            return _internal;
        }
    }

    public partial class SurfaceFullScreenExclusiveWin32InfoEXT : QBDisposableObject
    {
        public SurfaceFullScreenExclusiveWin32InfoEXT()
        {
        }

        public SurfaceFullScreenExclusiveWin32InfoEXT(AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveWin32InfoEXT _internal)
        {
            SType = (StructureType)_internal.sType;
            PNext = _internal.pNext;
            Hmonitor = _internal.hmonitor;
        }

        public StructureType SType { get; set; }
        public System.IntPtr PNext { get; set; }
        public System.IntPtr Hmonitor { get; set; }

        public AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveWin32InfoEXT ToInternal()
        {
            var _internal = new AdamantiumVulkan.Windows.Interop.VkSurfaceFullScreenExclusiveWin32InfoEXT();
            _internal.sType = (uint)SType;
            _internal.pNext = PNext;
            _internal.hmonitor = Hmonitor;
            return _internal;
        }
    }


}
