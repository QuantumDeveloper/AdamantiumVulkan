// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.SPIRV.Cross
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.SPIRV.Cross.Interop;

    ///<summary>
    /// These types are opaque to the user.
    ///</summary>
    public partial class SpvcContext
    {
        internal SpvcContextS __Instance;

        public SpvcContext()
        {
        }

        public SpvcContext(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Context is the highest-level API construct. The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings. This means that the API user only has to care about one "destroy" call ever when using the C API. All pointers handed out by the APIs are only valid as long as the context is alive and spvc_context_release_allocations has not been called.
        ///</summary>
        public SpvcResult SpvcContextCreate()
        {
            SpvcContextS arg0;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_create(out arg0);
            context = new SpvcContext(arg0);
            return result;
        }

        ///<summary>
        /// Create a compiler backend. Capture mode controls if we construct by copy or move semantics. It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.
        ///</summary>
        public SpvcResult SpvcContextCreateCompiler(SpvcBackend backend, AdamantiumVulkan.SPIRV.Cross.SpvcParsedIr parsed_ir, SpvcCaptureMode mode, out AdamantiumVulkan.SPIRV.Cross.SpvcCompiler compiler)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(parsed_ir, null) ? new SpvcParsedIrS() : (SpvcParsedIrS)parsed_ir;
            SpvcCompilerS arg2;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_create_compiler(arg0, backend, arg1, mode, out arg2);
            compiler = new SpvcCompiler(arg2);
            return result;
        }

        ///<summary>
        /// Frees all memory allocations and objects associated with the context and its child objects.
        ///</summary>
        public void SpvcContextDestroy()
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_destroy(arg0);
        }

        ///<summary>
        /// Get the string for the last error which was logged.
        ///</summary>
        public string SpvcContextGetLastErrorString()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_get_last_error_string(arg0);
        }

        ///<summary>
        /// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle.
        ///</summary>
        public SpvcResult SpvcContextParseSpirv(in uint? spirv, ulong word_count, out AdamantiumVulkan.SPIRV.Cross.SpvcParsedIr parsed_ir)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(spirv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(spirv.Value);
            SpvcParsedIrS arg2;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_parse_spirv(arg0, arg1, word_count, out arg2);
            Marshal.FreeHGlobal(arg1);
            parsed_ir = new SpvcParsedIr(arg2);
            return result;
        }

        ///<summary>
        /// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive.
        ///</summary>
        public void SpvcContextReleaseAllocations()
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_release_allocations(arg0);
        }

        public void SpvcContextSetErrorCallback(SpvcErrorCallback cb, ref System.IntPtr userdata)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_set_error_callback(arg0, cb, userdata);
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS(SpvcContext s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS();
        }

        public static implicit operator SpvcContext(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS s)
        {
            return new SpvcContext(){__Instance = s};
        }

    }

    public partial class SpvcParsedIr
    {
        internal SpvcParsedIrS __Instance;

        public SpvcParsedIr()
        {
        }

        public SpvcParsedIr(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS __Instance)
        {
            this.__Instance = __Instance;
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS(SpvcParsedIr s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS();
        }

        public static implicit operator SpvcParsedIr(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS s)
        {
            return new SpvcParsedIr(){__Instance = s};
        }

    }

    public partial class SpvcCompiler
    {
        internal SpvcCompilerS __Instance;

        public SpvcCompiler()
        {
        }

        public SpvcCompiler(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerAddHeaderLine(string line)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_add_header_line(arg0, line);
        }

        public byte SpvcCompilerBufferGetHlslCounterBuffer(uint id, ref uint counter_id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_get_hlsl_counter_buffer(arg0, id, ref counter_id);
        }

        public byte SpvcCompilerBufferIsHlslCounterBuffer(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_is_hlsl_counter_buffer(arg0, id);
        }

        public SpvcResult SpvcCompilerBuildCombinedImageSamplers()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_combined_image_samplers(arg0);
        }

        ///<summary>
        /// Workaround helper functions. Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerBuildDummySamplerForCombinedImages(ref uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_dummy_sampler_for_combined_images(arg0, ref id);
        }

        ///<summary>
        /// Compile IR into a string. *source is owned by the context, and caller must not free it themselves.
        ///</summary>
        public SpvcResult SpvcCompilerCompile(in string[] source)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_compile(arg0, source);
        }

        ///<summary>
        /// Create compiler options, which will initialize defaults.
        ///</summary>
        public SpvcResult SpvcCompilerCreateCompilerOptions(out AdamantiumVulkan.SPIRV.Cross.SpvcCompilerOptions options)
        {
            var arg0 = this;
            SpvcCompilerOptionsS arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_compiler_options(arg0, out arg1);
            options = new SpvcCompilerOptions(arg1);
            return result;
        }

        public SpvcResult SpvcCompilerCreateShaderResources(out AdamantiumVulkan.SPIRV.Cross.SpvcResources resources)
        {
            var arg0 = this;
            SpvcResourcesS arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources(arg0, out arg1);
            resources = new SpvcResources(arg1);
            return result;
        }

        public SpvcResult SpvcCompilerCreateShaderResourcesForActiveVariables(out AdamantiumVulkan.SPIRV.Cross.SpvcResources resources, AdamantiumVulkan.SPIRV.Cross.SpvcSet active)
        {
            var arg0 = this;
            SpvcResourcesS arg1;
            var arg2 = ReferenceEquals(active, null) ? new SpvcSet() : (SpvcSet)active;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources_for_active_variables(arg0, out arg1, arg2);
            resources = new SpvcResources(arg1);
            return result;
        }

        public SpvcResult SpvcCompilerFlattenBufferBlock(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_flatten_buffer_block(arg0, id);
        }

        ///<summary>
        /// Buffer ranges Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerGetActiveBufferRanges(uint id, in SpvcBufferRange ranges, ref ulong num_ranges)
        {
            var arg0 = this;
            var arg2 = ReferenceEquals(ranges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(ranges.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_buffer_ranges(arg0, id, arg2, ref num_ranges);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        ///<summary>
        /// Reflect resources. Maps almost 1:1 to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerGetActiveInterfaceVariables(out AdamantiumVulkan.SPIRV.Cross.SpvcSet set)
        {
            var arg0 = this;
            SpvcSet arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_interface_variables(arg0, out arg1);
            set = new SpvcSet(arg1);
            return result;
        }

        ///<summary>
        /// Misc reflection Maps to C++ API.
        ///</summary>
        public byte SpvcCompilerGetBinaryOffsetForDecoration(uint id, SpvDecoration decoration, ref uint word_offset)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_binary_offset_for_decoration(arg0, id, decoration, ref word_offset);
        }

        public SpvcResult SpvcCompilerGetBufferBlockDecorations(uint id, in System.IntPtr decorations, ref ulong num_decorations)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_buffer_block_decorations(arg0, id, decorations, ref num_decorations);
        }

        public string SpvcCompilerGetCleansedEntryPointName(string name, SpvExecutionModel model)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_cleansed_entry_point_name(arg0, name, model);
        }

        public SpvcResult SpvcCompilerGetCombinedImageSamplers(in SpvcCombinedImageSampler samplers, ref ulong num_samplers)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(samplers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(samplers.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_combined_image_samplers(arg0, arg1, ref num_samplers);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcConstantS SpvcCompilerGetConstantHandle(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_constant_handle(arg0, id);
        }

        ///<summary>
        /// Maps directly to C++ API.
        ///</summary>
        public uint SpvcCompilerGetCurrentIdBound()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_current_id_bound(arg0);
        }

        public SpvcResult SpvcCompilerGetDeclaredCapabilities(in System.IntPtr capabilities, ref ulong num_capabilities)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_capabilities(arg0, capabilities, ref num_capabilities);
        }

        public SpvcResult SpvcCompilerGetDeclaredExtensions(in System.IntPtr extensions, ref ulong num_extensions)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_extensions(arg0, extensions, ref num_extensions);
        }

        public SpvcResult SpvcCompilerGetDeclaredStructMemberSize(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref ulong size)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(type, null) ? new SpvcType() : (SpvcType)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_member_size(arg0, arg1, index, ref size);
        }

        ///<summary>
        /// Buffer layout query. Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerGetDeclaredStructSize(AdamantiumVulkan.SPIRV.Cross.SpvcType struct_type, ref ulong size)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(struct_type, null) ? new SpvcType() : (SpvcType)struct_type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size(arg0, arg1, ref size);
        }

        public SpvcResult SpvcCompilerGetDeclaredStructSizeRuntimeArray(AdamantiumVulkan.SPIRV.Cross.SpvcType struct_type, ulong array_size, ref ulong size)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(struct_type, null) ? new SpvcType() : (SpvcType)struct_type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size_runtime_array(arg0, arg1, array_size, ref size);
        }

        public uint SpvcCompilerGetDecoration(uint id, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration(arg0, id, decoration);
        }

        public string SpvcCompilerGetDecorationString(uint id, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration_string(arg0, id, decoration);
        }

        ///<summary>
        /// Entry points. Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerGetEntryPoints(in SpvcEntryPoint entry_points, ref ulong num_entry_points)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(entry_points, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(entry_points.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_entry_points(arg0, arg1, ref num_entry_points);
            entry_points?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public uint SpvcCompilerGetExecutionModeArgument(SpvExecutionMode mode)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument(arg0, mode);
        }

        public uint SpvcCompilerGetExecutionModeArgumentByIndex(SpvExecutionMode mode, uint index)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument_by_index(arg0, mode, index);
        }

        public SpvExecutionModel SpvcCompilerGetExecutionModel()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_model(arg0);
        }

        public SpvcResult SpvcCompilerGetExecutionModes(in System.IntPtr modes, ref ulong num_modes)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_modes(arg0, modes, ref num_modes);
        }

        public uint SpvcCompilerGetMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration(arg0, id, member_index, decoration);
        }

        public string SpvcCompilerGetMemberDecorationString(uint id, uint member_index, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration_string(arg0, id, member_index, decoration);
        }

        public string SpvcCompilerGetMemberName(uint id, uint member_index)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_name(arg0, id, member_index);
        }

        public string SpvcCompilerGetName(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_name(arg0, id);
        }

        public string SpvcCompilerGetRemappedDeclaredBlockName(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_remapped_declared_block_name(arg0, id);
        }

        ///<summary>
        /// Constants Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerGetSpecializationConstants(in SpvcSpecializationConstant constants, ref ulong num_constants)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(constants, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constants.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_specialization_constants(arg0, arg1, ref num_constants);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        ///<summary>
        /// Type query interface. Maps to C++ API, except it's read-only.
        ///</summary>
        public SpvcType SpvcCompilerGetTypeHandle(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_type_handle(arg0, id);
        }

        public uint SpvcCompilerGetWorkGroupSizeSpecializationConstants(SpvcSpecializationConstant x, SpvcSpecializationConstant y, SpvcSpecializationConstant z)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(x, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(x.ToInternal());
            var arg2 = ReferenceEquals(y, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(y.ToInternal());
            var arg3 = ReferenceEquals(z, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(z.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_work_group_size_specialization_constants(arg0, arg1, arg2, arg3);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            return result;
        }

        public byte SpvcCompilerHasDecoration(uint id, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_decoration(arg0, id, decoration);
        }

        public byte SpvcCompilerHasMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_member_decoration(arg0, id, member_index, decoration);
        }

        public SpvcResult SpvcCompilerHlslAddVertexAttributeRemap(in SpvcHlslVertexAttributeRemap remap, ulong remaps)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(remap, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(remap.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_add_vertex_attribute_remap(arg0, arg1, remaps);
            remap?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public uint SpvcCompilerHlslRemapNumWorkgroupsBuiltin()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_remap_num_workgroups_builtin(arg0);
        }

        ///<summary>
        /// HLSL specifics. Maps to C++ API.
        ///</summary>
        public SpvcResult SpvcCompilerHlslSetRootConstantsLayout(in SpvcHlslRootConstants constant_info, ulong count)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(constant_info, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constant_info.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_set_root_constants_layout(arg0, arg1, count);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        ///<summary>
        /// Set compiler options.
        ///</summary>
        public SpvcResult SpvcCompilerInstallCompilerOptions(AdamantiumVulkan.SPIRV.Cross.SpvcCompilerOptions options)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(options, null) ? new SpvcCompilerOptionsS() : (SpvcCompilerOptionsS)options;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_install_compiler_options(arg0, arg1);
        }

        public SpvcResult SpvcCompilerMslAddDiscreteDescriptorSet(uint desc_set)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_discrete_descriptor_set(arg0, desc_set);
        }

        public SpvcResult SpvcCompilerMslAddDynamicBuffer(uint desc_set, uint binding, uint index)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_dynamic_buffer(arg0, desc_set, binding, index);
        }

        public SpvcResult SpvcCompilerMslAddResourceBinding(in SpvcMslResourceBinding binding)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(binding, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(binding.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_resource_binding(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult SpvcCompilerMslAddVertexAttribute(in SpvcMslVertexAttribute attrs)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(attrs, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(attrs.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_vertex_attribute(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public uint SpvcCompilerMslGetAutomaticResourceBinding(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding(arg0, id);
        }

        public uint SpvcCompilerMslGetAutomaticResourceBindingSecondary(uint id)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding_secondary(arg0, id);
        }

        ///<summary>
        /// MSL specifics. Maps to C++ API.
        ///</summary>
        public byte SpvcCompilerMslIsRasterizationDisabled()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_rasterization_disabled(arg0);
        }

        public byte SpvcCompilerMslIsResourceUsed(SpvExecutionModel model, uint set, uint binding)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_resource_used(arg0, model, set, binding);
        }

        public byte SpvcCompilerMslIsVertexAttributeUsed(uint location)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_vertex_attribute_used(arg0, location);
        }

        ///<summary>
        /// Obsolete. Renamed to needs_swizzle_buffer.
        ///</summary>
        public byte SpvcCompilerMslNeedsAuxBuffer()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_aux_buffer(arg0);
        }

        public byte SpvcCompilerMslNeedsBufferSizeBuffer()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_buffer_size_buffer(arg0);
        }

        public byte SpvcCompilerMslNeedsInputThreadgroupMem()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_input_threadgroup_mem(arg0);
        }

        public byte SpvcCompilerMslNeedsOutputBuffer()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_output_buffer(arg0);
        }

        public byte SpvcCompilerMslNeedsPatchOutputBuffer()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_patch_output_buffer(arg0);
        }

        public byte SpvcCompilerMslNeedsSwizzleBuffer()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_swizzle_buffer(arg0);
        }

        public SpvcResult SpvcCompilerMslRemapConstexprSampler(uint id, in SpvcMslConstexprSampler sampler)
        {
            var arg0 = this;
            var arg2 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler(arg0, id, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public SpvcResult SpvcCompilerMslRemapConstexprSamplerByBinding(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding(arg0, desc_set, binding, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult SpvcCompilerMslRemapConstexprSamplerByBindingYcbcr(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var arg2 = ReferenceEquals(conv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(conv.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(arg0, desc_set, binding, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public SpvcResult SpvcCompilerMslRemapConstexprSamplerYcbcr(uint id, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
        {
            var arg0 = this;
            var arg2 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var arg3 = ReferenceEquals(conv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(conv.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_ycbcr(arg0, id, arg2, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            return result;
        }

        public SpvcResult SpvcCompilerMslSetFragmentOutputComponents(uint location, uint components)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_fragment_output_components(arg0, location, components);
        }

        public SpvcResult SpvcCompilerRenameEntryPoint(string old_name, string new_name, SpvExecutionModel model)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_rename_entry_point(arg0, old_name, new_name, model);
        }

        public SpvcResult SpvcCompilerRequireExtension(string ext)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_require_extension(arg0, ext);
        }

        ///<summary>
        /// Decorations. Maps to C++ API.
        ///</summary>
        public void SpvcCompilerSetDecoration(uint id, SpvDecoration decoration, uint argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration(arg0, id, decoration, argument);
        }

        public void SpvcCompilerSetDecorationString(uint id, SpvDecoration decoration, string argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration_string(arg0, id, decoration, argument);
        }

        public SpvcResult SpvcCompilerSetEnabledInterfaceVariables(AdamantiumVulkan.SPIRV.Cross.SpvcSet set)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(set, null) ? new SpvcSet() : (SpvcSet)set;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_enabled_interface_variables(arg0, arg1);
        }

        public SpvcResult SpvcCompilerSetEntryPoint(string name, SpvExecutionModel model)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_entry_point(arg0, name, model);
        }

        public void SpvcCompilerSetExecutionMode(SpvExecutionMode mode)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode(arg0, mode);
        }

        public void SpvcCompilerSetExecutionModeWithArguments(SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode_with_arguments(arg0, mode, arg0, arg1, arg2);
        }

        public void SpvcCompilerSetMemberDecoration(uint id, uint member_index, SpvDecoration decoration, uint argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration(arg0, id, member_index, decoration, argument);
        }

        public void SpvcCompilerSetMemberDecorationString(uint id, uint member_index, SpvDecoration decoration, string argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration_string(arg0, id, member_index, decoration, argument);
        }

        public void SpvcCompilerSetMemberName(uint id, uint member_index, string argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_name(arg0, id, member_index, argument);
        }

        public void SpvcCompilerSetName(uint id, string argument)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_name(arg0, id, argument);
        }

        public SpvcResult SpvcCompilerTypeStructMemberArrayStride(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint stride)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(type, null) ? new SpvcType() : (SpvcType)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_array_stride(arg0, arg1, index, ref stride);
        }

        public SpvcResult SpvcCompilerTypeStructMemberMatrixStride(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint stride)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(type, null) ? new SpvcType() : (SpvcType)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_matrix_stride(arg0, arg1, index, ref stride);
        }

        public SpvcResult SpvcCompilerTypeStructMemberOffset(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint offset)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(type, null) ? new SpvcType() : (SpvcType)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_offset(arg0, arg1, index, ref offset);
        }

        public void SpvcCompilerUnsetDecoration(uint id, SpvDecoration decoration)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_decoration(arg0, id, decoration);
        }

        public void SpvcCompilerUnsetExecutionMode(SpvExecutionMode mode)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_execution_mode(arg0, mode);
        }

        public void SpvcCompilerUnsetMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            var arg0 = this;
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_member_decoration(arg0, id, member_index, decoration);
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS(SpvcCompiler s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS();
        }

        public static implicit operator SpvcCompiler(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS s)
        {
            return new SpvcCompiler(){__Instance = s};
        }

    }

    public partial class SpvcCompilerOptions
    {
        internal SpvcCompilerOptionsS __Instance;

        public SpvcCompilerOptions()
        {
        }

        public SpvcCompilerOptions(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc.
        ///</summary>
        public SpvcResult SpvcCompilerOptionsSetBool(SpvcCompilerOption option, byte value)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_options_set_bool(arg0, option, value);
        }

        public SpvcResult SpvcCompilerOptionsSetUint(SpvcCompilerOption option, uint value)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_options_set_uint(arg0, option, value);
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS(SpvcCompilerOptions s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS();
        }

        public static implicit operator SpvcCompilerOptions(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS s)
        {
            return new SpvcCompilerOptions(){__Instance = s};
        }

    }

    public partial class SpvcResources
    {
        internal SpvcResourcesS __Instance;

        public SpvcResources()
        {
        }

        public SpvcResources(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS __Instance)
        {
            this.__Instance = __Instance;
        }

        public SpvcResult SpvcResourcesGetResourceListForType(SpvcResourceType type, in SpvcReflectedResource resource_list, ref ulong resource_size)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(resource_list, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(resource_list.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_resources_get_resource_list_for_type(arg0, type, arg1, ref resource_size);
            resource_list?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS(SpvcResources s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS();
        }

        public static implicit operator SpvcResources(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS s)
        {
            return new SpvcResources(){__Instance = s};
        }

    }

    public partial class SpvcType
    {
        internal Const spvcTypeS __Instance;

        public SpvcType()
        {
        }

        public SpvcType(Const spvcTypeS __Instance)
        {
            this.__Instance = __Instance;
        }

        public byte SpvcTypeArrayDimensionIsLiteral(uint dimension)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_array_dimension_is_literal(arg0, dimension);
        }

        public uint SpvcTypeGetArrayDimension(uint dimension)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_array_dimension(arg0, dimension);
        }

        public SpvcBasetype SpvcTypeGetBasetype()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_basetype(arg0);
        }

        public uint SpvcTypeGetBitWidth()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_bit_width(arg0);
        }

        public uint SpvcTypeGetColumns()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_columns(arg0);
        }

        public SpvAccessQualifier SpvcTypeGetImageAccessQualifier()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_access_qualifier(arg0);
        }

        public byte SpvcTypeGetImageArrayed()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_arrayed(arg0);
        }

        public SpvDim SpvcTypeGetImageDimension()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_dimension(arg0);
        }

        public byte SpvcTypeGetImageIsDepth()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_is_depth(arg0);
        }

        public byte SpvcTypeGetImageIsStorage()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_is_storage(arg0);
        }

        public byte SpvcTypeGetImageMultisampled()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_multisampled(arg0);
        }

        ///<summary>
        /// Image type query.
        ///</summary>
        public uint SpvcTypeGetImageSampledType()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_sampled_type(arg0);
        }

        public SpvImageFormat SpvcTypeGetImageStorageFormat()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_storage_format(arg0);
        }

        public uint SpvcTypeGetMemberType(uint index)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_member_type(arg0, index);
        }

        public uint SpvcTypeGetNumArrayDimensions()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_num_array_dimensions(arg0);
        }

        public uint SpvcTypeGetNumMemberTypes()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_num_member_types(arg0);
        }

        public SpvStorageClass SpvcTypeGetStorageClass()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_storage_class(arg0);
        }

        public uint SpvcTypeGetVectorSize()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_vector_size(arg0);
        }

        public static implicit operator Const spvcTypeS(SpvcType s)
        {
            return s.__Instance;
        }

        public static implicit operator SpvcType(Const spvcTypeS s)
        {
            return new SpvcType(){__Instance = s};
        }

    }

    public partial class SpvcConstant
    {
        internal SpvcConstantS __Instance;

        public SpvcConstant()
        {
        }

        public SpvcConstant(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// No stdint.h until C99, sigh :( For smaller types, the result is sign or zero-extended as appropriate. Maps to C++ API. TODO: The SPIRConstant query interface and modification interface is not quite complete.
        ///</summary>
        public float SpvcConstantGetScalarFp16(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp16(arg0, column, row);
        }

        public float SpvcConstantGetScalarFp32(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp32(arg0, column, row);
        }

        public double SpvcConstantGetScalarFp64(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp64(arg0, column, row);
        }

        public int SpvcConstantGetScalarI16(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i16(arg0, column, row);
        }

        public int SpvcConstantGetScalarI32(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i32(arg0, column, row);
        }

        public int SpvcConstantGetScalarI8(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i8(arg0, column, row);
        }

        public uint SpvcConstantGetScalarU16(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u16(arg0, column, row);
        }

        public uint SpvcConstantGetScalarU32(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u32(arg0, column, row);
        }

        public uint SpvcConstantGetScalarU8(uint column, uint row)
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u8(arg0, column, row);
        }

        public void SpvcConstantGetSubconstants(in uint? constituents, ref ulong count)
        {
            var arg0 = this;
            var arg1 = ReferenceEquals(constituents, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constituents.Value);
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_subconstants(arg0, arg1, ref count);
            Marshal.FreeHGlobal(arg1);
        }

        public uint SpvcConstantGetType()
        {
            var arg0 = this;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_type(arg0);
        }

        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS(SpvcConstant s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS();
        }

        public static implicit operator SpvcConstant(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS s)
        {
            return new SpvcConstant(){__Instance = s};
        }

    }

    public partial class SpvcSet
    {
        internal Const spvcSetS __Instance;

        public SpvcSet()
        {
        }

        public SpvcSet(Const spvcSetS __Instance)
        {
            this.__Instance = __Instance;
        }

        public static implicit operator Const spvcSetS(SpvcSet s)
        {
            return s.__Instance;
        }

        public static implicit operator SpvcSet(Const spvcSetS s)
        {
            return new SpvcSet(){__Instance = s};
        }

    }

    public static class SpirvCrossNative
    {
        ///<summary>
        /// Gets the SPVC_C_API_VERSION_* used to build this library. Can be used to check for ABI mismatch if so-versioning did not catch it.
        ///</summary>
        public static void SpvcGetVersion(ref uint major, ref uint minor, ref uint patch)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_get_version(ref major, ref minor, ref patch);
        }

        ///<summary>
        /// Initializes the vertex attribute struct.
        ///</summary>
        public static void SpvcMslVertexAttributeInit(SpvcMslVertexAttribute attr)
        {
            var arg0 = ReferenceEquals(attr, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(attr.ToInternal());
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_msl_vertex_attribute_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }

        ///<summary>
        /// Initializes the resource binding struct. The defaults are non-zero.
        ///</summary>
        public static void SpvcMslResourceBindingInit(SpvcMslResourceBinding binding)
        {
            var arg0 = ReferenceEquals(binding, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(binding.ToInternal());
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_msl_resource_binding_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }

        ///<summary>
        /// Initializes the constexpr sampler struct. The defaults are non-zero.
        ///</summary>
        public static void SpvcMslConstexprSamplerInit(SpvcMslConstexprSampler sampler)
        {
            var arg0 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_msl_constexpr_sampler_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }

        ///<summary>
        /// Initializes the constexpr sampler struct. The defaults are non-zero.
        ///</summary>
        public static void SpvcMslSamplerYcbcrConversionInit(SpvcMslSamplerYcbcrConversion conv)
        {
            var arg0 = ReferenceEquals(conv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(conv.ToInternal());
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_msl_sampler_ycbcr_conversion_init(arg0);
            Marshal.FreeHGlobal(arg0);
        }

    }

}

