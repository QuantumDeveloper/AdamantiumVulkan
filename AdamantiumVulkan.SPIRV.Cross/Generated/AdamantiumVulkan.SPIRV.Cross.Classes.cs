// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.SPIRV.Cross
{
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.SPIRV.Cross.Interop;
    using AdamantiumVulkan.SPIRV;

    ///<summary>
    /// These types are opaque to the user.
    ///</summary>
    public partial class SpvcContext
    {
        internal SpvcContextS __Instance;

        public SpvcContext()
        {
        }

        public SpvcContext(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Context is the highest-level API construct. The context owns all memory allocations made by its child object hierarchy, including various non-opaque structs and strings. This means that the API user only has to care about one "destroy" call ever when using the C API. All pointers handed out by the APIs are only valid as long as the context is alive and spvc_context_release_allocations has not been called.
        ///</summary>
        public static SpvcResult Create(out AdamantiumVulkan.SPIRV.Cross.SpvcContext context)
        {
            SpvcContextS arg0;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_create(out arg0);
            context = new SpvcContext(arg0);
            return result;
        }

        ///<summary>
        /// Create a compiler backend. Capture mode controls if we construct by copy or move semantics. It is always recommended to use SPVC_CAPTURE_MODE_TAKE_OWNERSHIP if you only intend to cross-compile the IR once.
        ///</summary>
        public SpvcResult CreateCompiler(SpvcBackend backend, AdamantiumVulkan.SPIRV.Cross.SpvcParsedIr parsed_ir, SpvcCaptureMode mode, out AdamantiumVulkan.SPIRV.Cross.SpvcCompiler compiler)
        {
            var arg1 = ReferenceEquals(parsed_ir, null) ? new SpvcParsedIrS() : (SpvcParsedIrS)parsed_ir;
            SpvcCompilerS arg2;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_create_compiler(this, backend, arg1, mode, out arg2);
            compiler = new SpvcCompiler(arg2);
            return result;
        }

        ///<summary>
        /// Frees all memory allocations and objects associated with the context and its child objects.
        ///</summary>
        public void Destroy()
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_destroy(this);
        }

        ///<summary>
        /// Get the string for the last error which was logged.
        ///</summary>
        public string GetLastErrorString()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_get_last_error_string(this);
        }

        ///<summary>
        /// SPIR-V parsing interface. Maps to Parser which then creates a ParsedIR, and that IR is extracted into the handle.
        ///</summary>
        public SpvcResult ParseSpirv(in byte[] spirv, ulong word_count, out AdamantiumVulkan.SPIRV.Cross.SpvcParsedIr parsed_ir)
        {
            SpvcParsedIrS arg2;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_parse_spirv(this, spirv, word_count, out arg2);
            parsed_ir = new SpvcParsedIr(arg2);
            return result;
        }

        ///<summary>
        /// Frees all memory allocations and objects associated with the context and its child objects, but keeps the context alive.
        ///</summary>
        public void ReleaseAllocations()
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_release_allocations(this);
        }

        public void SetErrorCallback(System.IntPtr cb, ref System.IntPtr userdata)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_context_set_error_callback(this, cb, userdata);
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS(SpvcContext s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS();
        }

        public static implicit operator SpvcContext(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcContextS s)
        {
            return new SpvcContext(s);
        }

    }

    public partial class SpvcParsedIr
    {
        internal SpvcParsedIrS __Instance;

        public SpvcParsedIr()
        {
        }

        public SpvcParsedIr(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS __Instance)
        {
            this.__Instance = __Instance;
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS(SpvcParsedIr s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS();
        }

        public static implicit operator SpvcParsedIr(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcParsedIrS s)
        {
            return new SpvcParsedIr(s);
        }

    }

    public partial class SpvcCompiler
    {
        internal SpvcCompilerS __Instance;

        public SpvcCompiler()
        {
        }

        public SpvcCompiler(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Maps to C++ API.
        ///</summary>
        public SpvcResult AddHeaderLine(string line)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_add_header_line(this, line);
        }

        public bool BufferGetHlslCounterBuffer(uint id, ref uint counter_id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_get_hlsl_counter_buffer(this, id, ref counter_id);
        }

        public bool BufferIsHlslCounterBuffer(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_buffer_is_hlsl_counter_buffer(this, id);
        }

        public SpvcResult BuildCombinedImageSamplers()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_combined_image_samplers(this);
        }

        ///<summary>
        /// Workaround helper functions. Maps to C++ API.
        ///</summary>
        public SpvcResult BuildDummySamplerForCombinedImages(ref uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_build_dummy_sampler_for_combined_images(this, ref id);
        }

        ///<summary>
        /// Compile IR into a string. *source is owned by the context, and caller must not free it themselves.
        ///</summary>
        public SpvcResult Compile(in string[] source)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_compile(this, source);
        }

        ///<summary>
        /// Create compiler options, which will initialize defaults.
        ///</summary>
        public SpvcResult CreateCompilerOptions(out AdamantiumVulkan.SPIRV.Cross.SpvcCompilerOptions options)
        {
            SpvcCompilerOptionsS arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_compiler_options(this, out arg1);
            options = new SpvcCompilerOptions(arg1);
            return result;
        }

        public SpvcResult CreateShaderResources(out AdamantiumVulkan.SPIRV.Cross.SpvcResources resources)
        {
            SpvcResourcesS arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources(this, out arg1);
            resources = new SpvcResources(arg1);
            return result;
        }

        public SpvcResult CreateShaderResourcesForActiveVariables(out AdamantiumVulkan.SPIRV.Cross.SpvcResources resources, AdamantiumVulkan.SPIRV.Cross.SpvcSet active)
        {
            SpvcResourcesS arg1;
            var arg2 = ReferenceEquals(active, null) ? new SpvcSetS() : (SpvcSetS)active;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_create_shader_resources_for_active_variables(this, out arg1, arg2);
            resources = new SpvcResources(arg1);
            return result;
        }

        public SpvcResult FlattenBufferBlock(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_flatten_buffer_block(this, id);
        }

        ///<summary>
        /// Buffer ranges Maps to C++ API.
        ///</summary>
        public SpvcResult GetActiveBufferRanges(uint id, in SpvcBufferRange ranges, ref ulong num_ranges)
        {
            var arg2 = ReferenceEquals(ranges, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(ranges.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_buffer_ranges(this, id, arg2, ref num_ranges);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        ///<summary>
        /// Reflect resources. Maps almost 1:1 to C++ API.
        ///</summary>
        public SpvcResult GetActiveInterfaceVariables(out AdamantiumVulkan.SPIRV.Cross.SpvcSet set)
        {
            SpvcSetS arg1;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_active_interface_variables(this, out arg1);
            set = new SpvcSet(arg1);
            return result;
        }

        ///<summary>
        /// Misc reflection Maps to C++ API.
        ///</summary>
        public bool GetBinaryOffsetForDecoration(uint id, SpvDecoration decoration, ref uint word_offset)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_binary_offset_for_decoration(this, id, decoration, ref word_offset);
        }

        public SpvcResult GetBufferBlockDecorations(uint id, in SpvDecoration decorations, ref ulong num_decorations)
        {
            var arg2 = new GCHandleReference((uint)decorations);
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_buffer_block_decorations(this, id, arg2.Handle, ref num_decorations);
            arg2?.Dispose();
            return result;
        }

        public string GetCleansedEntryPointName(string name, SpvExecutionModel model)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_cleansed_entry_point_name(this, name, model);
        }

        public SpvcResult GetCombinedImageSamplers(in SpvcCombinedImageSampler samplers, ref ulong num_samplers)
        {
            var arg1 = ReferenceEquals(samplers, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(samplers.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_combined_image_samplers(this, arg1, ref num_samplers);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcConstant GetConstantHandle(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_constant_handle(this, id);
        }

        ///<summary>
        /// Maps directly to C++ API.
        ///</summary>
        public uint GetCurrentIdBound()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_current_id_bound(this);
        }

        public SpvcResult GetDeclaredCapabilities(in SpvCapability capabilities, ref ulong num_capabilities)
        {
            var arg1 = new GCHandleReference((uint)capabilities);
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_capabilities(this, arg1.Handle, ref num_capabilities);
            arg1?.Dispose();
            return result;
        }

        public SpvcResult GetDeclaredExtensions(in System.IntPtr extensions, ref ulong num_extensions)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_extensions(this, extensions, ref num_extensions);
        }

        public SpvcResult GetDeclaredStructMemberSize(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref ulong size)
        {
            var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_member_size(this, arg1, index, ref size);
        }

        ///<summary>
        /// Buffer layout query. Maps to C++ API.
        ///</summary>
        public SpvcResult GetDeclaredStructSize(AdamantiumVulkan.SPIRV.Cross.SpvcType struct_type, ref ulong size)
        {
            var arg1 = ReferenceEquals(struct_type, null) ? new SpvcTypeS() : (SpvcTypeS)struct_type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size(this, arg1, ref size);
        }

        public SpvcResult GetDeclaredStructSizeRuntimeArray(AdamantiumVulkan.SPIRV.Cross.SpvcType struct_type, ulong array_size, ref ulong size)
        {
            var arg1 = ReferenceEquals(struct_type, null) ? new SpvcTypeS() : (SpvcTypeS)struct_type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_declared_struct_size_runtime_array(this, arg1, array_size, ref size);
        }

        public uint GetDecoration(uint id, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration(this, id, decoration);
        }

        public string GetDecorationString(uint id, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_decoration_string(this, id, decoration);
        }

        ///<summary>
        /// Entry points. Maps to C++ API.
        ///</summary>
        public SpvcResult GetEntryPoints(in SpvcEntryPoint entry_points, ref ulong num_entry_points)
        {
            var arg1 = ReferenceEquals(entry_points, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(entry_points.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_entry_points(this, arg1, ref num_entry_points);
            entry_points?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public uint GetExecutionModeArgument(SpvExecutionMode mode)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument(this, mode);
        }

        public uint GetExecutionModeArgumentByIndex(SpvExecutionMode mode, uint index)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_mode_argument_by_index(this, mode, index);
        }

        public SpvExecutionModel GetExecutionModel()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_model(this);
        }

        public SpvcResult GetExecutionModes(in SpvExecutionMode modes, ref ulong num_modes)
        {
            var arg1 = new GCHandleReference((uint)modes);
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_execution_modes(this, arg1.Handle, ref num_modes);
            arg1?.Dispose();
            return result;
        }

        public uint GetMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration(this, id, member_index, decoration);
        }

        public string GetMemberDecorationString(uint id, uint member_index, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_decoration_string(this, id, member_index, decoration);
        }

        public string GetMemberName(uint id, uint member_index)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_member_name(this, id, member_index);
        }

        public string GetName(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_name(this, id);
        }

        public string GetRemappedDeclaredBlockName(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_remapped_declared_block_name(this, id);
        }

        ///<summary>
        /// Constants Maps to C++ API.
        ///</summary>
        public SpvcResult GetSpecializationConstants(in SpvcSpecializationConstant constants, ref ulong num_constants)
        {
            var arg1 = ReferenceEquals(constants, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constants.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_specialization_constants(this, arg1, ref num_constants);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        ///<summary>
        /// Type query interface. Maps to C++ API, except it's read-only.
        ///</summary>
        public SpvcType GetTypeHandle(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_type_handle(this, id);
        }

        public uint GetWorkGroupSizeSpecializationConstants(SpvcSpecializationConstant x, SpvcSpecializationConstant y, SpvcSpecializationConstant z)
        {
            var arg1 = ReferenceEquals(x, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(x.ToInternal());
            var arg2 = ReferenceEquals(y, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(y.ToInternal());
            var arg3 = ReferenceEquals(z, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(z.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_get_work_group_size_specialization_constants(this, arg1, arg2, arg3);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            return result;
        }

        public bool HasDecoration(uint id, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_decoration(this, id, decoration);
        }

        public bool HasMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_has_member_decoration(this, id, member_index, decoration);
        }

        public SpvcResult HlslAddResourceBinding(in SpvcHlslResourceBinding binding)
        {
            var arg1 = ReferenceEquals(binding, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(binding.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_add_resource_binding(this, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult HlslAddVertexAttributeRemap(in SpvcHlslVertexAttributeRemap remap, ulong remaps)
        {
            var arg1 = ReferenceEquals(remap, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(remap.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_add_vertex_attribute_remap(this, arg1, remaps);
            remap?.Dispose();
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public bool HlslIsResourceUsed(SpvExecutionModel model, uint set, uint binding)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_is_resource_used(this, model, set, binding);
        }

        public uint HlslRemapNumWorkgroupsBuiltin()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_remap_num_workgroups_builtin(this);
        }

        public SpvcResult HlslSetResourceBindingFlags(uint flags)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_set_resource_binding_flags(this, flags);
        }

        ///<summary>
        /// HLSL specifics. Maps to C++ API.
        ///</summary>
        public SpvcResult HlslSetRootConstantsLayout(in SpvcHlslRootConstants constant_info, ulong count)
        {
            var arg1 = ReferenceEquals(constant_info, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constant_info.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_hlsl_set_root_constants_layout(this, arg1, count);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        ///<summary>
        /// Set compiler options.
        ///</summary>
        public SpvcResult InstallCompilerOptions(AdamantiumVulkan.SPIRV.Cross.SpvcCompilerOptions options)
        {
            var arg1 = ReferenceEquals(options, null) ? new SpvcCompilerOptionsS() : (SpvcCompilerOptionsS)options;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_install_compiler_options(this, arg1);
        }

        public SpvcResult MslAddDiscreteDescriptorSet(uint desc_set)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_discrete_descriptor_set(this, desc_set);
        }

        public SpvcResult MslAddDynamicBuffer(uint desc_set, uint binding, uint index)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_dynamic_buffer(this, desc_set, binding, index);
        }

        public SpvcResult MslAddInlineUniformBlock(uint desc_set, uint binding)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_inline_uniform_block(this, desc_set, binding);
        }

        public SpvcResult MslAddResourceBinding(in SpvcMslResourceBinding binding)
        {
            var arg1 = ReferenceEquals(binding, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(binding.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_resource_binding(this, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult MslAddShaderInput(in SpvcMslShaderInput input)
        {
            var arg1 = ReferenceEquals(input, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(input.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_shader_input(this, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult MslAddVertexAttribute(in SpvcMslVertexAttribute attrs)
        {
            var arg1 = ReferenceEquals(attrs, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(attrs.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_add_vertex_attribute(this, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public uint MslGetAutomaticResourceBinding(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding(this, id);
        }

        public uint MslGetAutomaticResourceBindingSecondary(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_automatic_resource_binding_secondary(this, id);
        }

        public string MslGetCombinedSamplerSuffix()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_get_combined_sampler_suffix(this);
        }

        ///<summary>
        /// MSL specifics. Maps to C++ API.
        ///</summary>
        public bool MslIsRasterizationDisabled()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_rasterization_disabled(this);
        }

        public bool MslIsResourceUsed(SpvExecutionModel model, uint set, uint binding)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_resource_used(this, model, set, binding);
        }

        public bool MslIsShaderInputUsed(uint location)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_shader_input_used(this, location);
        }

        ///<summary>
        /// Obsolete, use is_shader_input_used.
        ///</summary>
        public bool MslIsVertexAttributeUsed(uint location)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_is_vertex_attribute_used(this, location);
        }

        ///<summary>
        /// Obsolete. Renamed to needs_swizzle_buffer.
        ///</summary>
        public bool MslNeedsAuxBuffer()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_aux_buffer(this);
        }

        public bool MslNeedsBufferSizeBuffer()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_buffer_size_buffer(this);
        }

        public bool MslNeedsInputThreadgroupMem()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_input_threadgroup_mem(this);
        }

        public bool MslNeedsOutputBuffer()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_output_buffer(this);
        }

        public bool MslNeedsPatchOutputBuffer()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_patch_output_buffer(this);
        }

        public bool MslNeedsSwizzleBuffer()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_needs_swizzle_buffer(this);
        }

        public SpvcResult MslRemapConstexprSampler(uint id, in SpvcMslConstexprSampler sampler)
        {
            var arg2 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler(this, id, arg2);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public SpvcResult MslRemapConstexprSamplerByBinding(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler)
        {
            var arg1 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding(this, desc_set, binding, arg1);
            Marshal.FreeHGlobal(arg1);
            return result;
        }

        public SpvcResult MslRemapConstexprSamplerByBindingYcbcr(uint desc_set, uint binding, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
        {
            var arg1 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var arg2 = ReferenceEquals(conv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(conv.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_by_binding_ycbcr(this, desc_set, binding, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
            return result;
        }

        public SpvcResult MslRemapConstexprSamplerYcbcr(uint id, in SpvcMslConstexprSampler sampler, in SpvcMslSamplerYcbcrConversion conv)
        {
            var arg2 = ReferenceEquals(sampler, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(sampler.ToInternal());
            var arg3 = ReferenceEquals(conv, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(conv.ToInternal());
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_remap_constexpr_sampler_ycbcr(this, id, arg2, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            return result;
        }

        public SpvcResult MslSetArgumentBufferDeviceAddressSpace(uint desc_set, bool device_address)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_argument_buffer_device_address_space(this, desc_set, device_address);
        }

        public SpvcResult MslSetCombinedSamplerSuffix(string suffix)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_combined_sampler_suffix(this, suffix);
        }

        public SpvcResult MslSetFragmentOutputComponents(uint location, uint components)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_msl_set_fragment_output_components(this, location, components);
        }

        public SpvcResult RenameEntryPoint(string old_name, string new_name, SpvExecutionModel model)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_rename_entry_point(this, old_name, new_name, model);
        }

        public SpvcResult RequireExtension(string ext)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_require_extension(this, ext);
        }

        ///<summary>
        /// Decorations. Maps to C++ API.
        ///</summary>
        public void SetDecoration(uint id, SpvDecoration decoration, uint argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration(this, id, decoration, argument);
        }

        public void SetDecorationString(uint id, SpvDecoration decoration, string argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_decoration_string(this, id, decoration, argument);
        }

        public SpvcResult SetEnabledInterfaceVariables(AdamantiumVulkan.SPIRV.Cross.SpvcSet set)
        {
            var arg1 = ReferenceEquals(set, null) ? new SpvcSetS() : (SpvcSetS)set;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_enabled_interface_variables(this, arg1);
        }

        public SpvcResult SetEntryPoint(string name, SpvExecutionModel model)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_entry_point(this, name, model);
        }

        public void SetExecutionMode(SpvExecutionMode mode)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode(this, mode);
        }

        public void SetExecutionModeWithArguments(SpvExecutionMode mode, uint arg0, uint arg1, uint arg2)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_execution_mode_with_arguments(this, mode, arg0, arg1, arg2);
        }

        public void SetMemberDecoration(uint id, uint member_index, SpvDecoration decoration, uint argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration(this, id, member_index, decoration, argument);
        }

        public void SetMemberDecorationString(uint id, uint member_index, SpvDecoration decoration, string argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_decoration_string(this, id, member_index, decoration, argument);
        }

        public void SetMemberName(uint id, uint member_index, string argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_member_name(this, id, member_index, argument);
        }

        public void SetName(uint id, string argument)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_set_name(this, id, argument);
        }

        public SpvcResult TypeStructMemberArrayStride(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint stride)
        {
            var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_array_stride(this, arg1, index, ref stride);
        }

        public SpvcResult TypeStructMemberMatrixStride(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint stride)
        {
            var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_matrix_stride(this, arg1, index, ref stride);
        }

        public SpvcResult TypeStructMemberOffset(AdamantiumVulkan.SPIRV.Cross.SpvcType type, uint index, ref uint offset)
        {
            var arg1 = ReferenceEquals(type, null) ? new SpvcTypeS() : (SpvcTypeS)type;
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_type_struct_member_offset(this, arg1, index, ref offset);
        }

        public void UnsetDecoration(uint id, SpvDecoration decoration)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_decoration(this, id, decoration);
        }

        public void UnsetExecutionMode(SpvExecutionMode mode)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_execution_mode(this, mode);
        }

        public void UnsetMemberDecoration(uint id, uint member_index, SpvDecoration decoration)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_unset_member_decoration(this, id, member_index, decoration);
        }

        public bool VariableIsDepthOrCompare(uint id)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_variable_is_depth_or_compare(this, id);
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS(SpvcCompiler s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS();
        }

        public static implicit operator SpvcCompiler(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerS s)
        {
            return new SpvcCompiler(s);
        }

    }

    public partial class SpvcCompilerOptions
    {
        internal SpvcCompilerOptionsS __Instance;

        public SpvcCompilerOptions()
        {
        }

        public SpvcCompilerOptions(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS __Instance)
        {
            this.__Instance = __Instance;
        }

        ///<summary>
        /// Override options. Will return error if e.g. MSL options are used for the HLSL backend, etc.
        ///</summary>
        public SpvcResult SetBool(SpvcCompilerOption option, bool value)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_options_set_bool(this, option, value);
        }

        public SpvcResult SetUint(SpvcCompilerOption option, uint value)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_compiler_options_set_uint(this, option, value);
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS(SpvcCompilerOptions s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS();
        }

        public static implicit operator SpvcCompilerOptions(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcCompilerOptionsS s)
        {
            return new SpvcCompilerOptions(s);
        }

    }

    public partial class SpvcResources
    {
        internal SpvcResourcesS __Instance;

        public SpvcResources()
        {
        }

        public SpvcResources(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS __Instance)
        {
            this.__Instance = __Instance;
        }

        public SpvcResult GetResourceListForType(SpvcResourceType type, out SpvcReflectedResource[] resource_list, ref ulong resource_size)
        {
            var arg1 = System.IntPtr.Zero;
            var result = AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_resources_get_resource_list_for_type(this, type, ref arg1, ref resource_size);
            var _resource_list = new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcReflectedResource[resource_size];
            MarshalUtils.IntPtrToManagedArray<AdamantiumVulkan.SPIRV.Cross.Interop.SpvcReflectedResource>(arg1, _resource_list);
            resource_list = new SpvcReflectedResource[resource_size];
            for (var i = 0U; i< resource_size; ++i)
            {
                resource_list[i] = new SpvcReflectedResource(_resource_list[i]);
            }
            return result;
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS(SpvcResources s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS();
        }

        public static implicit operator SpvcResources(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcResourcesS s)
        {
            return new SpvcResources(s);
        }

    }

    public partial class SpvcType
    {
        internal SpvcTypeS __Instance;

        public SpvcType()
        {
        }

        public SpvcType(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcTypeS __Instance)
        {
            this.__Instance = __Instance;
        }

        public bool ArrayDimensionIsLiteral(uint dimension)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_array_dimension_is_literal(this, dimension);
        }

        public uint GetArrayDimension(uint dimension)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_array_dimension(this, dimension);
        }

        public SpvcBasetype GetBasetype()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_basetype(this);
        }

        ///<summary>
        /// Pulls out SPIRType::self. This effectively gives the type ID without array or pointer qualifiers. This is necessary when reflecting decoration/name information on members of a struct, which are placed in the base type, not the qualified type. This is similar to spvc_reflected_resource::base_type_id.
        ///</summary>
        public uint GetBaseTypeId()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_base_type_id(this);
        }

        public uint GetBitWidth()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_bit_width(this);
        }

        public uint GetColumns()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_columns(this);
        }

        public SpvAccessQualifier GetImageAccessQualifier()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_access_qualifier(this);
        }

        public bool GetImageArrayed()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_arrayed(this);
        }

        public SpvDim GetImageDimension()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_dimension(this);
        }

        public bool GetImageIsDepth()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_is_depth(this);
        }

        public bool GetImageIsStorage()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_is_storage(this);
        }

        public bool GetImageMultisampled()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_multisampled(this);
        }

        ///<summary>
        /// Image type query.
        ///</summary>
        public uint GetImageSampledType()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_sampled_type(this);
        }

        public SpvImageFormat GetImageStorageFormat()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_image_storage_format(this);
        }

        public uint GetMemberType(uint index)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_member_type(this, index);
        }

        public uint GetNumArrayDimensions()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_num_array_dimensions(this);
        }

        public uint GetNumMemberTypes()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_num_member_types(this);
        }

        public SpvStorageClass GetStorageClass()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_storage_class(this);
        }

        public uint GetVectorSize()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_type_get_vector_size(this);
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcTypeS(SpvcType s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcTypeS();
        }

        public static implicit operator SpvcType(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcTypeS s)
        {
            return new SpvcType(s);
        }

    }

    public partial class SpvcConstant
    {
        internal SpvcConstantS __Instance;

        public SpvcConstant()
        {
        }

        public SpvcConstant(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS __Instance)
        {
            this.__Instance = __Instance;
        }

        public uint GetConstantType()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_constant_type(this);
        }

        ///<summary>
        /// No stdint.h until C99, sigh :( For smaller types, the result is sign or zero-extended as appropriate. Maps to C++ API. TODO: The SPIRConstant query interface and modification interface is not quite complete.
        ///</summary>
        public float GetScalarFp16(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp16(this, column, row);
        }

        public float GetScalarFp32(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp32(this, column, row);
        }

        public double GetScalarFp64(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_fp64(this, column, row);
        }

        public int GetScalarI16(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i16(this, column, row);
        }

        public int GetScalarI32(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i32(this, column, row);
        }

        public int GetScalarI8(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_i8(this, column, row);
        }

        public uint GetScalarU16(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u16(this, column, row);
        }

        public uint GetScalarU32(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u32(this, column, row);
        }

        public uint GetScalarU8(uint column, uint row)
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_scalar_u8(this, column, row);
        }

        public void GetSubconstants(in uint? constituents, ref ulong count)
        {
            var arg1 = ReferenceEquals(constituents, null) ? System.IntPtr.Zero : MarshalUtils.MarshalStructToPtr(constituents.Value);
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_constant_get_subconstants(this, arg1, ref count);
            Marshal.FreeHGlobal(arg1);
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS(SpvcConstant s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS();
        }

        public static implicit operator SpvcConstant(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcConstantS s)
        {
            return new SpvcConstant(s);
        }

    }

    public partial class SpvcSet
    {
        internal SpvcSetS __Instance;

        public SpvcSet()
        {
        }

        public SpvcSet(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcSetS __Instance)
        {
            this.__Instance = __Instance;
        }


        public static implicit operator AdamantiumVulkan.SPIRV.Cross.Interop.SpvcSetS(SpvcSet s)
        {
            return s?.__Instance ?? new AdamantiumVulkan.SPIRV.Cross.Interop.SpvcSetS();
        }

        public static implicit operator SpvcSet(AdamantiumVulkan.SPIRV.Cross.Interop.SpvcSetS s)
        {
            return new SpvcSet(s);
        }

    }

    public static class SpirvCrossNative
    {
        ///<summary>
        /// Gets the SPVC_C_API_VERSION_* used to build this library. Can be used to check for ABI mismatch if so-versioning did not catch it.
        ///</summary>
        public static void GetVersion(ref uint major, ref uint minor, ref uint patch)
        {
            AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_get_version(ref major, ref minor, ref patch);
        }

        ///<summary>
        /// Gets a human readable version string to identify which commit a particular binary was created from.
        ///</summary>
        public static string GetCommitRevisionAndTimestamp()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_get_commit_revision_and_timestamp();
        }

        ///<summary>
        /// Runtime check for incompatibility. Obsolete.
        ///</summary>
        public static uint MslGetAuxBufferStructVersion()
        {
            return AdamantiumVulkan.SPIRV.Cross.Interop.SpirvCrossInterop.spvc_msl_get_aux_buffer_struct_version();
        }

    }

}

