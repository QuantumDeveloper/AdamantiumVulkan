// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.SPIRV.Cross
{
    using System;
    using System.Runtime.InteropServices;

    public enum SpvcResult : int
    {
        ///<summary>
        /// Success.
        ///</summary>
        Success = 0,

        ///<summary>
        /// The SPIR-V is invalid. Should have been caught by validation ideally.
        ///</summary>
        ErrorInvalidSpirv = -1,

        ///<summary>
        /// The SPIR-V might be valid or invalid, but SPIRV-Cross currently cannot correctly translate this to your target language.
        ///</summary>
        ErrorUnsupportedSpirv = -2,

        ///<summary>
        /// If for some reason we hit this, new or malloc failed.
        ///</summary>
        ErrorOutOfMemory = -3,

        ///<summary>
        /// Invalid API argument.
        ///</summary>
        ErrorInvalidArgument = -4,

        ///<summary>
        /// Invalid API argument.
        ///</summary>
        ErrorIntMax = 2147483647,

    }

    [Flags]
    public enum SpvcCaptureMode : uint
    {
        ///<summary>
        /// The Parsed IR payload will be copied, and the handle can be reused to create other compiler instances.
        ///</summary>
        Copy = 0,

        ///<summary>
        /// The payload will now be owned by the compiler. parsed_ir should now be considered a dead blob and must not be used further. This is optimal for performance and should be the go-to option.
        ///</summary>
        TakeOwnership = 1,

        ///<summary>
        /// The payload will now be owned by the compiler. parsed_ir should now be considered a dead blob and must not be used further. This is optimal for performance and should be the go-to option.
        ///</summary>
        IntMax = 2147483647,

    }

    public enum SpvcBackend : uint
    {
        ///<summary>
        /// This backend can only perform reflection, no compiler options are supported. Maps to spirv_cross::Compiler.
        ///</summary>
        None = 0,

        ///<summary>
        /// spirv_cross::CompilerGLSL
        ///</summary>
        Glsl = 1,

        ///<summary>
        /// CompilerHLSL
        ///</summary>
        Hlsl = 2,

        ///<summary>
        /// CompilerMSL
        ///</summary>
        Msl = 3,

        ///<summary>
        /// CompilerCPP
        ///</summary>
        Cpp = 4,

        ///<summary>
        /// CompilerReflection w/ JSON backend
        ///</summary>
        Json = 5,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public enum SpvcResourceType : uint
    {
        Unknown = 0,

        UniformBuffer = 1,

        StorageBuffer = 2,

        StageInput = 3,

        StageOutput = 4,

        SubpassInput = 5,

        StorageImage = 6,

        SampledImage = 7,

        AtomicCounter = 8,

        PushConstant = 9,

        SeparateImage = 10,

        SeparateSamplers = 11,

        AccelerationStructure = 12,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to spirv_cross::SPIRType::BaseType.
    ///</summary>
    public enum SpvcBasetype : uint
    {
        Unknown = 0,

        Void = 1,

        Boolean = 2,

        Int8 = 3,

        Uint8 = 4,

        Int16 = 5,

        Uint16 = 6,

        Int32 = 7,

        Uint32 = 8,

        Int64 = 9,

        Uint64 = 10,

        AtomicCounter = 11,

        Fp16 = 12,

        Fp32 = 13,

        Fp64 = 14,

        Struct = 15,

        Image = 16,

        SampledImage = 17,

        Sampler = 18,

        AccelerationStructure = 19,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslPlatform : uint
    {
        Ios = 0,

        Macos = 1,

        MaxInt = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslVertexFormat : uint
    {
        Other = 0,

        Uint8 = 1,

        Uint16 = 2,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslSamplerCoord : uint
    {
        CoordNormalized = 0,

        CoordPixel = 1,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslSamplerFilter : uint
    {
        Nearest = 0,

        Linear = 1,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslSamplerMipFilter : uint
    {
        None = 0,

        Nearest = 1,

        Linear = 2,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public enum SpvcMslSamplerAddress : uint
    {
        ClampToZero = 0,

        ClampToEdge = 1,

        ClampToBorder = 2,

        Repeat = 3,

        MirroredRepeat = 4,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public enum SpvcMslSamplerCompareFunc : uint
    {
        Never = 0,

        Less = 1,

        LessEqual = 2,

        Greater = 3,

        GreaterEqual = 4,

        Equal = 5,

        NotEqual = 6,

        Always = 7,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslSamplerBorderColor : uint
    {
        TransparentBlack = 0,

        OpaqueBlack = 1,

        OpaqueWhite = 2,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslFormatResolution : uint
    {
        _444 = 0,

        _422 = 1,

        _420 = 2,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    [Flags]
    public enum SpvcMslChromaLocation : uint
    {
        CositedEven = 0,

        Midpoint = 1,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public enum SpvcMslComponentSwizzle : uint
    {
        Identity = 0,

        Zero = 1,

        One = 2,

        R = 3,

        G = 4,

        B = 5,

        A = 6,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C++ API.
    ///</summary>
    public enum SpvcMslSamplerYcbcrModelConversion : uint
    {
        RgbIdentity = 0,

        YcbcrIdentity = 1,

        YcbcrBt709 = 2,

        YcbcrBt601 = 3,

        YcbcrBt2020 = 4,

        IntMax = 2147483647,

    }

    ///<summary>
    /// Maps to C+ API.
    ///</summary>
    [Flags]
    public enum SpvcMslSamplerYcbcrRange : uint
    {
        TuFull = 0,

        TuNarrow = 1,

        NtMax = 2147483647,

    }

    ///<summary>
    /// Maps to the various spirv_cross::Compiler*::Option structures. See C++ API for defaults and details.
    ///</summary>
    public enum SpvcCompilerOption : uint
    {
        Unknown = 0,

        ForceTemporary = 16777217,

        FlattenMultidimensionalArrays = 16777218,

        FixupDepthConvention = 16777219,

        FlipVertexY = 16777220,

        GlslSupportNonzeroBaseInstance = 33554437,

        GlslSeparateShaderObjects = 33554438,

        GlslEnable420packExtension = 33554439,

        GlslVersion = 33554440,

        GlslEs = 33554441,

        GlslVulkanSemantics = 33554442,

        GlslEsDefaultFloatPrecisionHighp = 33554443,

        GlslEsDefaultIntPrecisionHighp = 33554444,

        HlslShaderModel = 67108877,

        HlslPointSizeCompat = 67108878,

        HlslPointCoordCompat = 67108879,

        HlslSupportNonzeroBaseVertexBaseInstance = 67108880,

        MslVersion = 134217745,

        MslTexelBufferTextureWidth = 134217746,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslAuxBufferIndex = 134217747,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslIndirectParamsBufferIndex = 134217748,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslShaderOutputBufferIndex = 134217749,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslShaderPatchOutputBufferIndex = 134217750,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslShaderTessFactorOutputBufferIndex = 134217751,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslShaderInputWorkgroupIndex = 134217752,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslEnablePointSizeBuiltin = 134217753,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslDisableRasterization = 134217754,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslCaptureOutputToBuffer = 134217755,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslSwizzleTextureSamples = 134217756,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslPadFragmentOutputComponents = 134217757,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslTessDomainOriginLowerLeft = 134217758,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslPlatform = 134217759,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslArgumentBuffers = 134217760,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        GlslEmitPushConstantAsUniformBuffer = 33554465,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslTextureBufferNative = 134217762,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        GlslEmitUniformBufferAsPlainUniforms = 33554467,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslBufferSizeBufferIndex = 134217764,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        EmitLineDirectives = 16777253,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslMultiview = 134217766,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslViewMaskBufferIndex = 134217767,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslDeviceIndex = 134217768,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslViewIndexFromDeviceIndex = 134217769,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslDispatchBase = 134217770,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        MslDynamicOffsetsBufferIndex = 134217771,

        ///<summary>
        /// Obsolete, use SWIZZLE_BUFFER_INDEX instead.
        ///</summary>
        IntMax = 2147483647,

    }


}

