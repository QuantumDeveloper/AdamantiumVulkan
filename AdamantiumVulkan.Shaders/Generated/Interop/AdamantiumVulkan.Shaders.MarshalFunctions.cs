// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

namespace AdamantiumVulkan.Shaders.Interop
{
    using System.Security;
    using System;
    using System.Runtime.InteropServices;
    using AdamantiumVulkan.Shaders;

    public static class VulkanShadersInterop
    {
        public const string LibraryPath = "shaderc_shared";

        ///<summary>
        /// Takes an assembly string of the format defined in the SPIRV-Tools project (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md), assembles it into SPIR-V binary and a shaderc_compilation_result will be returned to hold the results. The assembling will pick options suitable for assembling specified in the additional_options parameter. May be safely called from multiple threads without explicit synchronization. If there was failure in allocating the compiler object, null will be returned.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_assemble_into_spv", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompilationResult shaderc_assemble_into_spv([In] AdamantiumVulkan.Shaders.Interop.ShadercCompiler compiler, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_assembly, [In] ulong source_assembly_size, [In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions additional_options);

        ///<summary>
        /// Like shaderc_compile_into_spv, but the result contains preprocessed source code instead of a SPIR-V binary module
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_into_preprocessed_text", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompilationResult shaderc_compile_into_preprocessed_text([In] AdamantiumVulkan.Shaders.Interop.ShadercCompiler compiler, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_text, [In] ulong source_text_size, [In] ShadercShaderKind shader_kind, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string input_file_name, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string entry_point_name, [In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions additional_options);

        ///<summary>
        /// Takes a GLSL source string and the associated shader kind, input file name, compiles it according to the given additional_options. If the shader kind is not set to a specified kind, but shaderc_glslc_infer_from_source, the compiler will try to deduce the shader kind from the source string and a failure in deducing will generate an error. Currently only #pragma annotation is supported. If the shader kind is set to one of the default shader kinds, the compiler will fall back to the default shader kind in case it failed to deduce the shader kind from source string. The input_file_name is a null-termintated string. It is used as a tag to identify the source string in cases like emitting error messages. It doesn't have to be a 'file name'. The source string will be compiled into SPIR-V binary and a shaderc_compilation_result will be returned to hold the results. The entry_point_name null-terminated string defines the name of the entry point to associate with this GLSL source. If the additional_options parameter is not null, then the compilation is modified by any options present. May be safely called from multiple threads without explicit synchronization. If there was failure in allocating the compiler object, null will be returned.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_into_spv", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompilationResult shaderc_compile_into_spv([In] AdamantiumVulkan.Shaders.Interop.ShadercCompiler compiler, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_text, [In] ulong source_text_size, [In] ShadercShaderKind shader_kind, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string input_file_name, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string entry_point_name, [In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions additional_options);

        ///<summary>
        /// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text instead of a SPIR-V binary module. The SPIR-V assembly syntax is as defined by the SPIRV-Tools open source project.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_into_spv_assembly", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompilationResult shaderc_compile_into_spv_assembly([In] AdamantiumVulkan.Shaders.Interop.ShadercCompiler compiler, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string source_text, [In] ulong source_text_size, [In] ShadercShaderKind shader_kind, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string input_file_name, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string entry_point_name, [In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions additional_options);

        ///<summary>
        /// Adds a predefined macro to the compilation options. This has the same effect as passing -Dname=value to the command-line compiler. If value is NULL, it has the same effect as passing -Dname to the command-line compiler. If a macro definition with the same name has previously been added, the value is replaced with the new value. The macro name and value are passed in with char pointers, which point to their data, and the lengths of their data. The strings that the name and value pointers point to must remain valid for the duration of the call, but can be modified or deleted after this function has returned. In case of adding a valueless macro, the value argument should be a null pointer or the value_length should be 0u.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_add_macro_definition", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_add_macro_definition([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string name, [In] ulong name_length, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string value, [In] ulong value_length);

        ///<summary>
        /// Returns a copy of the given shaderc_compile_options_t. If NULL is passed as the parameter the call is the same as shaderc_compile_options_init.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_clone", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompileOptions shaderc_compile_options_clone([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options);

        ///<summary>
        /// Returns a default-initialized shaderc_compile_options_t that can be used to modify the functionality of a compiled module. A return of NULL indicates that there was an error initializing the options. Any function operating on shaderc_compile_options_t must offer the basic thread-safety guarantee.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_initialize", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompileOptions shaderc_compile_options_initialize();

        ///<summary>
        /// Releases the compilation options. It is invalid to use the given shaderc_compile_options_t object in any future calls. It is safe to pass NULL to this function, and doing such will have no effect.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_release", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_release([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options);

        ///<summary>
        /// Sets whether the compiler should automatically assign bindings to uniforms that aren't already explicitly bound in the shader source.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_auto_bind_uniforms", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_auto_bind_uniforms([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool auto_bind);

        ///<summary>
        /// Sets whether the compiler should automatically assign locations to uniform variables that don't have explicit locations in the shader source.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_auto_map_locations", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_auto_map_locations([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool auto_map);

        ///<summary>
        /// Sets the base binding number used for for a uniform resource type when automatically assigning bindings. For GLSL compilation, sets the lowest automatically assigned number. For HLSL compilation, the regsiter number assigned to the resource is added to this specified base.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_binding_base", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_binding_base([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercUniformKind kind, [In] uint @base);

        ///<summary>
        /// Like shaderc_compile_options_set_binding_base, but only takes effect when compiling a given shader stage. The stage is assumed to be one of vertex, fragment, tessellation evaluation, tesselation control, geometry, or compute.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_binding_base_for_stage", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_binding_base_for_stage([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercShaderKind shader_kind, [In] ShadercUniformKind kind, [In] uint @base);

        ///<summary>
        /// Forces the GLSL language version and profile to a given pair. The version number is the same as would appear in the #version annotation in the source. Version and profile specified here overrides the #version annotation in the source. Use profile: 'shaderc_profile_none' for GLSL versions that do not define profiles, e.g. versions below 150.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_forced_version_profile", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_forced_version_profile([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] int version, [In] ShadercProfile profile);

        ///<summary>
        /// Sets the compiler mode to generate debug information in the output.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_generate_debug_info", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_generate_debug_info([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options);

        ///<summary>
        /// Sets whether the compiler should enable extension SPV_GOOGLE_hlsl_functionality1.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_hlsl_functionality1", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_hlsl_functionality1([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool enable);

        ///<summary>
        /// Sets whether the compiler should use HLSL IO mapping rules for bindings. Defaults to false.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_hlsl_io_mapping", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_hlsl_io_mapping([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool hlsl_iomap);

        ///<summary>
        /// Sets whether the compiler should determine block member offsets using HLSL packing rules instead of standard GLSL rules. Defaults to false. Only affects GLSL compilation. HLSL rules are always used when compiling HLSL.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_hlsl_offsets", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_hlsl_offsets([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool hlsl_offsets);

        ///<summary>
        /// Like shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage, but affects all shader stages.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_hlsl_register_set_and_binding", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_hlsl_register_set_and_binding([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string reg, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string set, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string binding);

        ///<summary>
        /// Sets a descriptor set and binding for an HLSL register in the given stage. This method keeps a copy of the string data.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_hlsl_register_set_and_binding_for_stage([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercShaderKind shader_kind, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string reg, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string set, [In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string binding);

        ///<summary>
        /// Sets includer callback functions.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_include_callbacks", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_include_callbacks([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercIncludeResolveFn resolver, [In] ShadercIncludeResultReleaseFn result_releaser, [In, Out] System.IntPtr user_data);

        ///<summary>
        /// Sets whether the compiler should invert position.Y output in vertex shader.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_invert_y", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_invert_y([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool enable);

        ///<summary>
        /// Sets a resource limit.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_limit", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_limit([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercLimit limit, [In] int value);

        ///<summary>
        /// Sets whether the compiler generates code for max and min builtins which, if given a NaN operand, will return the other operand. Similarly, the clamp builtin will favour the non-NaN operands, as if clamp were implemented as a composition of max and min.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_nan_clamp", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_nan_clamp([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] bool enable);

        ///<summary>
        /// Sets the compiler optimization level to the given level. Only the last one takes effect if multiple calls of this function exist.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_optimization_level", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_optimization_level([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercOptimizationLevel level);

        ///<summary>
        /// Sets the source language. The default is GLSL.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_source_language", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_source_language([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercSourceLanguage lang);

        ///<summary>
        /// Sets the compiler mode to suppress warnings, overriding warnings-as-errors mode. When both suppress-warnings and warnings-as-errors modes are turned on, warning messages will be inhibited, and will not be emitted as error messages.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_suppress_warnings", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_suppress_warnings([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options);

        ///<summary>
        /// Sets the target shader environment, affecting which warnings or errors will be issued. The version will be for distinguishing between different versions of the target environment. The version value should be either 0 or a value listed in shaderc_env_version. The 0 value maps to Vulkan 1.0 if |target| is Vulkan, and it maps to OpenGL 4.5 if |target| is OpenGL.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_target_env", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_target_env([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercTargetEnv target, [In] uint version);

        ///<summary>
        /// Sets the target SPIR-V version. The generated module will use this version of SPIR-V. Each target environment determines what versions of SPIR-V it can consume. Defaults to the highest version of SPIR-V 1.0 which is required to be supported by the target environment. E.g. Default to SPIR-V 1.0 for Vulkan 1.0 and SPIR-V 1.3 for Vulkan 1.1.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_target_spirv", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_target_spirv([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options, [In] ShadercSpirvVersion version);

        ///<summary>
        /// Sets the compiler mode to treat all warnings as errors. Note the suppress-warnings mode overrides this option, i.e. if both warning-as-errors and suppress-warnings modes are set, warnings will not be emitted as error messages.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compile_options_set_warnings_as_errors", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compile_options_set_warnings_as_errors([In] AdamantiumVulkan.Shaders.Interop.ShadercCompileOptions options);

        ///<summary>
        /// Returns a shaderc_compiler_t that can be used to compile modules. A return of NULL indicates that there was an error initializing the compiler. Any function operating on shaderc_compiler_t must offer the basic thread-safety guarantee. [http://herbsutter.com/2014/01/13/gotw-95-solution-thread-safety-and-synchronization/] That is: concurrent invocation of these functions on DIFFERENT objects needs no synchronization; concurrent invocation of these functions on the SAME object requires synchronization IF AND ONLY IF some of them take a non-const argument.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compiler_initialize", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompiler shaderc_compiler_initialize();

        ///<summary>
        /// Releases the resources held by the shaderc_compiler_t. After this call it is invalid to make any future calls to functions involving this shaderc_compiler_t.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_compiler_release", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_compiler_release([In] AdamantiumVulkan.Shaders.Interop.ShadercCompiler param0);

        ///<summary>
        /// Provides the version & revision of the SPIR-V which will be produced
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_get_spv_version", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_get_spv_version(ref uint version, ref uint revision);

        ///<summary>
        /// Parses the version and profile from a given null-terminated string containing both version and profile, like: '450core'. Returns false if the string can not be parsed. Returns true when the parsing succeeds. The parsed version and profile are returned through arguments.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_parse_version_profile", CallingConvention = CallingConvention.Winapi)]
        internal static extern bool shaderc_parse_version_profile([In] [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))] string str, ref int version, ref int profile);

        ///<summary>
        /// Returns a pointer to the start of the compilation output data bytes, either SPIR-V binary or char string. When the source string is compiled into SPIR-V binary, this is guaranteed to be castable to a uint32_t*. If the result contains assembly text or preprocessed source text, the pointer will point to the resulting array of characters.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_bytes", CallingConvention = CallingConvention.Winapi)]
        internal static extern System.IntPtr shaderc_result_get_bytes([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

        ///<summary>
        /// Returns the compilation status, indicating whether the compilation succeeded, or failed due to some reasons, like invalid shader stage or compilation errors.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_compilation_status", CallingConvention = CallingConvention.Winapi)]
        internal static extern ShadercCompilationStatus shaderc_result_get_compilation_status([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult param0);

        ///<summary>
        /// Returns a null-terminated string that contains any error messages generated during the compilation.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_error_message", CallingConvention = CallingConvention.Winapi)]
        [return: MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(ConstCharPtrMarshaler))]
        internal static extern string shaderc_result_get_error_message([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

        ///<summary>
        /// Returns the number of bytes of the compilation output data in a result object.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_length", CallingConvention = CallingConvention.Winapi)]
        internal static extern ulong shaderc_result_get_length([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

        ///<summary>
        /// Returns the number of errors generated during the compilation.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_num_errors", CallingConvention = CallingConvention.Winapi)]
        internal static extern ulong shaderc_result_get_num_errors([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

        ///<summary>
        /// Returns the number of warnings generated during the compilation.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_get_num_warnings", CallingConvention = CallingConvention.Winapi)]
        internal static extern ulong shaderc_result_get_num_warnings([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

        ///<summary>
        /// Releases the resources held by the result object. It is invalid to use the result object for any further operations.
        ///</summary>
        [DllImport(LibraryPath, EntryPoint = "shaderc_result_release", CallingConvention = CallingConvention.Winapi)]
        internal static extern void shaderc_result_release([In] AdamantiumVulkan.Shaders.Interop.ShadercCompilationResult result);

    }


}

