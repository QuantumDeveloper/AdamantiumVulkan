// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;

namespace AdamantiumVulkan.Shaders;

public unsafe static class VulkanShadersNative
{
    ///<summary>
    /// Provides the version & revision of the SPIR-V which will be produced
    ///</summary>
    public static void GetSpvVersion(ref uint version, ref uint revision)
    {
        var arg0 = NativeUtils.StructOrEnumToPointer(version);
        var arg1 = NativeUtils.StructOrEnumToPointer(revision);
        AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_get_spv_version(arg0, arg1);
        version = *arg0;
        NativeUtils.Free(arg0);
        revision = *arg1;
        NativeUtils.Free(arg1);
    }

    ///<summary>
    /// Parses the version and profile from a given null-terminated string containing both version and profile, like: '450core'. Returns false if the string can not be parsed. Returns true when the parsing succeeds. The parsed version and profile are returned through arguments.
    ///</summary>
    public static bool ParseVersionProfile(string str, ref int version, ref ShadercProfile profile)
    {
        var arg0 = (sbyte*)NativeUtils.PointerToString(str, false);
        var arg1 = NativeUtils.StructOrEnumToPointer(version);
        var arg2 = NativeUtils.StructOrEnumToPointer(profile);
        var result = AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_parse_version_profile(arg0, arg1, arg2);
        NativeUtils.Free(arg0);
        version = *arg1;
        NativeUtils.Free(arg1);
        if (arg2 is not null)
        {
            profile = *arg2;
        }
        NativeUtils.Free(arg2);
        return result;
    }

}


