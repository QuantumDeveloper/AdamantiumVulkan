// ----------------------------------------------------------------------------------------------
// <auto-generated>
// This file was autogenerated by QuantumBindingGenerator.
// Do not edit this file manually, because you will lose all your changes after next generation.
// </auto-generated>
// ----------------------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using QuantumBinding.Utils;
using AdamantiumVulkan.Shaders.Interop;

namespace AdamantiumVulkan.Shaders;

// File: C:\VulkanSDK\1.4.309.0\Include\shaderc\shaderc.h Line: 257 Column: 34
///<summary>
/// An opaque handle to an object that manages all compiler state.
///</summary>
public unsafe partial class ShadercCompilerT
{
    internal ShadercCompiler __Instance;
    public ShadercCompilerT()
    {
    }

    public ShadercCompilerT(AdamantiumVulkan.Shaders.Interop.ShadercCompiler __Instance)
    {
        this.__Instance = __Instance;
    }

    ///<summary>
    /// Takes an assembly string of the format defined in the SPIRV-Tools project (https://github.com/KhronosGroup/SPIRV-Tools/blob/master/syntax.md), assembles it into SPIR-V binary and a shaderc_compilation_result will be returned to hold the results. The assembling will pick options suitable for assembling specified in the additional_options parameter. May be safely called from multiple threads without explicit synchronization. If there was failure in allocating the compiler object, null will be returned.
    ///</summary>
    public ShadercCompilationResultT AssembleIntoSpv(string source_assembly, ulong source_assembly_size, AdamantiumVulkan.Shaders.ShadercCompileOptionsT additional_options)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(source_assembly, false);
        var arg3 = ReferenceEquals(additional_options, null) ? new ShadercCompileOptions() : (ShadercCompileOptions)additional_options;
        var result = AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_assemble_into_spv(this, arg1, source_assembly_size, arg3);
        NativeUtils.Free(arg1);
        return result;
    }

    ///<summary>
    /// Like shaderc_compile_into_spv, but the result contains preprocessed source code instead of a SPIR-V binary module
    ///</summary>
    public ShadercCompilationResultT CompileIntoPreprocessedText(string source_text, ulong source_text_size, ShadercShaderKind shader_kind, string input_file_name, string entry_point_name, AdamantiumVulkan.Shaders.ShadercCompileOptionsT additional_options)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(source_text, false);
        var arg4 = (sbyte*)NativeUtils.StringToPointer(input_file_name, false);
        var arg5 = (sbyte*)NativeUtils.StringToPointer(entry_point_name, false);
        var arg6 = ReferenceEquals(additional_options, null) ? new ShadercCompileOptions() : (ShadercCompileOptions)additional_options;
        var result = AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_compile_into_preprocessed_text(this, arg1, source_text_size, shader_kind, arg4, arg5, arg6);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg4);
        NativeUtils.Free(arg5);
        return result;
    }

    ///<summary>
    /// Takes a GLSL source string and the associated shader kind, input file name, compiles it according to the given additional_options. If the shader kind is not set to a specified kind, but shaderc_glslc_infer_from_source, the compiler will try to deduce the shader kind from the source string and a failure in deducing will generate an error. Currently only #pragma annotation is supported. If the shader kind is set to one of the default shader kinds, the compiler will fall back to the default shader kind in case it failed to deduce the shader kind from source string. The input_file_name is a null-termintated string. It is used as a tag to identify the source string in cases like emitting error messages. It doesn't have to be a 'file name'. The source string will be compiled into SPIR-V binary and a shaderc_compilation_result will be returned to hold the results. The entry_point_name null-terminated string defines the name of the entry point to associate with this GLSL source. If the additional_options parameter is not null, then the compilation is modified by any options present. May be safely called from multiple threads without explicit synchronization. If there was failure in allocating the compiler object, null will be returned.
    ///</summary>
    public ShadercCompilationResultT CompileIntoSpv(string source_text, ulong source_text_size, ShadercShaderKind shader_kind, string input_file_name, string entry_point_name, AdamantiumVulkan.Shaders.ShadercCompileOptionsT additional_options)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(source_text, false);
        var arg4 = (sbyte*)NativeUtils.StringToPointer(input_file_name, false);
        var arg5 = (sbyte*)NativeUtils.StringToPointer(entry_point_name, false);
        var arg6 = ReferenceEquals(additional_options, null) ? new ShadercCompileOptions() : (ShadercCompileOptions)additional_options;
        var result = AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_compile_into_spv(this, arg1, source_text_size, shader_kind, arg4, arg5, arg6);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg4);
        NativeUtils.Free(arg5);
        return result;
    }

    ///<summary>
    /// Like shaderc_compile_into_spv, but the result contains SPIR-V assembly text instead of a SPIR-V binary module. The SPIR-V assembly syntax is as defined by the SPIRV-Tools open source project.
    ///</summary>
    public ShadercCompilationResultT CompileIntoSpvAssembly(string source_text, ulong source_text_size, ShadercShaderKind shader_kind, string input_file_name, string entry_point_name, AdamantiumVulkan.Shaders.ShadercCompileOptionsT additional_options)
    {
        var arg1 = (sbyte*)NativeUtils.StringToPointer(source_text, false);
        var arg4 = (sbyte*)NativeUtils.StringToPointer(input_file_name, false);
        var arg5 = (sbyte*)NativeUtils.StringToPointer(entry_point_name, false);
        var arg6 = ReferenceEquals(additional_options, null) ? new ShadercCompileOptions() : (ShadercCompileOptions)additional_options;
        var result = AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_compile_into_spv_assembly(this, arg1, source_text_size, shader_kind, arg4, arg5, arg6);
        NativeUtils.Free(arg1);
        NativeUtils.Free(arg4);
        NativeUtils.Free(arg5);
        return result;
    }

    ///<summary>
    /// Returns a shaderc_compiler_t that can be used to compile modules. A return of NULL indicates that there was an error initializing the compiler. Any function operating on shaderc_compiler_t must offer the basic thread-safety guarantee. [http://herbsutter.com/2014/01/13/gotw-95-solution-thread-safety-and-synchronization/] That is: concurrent invocation of these functions on DIFFERENT objects needs no synchronization; concurrent invocation of these functions on the SAME object requires synchronization IF AND ONLY IF some of them take a non-const argument.
    ///</summary>
    public static ShadercCompilerT CompilerInitialize()
    {
        return AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_compiler_initialize();
    }

    ///<summary>
    /// Releases the resources held by the shaderc_compiler_t. After this call it is invalid to make any future calls to functions involving this shaderc_compiler_t.
    ///</summary>
    public void CompilerRelease()
    {
        AdamantiumVulkan.Shaders.Interop.VulkanShadersInterop.shaderc_compiler_release(this);
    }

    public ref readonly ShadercCompiler GetPinnableReference() => ref __Instance;

    public static implicit operator AdamantiumVulkan.Shaders.Interop.ShadercCompiler(ShadercCompilerT s)
    {
        return s?.__Instance ?? new AdamantiumVulkan.Shaders.Interop.ShadercCompiler();
    }

    public static implicit operator ShadercCompilerT(AdamantiumVulkan.Shaders.Interop.ShadercCompiler s)
    {
        return new ShadercCompilerT(s);
    }

}



